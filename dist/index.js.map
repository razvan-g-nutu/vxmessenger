{"version":3,"sources":["webpack://vxmessenger/webpack/universalModuleDefinition","webpack://vxmessenger/webpack/bootstrap","webpack://vxmessenger/external \"react\"","webpack://vxmessenger/external \"redux-saga/effects\"","webpack://vxmessenger/external \"lodash\"","webpack://vxmessenger/external \"styled-components\"","webpack://vxmessenger/external \"reselect\"","webpack://vxmessenger/external \"immer\"","webpack://vxmessenger/external \"react-device-detect\"","webpack://vxmessenger/external \"vxcontrol-client-lib\"","webpack://vxmessenger/external \"moment\"","webpack://vxmessenger/external \"cuid\"","webpack://vxmessenger/external \"redux-actions\"","webpack://vxmessenger/external \"draft-js\"","webpack://vxmessenger/external \"vchat-core\"","webpack://vxmessenger/external \"redux-saga\"","webpack://vxmessenger/external \"screenfull\"","webpack://vxmessenger/external \"base-64\"","webpack://vxmessenger/external \"react-resize-detector\"","webpack://vxmessenger/external \"vchat-player\"","webpack://vxmessenger/external \"react-select\"","webpack://vxmessenger/external \"superagent\"","webpack://vxmessenger/external \"redux\"","webpack://vxmessenger/external \"react-dom\"","webpack://vxmessenger/external \"util\"","webpack://vxmessenger/external \"react-redux\"","webpack://vxmessenger/external \"react-loader-spinner\"","webpack://vxmessenger/external \"react-onclickoutside\"","webpack://vxmessenger/external \"react-perfect-scrollbar/dist/css/styles.css\"","webpack://vxmessenger/external \"react-ga\"","webpack://vxmessenger/external \"react-transition-group\"","webpack://vxmessenger/external \"rollbar\"","webpack://vxmessenger/external \"react-tooltip\"","webpack://vxmessenger/external \"react-perfect-scrollbar\"","webpack://vxmessenger/external \"@cleandersonlobo/react-mic\"","webpack://vxmessenger/external \"react-string-replace\"","webpack://vxmessenger/external \"@material-ui/core/Slider\"","webpack://vxmessenger/external \"redux-devtools-extension\"","webpack://vxmessenger/external \"core-js/es/symbol\"","webpack://vxmessenger/external \"core-js/es/object\"","webpack://vxmessenger/external \"core-js/es/function\"","webpack://vxmessenger/external \"core-js/es/parse-int\"","webpack://vxmessenger/external \"core-js/es/parse-float\"","webpack://vxmessenger/external \"core-js/es/number\"","webpack://vxmessenger/external \"core-js/es/number/parse-int\"","webpack://vxmessenger/external \"core-js/es/math\"","webpack://vxmessenger/external \"core-js/es/string\"","webpack://vxmessenger/external \"core-js/es/date\"","webpack://vxmessenger/external \"core-js/es/array\"","webpack://vxmessenger/external \"core-js/es/regexp\"","webpack://vxmessenger/external \"core-js/es/map\"","webpack://vxmessenger/external \"core-js/stage/pre\"","webpack://vxmessenger/external \"babel-regenerator-runtime\"","webpack://vxmessenger/external \"draft-js/dist/Draft.css\"","webpack://vxmessenger/external \"moment/locale/de\"","webpack://vxmessenger/external \"moment/locale/es\"","webpack://vxmessenger/./src/polyfills.ts","webpack://vxmessenger/./src/services/AppService/types.ts","webpack://vxmessenger/./src/redux/store.ts","webpack://vxmessenger/./src/redux/utils.ts","webpack://vxmessenger/./src/static/config/config.ts","webpack://vxmessenger/./src/redux/interfaces.ts","webpack://vxmessenger/./src/static/config/index.ts","webpack://vxmessenger/./src/mocks/translations/de.ts","webpack://vxmessenger/./src/mocks/translations/en.ts","webpack://vxmessenger/./src/mocks/translations/es.ts","webpack://vxmessenger/./src/themes/defaultTheme.ts","webpack://vxmessenger/./src/redux/initialStore.ts","webpack://vxmessenger/./src/redux/modules/app.ts","webpack://vxmessenger/./src/services/ChatService/types.ts","webpack://vxmessenger/./src/redux/modules/features.ts","webpack://vxmessenger/./src/redux/modules/options.ts","webpack://vxmessenger/./src/redux/modules/model.ts","webpack://vxmessenger/./src/redux/modules/platformProps.ts","webpack://vxmessenger/./src/redux/modules/session.ts","webpack://vxmessenger/./src/redux/modules/user.ts","webpack://vxmessenger/./src/redux/modules/videochat.ts","webpack://vxmessenger/./src/redux/selectors/features.ts","webpack://vxmessenger/./src/redux/selectors/options.ts","webpack://vxmessenger/./src/loggers/loggers.ts","webpack://vxmessenger/./src/features/specific/ChatBox/types.ts","webpack://vxmessenger/./src/static/constants/errorCodes.ts","webpack://vxmessenger/./src/loggers/index.ts","webpack://vxmessenger/./src/services/PlayerService.ts","webpack://vxmessenger/./src/static/constants/constants.ts","webpack://vxmessenger/./src/features/hoc/withCustomClasses/types.ts","webpack://vxmessenger/./src/static/constants/index.ts","webpack://vxmessenger/./src/utils/utils.ts","webpack://vxmessenger/./src/utils/screenfull.ts","webpack://vxmessenger/./src/utils/index.ts","webpack://vxmessenger/./src/redux/selectors/messenger.ts","webpack://vxmessenger/./src/redux/selectors/model.ts","webpack://vxmessenger/./src/redux/selectors/session.ts","webpack://vxmessenger/./src/redux/selectors/user.ts","webpack://vxmessenger/./src/redux/selectors/videochat.ts","webpack://vxmessenger/./src/redux/selectors/common.ts","webpack://vxmessenger/./src/redux/selectors/platformProps.ts","webpack://vxmessenger/./src/redux/selectors/hooks.ts","webpack://vxmessenger/./src/redux/selectors/index.ts","webpack://vxmessenger/./src/App/style.ts","webpack://vxmessenger/./src/App/vx-icons.ts","webpack://vxmessenger/./src/features/specific/VersionBox/style.ts","webpack://vxmessenger/./src/features/specific/VersionBox/VersionBox.tsx","webpack://vxmessenger/./src/redux/modules/messenger.ts","webpack://vxmessenger/./src/features/hoc/withInstanceInfo/index.ts","webpack://vxmessenger/./src/features/hoc/withInstanceInfo/withInstanceInfo.tsx","webpack://vxmessenger/./src/features/hoc/withRedux/withRedux.tsx","webpack://vxmessenger/./src/features/hoc/withRedux/index.ts","webpack://vxmessenger/./src/features/specific/VersionBox/index.ts","webpack://vxmessenger/./src/features/specific/VersionBox/VersionBoxContainer.tsx","webpack://vxmessenger/./src/features/hoc/withCustomClasses/withCustomClasses.tsx","webpack://vxmessenger/./src/features/hoc/withCustomClasses/index.ts","webpack://vxmessenger/./src/features/hoc/withIdentifier/types.ts","webpack://vxmessenger/./src/features/specific/ModalInformationDialog/style.ts","webpack://vxmessenger/./src/features/common/Overlay/index.ts","webpack://vxmessenger/./src/features/common/Overlay/style.ts","webpack://vxmessenger/./src/features/common/SimpleModelPicture/style.ts","webpack://vxmessenger/./src/features/common/SimpleModelPicture/index.ts","webpack://vxmessenger/./src/features/common/SimpleModelPicture/SimpleModelPicture.tsx","webpack://vxmessenger/./src/features/common/Tooltip/style.ts","webpack://vxmessenger/./src/features/common/Tooltip/Tooltip.tsx","webpack://vxmessenger/./src/features/common/Tooltip/index.ts","webpack://vxmessenger/./src/features/specific/ProfilePicture/style.ts","webpack://vxmessenger/./src/features/specific/ProfilePicture/ProfilePicture.tsx","webpack://vxmessenger/./src/services/AppService/index.ts","webpack://vxmessenger/./src/services/AppService/AppService.ts","webpack://vxmessenger/./src/features/specific/ProfilePicture/ProfilePictureContainer.tsx","webpack://vxmessenger/./src/features/common/InformationDialog/style.ts","webpack://vxmessenger/./src/features/common/CloseButton/CloseButton.tsx","webpack://vxmessenger/./src/features/hoc/withIdentifier/withIdentifier.tsx","webpack://vxmessenger/./src/features/hoc/withIdentifier/index.ts","webpack://vxmessenger/./src/features/common/CloseButton/CloseButtonContainer.tsx","webpack://vxmessenger/./src/features/common/CloseButton/style.ts","webpack://vxmessenger/./src/features/common/PerfectScrollbar/PerfectScrollbarContainer.tsx","webpack://vxmessenger/./src/features/common/SelectionButtons/types.ts","webpack://vxmessenger/./src/features/common/PerfectScrollbar/index.ts","webpack://vxmessenger/./src/features/common/InformationDialog/InformationDialog.tsx","webpack://vxmessenger/./src/features/common/CheckedIcon/style.ts","webpack://vxmessenger/./src/features/common/CheckedIcon/CheckedIcon.tsx","webpack://vxmessenger/./src/services/types.ts","webpack://vxmessenger/./src/features/common/SelectionButtons/style.ts","webpack://vxmessenger/./src/features/common/SelectionButtons/SelectionButtons.tsx","webpack://vxmessenger/./src/features/common/RechargeSelectionButtons/index.ts","webpack://vxmessenger/./src/features/common/RechargeSelectionButtons/RechargeSelectionButtons.tsx","webpack://vxmessenger/./src/services/ApiService.ts","webpack://vxmessenger/./src/sagas/websockets/chat.ts","webpack://vxmessenger/./src/services/ChatService/ChatService.ts","webpack://vxmessenger/./src/sagas/common/videochat/cam2Cam.ts","webpack://vxmessenger/./src/services/ChatService/index.ts","webpack://vxmessenger/./src/sagas/utils.ts","webpack://vxmessenger/./src/sagas/common/chat.ts","webpack://vxmessenger/./src/sagas/common/recharge.ts","webpack://vxmessenger/./src/features/common/BaseButton/style.ts","webpack://vxmessenger/./src/features/specific/LiveChatButton/style.ts","webpack://vxmessenger/./src/features/common/BaseButton/BaseButton.tsx","webpack://vxmessenger/./src/features/common/BaseButton/index.ts","webpack://vxmessenger/./src/features/common/BaseButton/BaseButtonContainer.tsx","webpack://vxmessenger/./src/features/specific/LiveChatButton/LiveChatButton.tsx","webpack://vxmessenger/./src/features/specific/LiveChatButton/utils.ts","webpack://vxmessenger/./src/sagas/common/close.ts","webpack://vxmessenger/./src/sagas/common/userPrompt.ts","webpack://vxmessenger/./src/redux/modules/hooks.ts","webpack://vxmessenger/./src/sagas/common/ui.ts","webpack://vxmessenger/./src/sagas/common/videochat/prechecks.ts","webpack://vxmessenger/./src/features/common/DialogButton/style.ts","webpack://vxmessenger/./src/sagas/common/videochat.ts","webpack://vxmessenger/./src/features/specific/LiveChatButton/LiveChatButtonContainer.tsx","webpack://vxmessenger/./src/features/specific/LivePreviewTextTimer/utils.ts","webpack://vxmessenger/./src/features/common/Timer/style.ts","webpack://vxmessenger/./src/features/common/Timer/Timer.tsx","webpack://vxmessenger/./src/features/common/Timer/utils.ts","webpack://vxmessenger/./src/features/common/Timer/index.ts","webpack://vxmessenger/./src/features/specific/LivePreviewTextTimer/style.ts","webpack://vxmessenger/./src/features/specific/LivePreviewTextTimer/LivePreviewTextTimer.tsx","webpack://vxmessenger/./src/features/specific/LivePreviewTextTimer/LivePreviewTextTimerContainer.tsx","webpack://vxmessenger/./src/features/common/InformationDialog/InformationDialogContainer.tsx","webpack://vxmessenger/./src/features/common/PreChatInformationDialog/style.ts","webpack://vxmessenger/./src/sagas/websockets/types/types.ts","webpack://vxmessenger/./src/features/common/DialogButton/DialogButton.tsx","webpack://vxmessenger/./src/features/common/PreChatInformationDialog/PreChatInformationDialog.tsx","webpack://vxmessenger/./src/features/specific/Cam2CamButton/style.ts","webpack://vxmessenger/./src/features/specific/Cam2CamButton/Cam2CamButton.tsx","webpack://vxmessenger/./src/features/specific/Cam2CamButton/Cam2CamButtonContainer.tsx","webpack://vxmessenger/./src/features/specific/LiveChatPreviewButton/utils.ts","webpack://vxmessenger/./src/features/specific/LiveChatPreviewButton/style.ts","webpack://vxmessenger/./src/features/specific/LiveChatPreviewButton/LiveChatPreviewButton.tsx","webpack://vxmessenger/./src/features/specific/LiveChatPreviewButton/LiveChatPreviewButtonContainer.tsx","webpack://vxmessenger/./src/features/specific/PrivateChatButton/utils.ts","webpack://vxmessenger/./src/features/specific/PrivateChatButton/style.ts","webpack://vxmessenger/./src/features/specific/PrivateChatButton/PrivateChatButton.tsx","webpack://vxmessenger/./src/features/specific/PrivateChatButton/PrivateChatButtonContainer.tsx","webpack://vxmessenger/./src/features/specific/VipLivePreviewButton/utils.ts","webpack://vxmessenger/./src/features/specific/VipLivePreviewButton/style.ts","webpack://vxmessenger/./src/features/specific/VipLivePreviewButton/VipLivePreviewButton.tsx","webpack://vxmessenger/./src/features/specific/VipLivePreviewButton/VipLivePreviewButtonContainer.tsx","webpack://vxmessenger/./src/features/specific/VoyeurCamButton/utils.ts","webpack://vxmessenger/./src/features/specific/VoyeurCamButton/style.ts","webpack://vxmessenger/./src/features/specific/VoyeurCamButton/VoyeurCamButton.tsx","webpack://vxmessenger/./src/features/specific/VoyeurCamButton/VoyeurCamButtonContainer.tsx","webpack://vxmessenger/./src/features/specific/ActionSection/style.ts","webpack://vxmessenger/./src/features/specific/ActionSection/ActionSection.tsx","webpack://vxmessenger/./src/features/specific/ActionSection/ActionSectionContainer.tsx","webpack://vxmessenger/./src/features/common/PreChatInformationDialog/utils.ts","webpack://vxmessenger/./src/features/common/SelectionButtons/index.ts","webpack://vxmessenger/./src/features/common/PreChatInformationDialog/PreChatInformationDialogContainer.tsx","webpack://vxmessenger/./src/features/specific/ModalInformationDialog/ModalInformationDialog.tsx","webpack://vxmessenger/./src/features/specific/ModalInformationDialog/index.ts","webpack://vxmessenger/./src/features/specific/ModalInformationDialog/ModalInformationDialogContainer.tsx","webpack://vxmessenger/./src/features/specific/ImageUploader/style.ts","webpack://vxmessenger/./src/features/specific/ImageUploader/ImageUploader.tsx","webpack://vxmessenger/./src/sagas/websockets/handleError.ts","webpack://vxmessenger/./src/sagas/websockets/image.ts","webpack://vxmessenger/./src/features/specific/ImageUploader/index.ts","webpack://vxmessenger/./src/features/specific/ImageUploader/ImageUploaderContainer.tsx","webpack://vxmessenger/./src/sagas/websockets/types/index.ts","webpack://vxmessenger/./src/features/specific/Editor/EditorContainer.tsx","webpack://vxmessenger/./src/sagas/websockets/message.ts","webpack://vxmessenger/./src/features/specific/AudioAnalyser/index.ts","webpack://vxmessenger/./src/features/specific/AudioAnalyser/AudioAnalyserContainer.tsx","webpack://vxmessenger/./src/views/viewHandler.ts","webpack://vxmessenger/./src/features/common/ActionResponse/style.ts","webpack://vxmessenger/./src/features/common/ActionResponse/ActionResponse.tsx","webpack://vxmessenger/./src/features/common/ActionResponse/ActionResponseContainer.tsx","webpack://vxmessenger/./src/features/common/MessageSectionPopupWrapper/index.ts","webpack://vxmessenger/./src/features/common/MessageSectionPopupWrapper/MessageSectionPopupWrapper.tsx","webpack://vxmessenger/./src/features/specific/MessageSection/style.ts","webpack://vxmessenger/./src/features/specific/MessageSectionButtons/style.ts","webpack://vxmessenger/./src/features/specific/MessageSectionButtons/utils.tsx","webpack://vxmessenger/./src/features/specific/MessageSectionButtons/automation.ts","webpack://vxmessenger/./src/features/specific/MessageSectionButtons/MessageSectionButtons.tsx","webpack://vxmessenger/./src/features/specific/MessageSectionButtons/MessageSectionButtonsContainer.tsx","webpack://vxmessenger/./src/features/specific/MessageSectionButtons/index.ts","webpack://vxmessenger/./src/features/specific/Editor/Editor.tsx","webpack://vxmessenger/./src/features/specific/GiftDecorator/style.ts","webpack://vxmessenger/./src/features/specific/GiftDecorator/index.ts","webpack://vxmessenger/./src/features/specific/GiftDecorator/GiftDecorator.tsx","webpack://vxmessenger/./src/features/specific/EmoticonDecorator/style.ts","webpack://vxmessenger/./src/features/specific/EmoticonDecorator/index.ts","webpack://vxmessenger/./src/features/specific/EmoticonDecorator/EmoticonDecorator.tsx","webpack://vxmessenger/./src/features/specific/MentionDecorator/style.ts","webpack://vxmessenger/./src/features/specific/MentionDecorator/index.ts","webpack://vxmessenger/./src/features/specific/MentionDecorator/MentionDecorator.tsx","webpack://vxmessenger/./src/features/common/Arrow/types.ts","webpack://vxmessenger/./src/features/specific/Editor/index.ts","webpack://vxmessenger/./src/features/specific/MessageGift/style.ts","webpack://vxmessenger/./src/features/specific/MessageGift/MessageGift.tsx","webpack://vxmessenger/./src/features/specific/MessageGift/index.ts","webpack://vxmessenger/./src/features/specific/DefaultEditor/style.ts","webpack://vxmessenger/./src/features/specific/DefaultEditor/DefaultEditor.tsx","webpack://vxmessenger/./src/features/specific/DefaultEditor/DefaultEditorContainer.tsx","webpack://vxmessenger/./src/features/specific/DefaultEditor/index.ts","webpack://vxmessenger/./src/features/specific/AudioMessageUploader/style.ts","webpack://vxmessenger/./src/features/specific/AudioMessageUploader/AudioMessageUploader.tsx","webpack://vxmessenger/./src/features/specific/AudioMessageUploader/utils.ts","webpack://vxmessenger/./src/features/specific/AudioMessageUploader/AudioMessageUploaderContainer.tsx","webpack://vxmessenger/./src/features/specific/AudioMessageUploader/index.ts","webpack://vxmessenger/./src/features/specific/MessageSection/MessageSection.tsx","webpack://vxmessenger/./src/features/specific/MessageSection/MessageSectionContainer.tsx","webpack://vxmessenger/./src/features/specific/MessageSection/index.ts","webpack://vxmessenger/./src/features/specific/ActionSection/index.ts","webpack://vxmessenger/./src/features/specific/ProfileInfo/style.ts","webpack://vxmessenger/./src/features/specific/Favorite/style.ts","webpack://vxmessenger/./src/features/specific/Favorite/Favorite.tsx","webpack://vxmessenger/./src/features/specific/Favorite/utils.ts","webpack://vxmessenger/./src/sagas/websockets/channelInfo.ts","webpack://vxmessenger/./src/features/specific/Favorite/FavoriteContainer.tsx","webpack://vxmessenger/./src/features/specific/Favorite/index.ts","webpack://vxmessenger/./src/features/specific/ContactNote/style.ts","webpack://vxmessenger/./src/features/specific/ContactNote/ContactNote.tsx","webpack://vxmessenger/./src/features/specific/ContactNote/ContactNoteContainer.tsx","webpack://vxmessenger/./src/features/specific/ContactNote/index.ts","webpack://vxmessenger/./src/features/specific/ProfileInfo/ProfileInfo.tsx","webpack://vxmessenger/./src/features/specific/ProfileInfo/utils.ts","webpack://vxmessenger/./src/features/specific/ProfileInfo/ProfileInfoContainer.tsx","webpack://vxmessenger/./src/features/specific/ProfileInfo/index.ts","webpack://vxmessenger/./src/features/specific/ProfilePicture/index.ts","webpack://vxmessenger/./src/features/specific/Profile/Profile.tsx","webpack://vxmessenger/./src/features/specific/Profile/style.ts","webpack://vxmessenger/./src/features/specific/Profile/utils.ts","webpack://vxmessenger/./src/features/specific/Profile/ProfileContainer.tsx","webpack://vxmessenger/./src/features/specific/Profile/index.ts","webpack://vxmessenger/./src/features/common/FullscreenFooter/style.ts","webpack://vxmessenger/./src/features/specific/CountdownWarning/style.ts","webpack://vxmessenger/./src/features/specific/CountdownWarning/CountdownWarning.tsx","webpack://vxmessenger/./src/features/specific/CountdownWarning/CountdownWarningContainer.tsx","webpack://vxmessenger/./src/features/specific/CountdownWarning/index.ts","webpack://vxmessenger/./src/features/specific/MentionSection/style.ts","webpack://vxmessenger/./src/features/specific/CustomMentionOption/style.ts","webpack://vxmessenger/./src/features/specific/CustomMentionOption/CustomMentionOption.tsx","webpack://vxmessenger/./src/features/specific/CustomMentionOption/CustomMentionOptionContainer.tsx","webpack://vxmessenger/./src/features/specific/CustomMentionOption/index.ts","webpack://vxmessenger/./src/features/specific/MentionMenu/style.ts","webpack://vxmessenger/./src/features/common/CloseButton/index.ts","webpack://vxmessenger/./src/features/specific/MentionMenu/MentionMenu.tsx","webpack://vxmessenger/./src/features/specific/MentionMenu/MentionMenuContainer.tsx","webpack://vxmessenger/./src/features/specific/MentionMenu/index.ts","webpack://vxmessenger/./src/features/specific/MentionSection/MentionSection.tsx","webpack://vxmessenger/./src/features/specific/MentionSection/utils.ts","webpack://vxmessenger/./src/features/specific/MentionSection/MentionSectionContainer.tsx","webpack://vxmessenger/./src/features/specific/MentionSection/index.ts","webpack://vxmessenger/./src/features/common/FullscreenFooter/FullscreenFooter.tsx","webpack://vxmessenger/./src/features/common/FullscreenFooter/index.ts","webpack://vxmessenger/./src/features/common/FullscreenHeader/utils.ts","webpack://vxmessenger/./src/features/common/FullscreenHeader/style.ts","webpack://vxmessenger/./src/features/common/FullscreenHeader/FullscreenHeader.tsx","webpack://vxmessenger/./src/features/common/FullscreenHeader/FullscreenHeaderContainer.tsx","webpack://vxmessenger/./src/features/specific/ChatBox/style.ts","webpack://vxmessenger/./src/sagas/websockets/history.ts","webpack://vxmessenger/./src/features/common/Group/style.ts","webpack://vxmessenger/./src/features/common/Group/Group.tsx","webpack://vxmessenger/./src/features/common/Group/utils.ts","webpack://vxmessenger/./src/features/common/Group/index.ts","webpack://vxmessenger/./src/features/common/Group/GroupContainer.tsx","webpack://vxmessenger/./src/features/specific/MessageEmoticon/style.ts","webpack://vxmessenger/./src/features/specific/MessageEmoticon/index.ts","webpack://vxmessenger/./src/features/specific/MessageEmoticon/MessageEmoticon.tsx","webpack://vxmessenger/./src/features/specific/ImageMessage/style.ts","webpack://vxmessenger/./src/features/specific/ImageMessage/utils.ts","webpack://vxmessenger/./src/features/common/ImageLoader/style.ts","webpack://vxmessenger/./src/features/common/ImageLoader/utils.ts","webpack://vxmessenger/./src/features/common/ImageLoader/ImageLoader.tsx","webpack://vxmessenger/./src/features/specific/ImageMessage/index.ts","webpack://vxmessenger/./src/features/specific/ImageMessage/ImageMessageContainer.tsx","webpack://vxmessenger/./src/features/common/ImageLoader/index.ts","webpack://vxmessenger/./src/features/specific/AudioPlayer/style.ts","webpack://vxmessenger/./src/features/specific/AudioPlayerBar/style.ts","webpack://vxmessenger/./src/features/specific/AudioPlayerBar/AudioPlayerBar.tsx","webpack://vxmessenger/./src/features/specific/AudioPlayerBar/index.ts","webpack://vxmessenger/./src/features/specific/AudioPlayerBar/AudioPlayerBarContainer.tsx","webpack://vxmessenger/./src/features/specific/AudioPlayer/AudioPlayer.tsx","webpack://vxmessenger/./src/features/specific/AudioPlayer/index.ts","webpack://vxmessenger/./src/features/specific/AudioPlayer/AudioPlayerContainer.tsx","webpack://vxmessenger/./src/features/specific/Message/style.ts","webpack://vxmessenger/./src/features/common/ToyMessage/style.ts","webpack://vxmessenger/./src/features/common/ToyMessage/ToyMessage.tsx","webpack://vxmessenger/./src/features/common/ToyMessage/index.ts","webpack://vxmessenger/./src/features/specific/Message/utils.tsx","webpack://vxmessenger/./src/features/specific/Message/Message.tsx","webpack://vxmessenger/./src/features/specific/Message/index.ts","webpack://vxmessenger/./src/features/specific/Message/MessageContainer.tsx","webpack://vxmessenger/./src/features/specific/ChatBox/utils.tsx","webpack://vxmessenger/./src/features/specific/ChatBox/ChatBox.tsx","webpack://vxmessenger/./src/features/specific/GroupChatParticipants/style.ts","webpack://vxmessenger/./src/features/specific/GroupChatParticipants/GroupChatParticipants.tsx","webpack://vxmessenger/./src/features/specific/GroupChatParticipants/index.ts","webpack://vxmessenger/./src/features/specific/GroupChatParticipants/GroupChatParticipantsContainer.tsx","webpack://vxmessenger/./src/features/specific/FontSizeSwitcher/style.ts","webpack://vxmessenger/./src/features/specific/FontSizeSwitcher/FontSizeSwitcher.tsx","webpack://vxmessenger/./src/features/specific/FontSizeSwitcher/index.tsx","webpack://vxmessenger/./src/features/specific/FontSizeSwitcher/FontSizeSwitcherContainer.tsx","webpack://vxmessenger/./src/features/common/Arrow/style.ts","webpack://vxmessenger/./src/features/common/Arrow/Arrow.tsx","webpack://vxmessenger/./src/services/AnalyticsService.ts","webpack://vxmessenger/./src/features/common/Arrow/index.ts","webpack://vxmessenger/./src/features/common/WindowBox/style.ts","webpack://vxmessenger/./src/features/common/WindowBox/WindowBox.tsx","webpack://vxmessenger/./src/features/common/WindowBox/index.ts","webpack://vxmessenger/./src/features/common/WindowBox/WindowBoxContainer.tsx","webpack://vxmessenger/./src/features/specific/EmoticonSection/style.ts","webpack://vxmessenger/./src/features/specific/EmoticonSection/EmoticonSection.tsx","webpack://vxmessenger/./src/features/specific/EmoticonSection/EmoticonSectionContainer.tsx","webpack://vxmessenger/./src/features/specific/EmoticonSection/index.ts","webpack://vxmessenger/./src/features/specific/Gift/style.ts","webpack://vxmessenger/./src/features/specific/Gift/index.ts","webpack://vxmessenger/./src/features/specific/Gift/Gift.tsx","webpack://vxmessenger/./src/features/specific/GiftPage/style.ts","webpack://vxmessenger/./src/features/specific/GiftPage/GiftPage.tsx","webpack://vxmessenger/./src/features/specific/GiftPage/index.ts","webpack://vxmessenger/./src/features/specific/GiftPage/GiftPageContainer.tsx","webpack://vxmessenger/./src/features/specific/GiftTab/style.ts","webpack://vxmessenger/./src/features/specific/GiftTab/index.ts","webpack://vxmessenger/./src/features/specific/GiftTab/GiftTab.tsx","webpack://vxmessenger/./src/features/specific/PurchaseBundlePage/style.ts","webpack://vxmessenger/./src/features/specific/PurchaseBundlePage/index.ts","webpack://vxmessenger/./src/features/specific/PurchaseBundlePage/PurchaseBundlePage.tsx","webpack://vxmessenger/./src/features/specific/GiftSection/style.ts","webpack://vxmessenger/./src/features/specific/GiftSection/GiftSection.tsx","webpack://vxmessenger/./src/features/common/AdvancedTooltip/interfaces.ts","webpack://vxmessenger/./src/sagas/specific/analytics.ts","webpack://vxmessenger/./src/sagas/websockets/gifts.ts","webpack://vxmessenger/./src/features/specific/GiftSection/GiftSectionContainer.tsx","webpack://vxmessenger/./src/features/specific/ToySection/style.ts","webpack://vxmessenger/./src/features/common/ToyOption/style.ts","webpack://vxmessenger/./src/features/common/ToyOption/ToyOption.tsx","webpack://vxmessenger/./src/features/specific/ToyOptionWithTooltip/style.ts","webpack://vxmessenger/./src/features/common/AdvancedTooltipContent/style.ts","webpack://vxmessenger/./src/features/common/AdvancedTooltipContent/utils.ts","webpack://vxmessenger/./src/features/common/ToyOption/ToyOptionContainer.tsx","webpack://vxmessenger/./src/features/common/AdvancedTooltipContent/index.ts","webpack://vxmessenger/./src/features/common/AdvancedTooltipContent/AdvancedTooltipContentContainer.tsx","webpack://vxmessenger/./src/features/common/AdvancedTooltip/index.ts","webpack://vxmessenger/./src/features/common/AdvancedTooltip/AdvancedTooltip.tsx","webpack://vxmessenger/./src/features/specific/ToyOptionWithTooltip/ToyOptionWithTooltip.tsx","webpack://vxmessenger/./src/features/specific/ToyOptionWithTooltip/index.ts","webpack://vxmessenger/./src/features/specific/ToyOptionWithTooltip/ToyOptionWithTooltipContainer.tsx","webpack://vxmessenger/./src/features/common/Header/types.ts","webpack://vxmessenger/./src/features/common/ToyOption/index.ts","webpack://vxmessenger/./src/features/common/ToySectionHeader/style.ts","webpack://vxmessenger/./src/features/common/ToySectionHeader/ToySectionHeader.tsx","webpack://vxmessenger/./src/features/common/ToySectionHeader/ToySectionHeaderContainer.tsx","webpack://vxmessenger/./src/features/common/ToySectionHeader/index.ts","webpack://vxmessenger/./src/features/specific/ToySection/ToySection.tsx","webpack://vxmessenger/./src/features/specific/ToySection/ToySectionContainer.tsx","webpack://vxmessenger/./src/features/specific/ToySection/index.ts","webpack://vxmessenger/./src/features/specific/SymbolSection/SymbolSection.tsx","webpack://vxmessenger/./src/features/specific/SymbolSection/utils.ts","webpack://vxmessenger/./src/features/specific/SymbolSection/SymbolSectionContainer.tsx","webpack://vxmessenger/./src/features/specific/UserPrompt/style.ts","webpack://vxmessenger/./src/features/common/CloseIcon/CloseIcon.tsx","webpack://vxmessenger/./src/features/common/CloseIcon/index.ts","webpack://vxmessenger/./src/features/specific/UserPrompt/helpers/UserPromptTitle.tsx","webpack://vxmessenger/./src/features/specific/UserPromptTip/style.ts","webpack://vxmessenger/./src/features/specific/UserPromptTip/UserPromptTip.tsx","webpack://vxmessenger/./src/features/specific/UserPromptTip/UserPromptAnonymousTip.tsx","webpack://vxmessenger/./src/features/specific/UserPromptTip/UserPromptTipContainer.tsx","webpack://vxmessenger/./src/features/specific/UserPromptTip/utils.ts","webpack://vxmessenger/./src/features/specific/CamerasSection/utils.ts","webpack://vxmessenger/./src/features/specific/CameraOption/style.ts","webpack://vxmessenger/./src/features/specific/CameraOption/CameraOption.tsx","webpack://vxmessenger/./src/features/specific/CamerasSection/style.ts","webpack://vxmessenger/./src/features/specific/CamerasSection/CamerasSection.tsx","webpack://vxmessenger/./src/features/specific/CamerasSection/CamerasSectionContainer.tsx","webpack://vxmessenger/./src/features/specific/UserPrompt/helpers/UserPromptContent.tsx","webpack://vxmessenger/./src/features/common/TransitionGroup/TransitionGroup.tsx","webpack://vxmessenger/./src/features/common/TransitionGroup/index.ts","webpack://vxmessenger/./src/features/specific/UserPrompt/UserPrompt.tsx","webpack://vxmessenger/./src/features/specific/UserPrompt/utils.ts","webpack://vxmessenger/./src/features/specific/UserPrompt/UserPromptContainer.tsx","webpack://vxmessenger/./src/features/specific/UserPrompt/index.ts","webpack://vxmessenger/./src/features/common/MessageSectionPopups/style.ts","webpack://vxmessenger/./src/features/common/MessageSectionPopups/MessageSectionPopups.tsx","webpack://vxmessenger/./src/features/common/MessageSectionPopups/index.ts","webpack://vxmessenger/./src/features/common/MessageSectionPopups/MessageSectionPopupsContainer.tsx","webpack://vxmessenger/./src/features/specific/ChatBox/index.ts","webpack://vxmessenger/./src/features/specific/ChatBox/ChatBoxContainer.tsx","webpack://vxmessenger/./src/features/specific/Videochat/style.ts","webpack://vxmessenger/./src/features/specific/Videochat/VideoChat.tsx","webpack://vxmessenger/./src/features/common/CenterChild/CenterChild.ts","webpack://vxmessenger/./src/features/common/CenterChild/index.ts","webpack://vxmessenger/./src/features/common/Preloader/style.ts","webpack://vxmessenger/./src/features/common/Preloader/Preloader.tsx","webpack://vxmessenger/./src/features/common/Preloader/index.ts","webpack://vxmessenger/./src/features/common/Preloader/PreloaderContainer.tsx","webpack://vxmessenger/./src/features/common/InformationDialog/index.ts","webpack://vxmessenger/./src/features/specific/AVSCam2CamPopup/utils.ts","webpack://vxmessenger/./src/features/specific/AVSCam2CamPopup/style.ts","webpack://vxmessenger/./src/features/specific/AVSCam2CamPopup/AVSCam2CamPopup.tsx","webpack://vxmessenger/./src/features/specific/AVSCam2CamPopup/AVSCam2CamPopupContainer.tsx","webpack://vxmessenger/./src/features/specific/PlayButton/style.ts","webpack://vxmessenger/./src/features/specific/PlayButton/PlayButton.tsx","webpack://vxmessenger/./src/features/specific/PlayButton/PlayButtonContainer.tsx","webpack://vxmessenger/./src/features/specific/PlayButton/index.ts","webpack://vxmessenger/./src/features/specific/Videochat/VideoChatContainer.tsx","webpack://vxmessenger/./src/features/common/VideoChatBaseButton/style.ts","webpack://vxmessenger/./src/features/common/VideoChatBaseButton/index.ts","webpack://vxmessenger/./src/features/common/VideoChatBaseButton/VideoChatBaseButton.tsx","webpack://vxmessenger/./src/features/common/InitiallyMutedTooltip/style.ts","webpack://vxmessenger/./src/features/common/InitiallyMutedTooltip/index.ts","webpack://vxmessenger/./src/features/common/InitiallyMutedTooltip/InitiallyMutedTooltip.tsx","webpack://vxmessenger/./src/features/common/VideoChatVolume/style.ts","webpack://vxmessenger/./src/features/common/VideoChatVolumeSlider/VideoChatVolumeSlider.tsx","webpack://vxmessenger/./src/features/common/VideoChatVolume/VideoChatVolume.tsx","webpack://vxmessenger/./src/features/common/VideoChatVolume/index.ts","webpack://vxmessenger/./src/features/specific/MobileMenu/style.ts","webpack://vxmessenger/./src/features/specific/MobileMenu/MobileMenuItem.tsx","webpack://vxmessenger/./src/features/specific/MobileMenu/MobileMenu.tsx","webpack://vxmessenger/./src/features/specific/MobileMenu/utils.ts","webpack://vxmessenger/./src/features/specific/MobileMenu/MobileMenuContainer.tsx","webpack://vxmessenger/./src/features/specific/MobileMenu/index.ts","webpack://vxmessenger/./src/features/specific/VideoChatMobile/style.ts","webpack://vxmessenger/./src/features/specific/VideoChatMobile/index.ts","webpack://vxmessenger/./src/features/specific/VideoChatMobile/VideoChatMobile.tsx","webpack://vxmessenger/./src/features/specific/VideoChatReload/VideoChatReload.tsx","webpack://vxmessenger/./src/features/specific/VideoChatReload/index.ts","webpack://vxmessenger/./src/features/specific/VideoChatToggleFullsceen/index.ts","webpack://vxmessenger/./src/features/specific/VideoChatToggleFullsceen/VideoChatToggleFullscreen.tsx","webpack://vxmessenger/./src/features/specific/VideochatActionSection/style.ts","webpack://vxmessenger/./src/features/specific/VideochatActionSection/VideoChatActionSection.tsx","webpack://vxmessenger/./src/features/specific/VideochatActionSection/utils.ts","webpack://vxmessenger/./src/features/specific/VideochatActionSection/VideoChatActionSectionContainer.tsx","webpack://vxmessenger/./src/views/FullscreenView/style.ts","webpack://vxmessenger/./src/views/FullscreenView/index.ts","webpack://vxmessenger/./src/views/FullscreenView/FullscreenView.tsx","webpack://vxmessenger/./src/features/common/Header/style.ts","webpack://vxmessenger/./src/features/common/Header/Header.tsx","webpack://vxmessenger/./src/features/common/Header/index.ts","webpack://vxmessenger/./src/features/specific/ContactNoteDialog/style.ts","webpack://vxmessenger/./src/features/specific/ContactNoteDialog/ContactNoteDialog.tsx","webpack://vxmessenger/./src/features/specific/ContactNoteDialog/ContactNoteDialogContainer.tsx","webpack://vxmessenger/./src/features/specific/ContactNoteDialog/index.ts","webpack://vxmessenger/./src/features/specific/Messenger/style.ts","webpack://vxmessenger/./src/features/specific/MessageTypeHeader/style.ts","webpack://vxmessenger/./src/features/specific/MessageTypeHeader/MessageTypeHeader.tsx","webpack://vxmessenger/./src/features/specific/MessageTypeHeader/index.ts","webpack://vxmessenger/./src/features/specific/MessageTypeHeader/MessageTypeHeaderContainer.tsx","webpack://vxmessenger/./src/features/specific/Messenger/Messenger.tsx","webpack://vxmessenger/./src/features/specific/MessengerLoader/style.ts","webpack://vxmessenger/./src/features/specific/MessengerLoader/index.ts","webpack://vxmessenger/./src/features/specific/MessengerLoader/MessengerLoader.tsx","webpack://vxmessenger/./src/features/specific/Messenger/MessengerContainer.tsx","webpack://vxmessenger/./src/views/MessengerView/style.ts","webpack://vxmessenger/./src/views/MessengerView/MessengerView.tsx","webpack://vxmessenger/./src/views/VideoChatLandscapeView/style.ts","webpack://vxmessenger/./src/views/VideoChatLandscapeView/index.ts","webpack://vxmessenger/./src/views/VideoChatLandscapeView/VideoChatLandscapeView.tsx","webpack://vxmessenger/./src/features/common/MobileFooter/style.ts","webpack://vxmessenger/./src/features/common/MobileFooter/index.ts","webpack://vxmessenger/./src/features/common/MobileFooter/MobileFooter.tsx","webpack://vxmessenger/./src/features/specific/MobileProfileInfo/style.ts","webpack://vxmessenger/./src/features/specific/MobileProfileInfo/MobileProfileInfo.tsx","webpack://vxmessenger/./src/features/specific/MobileProfileInfo/MobileProfileInfoContainer.tsx","webpack://vxmessenger/./src/features/specific/MobileProfileInfo/index.ts","webpack://vxmessenger/./src/features/common/MobileHeader/style.ts","webpack://vxmessenger/./src/features/common/MobileHeader/MobileHeader.tsx","webpack://vxmessenger/./src/features/common/MobileHeader/MobileHeaderContainer.tsx","webpack://vxmessenger/./src/views/VideoChatMobilePortraitView/style.ts","webpack://vxmessenger/./src/views/VideoChatMobilePortraitView/index.ts","webpack://vxmessenger/./src/views/VideoChatMobilePortraitView/VideoChatMobilePortraitView.tsx","webpack://vxmessenger/./src/views/VideoChatPortraitView/style.ts","webpack://vxmessenger/./src/views/VideoChatPortraitView/index.ts","webpack://vxmessenger/./src/views/VideoChatPortraitView/VideoChatPortraitView.tsx","webpack://vxmessenger/./src/views/VideoChatMobileLandscapeView/style.ts","webpack://vxmessenger/./src/features/specific/GiftSection/index.ts","webpack://vxmessenger/./src/features/common/ActionResponse/index.ts","webpack://vxmessenger/./src/views/VideoChatMobileLandscapeView/VideoChatMobileLandscapeView.tsx","webpack://vxmessenger/./src/views/VideoChatMobileLandscapeView/index.ts","webpack://vxmessenger/./src/views/VideoChatMobileLandscapeView/VideoChatMobileLandscapeViewContainer.tsx","webpack://vxmessenger/./src/views/ViewSwticher/ViewSwitcher.tsx","webpack://vxmessenger/./src/views/ViewProvider/index.ts","webpack://vxmessenger/./src/views/ViewProvider/ViewProvider.tsx","webpack://vxmessenger/./src/features/common/FullScreenLightBox/style.ts","webpack://vxmessenger/./src/features/common/FullScreenLightBox/FullScreenLightBox.tsx","webpack://vxmessenger/./src/features/common/FullScreenLightBox/index.ts","webpack://vxmessenger/./src/features/common/FullScreenLightBox/FullScreenLightBoxContainer.tsx","webpack://vxmessenger/./src/themes/index.ts","webpack://vxmessenger/./src/App/App.tsx","webpack://vxmessenger/./src/sagas/specific/chat.ts","webpack://vxmessenger/./src/sagas/common/chatEvents.ts","webpack://vxmessenger/./src/sagas/common/errors.ts","webpack://vxmessenger/./src/sagas/common/playerEvents.ts","webpack://vxmessenger/./src/sagas/common/timeLimits.ts","webpack://vxmessenger/./src/sagas/websockets/onlineState.ts","webpack://vxmessenger/./src/sagas/websockets/login.ts","webpack://vxmessenger/./src/sagas/websockets/newChannel.ts","webpack://vxmessenger/./src/sagas/websockets/channel.ts","webpack://vxmessenger/./src/sagas/common/start.ts","webpack://vxmessenger/./src/sagas/common/preferences.ts","webpack://vxmessenger/./src/sagas/common/rootSaga.ts","webpack://vxmessenger/./src/sagas/specific/fullscreen.ts","webpack://vxmessenger/./src/sagas/specific/userEvents.ts","webpack://vxmessenger/./src/sagas/specific/rootSaga.ts","webpack://vxmessenger/./src/sagas/websockets/init.ts","webpack://vxmessenger/./src/sagas/websockets/noop.ts","webpack://vxmessenger/./src/sagas/websockets/queryBackend.ts","webpack://vxmessenger/./src/sagas/websockets/apiEvents.ts","webpack://vxmessenger/./src/sagas/websockets/rootSaga.ts","webpack://vxmessenger/./src/redux/reducers/rootReducer.ts","webpack://vxmessenger/./src/redux/configureStore.ts","webpack://vxmessenger/./src/sagas/rootSaga.ts","webpack://vxmessenger/./src/App/index.ts","webpack://vxmessenger/./src/App/AppContainer.tsx","webpack://vxmessenger/./src/utils/appUtils.ts","webpack://vxmessenger/./src/index.tsx"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","undefined","webkitAudioContext","this","createAnalyser","decodeAudioData","PreferenceName","QuestionType","ActionResponseType","CountdownWarningType","KnownAnswerType","MessageDirection","MessageContentType","VideochatInformationType","PreChatInformationType","VideoChatType","LoadingStatus","CurrencyName","createAction","type","instanceId","payload","createActionType","id","action","isReduxAction","ActionIds","limitations","fileUpload","minSize","acceptedFileFormats","maxNumberOfMessages","onGettingHistory","onFullscreen","messengerClassName","messengerInstanceIdAttribute","endpoints","imageUpload","profilePictureSizes","small","big","extraSmall","customMentionPictureSize","viewSizes","maxButtonWidthInFullscreen","maxButtonWithoutIconWidth","defaultButtonWidth","defaultButtonWidthOnVideo","voyeurCamButtonWidth","imageLoaderSize","chatboxSectionMaxWidth","cam2camMinimizeWidth","cam2camMinimizeHeight","cam2camMobileFrameWidth","cam2camDesktopFrameWidth","messengerWidthPercentage","messengerPortraitMinHeight","messageSectionMaxWidth","messengerLoaderSize","videoChatWidthPercentage","videoChatControlsHeight","switchToPortraitWidth","fullScreen","topBarHeight","bottomBarHeight","chatBoxBottomOffset","countdownWarning","height","mobile","bottomBarMaxHeight","bottomActionButtonsBarHeight","minHeaderHeight","minMessageSectionHeight","minVideochatHeight","actionSectionButton","ChatSettings","BAD_CONN_MAX_RESOLUTION","BAD_CONN_MAX_RESOLUTION_DESKTOP","BAD_CONN_TIMEOUT_WAITING","HLS_NATIVE_RECOVER_TIMEOUT","MAX_ATTEMPTS","MAX_ATTEMPTS_CHAT_START","MAX_ATTEMPTS_CHAT_START_PREVIEW","MIN_DURATION_FOR_CHAT_EXIT","TIMEOUT_CONNECTION_WARNING","TIMEOUT_FLASH_DETECTION","TIMEOUT_FLASH_INIT","TIMEOUT_RETRY_STREAM_START","TIMEOUT_RETRY_CHAT_START","TIMEOUT_VOLUME_BUTTON_HINT","videoChatTimeLimits","anonymousTip","liveChatStartWarning","versionDisplayDuration","mostCommonRechargeValue","specialGiftPages","inventoryGiftId","giftBundlesId","defaultUserKey","maxHeightToHideMobileKeyboard","initialVideoResolution","width","defaultEmoticons","position","text","code","popupsTransitionTime","defaultTipOption","currency","Euro","symbol","imageUrl","tipImageSize","waitUntilReportingBadConnection","maxTextCharLimit","rollbarAccessToken","chat","actionMute","actionUnmute","actorWaiting","adultContentInfo","autoRecharge","avsNeeded","billingStart","btnChargeNow","browserOutdated","browserOutdatedTagLine","browserOutdatedHrefText","camToCam","charge","chargeNow","chargeSuccess","chatStarted","checkConnection","chooseCamera","closeConfirmation1","closeConfirmation2","continue","enterFullscreen","exit","exitLoad","exitLoadAgain","freeChatEndHeadline","freeConnection","isMuted","hint","insertEmoticons","interrupted","invitePrivateChat","leaveFullscreen","liveChat","livePreview","lowBalance","members","groupChat","singleMember","mentionHeaderPartOne","mentionHeaderPartOneSingle","mentionHeaderPartTwo","needAvs","noMoney","popup","avs","ended","kicked","offline1","offline2","offline3","previewConnection","previewDisabled","previewLimit","privateCam","privateChat1","privateChat2","recharge","reconnect","videoConnection","vip","voicecall","previewEndCountdown","previewEndHeadline","previewEndText","privateChat","sendGift","sendImage","softchat","softChatWait","startVoyeur","stopLiveChat","timeLimit","tipAmount","tipFail","tipOk","tip1","tip2","tip3","tip4","tooltipNoVolume1","tooltipNoVolume2","tooltipPreview","tooltipVideochat","tooltipVoyeur","toyControl","highTooltipText","highTooltipTitle","maximumToyDuration","toyDescription","toyDuration","toyIntensityHigh","toyIntensityLow","toyIntensityMedium","toyIntensityRandom","toyLearnMore","lovenseAvailable","lovenseFinished","lovenseStartedMessage","lovenseVibrating","randomTooltipText","randomTooltipTitle","verifyAge","vipLivePreview","vipPreviewStarted","voyeur","voyeurCam","voyeurTip1","voyeurTip2","voyeurTip3","voyeurTip4","voyeurTipFail","voyeurTipOk","voyeurToSingleInfo","common","advertised","all","archive","archived","cancel","close","done","edit","gift","gifts","header","lastMessageOn","messageFrom","giftBundles","bundleBuy","bundleBuySuccess","bundles","contains","bundleInfo","bundlesReducedPrice","imageUploadFail","imageUploadOk","networkoff","no","none","notNow","notes","off","ok","on","onehour","paymentSuccess","perMinute","read","regularcustomer","reload","save","seconds","sure","thankYou","title","titlemessage","titlemessages","unarchive","userinfos","yes","yesterday","error","noCamera","initFail","textLimit","warning","connectionPoor","message","delete","deleteConfirmation","selectEmoticon","send","sendGifts","sendNow","write","writeFree","writePrice","menuSendGift","menuSendMoney","menuSendPhotos","menuSendEmoticon","sendAudioMessage","user","addFavorite","addNote","becomeVIP","boughtGifts","boughtGiftsHeading","removeFavorite","stock","visitProfile","youAreOffline","yourNote","yourStock","requestAccess","allowAccess","typography","fontFamily","secondaryFontFamily","weight","thin","light","regular","medium","bold","layout","textMode","minWidth","minHeight","messageSection","responsiveBreakpointWidth","colors","overlay","baseButtonIcon","recordingIcon","fontSwitcherIcon","sendMessageButton","cancelRecordingHover","cam2CamBackgroundColor","cam2CamDisabledColor","cam2CamHoverColor","messengerWrapper","messengerClose","messengerLoader","messageEditorBackgroundColor","messageEditorPlaceholderColor","messageEditorTextColor","mentionBackground","mentionHeaderText","modelInfoText","pictureBorder","userMessageText","userMessageBackground","usernameColorSet","modelMessageText","modelMessageBackground","modelMessageUsername","clientMessageText","clientMessageBackground","clientName","participants","bgColor","textColor","chatBoxContainer","imageUrlContent","groupColor","groupTextColor","profileLink","profileLinkHover","profileMotto","messengerButtonInvertedBackground","messengerButtonHover","messengerButtonInvertedText","windowBackground","windowItemsShadow","windowPaginatorBackground","fullscreenSystemMessageBackground","fullscreenSystemMessageText","messageText","messageTimeAgo","videoChatBackground","videoChatControlsBackground","videoChatControlsBackgroundHover","videoChatControlsText","onlineBulletColor","offlineBulletColor","selectedButton","defaultBackground","defaultBackgroundHover","blackBackground","blackBackgroundHover","defaultDropDownBackground","blueBackgroundHover","greyBackgroundHover","clickHighlight","initiallyMutedButtonBackground","initiallyMutedToolTipContentText","checkedStrokeColor","checkedFillColor","dropDownContentBgColor","timerFillColor","timerUnfillColor","timerBgColor","timerTextColor","livePreviewTimer","fillColor","unfillColor","editor","background","giftPageTitle","giftPageText","avsCam2CamPopup","backgroundColor","smallTextColor","mainTextColor","button","standard","onHover","preChatPopup","actionResponse","warningColor","errorColor","successfulColor","userPrompt","tipColor","tipPriceColor","tipButtonColor","tipButtonBackgroundColor","tipButtonBackgroundHoverColor","modalCloseButtonColor","toySection","primaryColor","secondaryColor","lock","hoverTooltipText","headerSectionBackground","headerSectionBorderColor","optionText","headerSectionLink","inactiveToyMessageText","informationDialog","messageTypeHeader","modelTitle","subtitle","cameraSelection","option","defaultColor","selectedColor","noteButton","giftsCloseButton","getInitialInstanceData","messenger","isOpen","isTextEnabled","isResponsive","hasEditor","isMentionSectionOpen","shouldDisplayCustomMentionSection","loadingStatus","NONE","mentionQuery","audioMessage","shouldSendMessage","isRecording","secondsElapsed","isMicEnabled","editorState","contactNote","messages","failedMessages","emoticons","toyOptions","activeSymbols","modalContent","imgSrc","windowToggleState","userPrompts","isVersionOpen","isDropDownOpen","isToySectionOpen","isGiftSectionOpen","isEmoticonSectionOpen","groupChatColors","defaultTheme","color","users","session","channelId","sessionID","webtoken","uploadMediaUrl","giftCategories","freeMessages","available","amount","oneClickRecharge","defaultAmount","amounts","chatFeatures","freeChatDuration","livePreviewDurationText","livePreviewDurationVideo","language","EN","isVip","translations","en","de","es","isOnline","navigator","onLine","preferences","ShouldIncreaseMessageFontSize","VolumeLevel","model","motto","profilePicture","isFavorite","partner","prices","messagePrice","videoChatPrice","voyeurChatPrice","videochat","shouldHideVideochatControls","isPlaying","isFullscreen","isMutedByClient","isMutedByModel","shouldRenderOnlyVideochat","qualityBoundaries","low","good","timeLeft","Number","MAX_SAFE_INTEGER","livePreviewTimeLeft","livePreviewTextTimeLimit","livePreviewTextTimeLeft","cam2Cam","isEnabled","isActive","isMinimized","cameras","initialResolution","groupChatParticipants","groupChatClientName","isAutoplayRestricted","features","hasFavorite","hasGifts","hasTips","hasEmoticons","hasToyControl","hasGroupChatIndicator","hasSendMessageButton","hasImageUpload","hasContactNote","hasExitPopups","hasModelProfilePicture","hasModelName","hasModelMotto","hasPrivateChat","hasVoyeur","hasCam2Cam","hasCloseButton","hasFullscreen","hasHistorySectionsOpened","hasHistoryMessages","hasMessagesGrouped","hasPreloaderPaymentText","hasBehaviorOnClickOutside","isMessageTypeHeader","hasAudioMessages","hasGroupChatClientName","hasFullscreenLayoutOnLandscape","hasProductionDebugEnabled","showCensoredContent","options","tip","initialVideochatVolume","preloader","updateBrowserLink","analyticsKey","censoredContentImage","platformProps","hooks","GET_CHAT_ERROR","createAppActionType","APP","RESET_STORE","resetStore","createFeatureActionType","FEATURES","SET_FEATURES","setFeatures","state","createOptionsActionType","OPTIONS","SET_OPTIONS","setOptions","_","createModelActionType","MODEL","SET_PARTNER","RESET_MODEL","SET_FAVORITE","SET_MODEL_NAME","RESET_MODEL_NAME","SET_MOTTO","RESET_MOTTO","SET_MODEL_PRICES","SET_MESSAGE_PRICE","SET_PROFILE_PICTURE","RESET_PROFILE_PICTURE","SET_MODEL_ONLINE_STATE","SET_IS_ONLINE","SET_CHAT_ABILITY","SET_LIVE_PREVIEW_ABILITY","SET_PRIVATE_CHAT_ABILITY","SET_TIP_ABILITY","SET_FREE_MESSAGES","SET_FREE_CHAT_DURATION","RESET_FREE_CHAT_DURATION","resetModel","setPartner","setProfilePicture","resetProfilePicture","setModelName","resetModelName","setModelPrices","setMessagePrice","setFavorite","setMotto","resetMotto","setModelOnlineState","setIsOnline","setChatAbility","setLivePreviewAbility","setPrivateChatAbility","setTipAbility","setFreeModelMessages","setModelFreeChatDuration","resetModelFreeChatDuration","draft","onlineState","supportsChat","supportsPreviewChat","supportsPrivateChat","supportsTip","createPlatformPropsActionType","PLATFORM_PROPS","SET_PLATFORM_PROPS","setPlatformProps","createSessionActionType","SESSION","SET_CHAT","SET_CHAT_ID","RESET_CHAT","SET_CHANNEL","RESET_CHANNEL","SET_SESSION","RESET_SESSION","SET_CHAT_FEATURES","SET_CURRENCY","SET_WEBTOKEN","SET_UPLOAD_MEDIA_URL","SET_AUTO_RECHARGE","SET_ONE_CLICK_RECHARGE","SET_LAST_CHARGED_AMOUNT","RESET_LAST_CHARGED_AMOUNT","SET_GIFTS","SET_ACTIVE_GIFT_CATEGORIES","SET_ACTIVE_GIFT_BUNDLES","INITIALIZE_QUANTITIES_TO_INVENTORY_GIFTS","DECREASE_CURRENT_GIFT_QUANTITY","RESET_CURRENT_QUANTITIES","SYNC_QUANTITIES_ON_MESSAGE_SENT","setWebtoken","setUploadMediaUrl","setChat","setChatId","resetChat","setFreePlatformMessages","setChatFeatures","setCurrency","setChannel","resetChannel","setSession","setGifts","setGiftCategories","setGiftBundles","setAutoRecharge","setOneClickRecharge","setLastChargedAmount","initializeQuantitiesToInventoryGifts","decreaseCurrentGiftQuantity","resetPlatformFreeChatDuration","syncQuantitiesOnMessageSent","chatId","inventoryGift","invGift","initialQuantity","quantity","currentQuantity","giftToDecrease","giftId","quantityToHandle","lastChargedAmount","createUserActionType","USER","SET_LANGUAGE","SET_IS_VIP","SET_TRANSLATIONS","SET_USER_ONLINE_STATE","SET_USER_KEY","SET_PREFERENCE","setLanguage","setIsVip","setTranslations","setUserOnlineState","setUserKey","setPreference","DE","ES","userKey","preferenceName","createVideochatActionType","VIDEOCHAT_REDUX","SET_QUALITY","SET_IS_MOBILE_MENU_OPEN","OPEN_FULLSCREEN","CLOSE_FULLSCREEN","TOGGLE_FULLSCREEN","SET_IS_MUTED_BY_CLIENT","SET_IS_INITIALLY_MUTED","DISPLAY_INITIALLY_MUTED_HINT","HIDE_INITIALLY_MUTED_HINT","SET_CAM2CAM_ACTIVE","SET_CAM2CAM_INACTIVE","SET_CAM2CAM_CAMERAS","SET_CAM2CAM_SELECTED_CAMERA","RESET_CAM2CAM_SELECTED_CAMERA","CAM2CAM_MINIMIZE","CAM2CAM_MAXIMIZE","SET_CAM2CAM_STATUS","SET_INFORMATION","RESET_INFORMATION","SET_PRE_CHAT_INFORMATION","RESET_PRE_CHAT_INFORMATION","OPEN_VIDEOCHAT","CLOSE_VIDEOCHAT","SET_TYPE","RESET_TYPE","SET_INITIAL_VIDEOCHAT_TYPE","RESET_INITIAL_VIDEOCHAT_TYPE","SET_VIDEOCHAT_TIME_LIMIT","SET_LIVE_PREVIEW_TIME_LIMIT","SET_LIVE_PREVIEW_TEXT_TIME_LIMIT","SET_LIVE_PREVIEW_TEXT_TIME_LEFT","SET_VIDEOCHAT_TIME_LIMIT_BELOW_THRESHOLD","SET_IS_MUTED_BY_MODEL","SET_INITIAL_RESOLUTION","SET_PLAYING_STATUS","SHOULD_RENDER_ONLY_VIDEOCHAT","SET_EXIT_EVENT","RESET_EXIT_EVENT","SET_RESUME_CHAT_TIMESTAMP","SET_SHOULD_HIDE_VIDEOCHAT_CONTROLS","SET_IS_GROUP_CHAT","SET_IS_IN_VOYEUR_MODE","SET_GROUP_CHAT_PARTICIPANTS","ADD_GROUP_CHAT_PARTICIPANT","REMOVE_GROUP_CHAT_PARTICIPANT","SET_GROUP_CHAT_CLIENTNAME","SET_IS_AUTOPLAY_RESTRICTED","setQuality","openFullscreen","closeFullscreen","setCam2CamActive","setCam2CamInactive","setCam2CamCameras","setCam2CamSelectedCamera","resetCam2CamSelectedCamera","cam2CamMinimize","cam2CamMaximize","setCam2CamStatus","setShouldHideVideochatControls","setInformation","resetInformation","setPreChatInformation","resetPreChatInformation","openVideochat","closeVideochat","setType","resetType","setInitialVideoChatType","resetInitialVideoChatType","setVideoChatTimeLimit","setVideoChatTimeLimitBelowThreshold","setLivePreviewTimeLimit","setLivePreviewTextTimeLeft","setLivePreviewTextTimeLimit","setHasAudio","setIsMutedByClient","setIsInitiallyMuted","displayInitiallyMutedHint","hideInitiallyMutedHint","setPlayingStatus","setInitialResolution","setIsMobileMenuOpen","setShouldRenderOnlyVideochat","setExitEvent","resetExitEvent","setResumeChatTimestamp","setIsGroupChat","setIsInVoyeurMode","setGroupChatParticipants","addGroupChatParticipant","removeGroupChatParticipant","setGroupChatClientName","setIsAutoplayRestricted","selectedCameraId","informationType","preChatInformationType","CONTENT_PARTNERS_CHAT","isInVoyeurMode","VOYEUR_CHAT","LIVECHAT","isGroupChat","GROUP_CHAT","lastSuccessfulType","initialVideoChatType","previousTimeLeft","isTimeLeftBelowThreshold","isMobileMenuOpen","isInitiallyMuted","isInitiallyMutedHintDisplayed","exitEvent","resumeChatTimestamp","concat","foundIndex","participant","index","getFeatures","store","hasFavoriteFeature","hasContactNoteFeature","hasGiftsFeature","hasToyControlFeature","hasImageUploadFeature","hasAudioMessageFeature","hasClientName","getShowCensoredContent","getOptions","getSwitchToPortraitWidth","getTip","getInitialVideochatVolume","getPreloader","getUpdateBrowserLink","getAnalyticsKey","getCensoredContentImage","LEVEL","GroupTimestamp","CONTENT_UPDATE_TYPE","MessengerSpecificErrorCodes","VXControlCodes","loggerName","details","format","JSON","stringify","canLogTrace","level","TRACE","canLogDebug","DEBUG","canLogWarning","WARNING","getLogger","ERROR","canLogError","console","log","debug","trace","player","saga","component","loggers","PlayModes","getPlayerHandler","onVolumeChange","PlayerService","listeners","onVolumeChangeListener","onPlayerSwitch","onPlayerSwitchComplete","onError","onSendMetrics","info","onSendMetricsListener","playMode","AUTO_PLAY_MUTED","PROMISE_PLAY_MUTED","onInitiallyMutedListener","onPlayStart","stream","playStartListener","onPlayStop","playStopListener","onPlayInfo","onPlayInfoListener","onPlayError","playErrorListener","onCameraOn","isCameraStarted","cameraOnListener","onCameraOff","cameraOffListener","onCameraDenied","cameraDeniedListener","onPublishStart","onPublishStop","onSelectInput","videoInputs","onSelectingCameraListener","Promise","resolve","cameraSelectionResolve","getInstanceId","createPlayer","container","initialVolume","factories","waitingTimeout","reloadCallback","playerContainer","closePlayer","handler","volume","getPlayerContainer","reloadPlayer","mutePlayer","setVolume","play","sources","startCamera","configuration","hasCamera","then","cameraConfig","catch","updateCamera","newConfig","publishCamera","targets","published","publish","e","selectCamera","camera","selectedVideoDevice","stopCamera","unpublish","destroy","stopPlayer","stop","getService","playerService","services","service","push","destroyService","registerCameraOnListener","listener","registerCameraOffListener","registerCameraDeniedListener","registerPlayErrorListener","registerPlayStartListener","registerPlayStopListener","registerVolumeChangeListener","registerInitiallyMutedListener","registerSelectingCameraListener","registerPlayerInfoListener","registerSendMetricsListener","BackenPayloadTypes","QUERYSINGLE","dollarGiftStaticData","DomCustomClass","resetChatInterval","loginWaitingTime","shouldHideVideoChatControlsTimeoutTime","intervalBetweenClicks","clickCountLimit","emoticonSize","large","MESSAGE_LINE_SEPARATOR","TOY_MESSAGE_SIZE","TOY_SECTION_HEIGHT","ESC_KEY_CODE","ENTER_KEY_CODE","ARROW_UP_KEY_CODE","ARROW_DOWN_KEY_CODE","creditsDeprecatedName","receivedMessageAndImageWrapperMarginLeft","receivedMessageAndImageWrapperPaddingRight","mentionSpecialCharacter","messageFontSizePercentage","defaultInstanceId","constants","InstanceContext","CHAR_BEHIND_GIFTS","versionNumber","emoticonCodeToPrintableChar","codePoint","parseInt","substring","String","fromCodePoint","itemToRegex","item","replace","getEmoticonsRegexp","getEmoticonsPattern","reduce","prevResult","emoticon","length","getEmoticonsShortcuts","getGiftEncoding","toString","getGiftDecoded","getRegexForMessage","specialChars","pattern","chars","getEmoticonClass","getSpecialCharactersRegex","giftIcons","mentions","specialCharactersPattern","RegExp","getTranslatedGiftName","giftTranslation","translation","findEmoticonWithRegex","callback","matchArr","start","regexp","exec","translationWithValues","values","keys","accumulator","getTimestamp","timeUnit","add","valueOf","getSimplifiedDate","date","checkIfMessageIsConsecutive","messageIndex","currentMessage","prevMessage","isSystem","dateCreated","isTextSession","msgType","hasSameChatSession","isConsecutiveFromUser","username","isConsecutiveFromModel","direction","in","isConsecutiveFromClient","out","checkIfMessageIsLastConsecutive","nextMessage","checkIfMessageIsSolo","getGroupTimestamps","groupTimestamps","SIXMONTHSAGO","THREEMONTHSAGO","TWOMONTHSAGO","ONEMONTHAGO","THREEWEEKSAGO","TWOWEEKSAGO","ONEWEEKAGO","YESTERDAY","TODAY","getTodayTimestamp","getOrganizedMessages","currentChatId","messagesGroupedByDay","forEach","organizedMessages","groupedMessages","group","referenceMessage","isSystemMessage","getTimestampForMessage","toDate","getTime","Date","getGroupTimestampForMessage","timestamp","withTwoDecimals","toFixed","getDifference","base","result","reconcileMessages","existingMessages","historyCommands","recentMessagesMaxLimit","commands","slice","command","contentType","content","params","isAudio","mediaType","isImage","isImageUrl","link","AUDIO","audioM4a","audioMp3","audioOgg","IMAGE_URL","getReceivedTextMessage","isMessageFromChat","IMAGE","TEXT","imgSrcSet","imgWidth","imgHeight","partialMessage","messageId","messageKey","getDateCreatedForMessage","time","IN","isDeleted","isFromHistory","chatID","hashify","isMobilePhone","isMobile","isTablet","isMobileOrientationLandscape","orientationAngle","Math","abs","screen","orientation","angle","encodeForChatCommunication","encodeForMessengerCommunication","isFromChat","chatEncoding","getTextMessageToSend","useChat","giftIdRegex","patternToReplaceWith","getGiftsFromMessage","giftIds","matches","match","sortBy","map","getGiftPages","bundleTabTitle","translatedGifts","giftPages","category","getItemTranslation","categoryId","active","inventoryGifts","giftBundlePage","bundle","initialPrice","getInitialBundlePrice","price","page","giftFromBundle","g","getOnlineStateFromResponseParams","multi","TRUE","single","supportsSoftChat","soft","preview","supportsVoyeurChat","supportsVoyeurToPrivateChat","voyeur2s","supportsToyControl","toy","messageOpacity","mapPositionToOpacity","isNaN","getChatConfig","messengerProperties","host","server","clientId","playerVersion","VERSION","version","pauseSupport","ignoreUnload","initData","getResolutionFromChatResponse","chatResponse","getChatFromChatResponse","toISOString","getShouldDisplayIcon","shouldDisplayIcon","getPreselectedOneClickAmount","expectedAmount","retVal","acc","origDiff","max","apply","getMessengerNode","document","querySelector","getWindowDimensions","windowSizeIsBogus","documentElement","body","getElementsByTagName","innerWidth","clientWidth","innerHeight","clientHeight","isOutOfMoneyInformationDialog","OUT_OF_MONEY","OUT_OF_MONEY_ONE_CLICK_RECHARGE","isLoadAccountUserPrompt","userPromptType","LOAD_ACCOUNT","LOAD_ACCOUNT_AUTO_RECHARGE","LOAD_ACCOUNT_ONE_CLICK","getValueByLanguage","getTranslation","storedTranslations","defaultTranslation","shouldResetChat","clickCounter","lastClickTimestamp","clickCount","onClick","currentTimestamp","timeElapsed","getClickCount","getTransitionTimeInMilliseconds","timeInSeconds","hasHookConfigured","hook","hasExceededTextLimit","convertToToyMessage","toyOption","activeImage","inactiveImage","imageUrlDeactivated","isDefault","getCameraCloseButton","cameraCloseButton","createElement","className","setAttribute","getFormattedDuration","duration","round","floor","queryString","join","getPrechatByErrorCode","codesWithoutPrechat","NO_CREDIT_VIDEOCHAT","codesMapping","GUEST_OFFLINE","PREVIEW_OFFLINE","HOST_OFFLINE","MODEL_IS_OFFLINE","HOSTSINGLE","PRIVATE_CHAT","PREVIEW_SINGLE","MODEL_IS_IN_PRIVATE_CHAT","PREVIEW_ACCESS_DENIE","CHARGE_ACCOUNT_OR_VIP","PREVIEW_LIMIT_EXCEEDED","LIMIT_REACHED","PREVIEW_LIMIT_HOUR","PREVIEW_LIMIT_HOST","FSKDENIED","VERIFY_AGE","PREVIEW_FSK_DENIED","SOFT_CHAT","PREVIEW_DISABLED","NOT_AVAILABLE","CONNECTION_ERROR","getColorForUsername","alreadyDefinedColor","coloredUsername","first","query","includes","startsWith","hasActiveMentions","computeMessageFontSize","shouldIncreaseMessageFontSize","fontSize","defaultPreferenceStore","getPreference","preferencesKey","localStorage","getItem","parse","preferenceValue","parseFloat","setItem","toggle","element","onChange","func","onchange","args","utils","getMessenger","getWindowToggleState","selection","getUserPrompts","hasLoadAccountUserPrompts","prompt","SEND_ANONYMOUS_TIP","getActionResponse","getMessages","findMessage","predicate","getFailedMessages","shouldResendFailedMessages","getEmoticons","getModalContent","getMessengerLoadingStatus","isMessengerLoading","LOADING","getContactNote","isContactNoteOpen","hasContactNoteText","isAnyUserPromptOpen","some","CLOSE_CHAT","isDropDownMenuOpen","getActiveGift","getActiveEmoticon","getActiveMention","mention","getEditorState","areAnyUserPromptsOpen","wasRequestedAnImageUpload","requestImageUpload","isTipPromptOpen","SEND_TIP","getToyOptions","getActiveToyOption","isAnySectionOpen","windowState","areAnyPromptsOpenInResponsiveMode","areUserPromptsOpen","getLastMessage","orderBy","isAnyTextInEditor","getShouldSendMessage","getSecondsElapsed","getGroupChatColors","getMentionQuery","getFocusedMentionOption","focusedMentionOption","getModel","getModelMotto","getModelName","getModelProfilePicture","getPartner","getOnlineState","isModelSupportingPrivateChat","isModelSupportingSoftChat","isModelSupportingToyControl","isModelSupportingTip","getLiveChatPrice","getVoyeurCamPrice","hasPrices","getMessagePrice","hasFreeModelMessages","hasFreeModelChatDuration","getFreeModelChatDuration","getSession","getSessionId","getCurrency","getChat","getExternallyProvidedChat","externallyProvided","getChatId","getChatFeatures","hasFreePlatformChatDuration","getGifts","getActiveGifts","filter","getGiftCategories","getLastRechargedAmount","getOneClickRecharge","getOneClickRechargeAmounts","getOneClickRechargeDefaultAmount","getWebtoken","getChannelId","getUploadMediaUrl","hasFreePlatformMessages","getUser","getTranslationForErrors","getNotMutedClientVolume","getLanguage","getUserKey","isUserOnline","getShouldIncreaseMessageFontSize","getVideoChat","getInformationType","LIVECHAT_SESSION_ENDED","EJECTED","VOICECALL_ENDED","ERROR_OCCURRED","getPreChatInformationType","getInitialResolution","getVideoChatQualityBoundaries","getVideoChatType","videoChatType","FREECHAT","LIVE_PREVIEW","isVideoChatInFreeMode","isInPreview","isInFreeChat","isVideoChatInGroupMode","VOYEUR_PRIVATE_CHAT","getLastSuccessfulVideoChatType","getInitialVideoChatType","getVideoChatIsMutedByModel","getVideoChatIsMutedByClient","displayVolumeAsInitiallyMuted","isCam2CamEnabled","isCam2CamMinimized","getCam2CamCameras","getCam2CamSelectedCamera","find","deviceId","getVideoChatTimeLeft","isVideoChatTimeLeftBelowThreshold","getVideoChatPreviousTimeLeft","getLivePreviewTextTimeLimit","getLivePreviewTextTimeLeft","shouldRenderPreChatInformationDialog","canRenderInformationDialog","shouldRenderRegularInformationDialog","canRender","isExiting","isStarting","videoChat","NO_DOWNSTREAM","getExitEvent","isInAVSMode","shouldRenderPreloader","starting","avsMode","isVideochatPlaying","getGroupChatParticipantsNumber","getGroupChatParticipants","getGroupChatClientName","shouldRenderGroupChatParticipants","getInstanceIds","getFullScreenInstance","getGiftBundles","giftBundle","isGiftButtonVisible","hasGiftsConfigured","getTranslatedGifts","getCountdownWarning","playing","isInteractive","hasModelAllowedText","isVoyeurPrivate","isPreview","textTime","isStreamStarting","interactive","toggleState","canInitiateLiveChat","isVideoStarting","canInitiateLivePreview","supportsLivePreview","canInitiatePrivateChat","hasPrivateChatFeature","isInFreeChatMode","canInitiateVoyeurChat","hasVoyeurCam","canInitiateVoyeurToPrivateChat","supportsVoyeurPrivateChat","canInitiateCam2Cam","isVideochatOpen","hasCam2CamEnabled","isPartnerOnline","hasCam2CamFeature","hasActionButtons","canLive","canPreview","canPrivate","canVoyeur","canCam2Cam","shouldRenderMotto","isVideochatOnFullscreen","hasMotto","hasActionSection","hasReceivedPrices","isExternallyProvided","hasActionSectionInProfile","hasActionSectionButtons","hasActionSectionUnderTextbox","isVideoOpen","hasActionSectionInDropDown","isOffline","hasPopupsFeature","shouldRenderExitingInformationDialog","hasExit","shouldCloseMessenger","data","hasMultipleInstances","shouldRenderPrechat","shouldRenderDialog","hasOnClickOutsideConfigured","hasNote","isOnFullscreen","hasExternalChat","canFavorite","isCountdownOpen","shouldRenderAVSCam2CamPopup","cam2CamActive","shouldCloseMobileKeyboard","getActiveMessages","isFullScreenActive","startPositionForSlicing","hasFreeMessages","hasPlatformMessages","hasModelMessages","hasPlatformChatDuration","hasModelChatDuration","hasModelPictureInProfile","hasProfilePicture","hasTipping","isChatExternallyProv","isToySupportedByModel","hasToyFeature","hasToyControlButton","hasToy","isVideoOnFullscreen","shouldRenderToySectionHeader","isToyOpen","isResponsiveActive","shouldShowTipping","isSupportingTip","hasHistoryFeature","isInGroupChatMode","canUploadImages","isGroupChatActive","canSendAudioMessages","shouldDisplayMessageSectionButtons","hasEmoticonsFeature","hasSendMessageFeature","hasOnlySendButton","getMentionOptions","modelName","hasCustomMentionSection","shouldDisplayCustomMenu","areAllPopUpsClosed","isGiftSectOpen","isEmoticonSectOpen","isToySectOpen","shouldUseDropdownAnimation","getClientVolume","getPlatformProps","getHooks","geHook","hookName","VXMessengerWrapper","div","attrs","VersionBox","props","theme","createMessengerActionType","MESSENGER","OPEN_MESSENGER","CLOSE_MESSENGER","SET_SHOULD_SEND_MESSAGE","SET_SECONDS_ELAPSED","SET_IS_RECORDING_AUDIO_MESSAGE","SET_IS_MIC_ENABLED","ADD_MESSAGE","INSERT_ALL_MESSAGES","UPDATE_MESSAGE","REMOVE_ALL_MESSAGES","REMOVE_MESSAGE","UPDATE_IMAGE_MESSAGE_WHEN_LOADED","ADD_FAILED_MESSAGE","CLEAR_FAILED_MESSAGES","SET_SHOULD_RESEND_FAILED_MESSAGES","SET_ACTIVE_GIFT","SET_ACTIVE_EMOTICON","SET_ACTIVE_MENTION","SET_FOCUSED_MENTION_OPTION","RESET_FOCUSED_MENTION_OPTION","RESET_SYMBOLS","SET_EMOTICONS","SET_IS_TEXT_ENABLED","SET_MODAL_CONTENT","RESET_MODAL_CONTENT","SET_ACTION_RESPONSE","RESET_ACTION_RESPONSE","SET_IS_RESPONSIVE","OPEN_CONTACT_NOTE","CLOSE_CONTACT_NOTE","SET_CONTACT_NOTE","RESET_CONTACT_NOTE","OPEN_EMOTICON_SECTION","CLOSE_EMOTICON_SECTION","OPEN_GIFT_SECTION","CLOSE_GIFT_SECTION","OPEN_TOY_SECTION","CLOSE_TOY_SECTION","TOGGLE_TOY_SECTION","OPEN_MENTION_SECTION","CLOSE_MENTION_SECTION","ADD_MENTION","OPEN_USER_PROMPT_SECTION","CLOSE_USER_PROMPT_SECTION","RESET_USER_PROMPTS","ANSWER_USER_PROMPT_SECTION","OPEN_COUNTDOWN_WARNING","CLOSE_COUNTDOWN_WARNING","CLOSE_SECTIONS","TOGGLE_DROP_DOWN","CLOSE_DROP_DOWN","SET_MESSENGER_LOADING_STATUS","SET_HAS_EDITOR","OPEN_VERSION","CLOSE_VERSION","SET_STORED_EDITOR_STATE","REQUEST_IMAGE_UPLOAD","RESET_IMAGE_UPLOAD_STATUS","CLOSE_LOAD_ACCOUNT_USER_PROMPTS","ACTIVATE_TOY_OPTION","SET_TOY_OPTIONS","INACTIVATE_TOY_OPTION","INACTIVATE_TOY_MESSAGE","SET_HAS_TOOLTIP_OPEN","CLOSE_TOY_OPTION_TOOLTIP","SET_GROUP_CHAT_COLORS","SET_MENTION_QUERY","RESET_EDITOR_STATE","openMessenger","closeMessenger","addMessage","setMentionQuery","updateImageMessageWhenLoaded","insertAllMessages","removeAllMessages","removeMessage","setShouldSendMessage","setSecondsElapsed","setIsRecordingAudioMessage","setIsMicEnabled","addFailedMessage","clearFailedMessages","setShouldResendFailedMessages","setEmoticons","setIsTextEnabled","setModalContent","resetModalContent","setActionResponse","resetActionResponse","openContactNote","closeContactNote","setContactNote","resetContactNote","openEmoticonSection","closeEmoticonSection","openGiftSection","closeGiftSection","toggleToySection","closeToySection","openMentionSection","closeMentionSection","toggleDropDown","closeDropDown","openUserPromptSection","closeUserPromptSection","openCountdownWarning","closeCountdownWarning","resetUserPrompts","answerUserPromptSection","closeSections","setMessengerLoadingStatus","setHasEditor","setIsResponsive","openVersion","closeVersion","setActiveGift","setActiveEmoticon","setActiveMention","setFocusedMentionOption","resetFocusedMentionOption","resetSymbols","setStoredEditorState","resetImageUploadStatus","closeLoadAccountUserPrompts","setToyOptions","activateToyOption","inactivateToyOption","inactivateToyMessage","setHasTooltipOpen","closeToyOptionTooltip","setGroupChatColors","resetEditorState","usernameColor","isOnLoading","unshift","shouldResend","hasAnySectionOpen","hasTooltip","hasTooltipOpen","unlockedBy","optionId","WrappedComponent","render","Consumer","context","mapStateToProps","mapDispatchToProps","additionalHOCs","hocs","keyDownListener","event","ctrlKey","altKey","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","selectors","hasDomIdentifiers","classes","exitingClassNames","newClasses","DomIdentifier","ModalInformationDialogWrapper","ModalInformationDialog","Picture","img","PictureWrapper","size","isForGroupChatMentions","isGroupChatMode","hasCursorPointer","PictureOverlay","hasOverlay","picture","src","Tooltip","children","isHtml","place","isLight","effect","isSolid","clickable","isClickable","delayHide","ProfilePictureWrapper","hasOnProfileClick","profilePictureWithTooltip","tooltipText","onExit","onRecharge","onVideoChatAction","isVideoChatOpen","onExitPopupAction","isExitPopupOpen","onAgeVerification","onModelStatusChange","onSupportedVideoChatTypes","videoChatTypes","onFailedChatConfig","onFailedWebToken","preferenceStore","appService","AppService","onClickProfile","modelPicture","isModelOnline","ButtonSection","ContentElement","ContentWrapper","ContinueButtonWrapper","InformationDialogWrapper","isMobileLandscape","InformationDialog","OCRInformationDialogWrapper","TextElement","LivePreviewTextElement","TitleElement","CancelButton","Content","TimerWrapper","CloseWrapper","closeButtonWrapper","iconComponent","iconClassName","tooltipComponent","hoverText","CloseButtonType","BaseCloseWrapper","MessengerCloseWrapper","MessengerCloseButton","MobileHeaderCloseWrapper","InformationDialogCloseWrapper","InformationDialogCloseButton","GroupChatHeaderCloseWrapper","ImageModalCloseWrapper","ImageModalCloseButton","PreChatInformationCloseWrapper","PreChatCloseButton","ActionResponseCloseWrapper","ActionResponseCloseButton","FullscreenHeaderCloseWrapper","FullScreenMessengerCloseButton","ScrollPosition","types","hasCloseButtonFromStore","Error","closeButtonType","MOBILE_HEADER","INFORMATION_DIALOG","PRECHAT_INFORMATION_DIALOG","ACTION_RESPONSE","FULLSCREEN_HEADER","IMAGE_MODAL","GROUP_CHAT_HEADER","SelectedButtonColor","PerfectScrollbar","handleScroll","scrollTimer","clearTimeout","setTimeout","onScroll","isOnTop","target","TOP","isOnBottom","BOTTOM","BETWEEN","handleWheel","preventDefault","stopPropagation","scrollTop","railY","getElementsByClassName","PerfectScrollbarContainer","RailYClassName","thumbY","railYHeight","ThumbYClassName","thumbYHeight","offsetTop","refCallback","ref","scrollBarRef","_container","style","hasFullWidth","hasFullHeight","shouldUnsetScroll","scrollDown","updateScroll","scrollHeight","scrollUp","scrollYTo","anchorId","containerY","getBoundingClientRect","y","anchorElement","getElementById","anchorY","config","InformationDialogWrapperComponent","onCloseClick","closeTooltip","toUpperCase","onButtonClick","buttonText","cancelText","CheckedIconWrapper","span","withDefaults","strokeColor","hoverStrokeColor","hoverFillColor","defaultProps","PrivateChatInvitationAnswer","SelectionButton","selected","selectedButtonColor","BLACK","backgroundHoverColor","SelectionButtons","onClickOption","selectOptionInState","hasSubmitFeature","selectedOption","getSelectedOptionFromState","onSelect","onSubmit","submit","answer","OK","setState","oldState","label","selectionButtonProps","hasSubmit","submitLabel","connect","msnSession","settings","agent","WEB","useWS","jsonp","initdata","VX_MESSENGER","commandHandler","handleCommandResponse","updateLanguage","logout","SUCCESS_EXIT_CODE","closeConnection","sendCommand","ApiService","receiveOKListener","receiveErrorListener","registerOKListener","registerErrorListener","addNewConnection","apiService","createChatActionType","CHAT_SAGA_WEBSOCKETS","isSagaAction","REQUEST_CHAT","RECEIVE_CHAT","requestChat","receiveChat","requestChatSaga","hasFreeChatDuration","subaction","CMDP_QUERYBACKEND","receiveChatSaga","resolution","ChatStatus","AdjustCam2CamType","chatStatus","getChatHandler","onChatStop","exitCode","exitMessage","NOT_REUSABLE","ChatService","chatStopListener","limitsChangeListener","VIDEOTIMELIMIT","video","onChatPause","chatPauseListener","onChatResume","sourceSet","chatResumeListener","onMessage","from","audioSrc","onMessageListener","onAbilityUpdate","abilityUpdateListener","onQuery","queryListener","onSingleModeUpdate","singleModeUpdateListener","onTextMuteUpdate","textMuteUpdateListener","onStreamSourceUpdate","updatedSourceSet","onStreamSourceUpdateListener","onAudioMuteUpdate","onAudioMuteUpdateListener","onLimitUpdate","param","limits","onVideoLimitWarningUpdate","isBelowThreshold","getChargeInfo","chargeInfo","chargeInfoListener","videoLimitWarningListener","onUserEvent","userEventListener","initializeChat","init","chatInitListener","INITIALIZED","destroyChat","initializing","chatConfig","isNewChatConfig","existingConfig","getNewChat","closeChat","getExistingOrBuildAChat","chatOrError","isConfigNew","isExistingChatNotReusable","BAD_CHAT_CONFIG","sendQueryResponse","response","startText","sendMessage","isError","sendMediaFile","file","getStream","previewMode","isOurChat","streamConfig","startStream","startPrivateChat","startSingle","stopUpstream","getUpstream","startUpstream","isUserIntended","userIntendedExitCode","CLOSING","CLOSED","sendTip","sendMetrics","sendCharge","sendAudioState","enabled","audioState","uploadImage","imageUploadUrl","uploadUrl","post","set","end","registerLimitsChangeListener","registerVideoLimitWarningListener","registerAbilityUpdateListener","registerSingleModeUpdateListener","registerQueryListener","registerChatStopListener","registerOnMessageListener","registerChatPauseListener","registerChatResumeListener","registerTextMuteUpdateListener","registerAudioMuteUpdateListener","registerStreamSourceUpdateListener","registerChargeInfoListener","registerUserEventListener","registerChatInitListener","chatService","takePattern","actionType","RECEIVE_CHAT_ERROR","CHAT_SAGA_COMMON","onReceiveChatError","getChatSaga","getChatInstanceSaga","requestNewConfig","chatConfError","chatConf","isChatExternallyProvided","chatInstance","createRechargeActionType","RECHARGE","RECHARGE_EXTERNAL","RECHARGE_FROM_CHAT","RECHARGE_FROM_CHAT_SUCCESS","RECHARGE_FROM_CHAT_FAIL","rechargeExternal","rechargeFromChat","rechargeFromChatSuccess","rechargeFromChatFail","rechargeExternalSaga","rechargeFromChatSaga","chargingAmount","Credits","rechargeFromChatFailSaga","reason","isOneClickRechargeAvailable","BaseButtonWrapper","isFullScreen","isForActionSection","ActionSectionBaseButton","BaseButton","BaseButtonContent","BaseRowText","FirstRowText","SingleRowText","SecondRowText","VipSingleRowText","LiveChatButtonWrapper","LiveChatButton","liveChatPrice","liveChatButton","shouldRenderPrice","liveChatButtonWithTooltip","onLiveChatButtonClick","startVideoChatType","CLOSE_APP","CLOSE","createCloseActionType","closeApp","closeAppSaga","createUserPromptActionType","USER_PROMPT","OPEN_CLOSE_CHAT_PROMPT","OPEN_PRIVATE_CHAT_PROMPT","OPEN_SPY_PRIVATE_CHAT_PROMPT","OPEN_LOAD_ACCOUNT_ONE_CLICK_PROMPT","OPEN_ANONYMOUS_TIP_PROMPT","OPEN_TIP_PROMPT","OPEN_VERIFY_AGE_PROMPT","CLOSE_ALL_USER_PROMPTS","OPEN_CHOOSE_CAMERA_PROMPT","closeAllUserPrompts","openCloseChatPrompt","openPrivateChatPrompt","openSpyPrivateChatPrompt","openLoadAccountOneClickPrompt","openAnonymousTipPrompt","openTipPrompt","openVerifyAgePrompt","openChooseCameraPrompt","openPromptSaga","isTipOpen","CHOOSE_CAMERA","INVITE_PRIVATE_CHAT","privateChatText","initialChatId","isVideoChatInVoyeurMode","stopVideoChatPlayer","SPY_PRIVATE_CHAT","dealWithAnswerSaga","questionType","question","YES","stopVideoChat","closeUserPromptSaga","closeAllUserPromptsSaga","setSelectedCameraSaga","selectedCamera","SET_HOOKS","HOOKS","createHooksActionType","setHooks","createUIActionType","UI","CLICK_CLOSE_MESSENGER_BUTTON","DISPLAY_CONTINUE_WITH_LIVECHAT","CLOSE_PRECHAT_DIALOG","ACCEPT_TO_SPY_FROM_PRECHAT_DIALOG","displayContinueWithLiveChatDialog","clickCloseMessengerButton","closePrechatDialog","acceptToSpyFromPrechatDialog","triggerCloseMessengerSaga","displayContinueWithLiveChatDialogSaga","shouldDisplayContinueWithLiveChat","freeModelChatDuration","isVideoChatInPreviewMode","totalFreeChatDuration","previewTime","isVideoChatInFreeChatMode","PREVIEW_JUST_FINISHED","displayUserOfflineMessageSaga","shouldRenderUserOfflineInformation","OFFLINE_CONNECTION","reactToInformationDialogSaga","isOutOfMoneyInformation","hasLoadAccountPrompts","isExitingInformationType","isExitingInformation","lastCallArguments","triggerClickCloseButtonSaga","isCloseChatUserPromptOpen","triggerOpenCloseVideoChatSaga","openVersionSaga","initiallyMutedSaga","closePrechatDialogSaga","acceptToSpyFromPrechatDialogSaga","createCam2CamActionType","CAM2CAM","TOGGLE_CAM2CAM","MINIMIZE_CAM2CAM","MAXIMIZE_CAM2CAM","toggleCam2Cam","minimizeCam2Cam","maximizeCam2Cam","startCam2CamSaga","defaultWidth","initialVideoType","FullScreen","TopLeft","closeButtonElement","stopCam2CamSaga","adjustCam2Cam","MINIMIZE","MAXIMIZE","cam2camType","initialWidth","toggleCam2CamSaga","isCam2CamActive","subActions","DialogButtonColor","typesAllowedToSpyVoyeurs","commonChecks","isUserOffline","displayPrechatInformationDialogSaga","isModelInPrivateChat","offerSwitchingToVoyeurSpySaga","chatBasedChecksSaga","chatConfErrorCode","isModelSupportingVoyeurToPrivateChat","PRIVATE_CHAT_CAN_SPY","dialogType","isNotChargedNorVip","isSuccessful","VIDEOCHAT_SAGA","START_VIDEOCHAT_TYPE","RESUME_EXISTING_VIDEOCHAT","RESUME_PREVIOUS_VIDEOCHAT","RESUME_INITIAL_VIDEOCHAT","CREATE_VIDEOCHAT_PLAYER","PUBLISH_VIDEOCHAT_PLAYER","STOP_VIDEOCHAT_PLAYER","CLOSE_VIDEOCHAT_PLAYER","SWITCH_VOYEUR_PRIVATE_2_VOYEUR","SWITCH_VOYEUR_2_LIVECHAT","STOP_VIDEOCHAT","ON_TEXT_MUTED_UPDATED","DISPLAY_TOY_SYSTEM_MESSAGE","REQUEST_SEND_TIP","REQUEST_SEND_ANONYMOUS_TIP","CANCEL_STARTING_VIDEOCHAT_TYPE","onTextMutedUpdated","resumeExistingVideochat","resumePreviousVideochat","resumeInitialVideochat","switchVoyeurPrivate2Voyeur","switchVoyeur2LiveChat","displaySystemToyMessage","createVideoChatPlayer","publishVideoChatPlayer","closeVideoChatPlayer","requestSendTip","requestSendAnonymousTip","cancelStartingVideoChatType","startVideoChatTypeSaga","removeDialogsIfAnySaga","startGroupChatSaga","startLiveChatSaga","startFreeChatSaga","startLivePreviewChatSaga","startPrivateChatSaga","startVoyeurChatSaga","startVoyeurPrivateChatSaga","startChatWithoutStreamSaga","startContentPartnersChatSaga","resumeExistingVideoChatSaga","existingType","resumeVideoChatSaga","resumePreviousVideoChatSaga","previousType","resumeInitialVideoChatSaga","initialType","initiateChatSaga","singleMode","playTheStreamSaga","shouldOpenAnonymousTipPrompt","chatError","stopStreamIfVideoChatWasClosedSaga","createVideoChatPlayerSaga","notMutedClientVolume","stopVideoChatPlayerSaga","closeVideoChatPlayerSaga","publishVideoChatPlayerSaga","closeVideoChatSaga","stopVideoChatSaga","sendAnonymousTipFromVoyeurSaga","SUCCESSFUL","sendTipSaga","tipOption","tipValue","switchVoyeurPrivate2VoyeurSaga","isVideoChatInVoyeurPrivateMode","switchVoyeurToChatSaga","hasSendTipPromptOpen","logEntry","onExitingInformationTypeSaga","onTextMutedUpdatedSaga","displaySystemToyMessageSaga","slug","isNew","setIsMutedByClientSaga","onTimeIsOver","thickness","unfilledColor","filledColor","leftAngle","rightAngle","setTickHandler","clearTickHandler","setInterval","updateCurrentTime","onTick","clearInterval","prevState","timeLeftFromProps","currentTime","totalTime","componentDidUpdate","prevProps","resets","onUnmount","min","getLeftAngle","getRightAngle","styling","timeFormatter","NumberTimeFormatter","TextTimeFormatter","TimeFormatter","remainingTime","onVerifyAgeClick","outOfMoneyButtonClick","outOfMoneyOneClickButtonClick","selectedAmount","thankYouButtonClick","continueChatButtonClick","startVoyeurButtonClick","getInformations","modelname","oneClickRechargeAmounts","oneClickRechargeDefaultAmount","informations","THANK_YOU_ONE_CLICK_RECHARGE","lastRechargedAmount","THANK_YOU","infoDictionary","isLandscape","information","withOrientationChange","PreChatInformationDialogWrapper","PreChatInformationDialog","LinkElement","ONLINE_STATE_VALUES","getRgbColor","GREEN","BLUE","getRgbHoverColor","DialogButtonWrapper","DialogButton","DialogButtonContent","closeButtonText","buttons","otherContent","Cam2CamButtonWrapper","Cam2CamButton","Cam2CamDisabledButtonWrapper","disabled","Disabled","Cam2CamEnabledIndicator","cam2camButton","isSelected","tooltipProps","updateBrowser","updateBrowserTagLine","updateBrowserLinkText","disabledCam2CamButton","enabledCam2CamButton","onCam2CamButtonClick","onActionButtonClick","LiveChatPreviewButtonWrapper","LiveChatPreviewButton","LiveChatPreviewButtonContent","previewButton","previewButtonWithTooltip","PrivateChatButtonWrapper","PrivateChatButton","VipLivePreviewButtonWrapper","VipLiveChatPreviewButton","vipPreviewButton","vipPreviewButtonWithTooltip","VoyeurCamButtonWrapper","VoyeurCamButton","voyeurCamPrice","voyeurCamButton","voyeurCamButtonWithTooltip","ActionSectionWrapper","isForInformationDialog","buttonsVisibility","voyeurChat","ActionSection","buttonCount","count","isVisibile","buttonWidth","withResizeDetector","onChargeNowClick","onVipClick","onBecomeVIP","onAnswerToSpyingPrivateChat","acceptToSpy","livePreviewType","yesNoOptions","NO","privateChatCanSpyText","toLowerCase","voyeurPrice","live_preview_type","DEFAULT","hasVIPFeature","live_review_type","ImageUploaderWrapper","inputRefCallback","onFileSelect","RECEIVE_ERROR","HANDLE_ERROR","createHandleErrorActionType","onReceiveError","initActions","CMDP_LOGIN","CMDP_INIT","CMDP_GETCHANNELS","CMDP_GETCHANNELINFO","CMDP_GETONLINESTATE","subactionsForGetChat","actionsNeedingWebToken","CMDP_MSG","CMDP_SETCHANNELINFO","CMDP_SUPLOADPIC","hiddenErrorCodes","UNKNOWN_ERROR","receiveErrorSaga","NOT_ENOUGH_MONEY","INVALID_PARAMETER","INVALID_WEB_TOKEN","createImageActionType","REQUEST_SEND_IMAGE","RECEIVE_SEND_IMAGE_ERROR","requestSendImage","receiveSendImageError","requestSendImageSaga","FormData","append","URL","createObjectURL","chatResult","messageItem","queryParams","imageRequest","requestResponse","receiveSendImageErrorSaga","files","click","messageTypes","CHAT","SYSTEM","EntityType","createMessageActionType","MESSAGE","REQUEST_SEND_MESSAGE","REQUEST_SEND_VIBRATION_MESSAGE","RECEIVE_TOY_MESSAGE","REQUEST_SEND_AUDIO_MESSAGE","RECEIVE_SEND_MESSAGE","RECEIVE_MESSAGE_FROM_NOOP","RECEIVE_MESSAGE_FROM_CHAT","RESEND_FAILED_MESSAGES","requestSendMessage","requestSendVibrationMessage","requestSendAudioMessage","receiveMessageFromChat","receiveMessageFromNoop","receiveToyMessage","receiveSendMessage","resendFailedMessages","requestSendMessageSaga","isVibrationMessage","isAudioMessage","giftIdsFromMessage","toyContent","audioFile","File","textContent","shouldSendThroughVXControl","queryStringParams","CMDP_SUPLOADMEDIA","encodeURIComponent","strip","receiveMessageFromChatSaga","messagePayload","shouldHaveUsernameColor","receiveSendMessageSaga","OUT","receiveMessageFromNoopSaga","receivedMessageCommand","isChatActive","h_session_toy_stop","receiveToyMessageSaga","mess","defaultToyMessage","toyTranslation","toyOptionActive","toyMessage","resendFailedMessagesSaga","AudioAnalyser","setAudioSrc","audioBlob","blob","enableMic","record","onStop","mimeType","onData","handleDesktopVideoChat","handleDesktopFullscreen","containerWidth","handleDesktopPortraitVideoChat","handleDesktopLandscapeVideoChat","isPortrait","messengerVideoModeWidth","videoChatOptimalWidth","videoChatOptimalHeight","videoChatRatio","videoChatWidth","videoChatHeight","containerHeight","messengerVideoModeHeight","handleMobileVideoChat","handleMobileFullscreenVideoChat","handleMobilePortraitVideoChat","isVideoChat","originalVideoChatWidth","originalVideoChatHeight","isKeyboard","ActionResponseWrapper","ActionResponse","TextWrapper","actionResponseWrapperProps","defaultWrapperProps","wrapperProps","closeText","MessageSectionContainerWrapper","MessengerBox","hasText","MessengerSectionWrapper","MessengerSection","MessengerButtonsWrapper","hasButtonsMargin","MessengerBaseButton","isInverted","MessengerBaseButtonIcon","hasLeftSeparator","ToyControlBaseButtonIcon","ToyControlIcon","DropDownButton","DropDownContent","MessengerBaseButtonIconGroupWrapper","MessageSectionButtonsWrapper","expandDropdown","toggleEmoticonSection","toggleGiftSection","toggleToySectionAction","getBaseButtonContent","icon","responsiveBaseButtonIcon","getButtonWithIdentifier","identifier","EmoticonsButton","EmoticonButton","ImageUploadButton","SendTipButton","GiftButton","ToyButton","AudioMessageButton","isToyButtonVisible","onEmoticonClick","onTipClick","onGiftClick","onToyClick","requestUpload","getCurrentContent","getPlainText","editorRef","readOnly","placeholder","handleBeforeInput","handleReturn","handlePastedText","onUpArrow","onDownArrow","autoComplete","autoCorrect","autoCapitalize","spellCheck","GiftDecoratorWrapper","url","contentState","entityKey","getEntity","getData","entity","foundGift","giftItem","Emoticon","MentionDecoratorWrapper","contentEditable","ArrowDirection","closeMobileKeboardForSmallResolutions","current","blur","getCompositeDecorator","strategy","EditorContainer","handleEmoticon","handleGift","handleMention","updateEditorState","getStoringEditorState","getGiftsFromEditorState","updateStore","oldText","onTextChanged","throttledStoreUpdate","getCursorPosition","getSelection","getFocusOffset","char","handled","blockKey","getStartKey","existingText","getBlockForKey","getText","newText","substr","emoticonRegexp","getEditorStateWithEntity","EMOTICON","forceSelection","getSelectionAfter","focusOffset","mentionPosition","getCharBehindIcon","emoticonShortcut","emoticonItem","insertedChars","entityType","currentEditorState","mutabilityType","createEntity","getLastCreatedEntityKey","anchorKey","anchorOffset","focusKey","hiddenTextUnderEntity","GIFT","MENTION","newContentState","replaceText","newSelectionState","insertText","newEditorState","selectedEntity","blocks","getBlocksAsArray","lastBlock","block","previousPosition","plainText","findEntityRanges","character","getType","onTextMessageAdd","shiftKey","addEmoticon","getEditorStateAfterAddingEntity","addGift","addMention","startPosition","getAnchorOffset","startPositionForMention","startPositionForCustomMention","endPosition","pastedText","html","pastedGiftEntitiesData","getGiftEntitiesDataFromPastedHTML","setContentFromTextAndGiftIds","contentGiftsEncodedIds","emoticonsChars","giftSplittingDelimiter","emoticonSplittingDelimiters","emoticonsAndGiftSplittingDelimiters","emoticonChar","textSplitByEmoticonsAndGifts","split","giftIndex","textSplitAndDecoded","textEmoticonOrGiftId","emoticonCharIndex","emoticonIcons","giftsEncodedIds","splitEntity","moveFocusToEnd","createEmpty","dropDownOpen","storedEditorState","cursorPosition","slicedText","lastIndexOf","mentionOptions","shouldOpenMentionSection","shouldResetEditorState","encodedGiftId","giftsEntitiesData","wrappingElement","innerHTML","trim","querySelectorAll","entityData","getAttribute","contentBlock","findEntityRange","MessageGiftWrapper","hasEnlargedContent","MessageGift","DefaultEditorWrapper","DefaultEditor","GiftsWrapper","TotalPriceWrapper","textarea","RemoveGiftWrapper","insertedGiftsPrice","insertedGifts","onRemoveGiftClick","onKeyDown","updateStoredEditorState","onGiftTextChanged","hasModifiedText","hasModifiedGifts","getGiftText","keyCode","setInsertedGifts","prevText","latestCharacter","shouldCloseMentionSection","activePulsation","animation","Wrapper","BaseIcon","RecordingIcon","SendIcon","AudioAnalyserContent","RecordingAreaContent","CountDownWrapper","CancelRecordingWrapper","countDown","recordingMinutes","recordingSeconds","stopRecording","getMinutes","incrementSecondElapsed","resetSecondsElapsed","countdown","SendMessageButton","hasFreeMessagesPlaceholder","placeholderWithPrice","defaultEditor","responsiveDropDown","sectionButtons","shouldRenderAudioButton","shouldRenderSendMessageButton","onStartRecording","hasContent","giftText","activeGift","activeEmoticon","activeMention","withTheme","ProfileInfoInnerWrapper","ProfileNameWrapper","ProfileName","Motto","FeatureWrapper","ProfileOnlineBullet","FavoriteIcon","FavoriteButton","requestSetFavorite","isModelFavorite","createChannelInfoActionType","CHANNEL_INFO","REQUEST_GET_CHANNEL_INFO","RECEIVE_GET_CHANNEL_INFO","REQUEST_SET_CONTACT_NOTE","REQUEST_SET_FAVORITE","RECEIVE_SET_CHANNEL_INFO","requestGetChannelInfo","requestSetContactNote","onReceiveGetChannelInfo","onReceiveSetChannelInfo","setFavoriteAndContactNoteSaga","note","regularCustomer","requestGetChannelInfoSaga","requestSetChannelInfoSaga","receiveSetChannelInfoSaga","receiveGetChannelInfoSaga","freeMessagesCount","modelInfo","CMDC_CHANNELINFO","ualias","modelInfoPayload","mottoPayload","ContactNoteIcon","ContactNoteButton","onContactNoteClick","profileNameProps","onClickTitle","hasProfileClickHover","onClickProfilePicture","ProfileWrapper","Profile","FullscreenFooterWrapper","ProfileContainerWrapper","CountdownWarningWrapper","CountdownWarningContentWrapper","warningTranslations","OUT_OF_BALANCE","ONE_CLICK_OUT_OF_BALANCE","rechargeNowLink","onAnswer","outOfBalanceWarning","updateCountdownWarningTime","warnings","openRecharge","selectStyles","styles","boxSizing","bottom","zIndex","menu","provided","top","left","margin","padding","borderRadius","menuList","maxHeight","isFocused","cursor","getStylesForMentionSectionContainer","ModelMentionOptionWrapper","ModelName","onMouseFocus","focusedOption","optionWrapper","Option","Header","CustomMenu","participantsNumber","onModelClick","onCloseMenu","Menu","components","Control","NoOptionsMessage","innerProps","MentionSectionWrapper","CustomMentionSection","MentionSection","menuIsOpen","inputValue","getScrollDelta","targetRect","containerRect","handleMouseEnter","isMouseOver","handleMouseLeave","mouseFocusedOptionId","handleMouseFocus","handleKeyDown","handlers","handleArrowUp","handleArrowDown","handleEnter","previousOption","currentOptionId","optionsLength","currentFocusIndex","getPreviousOption","keyboardFocusedOptionId","nextOption","getNextOption","elemRef","shouldComponentUpdate","nextProps","nextState","menuElement","getMenuElement","optionElement","getOptionElement","menuRect","optionRect","scrollDelta","scrollTo","mentionsChanged","queryChanged","exitFullscreen","FullscreenHeaderWrapper","FullScreenHeader","ChatBoxWrapper","shouldLiftChatbox","shouldTrimChatbox","shouldApplyOverflow","ChatBox","ChatBoxBlanket","MessageItem","li","opacity","isGroupMessage","MessageList","ol","ImageUrlContentWrapper","a","ImageUrlTextWrapper","GroupChatParticipantsWrapper","createHistoryActionType","HISTORY","REQUEST_HISTORY","RECEIVE_HISTORY","INSERT_MESSAGES_TO_STORE","requestHistory","onReceiveHistory","insertMessagesToStore","requestHistorySaga","shouldShowHistory","numberOfMessages","CMDP_GETHISTORY","sort","DESC","limit","receiveHistorySaga","newMessages","insertAllMessagesSaga","GroupContentWrapper","GroupWrapper","showArrow","Group","GroupTextWrapper","TextArrow","datetime","momentDate","daysAgo","groupTimeLastWeek","textArrowClassName","informationText","isDayGroup","locale","diff","getChatGroupTime","onContentUpdate","hasSectionsInitiallyOpened","MessageEmoticonWrapper","MessageEmoticon","decodeURIComponent","ImageWrapper","ImageLoaderWrapper","Image","isHidden","getSquareImageDimension","maxAvailableWidth","getMaxAvailableWidth","LoaderWrapper","getImageLoaderSize","imageMinSize","ImageMessage","shouldHideImage","onClickImage","onLoad","isLoading","PlayerWrapper","ControlsWrapper","CurrentTimeWrapper","ProgressBar","ProgressBarKnob","currentPercentage","innerRef","audioPlayerBarRef","onMouseDown","calcClickedTime","clickPositionInPage","pageX","barStart","scrollX","barWidth","offsetWidth","clickPositionInBar","handleTimeDrag","clickedTime","persist","setClickedTime","updateTimeOnMove","eMove","audioRef","stopPlaying","startPlaying","setAudioTime","audioElement","setAudioData","pause","getModelMessageBackgroundColor","isGroupChatUserMessage","getClientMessageBackgroundColor","messageAnimation","MessageBase","hasImage","NotSystemMessageBase","isConsecutiveGroupMessage","GroupChatPictureWrapper","ClientMessage","shouldRenderAudioMessage","Message","GroupChatModelInfoWrapper","GroupChatModelName","ToyMessageWrapper","shouldApplyMargin","ToyMessage","ToyMessageInactive","FullscreenSystemMessage","MessageContentWrapper","TimeSection","ClientMessageWrapper","isLastConsecutiveGroupMessage","isSoloMessage","getClientMessagePadding","isModelMessage","isGroupUserMessage","isMessageWithJustOneEmoticon","FullscreenSystemMessageWrapper","ReceivedMessageAndImageWrapper","getReceivedMessagePadding","isContextWithoutProfilePicture","ReceivedMessageWrapper","getMaxWidthForReceivedMessage","ModelMessage","FullscreenReceivedMessageWrapper","GroupChatUsername","isFromClient","Logo","OptionImage","Text","DefaultToyMessage","isMessageActive","image","getReceivedMessageComponent","timeIndicatorComponent","shouldHavePicture","shouldRenderModelProfilePicture","messageContent","messageData","fullscreenMessage","receivedMessage","modelProfilePicture","groupModeReceivedMessage","hasTimeIndicator","SystemMessage","groupIndex","isMessageReceived","messageContext","isToy","isFromModel","isFromGroupUser","systemMessageComponent","fullscreenSystemMessageComponent","getSystemMessage","shouldRenderClientName","getClientMessageComponent","hasGroupChatInfo","getModelMessageComponent","groupMessageContent","getGroupChatUserMessage","getImgWidth","imgMessage","getImgHeight","prepareTextMessageForDisplaying","lines","line","replaceTextWithSpecialCharacters","messageLine","lineIndex","specialCharactersRegex","elementKey","isGiftMessage","emoticonRegex","emoticonMatch","emoticonCount","textWithoutEmoticonsAndSpaces","encoding","getMessagesToRender","groupedMessage","isGroup","getMessageListing","groupMessage","messageList","GROUP","getTextMessage","href","defaultMessageContent","MESSAGES","dayGroupedMessages","GroupChatParticipants","shouldRenderParticipants","FontSizeSwitcherWrapper","lightGreyColor","toggleFontSize","shouldDisplayFontSizeSwitcher","ArrowWrapper","arrowDirection","AnalyticsCategories","AnalyticsActions","DOWN","WindowContentWrapper","WindowWrapper","isWindowForUserPrompt","WindowBox","WindowTitleWrapper","LEFT","arrowCloseIcon","handleClose","customCloseIcon","windowTitleIcon","responsiveTitle","nonResponsiveTitle","hideHeader","EmoticonWrapper","EmoticonStyle","emoticonClick","closeSection","GiftItem","GiftDetail","GiftName","GiftWrapper","Gift","Inline","InlineInitialPrice","InlineReducedPrice","isBundleGiftPage","GiftBundlePageTitle","GiftPageWrapper","GiftPage","activePage","GiftTabWrapper","GiftTab","giftPage","changeTab","PurchaseBundlePage","Footer","BundleName","ContainsText","PurchaseButton","PurchaseGiftsList","ul","PurchaseGiftItem","GiftBundleInformation","purchaseButtonText","purchaseGifts","onClose","onBundlePurchase","GiftPagesWrapper","GiftPages","GiftWindowWrapper","GiftWindow","GiftWindowBox","GiftPaginatorWrapper","GiftPaginator","BaseText","RegularText","BoldText","giftClassNames","1","2","3","4","giftTabs","giftClassName","activeIndex","activeGiftPage","isInventoryGiftPage","onBundleGiftClick","standardGiftPage","activeBundle","bundleGiftPage","bundleGifts","onBundlePageClose","shouldRenderBundleGiftPage","scrollbar","TooltipPlacement","initialize","newKey","triggerEvent","OPEN_GIFT_BUNDLES_PAGE","ANALYTICS","createAnalyticsActionType","openGiftBundlesPage","toySectionAnalyticsSaga","VIDEOCHAT","TOY_SECTION","contactNoteAnalyticsSaga","CONTACT_NOTE","giftBundlesAnalyticsSaga","GIFT_BUNDLES","muteModelAnalyticsSaga","MUTE_MODEL","fullscreenAnalyticsSaga","FULLSCREEN_VIDEOCHAT","REQUEST_PURCHASE_GIFT_BUNDLE","GIFTS","createGiftsActionType","requestPurchaseGiftBundles","requestPurchaseGiftBundleSaga","bundleId","activeBundleIndex","getFirstPageIndex","encodedBundleId","firstPage","ToySection","isReponsive","InlineOption","hasLimitedWidth","OptionsWrapper","ToyOption","canPlayOption","Lock","PlayingStatusWrapper","PlayingStatus","isAvailable","isLocked","durationText","ToyOptionWithTooltip","Title","h3","TooltipContentWrapper","AdvancedTooltipContent","TopContentWrapper","horizontal","BottomContentWrapper","LeftContentWrapper","vertical","RightContentWrapper","DownArrow","UpArrow","LeftArrow","RightArrow","InitiallyLockedToyNames","getRectWithIntegralValues","rect","right","doInAnimationFrame","requestAnimationFrame","isUnmounted","node","findDOMNode","grabDimensionsAndCorrections","isBoundRectChanged","updateCorrections","getViewportCorrections","placement","boundingRect","viewPortDimensions","getBoundingRect","isCorrected","shouldApplyPositiveCorrection","shouldApplyNegativeCorrection","spaceAvailableToLeft","spaceAvailableToRight","RIGHT","canAdjustVertically","spaceAvailableToTop","spaceAvailableToBottom","contents","tooltipTitle","updateBoundingRect","limitingContainerRef","clientRect","HeaderAlignment","getOption","isOptionLocked","getLockedTooltipTexts","texts","DildocontrolIntensityHigh","DildocontrolIntensityRandom","lockedTooltipTexts","imageUrlWhite","hoverImage","tooltipImage","isToySectionMinimizied","ToySectionHeader","InlineArrow","InlineTitleElement","InlineLink","UP","onToyHeaderClick","hasActiveOption","onOptionClick","toySectionRef","onGetReference","onRefCallback","activeToyOption","isAnotherOptionActive","giftClick","giftShortcut","UserPromptWrapper","UserPromptContent","UserPromptTitle","CloseIcon","GetTitle","questions","closeChatTitle","loadAutoRechargeTitle","defaultRecharge","defaultTitle","titles","UserPromptTipWrapper","UserPromptTips","UserPromptTipTitle","UserPromptTipSubTitle","UserPromptTipButton","TipImage","imageSize","TipPrice","isAnonymous","getAnnonymousTip","defaultGift","getDefaultGift","onSelectCamera","CameraOption","FrontBackWrapper","IconWrapper","FrontBackIconWrapper","LabelWrapper","FrontBackLabelWrapper","CheckedWrapper","NormalCameraOption","FrontBackCameraOption","isFront","isBack","CamerasSection","FrontBackCamerasWrapper","RegularCamerasWrapper","getCameraOptions","frontAndBack","others","camerasSplit","loadAccountComponent","loadAccountOneClickComponent","verifyAgeComponent","closeChatComponent","invitePrivateChatComponent","contentProvider","items","transitionedItems","itemKey","timeout","classNames","unmountOnExit","getTitle","enter","enterActive","enterDone","exitActive","exitDone","prompts","closeUserPrompt","onCloseUserPrompt","scrollPosition","handleContentUpdate","firstMessageId","getFirstMessageId","firstMessage","isHistoryMessagesUpdate","prevMessages","currentMessages","newMessage","isScrollInitialized","wasMounted","isCountdownWarningOpen","chatBoxProps","shouldDisplayParticipants","suppressScrollX","VideoChatContainerWrapper","VideoChatContainer","VideoChatContainerBlanket","getStyle","isFrozen","transition","componentNode","existingContainer","appendChild","newContainer","onCreateContainer","displayVideoChatControls","onMouseMove","CenterChild","PortraitInformationDialogCenterChild","staticLogoPulse","PreloaderAnimation","ConfiguredPreloader","DefaultPreloader","PreloaderTitle","PreloaderSubTitle","PreloaderTextWrapper","shouldAdjustVertically","AVSCam2CamPopupWrapper","AVSCam2CamPopupContent","AVSCam2CamPopupSmallText","AVSCam2CamPopupMainText","AVSCam2CamPopupButton","smallText","mainText","AvsCam2CamPopup","PlayButtonWrapper","PlayButton","PlayButtonSvg","svg","xmlns","x","viewBox","onPlayButtonClick","hideVideoChatControlsTimeout","isPreviewFrozen","CenterChildComponent","isMobilePortrait","VideoChatButtonWrapper","VideoChatBaseButton","VideoChatButton","InitiallyMutedTooltip","VideoChatVolumeWrapper","hasSlider","VolumeSliderWrapper","handleVolumeChange","mutedButtonWithTooltip","toggleSound","mutedButtonWithoutTooltip","initiallyMutedButton","regularVolumeButton","MobileMenuWrapper","MobileMenu","MobileMenuItemWrapper","ImageUploaderMenuItemWrapper","mobileMenu","switchVideoChatMode","onToyButtonClick","applyToggleCam2Cam","VideoChatMobileWrapper","VideoChatMobile","toggleMobileMenu","ReloadButton","toggleFullscreen","VideoChatActionSectionContainerWrapper","VideoChatActionSectionWrapper","VideoChatActionSection","videoChatVolume","clientVolume","setClientVolume","videoChatActionSectionButtons","videoChatMobileActionsSectionButtons","hideInitialMutedHint","FullscreenViewWrapper","alignment","CENTER","ContactNoteWrapper","ContactNoteDialog","ContactNoteTitle","ContactNoteCloseButton","ContactNoteInput","onInputChange","contactNoteText","handleClickOutside","excludeScrollbar","MessengerWrapper","Messenger","BodySection","MessengerBody","MessengerOverlay","ModelTitle","Subtitle","lastMessage","lastMessageDate","lastMessageFormattedDate","headerContent","headerContentAlignment","messengerComponent","messengerOrLoadingComponent","DesktopViewWrapper","VideoChatLandscapeViewWrapper","MessengerContainerWrapper","MobileFooterWrapper","MobileFooter","MobileProfileInfoWrapper","MobileProfileInfo","MobileProfileOnline","MobileProfileName","MobileHeaderWrapper","MobileHeader","VideoChatPortraitViewWrapper","VideoChatContainerAligner","showChatBoxAbove","bodySection","VideoChatMobileLandscapeViewWrapper","PromptsWrapper","views","viewProps","mobilePortraitHash","mobileLandscapeHash","desktopFullscreenHash","desktopLandscapeHash","desktopPortraitHash","messengerDesktopLandscapeHash","messengerDesktopPortraitHas","messengerMobilePortraitHash","messengerMobileLandscapeHash","messengerMobileFullscreenHash","updateOrientation","shouldForceFullscreen","forceFullscreen","enableKeyboard","nodeName","disableKeyboard","shouldCloseKeyboard","minHeightForRenderingVideochatWithMessenger","areDimensionsExceeded","shouldMinimizeCam2Cam","shouldMaximizeCam2Cam","viewHandlerProps","viewProviderParams","hasAllParamsConfigured","LightBoxWrapper","FullScreenLightBox","closeLightbox","srcSet","closeModal","onVXMessengerClick","setReduxStoreFromProps","connection","storedFeatures","storedOptions","shouldSetLanguage","storedLanguage","shouldSetColorSet","isChatBasedConnection","webToken","shouldSetUserKey","storedUserKey","shouldSetWebToken","storedWebToken","shouldSetPartner","storedPartner","setWebToken","featuresFromProps","updatedFeatures","updatedOptions","setPreferenceStore","storedChat","storedInitialVideoChatType","setPreferences","isMessengerInsideContainer","windowHeight","windowWidth","shouldUseFullscreenSizes","storedPreloader","storedAnalyticsKey","storedUpdateBrowserLink","PAUSE_CHAT","CHAT_SAGA_SPECIFIC","pauseChat","pauseChatSaga","isVideoChatInLiveChatMode","createChatEventsActionType","CHAT_EVENTS","CHAT_STOPPED","CHARGE_INFO_RETRIEVED_FROM_CHAT","chatStopped","chargeInfoRetrievedFromChat","chatEventsChannel","emitter","audioMuted","imageSrc","emojiList","currentUsers","userName","abilities","cam2cam","subscribeToChatInitListener","subscribeToLimitsChange","subscribeToVideoLimitWarningUpdate","subscribeToAbilityUpdate","subscribeToQuery","subscribeToSingleModeUpdate","subscribeToChatStop","subscribeToChatPause","subscribeToOnMessageListener","subscribeToTextMuteUpdate","subscribeToAudioMuteUpdate","subscribeToChargeInfo","Entered","subscribeToUserEventListener","chatStopInformations","HOST","HOSTKICK","VOICECALLHANGUP","TEXTTIMELIMIT","isErrorCode","CLIENTDISCONNECT","CLIENTNEWCHAT","chatStoppedSaga","VIDEOFAILGUEST","chatInformation","isGenericErrorCode","chargeInfoRetrievedSaga","listenForChatEventsSaga","chatEvents","PLAY_ERROR","ERRORS","createErrorActionType","playError","playErrorSaga","createPlayerEventsActionType","PLAYER_EVENTS","PLAYER_STOPPED","NO_CAMERA_DETECTED","LOW_STREAM_QUALITY_DETECTED","GOOD_STREAM_QUALITY_DETECTED","playerStopped","noCameraDetected","lowStreamQualityDetected","goodStreamQualityDetected","playerEventsChannel","subscribeToCameraOn","subscribeToCameraOff","subscribeToCameraDenied","subscribeToPlayError","subscribeToPlayStop","paused","quality","subscribeToPlayInfo","playerEvent","subscribeToSendMetrics","subscribeToVolumeChange","subscribeToInitiallyMuted","subscribeToSelectingCameras","playerStoppedSaga","noCameraDetectedSaga","lowStreamQualityDetectedSaga","qualityIsStillLow","qualityEnhanced","listenForPlayerEventsSaga","playerEvents","chooseCameraSaga","videoChatLimitSaga","openLiveChatWarningSaga","openLiveChatInformationDialogSaga","isVideoChatInSpendingMode","success","fail","firstMoment","adjustment","createOnlineStateActionType","ONLINE_STATE","REQUEST_ONLINE_STATE","RECEIVE_ONLINE_STATE","requestOnlineState","onReceiveOnlineState","requestOnlineStateSaga","receiveOnlineStateSaga","onlineStateCommand","CMDC_ONLINESTATE","isModelSupportingChat","isModelSupportingPreviewChat","isModelSupportingVoyeurChat","hasPreviewSupportChanged","hasVoyeurSupportChanged","online","createLoginActionType","LOGIN","REQUEST_LOGIN","RECEIVE_LOGIN","requestLogin","onReceiveLogin","requestLoginSaga","usrKey","receiveLoginSaga","guest","freeCount","boughtMessengerGifts","createNewChannelActionType","NEW_CHANNEL","REQUEST_NEW_CHANNEL","RECEIVE_NEW_CHANNEL","requestNewChannel","onReceiveNewChannel","requestNewChannelSaga","CMDP_NEWCHANNEL","partnerId","partnerKey","receiveNewChannelSaga","createChannelActionType","CHANNEL","REQUEST_CHANNEL","RECEIVE_CHANNELS","RECEIVE_CHANNEL_UPDATE","REQUEST_CHANNEL_SEEN","requestChannel","onReceiveChannels","receiveChannelUpdate","requestChannelSeen","requestChannelSaga","ASC","receiveChannelSaga","channelCommand","CMDC_CHANNEL","requestChannelSeenSaga","CMDP_CHANNELSEEN","readModelMessagesSaga","messagesFromModel","messageFromModel","setUserKeySaga","setWebTokenSaga","setLanguageSaga","setPartnerSaga","login","errorTranslations","SUCCESS","setInitialVideoChatTypeSaga","initializeGoogleAnalyticsSaga","setPreferenceSaga","rootSaga","ui","timeLimits","errors","FULLSCREEN_CHANGED","FULLSCREEN","createFullscreenActionType","fullscreenChanged","fullscreenChangedSaga","msFullscreenElement","closeFullScreenSaga","screenfullEventsChannel","subscribeToScreenfullChange","screenfullEventsListenerSaga","screenFullEvents","SET_USER_ONLINE_STATE_4_ALL_INSTANCES","USER_EVENTS","createUserEventsActionType","setUserOnlineState4AllInstances","windowEventsChannel","windowEventsListenerSaga","onlineStatus","windowEvents","allInstancesOnlineStateSaga","instanceIds","userEvents","analytics","createInitActionType","INIT","REQUEST_INIT","RECEIVE_INIT","onReceiveInit","requestInitSaga","receiveInitSaga","toyControls","createNoopActionType","NOOP","RECEIVE_NOOP","RECEIVE_BACKEND_PAYLOAD","onReceiveNoop","receiveBackendPayload","receiveOnlineState","receiveNoopSaga","receivedMessages","CMDC_CMSG","channelUpdate","filteredCommands","backenPayloads","CMDC_BACKENDPAYLOAD","backenPayload","receiveBackendPayloadSaga","responseData","isChannelUpdate","channel","isGuestUpdate","RECEIVE_QUERY_BACKEND","QUERY_BACKEND","createQueryBackendActionType","onReceiveQueryBackend","receiveQueryBackendSaga","CMDP_NOOP","createApiEventsActionType","API_EVENTS","API_RESPONSE_OK","API_RESPONSE_ERROR","apiResponseOK","apiResponseError","apiResponseOKSaga","apiResponseErrorSaga","apiEventsChannel","subscribeToReceiveOKListener","subscribeToReceiveErrorListener","listenForApiEventsSaga","apiEvents","channelInfo","queryBackend","handleError","newChannel","noop","INITIALIZE_MESSENGER_INSTANCE","ROOT","createRootActionType","initializeMessengerInstance","hasInstanceInitialized","reducerAction","isGlobalAction","sagaMiddleware","enhancer","composeEnhancers","run","setupProductionDebug","rollbar","accessToken","captureUncaught","captureUnhandledRejections","environment","client","javascript","source_map_enabled","guess_uncaught_frames","code_version","dispatch","isInstanceInitialized","getState","Provider","getStore"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"vxmessenger\"] = factory();\n\telse\n\t\troot[\"vxmessenger\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"./\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 36);\n","module.exports = require(\"react\");","module.exports = require(\"redux-saga/effects\");","module.exports = require(\"lodash\");","module.exports = require(\"styled-components\");","module.exports = require(\"reselect\");","module.exports = require(\"immer\");","module.exports = require(\"react-device-detect\");","module.exports = require(\"vxcontrol-client-lib\");","module.exports = require(\"moment\");","module.exports = require(\"cuid\");","module.exports = require(\"redux-actions\");","module.exports = require(\"draft-js\");","module.exports = require(\"vchat-core\");","module.exports = require(\"redux-saga\");","module.exports = require(\"screenfull\");","module.exports = require(\"base-64\");","module.exports = require(\"react-resize-detector\");","module.exports = require(\"vchat-player\");","module.exports = require(\"react-select\");","module.exports = require(\"superagent\");","module.exports = require(\"redux\");","module.exports = require(\"react-dom\");","module.exports = require(\"util\");","module.exports = require(\"react-redux\");","module.exports = require(\"react-loader-spinner\");","module.exports = require(\"react-onclickoutside\");","module.exports = require(\"react-perfect-scrollbar/dist/css/styles.css\");","module.exports = require(\"react-ga\");","module.exports = require(\"react-transition-group\");","module.exports = require(\"rollbar\");","module.exports = require(\"react-tooltip\");","module.exports = require(\"react-perfect-scrollbar\");","module.exports = require(\"@cleandersonlobo/react-mic\");","module.exports = require(\"react-string-replace\");","module.exports = require(\"@material-ui/core/Slider\");","module.exports = require(\"redux-devtools-extension\");","module.exports = require(\"core-js/es/symbol\");","module.exports = require(\"core-js/es/object\");","module.exports = require(\"core-js/es/function\");","module.exports = require(\"core-js/es/parse-int\");","module.exports = require(\"core-js/es/parse-float\");","module.exports = require(\"core-js/es/number\");","module.exports = require(\"core-js/es/number/parse-int\");","module.exports = require(\"core-js/es/math\");","module.exports = require(\"core-js/es/string\");","module.exports = require(\"core-js/es/date\");","module.exports = require(\"core-js/es/array\");","module.exports = require(\"core-js/es/regexp\");","module.exports = require(\"core-js/es/map\");","module.exports = require(\"core-js/stage/pre\");","module.exports = require(\"babel-regenerator-runtime\");","module.exports = require(\"draft-js/dist/Draft.css\");","module.exports = require(\"moment/locale/de\");","module.exports = require(\"moment/locale/es\");","import 'core-js/es/symbol';\nimport 'core-js/es/object';\nimport 'core-js/es/function';\nimport 'core-js/es/parse-int';\nimport 'core-js/es/parse-float';\nimport 'core-js/es/number';\nimport 'core-js/es/number/parse-int';\nimport 'core-js/es/math';\nimport 'core-js/es/string';\nimport 'core-js/es/date';\nimport 'core-js/es/array';\nimport 'core-js/es/regexp';\nimport 'core-js/es/map';\n\nimport 'core-js/stage/pre';\n\n// include this for fixing the '@cleandersonlobo/react-mic' library\nimport 'babel-regenerator-runtime';\n\n// shimming the AudioContext, for '@cleandersonlobo/react-mic' library\nif ((window as any).webkitAudioContext === undefined) {\n    (window as any).webkitAudioContext = function () {\n        this.createAnalyser = () => {};\n        this.decodeAudioData = () => {};\n    };\n};\n\n\n","\n/**\n * Hook for when the client clicks on model's profile picture or name\n */\nimport { ExitCode } from \"../ChatService/types\";\nimport {VideoChatType} from \"../..\";\n\nexport type IClickProfile = () => void;\nexport type IClickImage = (imageUrl: string) => void;\n\n/**\n * Hook for when the client closes the messenger on purpose\n * (so we exclude error situations in which we should close the messenger)\n */\nexport type IClickExit = (code?: ExitCode, message?: string) => void;\n\n/**\n * Hook triggered when the client will try an action that request a money\n * amount that he does not have in his balance. Therefore, an recharge action\n * will be performed by the parent platform.\n */\nexport type IRecharge = () => void;\n\n/**\n * The parent platform should be informed if the messenger is in an\n * active videochat or not - maybe to apply different behaviors to the\n * user interface. When closing it, we may send the chatId value for feedback.\n */\nexport type IVideoChatAction = (isVideoChatOpen: boolean, chatId?: string) => void;\n\n/**\n * The parent platform should be informed if the messenger is displaying\n * an exit popup - maybe to apply different behaviors to the\n * user interface\n */\nexport type IExitPopupAction = (isExitPopupOpen: boolean) => void;\n\n/**\n * Hook for when the client is demanded to verify its age status\n * (fsk has value 16 or 18) based on model's actions\n */\nexport type IAgeVerification = () => void;\n\nexport type IOnModelStatusChange = (isOnline: boolean) => void;\n\n/**\n * Returns the model's supported streams, which as value\n * is a subset of [Livechat, Preview, Voyeur]\n */\nexport type IOnSupportedVideoChatTypes = (videoChatTypes: VideoChatType[]) => void;\n\n/**\n * Hook to be called if the chat config (clientId + server) provided by the platform are not usable\n */\nexport type IOnFailedChatConfig = (error: any) => void;\n\nexport type IBecomeVIP = () => void;\n\n/**\n * Hook to be called if the web token provided by the platform is not usable (anymore)\n */\nexport type IOnFailedWebToken = (error?: any) => void;\n\nexport interface IPreferenceStore {\n\tgetPreference: (preferenceName: PreferenceName) => boolean | number | undefined,\n\tsetPreference: (preferenceName: PreferenceName, value: boolean | number, instanceId?: string) => void\n}\n\nexport enum PreferenceName {\n\tVolumeLevel = \"VolumeLevel\",\n\tShouldIncreaseMessageFontSize = \"ShouldIncreaseMessageFontSize\"\n}\n","import {\n\tIAgeVerification,\n\tIClickExit,\n\tIClickProfile,\n\tIOnModelStatusChange,\n\tIOnFailedChatConfig,\n\tIOnFailedWebToken,\n\tIOnSupportedVideoChatTypes,\n\tIRecharge,\n\tIVideoChatAction,\n\tIExitPopupAction,\n\tIBecomeVIP,\n\tIPreferenceStore,\n\tPreferenceName,\n\tIClickImage\n} from \"../services/AppService/types\";\nimport { ExitCode } from \"../services/ChatService/types\";\nimport { IPartialTheme, ITheme } from \"../themes\";\nimport { SupportedLanguage } from \"vxcontrol-client-lib\";\n\ninterface IStore {\n    [key: string]: IData\n};\n\nexport interface IData {\n    session: ISession;\n    messenger: IMessenger;\n    user: IUser;\n    model: IModel;\n    videochat: IVideochat;\n\tfeatures: IFeatures;\n\toptions: IOptions;\n    platformProps: IPlatformProps | null;\n\thooks: HooksArguments;\n}\n\nexport interface ISession {\n    /** The token comes as props for the main component and is used in all requests */\n    webtoken: string;\n\n    /** After logging in, a session is created */\n    sessionID: string;\n\n    /** The channel between a client and a model. When sending a message for the first time, an ID will be created */\n    channelId: string;\n\n    /** Active gifts */\n    gifts: IGift[];\n\n    /** Active gift categories sorted ASC by their id */\n    giftCategories: IGiftCategory[];\n\n    /** The client can buy gift bundles, which will increase the gifts quantity */\n    giftBundles: IBundle[];\n\n    /** The client can initialize a chat with the model (livechat, videochat and so no) */\n    chat?: IChat;\n\n    autoRecharge: IAutoRecharge;\n\n    oneClickRecharge: IOneClickRecharge;\n\n    lastChargedAmount?: number;\n\n    chatFeatures: IChatFeatures;\n\n    /** This value represents the free messages (platform-wide), which can be used with any model */\n    freeMessages: number;\n\n    currency: ICurrency;\n\n    uploadMediaUrl?: string;\n}\n\nexport interface ICurrency {\n    name: CurrencyName | \"\";\n    symbol: string;\n}\n\nexport interface IEmoticon {\n    text: string;\n    code: string;\n    position?: string;\n}\n\nexport interface IFeatures {\n    hasFavorite: boolean;\n\thasGifts: boolean;\n\thasTips: boolean;\n    hasEmoticons: boolean;\n    hasToyControl: boolean;\n    hasImageUpload: boolean;\n\thasGroupChatIndicator: boolean;\n\n    hasSendMessageButton: boolean;\n    hasContactNote: boolean;\n    hasExitPopups: boolean;\n    hasModelProfilePicture: boolean;\n    hasModelName: boolean;\n    hasModelMotto: boolean;\n    hasCam2Cam: boolean;\n    hasVoyeur: boolean;\n    hasPrivateChat: boolean;\n    hasCloseButton: boolean;\n    hasFullscreen: boolean;\n    hasHistorySectionsOpened: boolean;\n    hasHistoryMessages: boolean;\n    hasMessagesGrouped: boolean;\n\thasPreloaderPaymentText: boolean;\n\thasBehaviorOnClickOutside: boolean;\n\n    isMessageTypeHeader?: boolean;\n    hasAudioMessages?: boolean;\n\thasGroupChatClientName?: boolean;\n\thasFullscreenLayoutOnLandscape?: boolean;\n\thasProductionDebugEnabled?: boolean;\n\tshowCensoredContent?: boolean;\n}\n\nexport interface IOptions {\n\ttip?: ITipOption;\n\tpreloader?: string;\n    analyticsKey?: string;\n    updateBrowserLink?: string;\n\tswitchToPortraitWidth?: number;\n\tinitialVideochatVolume?: number;\n\tcensoredContentImage?: string;\n}\n\nexport interface ITipOption {\n    value: number;\n    currency: ICurrency;\n    imageUrl?: string;\n}\n\nexport interface IBundle {\n    id: number;\n    name: string;\n    imageUrl: string;\n    active: boolean;\n    gifts: IBundleGift[];\n    price: number;\n    translations: IGiftTranslation[];\n}\n\nexport interface IBundleGift {\n    quantity: number;\n    gift: {\n        id: number;\n    }\n}\n\nexport interface IChatFeatures {\n    freeChatDuration: number;\n    livePreviewDurationText: number;\n    livePreviewDurationVideo: number;\n}\n\nexport interface IGiftCategory {\n    id: number;\n    name: string;\n    active: boolean;\n    translations: IGiftTranslation[];\n}\n\nexport interface IGiftTranslation {\n    name: string;\n    language: SupportedLanguage;\n    value: string;\n}\n\nexport interface IAutoRecharge {\n    available: boolean;\n    amount: number | null;\n}\n\nexport interface IOneClickRecharge {\n    available: boolean;\n    defaultAmount: number | null;\n    amounts: number[];\n}\n\nexport interface IChat {\n    chatId?: string;\n    clientId: string;\n    server: string;\n    externallyProvided?: boolean;\n}\n\nexport interface IModel {\n    partner: IPartner;\n    profilePicture: string;\n    name: string;\n    motto: string;\n    isFavorite: boolean;\n    isOnline: boolean;\n    onlineState?: Partial<IOnlineState>;\n    prices: IModelPrices;\n\n    /** Represents the free messages that the client has with this specific model */\n    freeMessages: number;\n\n    /** Represents the free seconds during a livechat that the client has with this specific model */\n    freeChatDuration: number;\n}\n\nexport interface IModelPrices {\n    messagePrice: number;\n    videoChatPrice: number;\n    voyeurChatPrice: number;\n}\n\nexport interface IPartner {\n    /** The ID from the model's platform - for instance, vx-models */\n    id: string;\n    /** The ID for the model */\n    key: string;\n}\n\nexport interface IOnlineState {\n    supportsChat: boolean; // multi\n    supportsPrivateChat: boolean; // single\n    supportsSoftChat: boolean; // soft\n    supportsPreviewChat: boolean; // preview\n    supportsVoyeurChat: boolean; // voyeur\n    supportsVoyeurToPrivateChat: boolean; // voyeur2s\n    supportsToyControl: boolean;\n    supportsTip?: boolean;\n}\n\nexport interface IUser {\n    language: SupportedLanguage;\n    translations: Translations;\n    preferences: IPreferences;\n    isVip: boolean;\n    isOnline?: boolean;\n    userKey?: string;\n}\n\nexport interface IPreferences {\n\t[PreferenceName.ShouldIncreaseMessageFontSize]: boolean,\n\t[PreferenceName.VolumeLevel]: number,\n}\n\nexport type Translations = {[key in SupportedLanguage]: ITranslation};\n\nexport interface IMessenger {\n    actionResponse?: IActionResponse;\n    contactNote: IContactNote;\n    audioMessage: {\n        isMicEnabled: boolean;\n        shouldSendMessage: boolean;\n        isRecording: boolean;\n        secondsElapsed: number;\n    },\n    messages: IMessage[];\n    shouldResendFailedMessages?: boolean;\n    failedMessages: string[];\n    emoticons: IEmoticon[];\n    toyOptions: IToyOption[];\n    activeSymbols: IActiveSymbol;\n    windowToggleState: IWindowSectionState;\n    modalContent: IModalContent;\n    loadingStatus: LoadingStatus;\n    mentionQuery: string;\n    isTextEnabled: boolean;\n    isOpen: boolean;\n    isResponsive: boolean;\n    isMentionSectionOpen: boolean;\n    shouldDisplayCustomMentionSection: boolean;\n\n    focusedMentionOption?: string;\n    hasEditor?: boolean;\n    editorState: IStoredEditorState;\n    groupChatColors: IGroupChatColor[];\n}\n\nexport interface IGroupChatColor {\n    color: string;\n    users: string[];\n}\n\nexport interface IToyOption {\n    id: number;\n    categoryId: number;\n    duration: number | null;\n    imageUrl: string;\n    imageUrlDeactivated: string;\n    imageUrlWhite: string;\n    intensity: number | null;\n    name: string;\n    price: number;\n    unlockedBy: number[];\n    translations: IGiftTranslation[];\n    active: boolean;\n    random: boolean;\n    isPlaying?: boolean;\n    hasTooltipOpen?: boolean;\n}\n\nexport interface IStoredEditorState {\n    text: string;\n    gifts: IGift[];\n}\n\nexport interface IContactNote {\n    isOpen: boolean;\n    text: string;\n}\n\nexport interface ICameraDevice extends MediaDeviceInfo {\n    isFront?: boolean;\n    isBack?: boolean;\n}\n\nexport interface IVideochat {\n    informationType?: VideochatInformationType;\n    preChatInformationType?: PreChatInformationType;\n    isFullscreen: boolean;\n    qualityBoundaries: IQualityBoundaries;\n\ttype?: VideoChatType;\n\n\tlastSuccessfulType?: VideoChatType;\n    initialVideoChatType?: VideoChatType;\n    cam2Cam: ICam2Cam;\n    isMutedByModel: boolean;\n    isMutedByClient: boolean;\n    isInitiallyMuted?: boolean;\n    isInitiallyMutedHintDisplayed?: boolean;\n    isMobileMenuOpen?: boolean;\n    shouldRenderOnlyVideochat: boolean;\n    shouldHideVideochatControls: boolean;\n    resumeChatTimestamp?: Date;\n\n    /**\n     *  We check if the player is open - no matter its state of playing\n     */\n    isOpen: boolean;\n\n    /**\n     * We check if the player is opened and currently playing,\n     * which excludes pause state or other inactive states of the player.\n     */\n    isPlaying: boolean;\n\n    initialResolution?: IResolution;\n\n    timeLeft: number;\n    isTimeLeftBelowThreshold?: boolean;\n    previousTimeLeft?: number;\n    livePreviewTimeLeft: number;\n    livePreviewTextTimeLimit: number;\n    livePreviewTextTimeLeft: number;\n\n    isGroupChat?: boolean;\n    groupChatParticipants: string[];\n    groupChatClientName: string;\n\n    exitEvent?: IExitEvent;\n\n\t/**\n\t * this is a flag we're getting from vchat-core, saying that the inited chat is in voyeur mode\n\t */\n    isInVoyeurMode?: boolean;\n\n    isAutoplayRestricted?: boolean;\n}\n\nexport interface IActiveSymbol {\n    gift?: string;\n    emoticon?: string;\n    mention?: string;\n}\n\nexport interface IExitEvent {\n    exitCode: ExitCode | number;\n    exitMessage?: string;\n}\n\nexport interface ICam2Cam {\n\tisEnabled: boolean;\n    isActive: boolean;\n    isMinimized: boolean;\n    cameras: ICameraDevice[];\n    selectedCameraId?: string;\n}\n\nexport interface IResolution {\n    width: number;\n    height: number;\n}\n\nexport interface IWindowSectionState {\n    isEmoticonSectionOpen: boolean;\n    isGiftSectionOpen: boolean;\n    isToySectionOpen: boolean;\n    isDropDownOpen: boolean;\n    userPrompts: IQuestion[];\n    countdownWarning?: ICountdownWarning;\n    isVersionOpen: boolean;\n    requestImageUpload?: boolean;\n}\n\nexport interface IActionResponse {\n    text: string;\n    type: ActionResponseType;\n}\n\nexport interface IMessage {\n    id: string;\n    content: any;\n    messageKey: string;\n    direction: MessageDirection;\n    contentType?: MessageContentType;\n    dateCreated: string;\n    isDeleted?: boolean;\n    modalContent?: IModalContent;\n\tisNew?: boolean;\n\tisFromHistory?: boolean;\n    isOnLoading?: boolean;\n    isSystem: boolean;\n    chatId?: string;\n    msgType?: MsgType;\n    toy?: IToyMessageInfo;\n    audioSrc?: string;\n\n    /**\n     * This property will have a value only when the messenger is opened\n     * in group chat mode and will contain the alias from other senders.\n     * This value will not contain the name of the current user or model.\n     */\n    username?: string;\n\n    /**\n     * This property will have a value only when the messenger is opened\n     * in group and mode and will contain the color for rendering the username\n     * from ther senders or model's name.\n     */\n    usernameColor?: string;\n}\n\nexport interface IToyMessageInfo {\n    text: string;\n    activeImage?: string;\n    inactiveImage?: string;\n    isActive?: boolean;\n\n    // We have a default toy message when starting a livechat stream.\n    // It is removed after the first toy message for playing a toy option.\n    isDefault?: boolean;\n}\n\nexport interface IGroupMessage {\n    dateCreated: string;\n    messages: IMessage[];\n}\n\nexport interface IGift {\n    id: number;\n    active: boolean;\n    categoryId: number;\n    name: string;\n    imageUrl: string;\n\n    /**\n     * When the LOGIN request comes with the quantities, they are\n     * stored as initial quantities and updated just when the client\n     * sends the message with the contained gifts.\n     */\n    initialQuantity?: number;\n    /**\n     * Current quantities are the dynamic values when the customer\n     * affects visually the gifts quantities (adding or removing gifts in any way).\n     * They will be the calculated as the initialQuantity minus the quantity present in editor.\n     */\n    currentQuantity?: number;\n\n    /**\n     * Bundles will have an initial price for the reduce price feeling\n     * to the customer when opening the bundle gifts page. It will share\n     * the same currency from the gift object, so we will hold here only its value.\n     */\n    initialPrice?: number;\n\n    price: number;\n\n    translations: IGiftTranslation[];\n}\n\n/**\n * Hooks implemented from the parent platform on certain messenger's events.\n */\nexport interface IHooks {\n    onClickProfile?: IClickProfile;\n    onClickImage?: IClickImage;\n    onExit?: IClickExit;\n    onRecharge?: IRecharge;\n    onVideoChatAction?: IVideoChatAction;\n    onExitPopupAction?: IExitPopupAction;\n    onAgeVerification?: IAgeVerification;\n    onModelStatusChange?: IOnModelStatusChange;\n    onSupportedVideoChatTypes?: IOnSupportedVideoChatTypes;\n    onFailedChatConfig?: IOnFailedChatConfig;\n    onFailedWebToken?: IOnFailedWebToken;\n    onBecomeVIP?: IBecomeVIP;\n}\n\nexport type HooksArguments = {\n    [key in keyof IHooks]: any;\n};\n\n/**\n * The messenger will use the vxcontrol api for a fully-feature version\n */\nexport interface IConnectionWithToken {\n    webToken: string;\n    partner: IPartner;\n    userKey?: string;\n}\n\n/**\n * The messenger will use only the vchat-core for an only-chat feature version\n */\nexport interface IConnectionWithChat {\n    clientId: string;\n    server: string;\n}\n\nexport type IConnection = IConnectionWithToken | IConnectionWithChat;\n\n/**\n * Properties set by the parent platform for the messenger to render\n */\nexport interface IPlatformProps {\n    /**\n     * Unique identification key for the configured messenger's instance.\n     */\n    id?: string;\n\n    /**\n     * How the user will connect for using the messenger: with webtoken for\n     * fully-feature messenger or with clientId and server for chat-feature version\n     */\n    connection: IConnection;\n\n    /**\n     * The messenger will start directly in a stream type set by the parent platform\n     */\n    initialVideoChatType?: VideoChatType;\n\n    /**\n     * The parent platform can set on or off some implemented features from the messenger\n     */\n\tfeatures?: Partial<IFeatures>;\n\n\t/** The parent platform can access different special option features */\n\toptions?: IOptions;\n\n    /**\n     * Messenger's language set by the parent platform\n     */\n    language: string;\n\n    /**\n     * Event-based behaviors implemented by the parent platform\n     */\n\thooks?: IHooks;\n\n\t/**\n\t * The rendering properties: font and colors\n\t */\n    theme?: ITheme | IPartialTheme;\n\n\t/**\n\t * The custom implementation for preferences\n\t */\n\tpreferenceStore?: IPreferenceStore;\n\n}\n\nexport interface IGiftPage {\n    id: number;\n    name: string;\n    gifts: IGift[];\n    translations: IGiftTranslation[];\n}\n\nexport interface IQualityBoundaries {\n    low: number;\n    medium: number;\n    good: number;\n}\n\nexport interface IQuestion {\n    type: QuestionType;\n    payload?: {\n        modelName?: string;\n        defaultRecharge?: number;\n        privateChatText?: string;\n        amounts?: number[];\n        defaultAmount?: number;\n        text?: string;\n    }\n}\n\nexport interface ICountdownWarning {\n    type: CountdownWarningType;\n    time: number;\n}\n\nexport enum QuestionType {\n    /** Load account user prompts */\n    LOAD_ACCOUNT = \"LOAD_ACCOUNT\",\n    LOAD_ACCOUNT_ONE_CLICK = \"LOAD_ACCOUNT_ONE_CLICK\",\n    LOAD_ACCOUNT_AUTO_RECHARGE = \"LOAD_ACCOUNT_AUTO_RECHARGE\",\n\n    /** YES/NO user prompts on different situations */\n    VERIFY_AGE = \"VERIFY_AGE\",\n    SPY_PRIVATE_CHAT = \"SPY_PRIVATE_CHAT\",\n    CLOSE_CHAT = \"CLOSE_CHAT\",\n    INVITE_PRIVATE_CHAT = \"INVITE_PRIVATE_CHAT\",\n\n    /** Tip user prompts */\n    SEND_TIP = \"SEND_TIP\",\n    SEND_ANONYMOUS_TIP = \"SEND_ANONYMOUS_TIP\",\n\n    /** Select camera */\n    CHOOSE_CAMERA = \"CHOOSE_CAMERA\"\n}\n\nexport enum ActionResponseType {\n    SUCCESSFUL = \"SUCCESSFUL\",\n    ERROR = \"ERROR\",\n    WARNING = \"WARNING\"\n}\n\nexport enum CountdownWarningType {\n    OUT_OF_BALANCE = \"OUT_OF_BALANCE\",\n    ONE_CLICK_OUT_OF_BALANCE = \"ONE_CLICK_OUT_OF_BALANCE\"\n}\n\nexport enum KnownAnswerType {\n    YES = 'YES',\n    NO = 'NO',\n    OK = 'OK'\n}\nexport type AnswerType = KnownAnswerType | number;\n\n/** Helper enums */\nexport enum MessageDirection {\n    in = \"in\",\n    out = \"out\",\n    none = \"none\"\n}\n\nexport enum MessageContentType {\n    TEXT = 'TEXT\"',\n    IMAGE_URL = 'IMAGE_URL',\n    IMAGE = 'IMAGE',\n    AUDIO = 'AUDIO'\n}\n\nexport enum VideochatInformationType {\n    OFFLINE_CONNECTION = \"OFFLINE_CONNECTION\",\n    ERROR_OCCURRED = \"ERROR_OCCURRED\",\n    VERIFY_AGE = \"VERIFY_AGE\",\n    PREVIEW_JUST_FINISHED = \"PREVIEW_JUST_FINISHED\",\n    OUT_OF_MONEY = \"OUT_OF_MONEY\",\n    OUT_OF_MONEY_ONE_CLICK_RECHARGE = \"OUT_OF_MONEY_ONE_CLICK_RECHARGE\",\n    THANK_YOU = \"THANK_YOU\",\n    THANK_YOU_ONE_CLICK_RECHARGE = \"THANK_YOU_ONE_CLICK_RECHARGE\",\n\n    LIVECHAT_SESSION_ENDED = \"LIVECHAT_SESSION_ENDED\",\n    EJECTED = \"EJECTED\",\n    HOST_OFFLINE = \"HOST_OFFLINE\",\n    PRIVATE_CHAT = \"PRIVATE_CHAT\",\n    VOICECALL_ENDED = \"VOICECALL_ENDED\",\n    TEXTTIMELIMIT = \"ExitCode.TEXTTIMELIMIT\"\n}\n\nexport enum PreChatInformationType {\n    LIMIT_REACHED = \"LIMIT_REACHED\",\n    PRIVATE_CHAT = \"PRIVATE_CHAT\",\n    PRIVATE_CHAT_CAN_SPY = \"PRIVATE_CHAT_CAN_SPY\",\n    VERIFY_AGE = \"VERIFY_AGE\",\n    CHARGE_ACCOUNT_OR_VIP = \"CHARGE_ACCOUNT_OR_VIP\",\n    NOT_AVAILABLE = \"NOT_AVAILABLE\",\n    HOST_OFFLINE = \"HOST_OFFLINE\",\n    GUEST_OFFLINE = \"GUEST_OFFLINE\",\n    CONNECTION_ERROR = \"CONNECTION_ERROR\"\n}\n\nexport enum VideoChatType {\n    LIVECHAT = \"LIVECHAT\",\n    FREECHAT = \"FREECHAT\",\n    LIVE_PREVIEW = \"LIVE_PREVIEW\",\n    VOYEUR_CHAT = \"VOYEUR_CHAT\",\n    VOYEUR_PRIVATE_CHAT = \"VOYEUR_PRIVATE_CHAT\",\n    PRIVATE_CHAT = \"PRIVATE_CHAT\",\n    CAM2CAM = \"CAM2CAM\",\n    NO_DOWNSTREAM = \"NO_DOWNSTREAM\",\n    GROUP_CHAT = \"GROUP_CHAT\",\n\tCONTENT_PARTNERS_CHAT = \"CONTENT_PARTNERS_CHAT\"\n}\n\nexport enum LoadingStatus {\n    NONE = 'NONE',\n    LOADING = 'LOADING',\n    SUCCESS = 'SUCCESS',\n    ERROR = 'ERROR'\n}\n\nexport enum CurrencyName {\n    Euro = 'EUR',\n    Dollar = 'DOL',\n    Credits = 'VOC'\n}\n\nexport interface IErrorTranslation {\n    error: string;\n    noCamera: string;\n    initFail: string;\n    textLimit: string;\n}\n\nexport interface IWarningTranslation {\n    connectionPoor: string;\n}\n\nexport interface IModalContent {\n    imgSrc: string;\n    imgSrcSet?: string;\n    imgWidth?: string;\n    imgHeight?: string;\n}\n\nexport interface IToyControlTranslation {\n    highTooltipText: string;\n    highTooltipTitle: string;\n    lovenseAvailable: string;\n    lovenseFinished: string;\n    lovenseStartedMessage: string;\n    lovenseVibrating: string;\n    maximumToyDuration: string;\n    randomTooltipText: string;\n    randomTooltipTitle: string;\n    toyControl: string;\n    toyDescription: string;\n    toyDuration: string;\n    toyIntensityHigh: string;\n    toyIntensityLow: string;\n    toyIntensityMedium: string;\n    toyIntensityRandom: string;\n    toyLearnMore: string;\n}\n\n/** Translation interface */\nexport interface ITranslation {\n    chat: {\n        actionMute: string;\n        actionUnmute: string;\n        actorWaiting: string;\n        adultContentInfo: string;\n        autoRecharge: string;\n        avsNeeded: string;\n        billingStart: string;\n        btnChargeNow: string;\n        browserOutdated: string;\n        browserOutdatedTagLine: string;\n        browserOutdatedHrefText: string;\n        camToCam: string;\n        charge: string;\n        chargeNow: string;\n        chargeSuccess: string;\n        chatStarted: string;\n        checkConnection: string;\n        chooseCamera: string;\n        closeConfirmation1: string;\n        closeConfirmation2: string;\n        continue: string;\n        enterFullscreen: string;\n        exit: string;\n        exitLoad: string;\n        exitLoadAgain: string;\n        freeChatEndHeadline: string;\n        freeConnection: string;\n        hint: string;\n        insertEmoticons: string;\n        interrupted: string;\n        isMuted: string;\n        invitePrivateChat: string;\n        leaveFullscreen: string;\n        liveChat: string;\n        livePreview: string;\n        lowBalance: string;\n        members: string;\n        groupChat: {\n\t        mentionHeaderPartOne: string;\n\t        singleMember: string;\n\t        mentionHeaderPartOneSingle: string;\n\t        mentionHeaderPartTwo: string;\n\t        members: string;\n        }\n        needAvs: string;\n        noMoney: string;\n        popup: {\n            avs: string;\n            ended: string;\n            kicked: string;\n            offline1: string;\n            offline2: string;\n            offline3: string;\n\n            /**\n             * @deprecated - not used anymore, connection error is not anymore displayed just for a Live Preview session\n             * \"videoConnection will be used instead\n             */\n            previewConnection: string;\n\n            previewDisabled: string;\n            previewLimit: string;\n            privateCam: string;\n            privateChat1: string;\n            privateChat2: string;\n            recharge: string;\n            reconnect: string;\n            videoConnection: string;\n            vip: string;\n            voicecall: string;\n        },\n        previewEndCountdown: string;\n        previewEndHeadline: string;\n        previewEndText: string;\n        privateChat: string;\n        sendGift: string;\n        sendImage: string;\n        softchat: string;\n        softChatWait: string;\n        startVoyeur: string;\n        stopLiveChat: string;\n        timeLimit: string;\n        tipAmount: string;\n        tipFail: string;\n        tipOk: string;\n        tip1: string;\n        tip2: string;\n        tip3: string;\n        tip4: string;\n        tooltipNoVolume1: string;\n        tooltipNoVolume2: string;\n        tooltipPreview: string;\n        tooltipVideochat: string;\n        tooltipVoyeur: string;\n\n        toyControl: IToyControlTranslation;\n\n        verifyAge: string;\n        vipLivePreview: string;\n        vipPreviewStarted: string;\n        voyeur: string;\n        voyeurCam: string;\n        voyeurTip1: string;\n        voyeurTip2: string;\n        voyeurTip3: string;\n        voyeurTip4: string;\n        voyeurTipFail: string;\n        voyeurTipOk: string;\n        voyeurToSingleInfo: string;\n    };\n    common: {\n        advertised: string;\n        all: string;\n        archive: string;\n        archived: string;\n        cancel: string;\n        close: string;\n        done: string;\n        edit: string;\n        gift: string;\n        gifts: string;\n        hint: string;\n        header: {\n            messageFrom: string;\n            lastMessageOn: string;\n        };\n        giftBundles: string;\n        bundleBuy: string;\n        bundles: string;\n        contains: string;\n        bundleBuySuccess: string;\n        bundleInfo: string;\n        bundlesReducedPrice: string;\n        imageUploadFail: string;\n        imageUploadOk: string;\n        networkoff: string;\n        no: string;\n        none: string;\n        notNow: string;\n        notes: string;\n        off: string;\n        ok: string;\n        on: string;\n        onehour: string;\n        paymentSuccess: string;\n        perMinute: string;\n        read: string;\n        regularcustomer: string;\n        reload: string;\n        save: string;\n        seconds: string;\n        sure: string;\n        thankYou: string;\n        title: string;\n        titlemessage: string;\n        titlemessages: string;\n        unarchive: string;\n        userinfos: string;\n        yes: string;\n        yesterday: string;\n    };\n    error: IErrorTranslation;\n    warning: IWarningTranslation;\n\n    message: {\n        delete: string;\n        deleteConfirmation: string;\n        selectEmoticon: string;\n        send: string;\n        sendGifts: string;\n        sendImage: string;\n        sendNow: string;\n        write: string;\n        writeFree: string;\n        writePrice: string;\n        menuSendGift: string;\n        menuSendMoney: string;\n        menuSendPhotos: string;\n        menuSendEmoticon: string;\n        sendAudioMessage: string;\n    };\n    user: {\n        addFavorite: string;\n        addNote: string;\n        becomeVIP: string;\n        boughtGifts: string;\n        boughtGiftsHeading: string;\n        noMoney: string;\n        removeFavorite: string;\n        stock: string;\n        verifyAge: string;\n        vip: string;\n        visitProfile: string;\n        youAreOffline: string;\n        yourNote: string;\n        yourStock: string;\n    };\n    avs: {\n        hint: string;\n        requestAccess: string;\n        allowAccess: string;\n    }\n}\n\nexport const enum MsgType {\n\tSYSTEM = \"sys\",\n\tCHAT = \"chat\",\n\tMESSENGER = \"msn\",\n\tTOY = \"toy\",\n\tMAIL = \"mail\"\n}\n\nexport default IStore;\n\n\n","import { Action } from \"redux-actions\";\nimport { isUndefined } from \"lodash\";\n\nimport { ActionCreator, IPayload, ActionIds } from \"./interfaces\";\n\ninterface ICreateActionTypePayload {\n    isReduxAction?: boolean;\n    isSagaAction?: boolean;\n}\n\n/** This function will receive the desired action and will return an action creator for it */\nexport const createAction: ActionCreator = (type) => (instanceId, payload?) => {\n    const action: Action<IPayload> = {\n        type,\n        payload: {\n            instanceId: instanceId || \"\",\n            value: isUndefined(payload) ? null : payload\n        }\n    };\n\n    return action;\n};\n\n/**\n * \n * @param id represents the file's name within action type creation\n * @param payload represents if the action should be scoped as a Redux or as a Saga action\n * @param action represents the name of the action\n */\nexport const createActionType = (id: ActionIds, payload: ICreateActionTypePayload) => (action: string) => {\n    const scope = payload.isReduxAction ? \"redux\" : \"sagas\";\n\n    return `app/${scope}/${id}/${action}`;\n};","import { CurrencyName, IEmoticon, ITipOption } from \"../../redux/store\";\n\n/**\n * Interface for our configs to be communicated from the smart component\n * (Container) to the dumb component as the presentational component should have\n * no knowledge of the config concept\n */\nexport interface ISpecialGiftPages {\n    inventoryGiftId: number;\n    giftBundlesId: number;\n}\n\n/** This limitations are used for validations or contextual behaviors for the messenger */\nexport const limitations = {\n    fileUpload: {\n        minSize: 100000,\n        acceptedFileFormats: [\"image/jpeg\", \"image/png\", \"image/gif\", \"image/tiff\", \"image/bmp\"]\n    },\n    maxNumberOfMessages: {\n        onGettingHistory: 50,\n        onFullscreen: 6\n    }\n};\n\n/**\n * Class name for the entire VXMessenger enclosing DOM node\n */\nexport const messengerClassName = 'vx-messenger';\n\n/**\n * Attribute name for the messenger's HTML element containing the associated instanceId\n */\nexport const messengerInstanceIdAttribute = 'data-instance-id';\n\n/**\n * Image URL is an HTTP endpoint for uploading images on the CDN.\n * Others are for the websocket communication.\n */\nexport const endpoints = {\n    imageUpload: \"https://upload.cp1.campoints.net/g/ms\"\n};\n\nexport const profilePictureSizes = {\n    small: 48,\n    big: 105,\n    extraSmall: 20\n};\n\nexport const customMentionPictureSize = 25;\n\n/**\n * Sizes for rendering the player or messenger within various views (contexts).\n * Values are in percentage (contain \"percentage\" in their name) or pixels.\n */\nexport const viewSizes = {\n    maxButtonWidthInFullscreen: 180,\n\n    /**\n     * When maxButtonWithoutIconWidth is reached, buttons from ActionSection\n     * will have text with the description;\n     */\n    maxButtonWithoutIconWidth: 144,\n\n    defaultButtonWidth: 90,\n    defaultButtonWidthOnVideo: 140,\n    voyeurCamButtonWidth: 95,\n\n    imageLoaderSize: 75,\n    chatboxSectionMaxWidth: 420,\n\n    cam2camMinimizeWidth: 650,\n    cam2camMinimizeHeight: 883,\n\n    cam2camMobileFrameWidth: 100,\n    cam2camDesktopFrameWidth: 220,\n\n    /** Messenger */\n    messengerWidthPercentage: 0.35,\n    messengerPortraitMinHeight: 350,\n    messageSectionMaxWidth: 425,\n    messengerLoaderSize: 150,\n\n    /** Videochat */\n    videoChatWidthPercentage: 0.65,\n    videoChatControlsHeight: 37,\n    switchToPortraitWidth: 800,\n\n    /** Fullscreen is only for videochat */\n    fullScreen: {\n        topBarHeight: 30,\n        bottomBarHeight: 70,\n        chatBoxBottomOffset: 70\n    },\n\n    /** Countdown Waring */\n    countdownWarning: {\n        height: 64\n    },\n\n    /** Mobile when landscape */\n    mobile: {\n        topBarHeight: 30,\n        bottomBarHeight: 105,\n        bottomBarMaxHeight: 105,\n        bottomActionButtonsBarHeight: 50\n    },\n\n    minHeaderHeight: 102,\n    minMessageSectionHeight: 55,\n\tminVideochatHeight: 200,\n\n\tactionSectionButton: 24\n};\n\n/** Default values for creating a player instance */\nexport const ChatSettings = {\n    BAD_CONN_MAX_RESOLUTION: 100,\n    BAD_CONN_MAX_RESOLUTION_DESKTOP: 200,\n    BAD_CONN_TIMEOUT_WAITING: 5000,\n    HLS_NATIVE_RECOVER_TIMEOUT: 2000,\n    MAX_ATTEMPTS: 2,\n    MAX_ATTEMPTS_CHAT_START: 2,\n    MAX_ATTEMPTS_CHAT_START_PREVIEW: 1,\n    MIN_DURATION_FOR_CHAT_EXIT: 30,\n    TIMEOUT_CONNECTION_WARNING: 500,\n    TIMEOUT_FLASH_DETECTION: 10000,\n    TIMEOUT_FLASH_INIT: 500,\n    TIMEOUT_RETRY_STREAM_START: 5000,\n    TIMEOUT_RETRY_CHAT_START: 3000,\n    TIMEOUT_VOLUME_BUTTON_HINT: 10000\n};\n\n/** These values are in seconds */\nexport const videoChatTimeLimits = {\n    anonymousTip: 20,\n    liveChatStartWarning: 60\n};\n\n/** Number of seconds after the messenger version will be hidden */\nexport const versionDisplayDuration = 5;\n\n/**\n * The value (statistically determined) of the most common recharged value\n * 5000 = 50.00 Euros\n */\nexport const mostCommonRechargeValue = 5000;\n\n/**\n * They are treated as gift pages and should have an id as when\n * we click on the tab's header - to set our gift page active\n */\nexport const specialGiftPages: ISpecialGiftPages = {\n    inventoryGiftId: -1,\n    giftBundlesId: 5\n};\n\nexport const defaultUserKey = '888888';\n\n\n/**\n * Max height for devices for which we hide keyboard(blur editor)\n * only in messenger mode, we always hide keyboard in videochat mode\n */\nexport const maxHeightToHideMobileKeyboard = 620;\n\nexport const initialVideoResolution = {\n    width: 1024,\n    height: 768\n};\n\nexport const defaultEmoticons: IEmoticon[] = [{\n    position: 'background-position:11.11111111% 11.11111111%',\n    text: ':)',\n    code: 'u1f642'\n},{\n    position: 'background-position:22.22222222% 44.44444444%',\n    text: ':(',\n    code: 'u1f641'\n},{\n    position: 'background-position:55.55555556% 0',\n    text: ':D',\n    code: 'u1f604'\n},{\n    position: 'background-position:0 33.33333333%',\n    text: ':|',\n    code: 'u1f610'\n},{\n    position: 'background-position:100% 0',\n    text: ';)',\n    code: 'u1f609'\n},{\n    position: 'background-position:44.44444444% 11.11111111%',\n    text: ':P',\n    code: 'u1f60b'\n},{\n    position: 'background-position:66.66666667% 55.55555556%',\n    text: ':*',\n    code: 'u1f622'\n},{\n    position: 'background-position:66.66666667% 22.22222222%',\n    text: '(H)',\n    code: 'u1f60e'\n},{\n    position: 'background-position:22.22222222% 33.33333333%',\n    text: ':[',\n    code: 'u1f612'\n},{\n    position: 'background-position:0 0',\n    text: '=)',\n    code: 'u1f603'\n},{\n    position: 'background-position:33.33333333% 55.55555556%',\n    text: ':O',\n    code: 'u1f62e'\n},{\n    position: 'background-position:66.66666667% 11.11111111%',\n    text: '(L)',\n    code: 'u1f60d'\n},{\n    position: 'background-position:77.77777778% 66.66666667%',\n    text: ':Z',\n    code: 'u1f634'\n},{\n    position: 'background-position:11.11111111% 44.44444444%',\n    text: ':-/',\n    code: 'u1f615'\n},{\n    position: 'background-position:33.33333333% 66.66666667%',\n    text: ':X',\n    code: 'u1f910'\n},{\n    position: 'background-position:44.44444444% 33.33333333%',\n    text: ':?',\n    code: 'u1f914'\n},{\n    position: 'background-position:88.88888889% 44.44444444%',\n    text: '(M)',\n    code: 'u1f624'\n},{\n    position: 'background-position:77.77777778% 11.11111111%',\n    text: '(G)',\n    code: 'u1f618'\n}\n];\n\n/**\n * value is in seconds\n */\nexport const popupsTransitionTime: number = 0.5;\n\nexport const defaultTipOption: ITipOption = {\n    value: 1,\n    currency: {\n        name: CurrencyName.Euro,\n        symbol: '€'\n    },\n    imageUrl: 'https://www.visit-x.net/assets/img/messenger/gifts/romantik_Dollar.png'\n};\n\n/** value in pixels for width & height of the image associated with a tip */\nexport const tipImageSize: number = 56;\n\n/**\n * number of seconds to wait for an improvement before displaying to the user\n * a message about low quality connection\n */\nexport const waitUntilReportingBadConnection: number = 5;\n\nexport const maxTextCharLimit = 1000;\n\n/**\n * TODO - in future implementations to be removed from code and used\n * from the INIT request of vxcontrol-client-lib\n */\nexport const rollbarAccessToken = \"e4f40ec28c1e490387d8f3b5a5adc058\";\n\nexport const censoredContentImage = 'https://premium.vxcdn.org/u/1804898/g/866176/p/7261718/640.jpg?8170-5a3a6e08ddb3a850';\n","import { Action } from \"redux-actions\";\nimport { PreferenceName } from \"../services/AppService/types\";\n\n/** This type stands for the function through which we can create action creators */\nexport type ActionCreator = <T extends any>(type: string)\n    => (instanceId: string, payload?: T)\n    => Action<IPayload<T>>;\n\n/**\n * This type stands for any action's payload.\n * It will contain messenger instance's id on which\n * we want to alter the state and its optional payload.\n */\nexport interface IPayload<T = any> {\n    instanceId: string;\n    value: T;\n}\n\nexport interface IPreferenceActionPayload {\n\tpreferenceName: PreferenceName;\n\tvalue: boolean | number\n}\n\n/** This type stands for all the action dispatchers received as props by smart components */\nexport type ActionDispatcher<T = any> = (instanceId: string, payload?: T) => any;\n\nexport enum ActionIds {\n    APP = \"app\",\n\tFEATURES = \"features\",\n\tOPTIONS = \"options\",\n    HOOKS = \"hooks\",\n    MESSENGER = \"messenger\",\n\tMODEL = \"model\",\n    PLATFORM_PROPS = \"platformProps\",\n    SESSION = \"session\",\n    USER = \"user\",\n    VIDEOCHAT_REDUX = \"videochat\",\n    CHAT_SAGA_COMMON = \"common/chat\",\n    CHAT_EVENTS = \"chatEvents\",\n    CLOSE = \"close\",\n    ERRORS = \"errors\",\n    PLAYER_EVENTS = \"playerEvents\",\n\tAPI_EVENTS = \"apiEvents\",\n    RECHARGE = \"recharge\",\n    UI = \"ui\",\n    USER_PROMPT = \"userPrompt\",\n    USER_EVENTS = \"userEvents\",\n    FULLSCREEN = \"fullscreen\",\n    VIDEOCHAT_SAGA = \"videochat\",\n    CAM2CAM = \"cam2cam\",\n    ANALYTICS = \"analytics\",\n    CHAT_SAGA_SPECIFIC = \"specific/chat\",\n    CHANNEL = \"channel\",\n    CHANNEL_INFO = \"channelInfo\",\n    CHAT_SAGA_WEBSOCKETS = \"websockets/chat\",\n    GIFTS = \"gifts\",\n    HANDLE_ERROR = \"handleError\",\n    HISTORY = \"history\",\n    IMAGE = \"image\",\n    INIT = \"init\",\n    LOGIN = \"login\",\n    MESSAGE = \"message\",\n    NEW_CHANNEL = \"newChannel\",\n    NOOP = \"noop\",\n    ONLINE_STATE = \"onlineState\",\n    QUERY_BACKEND = \"queryBackend\",\n    ROOT = \"ROOT\"\n}\n","import * as config from './config';\n\nexport default config;","import { ITranslation } from \"../../redux/store\";\n\nconst de: ITranslation = {\n    chat: {\n        actionMute: \"Stumm schalten\",\n        actionUnmute: \"Laut schalten\",\n        actorWaiting: \"{modelname} wartet auf Dich! Kehre jetzt zurück zum Chat!\",\n        adultContentInfo: \"{modelname} sendet gerade +18 Inhalte. Du willst ALLES sehen?\",\n        autoRecharge: \"Dein Guthaben wird automatisch mit {amount} aufgeladen.\",\n        avsNeeded: \"{modelname} führt jetzt einen unzensierten FSK 18 Chat. Bestätige jetzt Deine Volljährigkeit, um Dir den unzensierten Chat mit {modelname} nicht entgehen zu lassen..\",\n        billingStart: \"Die Abrechnung beginnt erst, wenn Du den Darsteller sehen kannst.\",\n        btnChargeNow: \"Jetzt aufladen\",\n        browserOutdated: \"Du verwendetest einen veralteten Browser!\",\n        browserOutdatedTagLine: \"Nutze alle Funktionen des VISIT-X Livechats in vollem Umfang.\",\n        browserOutdatedHrefText: \"Jetzt Update durchführen!\",\n        camToCam: \"cam2cam\",\n        charge: \"Guthaben aufladen\",\n        chargeNow: \"Aufladen\",\n        chargeSuccess: \"Die Aufladung von {amount} war erfolgreich!\",\n        chatStarted: \"Livechat gestartet\",\n        checkConnection: \"Du bist leider offline. Bitte prüfe Deine Verbindung bevor Du zu {modelName} in den Chat zurückkehrst!\",\n        chooseCamera: \"Wähle Deine Kamera aus\",\n        closeConfirmation1: \"Livechat wirklich beenden?\",\n        closeConfirmation2: \"{modelname} will weiter mit Dir chatten!\",\n        continue: \"Weiter chatten\",\n        enterFullscreen: \"Vollbildmodus aktivieren\",\n        exit: \"Livechat beenden\",\n        exitLoad: \"Lade jetzt Guthaben auf, um chatten zu können.\",\n        exitLoadAgain: \"Lade jetzt Dein Guthaben auf, um weiter chatten zu können.\",\n        freeChatEndHeadline: \"Deine Freiminuten sind aufgebraucht.\",\n        freeConnection: \"Der Verbindungsaufbau ist kostenfrei!\",\n        isMuted: \"Das Chatten mit dem Model ist derzeit nicht möglich\",\n        hint: \"Hinweis\",\n        insertEmoticons: \"Emoticon einfügen\",\n        interrupted: \"Livechat unterbrochen\",\n        invitePrivateChat: \"Zum privaten Chat einladen? ({price} pro Minute)\",\n        leaveFullscreen: \"Vollbildmodus verlassen\",\n        liveChat: \"Live chat\",\n        livePreview: \"Live Preview\",\n        lowBalance: \"Dein Guthaben ist bald aufgebraucht!\",\n        members: \"{value} Nutzer\",\n\t    groupChat: {\n\t\t    singleMember: \"{value} Member\",\n\t\t    mentionHeaderPartOne: \"{value} member in\",\n\t\t    mentionHeaderPartOneSingle: \"{value} members in\",\n\t\t    mentionHeaderPartTwo: \"'s group chat\",\n            members: \"{value} Nutzer\"\n\t    },\n        needAvs: \"Altersverfizierung notwendig\",\n        noMoney: \"Dein Guthaben ist aufgebraucht\",\n        popup: {\n            avs: \"{modelname} führt gerade einen unzensierten FSK18 Chat. Bestätige jetzt Deine Volljährigkeit, um unzensierte Inhalte genießen zu können.\",\n            ended: \"Livechat beendet\",\n            kicked: \"Du wurdest aus dem Chat mit {modelname} geworfen.\",\n            offline1: \"{modelname} ist leider offline gegangen. Bitte versuche es später wieder.\",\n            offline2: \"Du bist offline! Bitte überprüfe Deine Internetverbindung und versuche es erneut.\",\n            offline3: \"{modelname} ist jetzt leider offline und der Chat wurde beendet. Wir hoffen er hat Dir gefallen?\",\n            previewConnection: \"Die {live_preview_type} konnte leider nicht gestartet werden. Bitte überprüfe Deine Internetverbindung und versuche es erneut\",\n            previewDisabled: \"{modelname} hat die {live_preview_type} leider deaktiviert.\",\n            previewLimit: \"Die {live_preview_type} soll nur einen kurzen Einblick in die Chats geben und ist daher begrenzt.\",\n            privateCam: \"{modelname} befindet sich gerade in einem Private Chat. Bitte versuche es später wieder\",\n            privateChat1: \"{modelname} ist jetzt in einem Private Chat.\",\n            privateChat2: \"{modelname} ist jetzt in einem Private Chat mit einem anderen User. Klick jetzt auf Voyeurcam und sei live bei einem fremden Private Chat als Zuschauer dabei!\",\n            recharge: \"Diese Funktion steht Dir nach Deiner ersten Guthabenaufladung zur Verfügung!\",\n            reconnect: \"Möchtest Du die Verbindung wieder herstellen?\",\n            videoConnection: \"Dein Video Chat konnte leider nicht gestartet werden. Bitte überprüfe Deine Internetverbindung und versuche es erneut.\",\n            vip: \"Diese Funktion steht Dir nach Deiner ersten Guthabenaufladung zur Verfügung oder mit einer VIP Mitgliedschaft!\",\n            voicecall: \"Voicecall beendet\"\n        },\n        previewEndCountdown: \"Du kannst den kostenfreien Textchat noch bis zum Ablauf des Countdowns weiter nutzen oder direkt in einen Livechat mit {modelname} wechseln.\",\n        previewEndHeadline: \"Die kostenfreie Bildübertragung ist beendet.\",\n        previewEndText: \"Du kannst den kostenfreien Textchat weiter nutzen oder direkt in einen Livechat mit {modelname} wechseln.\",\n        privateChat: \"Private Chat\",\n        sendGift: \"Ich schenke Dir\",\n        sendImage: \"Sende ein Bild\",\n        softchat: \"SoftChat\",\n        softChatWait: \"Bitte warte, bis der Darsteller Dich für einen Soft-Chat bestätigt hat!\",\n        startVoyeur: \"Voyeurcam starten\",\n        stopLiveChat: \"Live chat beenden\",\n        timeLimit: \"Dein Textchatlimit ist bald aufgebraucht!\",\n        tipAmount: \"Welchen Betrag möchtest Du schenken?\",\n        tipFail: \"Trinkgeld konnte nicht gesendet werden! :-(\",\n        tipOk: \"Trinkgeld erfolgreich gesendet! Nett von Dir!\",\n        tip1: \"Gefällt Dir die Show?\",\n        tip2: \"Dann zeige es und verschenke ein Trinkgeld.\",\n        tip3: \"Jetzt verschenken!\",\n        tip4: \"Trinkgeld geben\",\n        tooltipNoVolume1: \"Der Livechat wird ohne Ton gestartet.\",\n        tooltipNoVolume2: \"Um den Amateur zu h\\u00f6ren, aktiviere hier den Ton.\",\n        tooltipPreview: \"{seconds} Sekunden live in den Chat schauen und kostenlos schreiben\",\n        tooltipVideochat: \"Live Webcam-Chat - Zuschauen und Schreiben\",\n        tooltipVoyeur: \"Anonym als Voyeur zuschauen, ohne zu schreiben.\",\n        toyControl: {\n            highTooltipText: \"Verwende die Stufe Low oder Medium, um f\\u00fcr diesen Chat die Stufe High freizuschalten.\",\n            highTooltipTitle: \"Hohe Intensit\\u00e4t\",\n            maximumToyDuration: \"( bis zu {value} sek )\",\n            toyControl: \"Toy Control\",\n            toyDescription: \"Du hast die Kontrolle - Entscheide selbst, wie Du Deine Auserwählte mit dem Lovense Toy zum Orgasmus bringst. Du hast die Wahl – hart oder zart!\",\n            toyDuration: \"( {value} sek )\",\n            toyIntensityHigh: \"High\",\n            toyIntensityLow: \"Low\",\n            toyIntensityMedium: \"Medium\",\n            toyIntensityRandom: \"Random\",\n            toyLearnMore: \"Mehr erfahren\",\n            lovenseAvailable: \"Lovense verfügbar\",\n            lovenseFinished: \"Lovense ist fertig\",\n            lovenseStartedMessage: \"Lovense ist gestartet (${name} ${price}${currency})\",\n            lovenseVibrating: \"Lovense vibriert\",\n            randomTooltipText: \"Benutze die Stufe High, um Level Random für diesen Chat freizuschalten. Intensität und Dauer werden zufällig ausgewählt.\",\n            randomTooltipTitle: \"${name} - verschiedene Intensitäten\"\n        },\n        verifyAge: \"Volljährigkeit bestätigen\",\n        vipLivePreview: \"VIP Live Preview\",\n        vipPreviewStarted: \"VIP Preview gestartet\",\n        voyeur: \"Voyeur\",\n        voyeurCam: \"Voyeur Cam\",\n        voyeurTip1: \"Gefällt Dir die Show?\",\n        voyeurTip2: \"Dann zeige es & verschenke unerkannt Trinkgeld!\",\n        voyeurTip3: \"Du bleibst im Voyeurchat\",\n        voyeurTip4: \"Jetzt verschenken\",\n        voyeurTipFail: \"Trinkgeld konnte nicht gesendet werden! :-(\",\n        voyeurTipOk: \"Trinkgeld erfolgreich gesendet! Nett von Dir!\",\n        voyeurToSingleInfo: \"{modelname} ist jetzt in einem privaten Chat. Möchtest Du als Vouyeur live bei der Private Chat Sitzung dabei sein?\"\n    },\n    common: {\n        advertised: \"Geworben\",\n        all: \"Alle\",\n        archive: \"Archivieren\",\n        archived: \"Archiviert\",\n        cancel: \"Abbrechen\",\n        close: \"Schließen\",\n        done: \"Fertig\",\n        edit: \"Bearbeiten\",\n        gift: \"Geschenk\",\n        gifts: \"Geschenke\",\n        hint: \"Hinweis\",\n        header: {\n            lastMessageOn: \"Nachrichten von:\",\n            messageFrom: \"Letzte message {value}\"\n        },\n        giftBundles: \"Geschenk-Bundles\",\n        bundleBuy: \"Für {amount} kaufen\",\n        bundleBuySuccess: \"Das Geschenke-Bundle wurde erfolgreich gekauft!\",\n        bundles: \"Bundles\",\n        contains: \"bestehend aus:\",\n        bundleInfo: \"Nach Kauf werden diese Gegestände automatisch Deinem Bestand hinzugefügt\",\n        bundlesReducedPrice: \"Pakete zum Sparpreis\",\n        imageUploadFail: \"Hochladen fehlgeschlagen - fehlerhaftes Format!\",\n        imageUploadOk: \"Dein Bild wurde erfolgreich hochgeladen!\",\n        networkoff: \"Verbindung zum Server ist unterbrochen.\",\n        no: \"Nein\",\n        none: \"Keine\",\n        notNow: \"Nicht jetzt\",\n        notes: \"Notizen\",\n        off: \"Aus\",\n        ok: \"Ok\",\n        on: \"An\",\n        onehour: \"vor 1 Stunde\",\n        paymentSuccess: \"Guthaben erfolgreich aufgeladen!\",\n        perMinute: \"{price} / MIN\",\n        read: \"Gelesen\",\n        regularcustomer: \"Stammkunde\",\n        reload: \"neu laden\",\n        save: \"Speichern\",\n        seconds: \"Sekunden\",\n        sure: \"bist du sicher?\",\n        thankYou: \"Danke\",\n        title: \"VXLIVE\",\n        titlemessage: \"Neue Message\",\n        titlemessages: \"Neue Messages\",\n        unarchive: \"Entarchivieren\",\n        userinfos: \"Userinfos\",\n        yes: \"Ja\",\n        yesterday: \"gestern\"\n    },\n    error: {\n        error: \"Es ist ein Fehler aufgetreten\",\n        noCamera: \"Keine Kamera gefunden!\",\n        initFail: \"Messenger konnte nicht initialisiert werden\",\n        textLimit: \"Die Nachricht ist zu lang. Limit ist 1000 Buchstaben.\"\n    },\n    warning: {\n        connectionPoor: \"Deine Internetverbindung ist schlecht. Möglicherweise leidet darunter die Videochatqualität.\"\n    },\n    message: {\n        delete: \"Nachricht löschen\",\n        deleteConfirmation: \"Möchtest Du diese Nachricht wirklich endgültig löschen?\",\n        selectEmoticon: \"Wähle ein Emoticon aus\",\n        send: \"Nachricht senden\",\n        sendGifts: \"Geschenke senden\",\n        sendImage: \"Bild senden\",\n        sendNow: \"Jetzt senden\",\n        write: \"Schreibe deine nächste Nachricht\",\n        writeFree: \"Nachricht schreiben (kostenlos)\",\n        writePrice: \"Nachricht schreiben (für nur {amount}) ...\",\n        menuSendGift: \"Geschenk schicken\",\n        menuSendMoney: \"Geld senden\",\n        menuSendPhotos: \"Fotos schicken\",\n        menuSendEmoticon: \"Emojis schicken\",\n        sendAudioMessage: \"Audio-Nachricht senden\"\n    },\n    user: {\n        addFavorite: \"Favorit hinufügen\",\n        addNote: \"Füge eine Notiz hinzu\",\n        becomeVIP: \"oder jetzt VIP Mitglied werden\",\n        boughtGifts: \"Gekaufte Geschenke\",\n        boughtGiftsHeading: \"Deine bereits gekauften Geschenke\",\n        noMoney: \"Nicht genügend Gurhaben!\",\n        removeFavorite: \"Favorit entfernen\",\n        stock: \"Bestand\",\n        verifyAge: \"Jetzt Alter verifizieren\",\n        vip: \"VIP\",\n        visitProfile: \"Profil besuchen\",\n        youAreOffline: \"Du bist offline!\",\n        yourNote: \"Deine Notiz\",\n        yourStock: \"Dein Bestand\"\n    },\n    avs: {\n        hint: \"Wichtiger Hinweis:\",\n        requestAccess: \"Damit wir Dein Alter verifizieren k\\u00f6nnen, ben\\u00f6tigen wir Zugriff auf Deine Webcam\",\n        allowAccess: \"Zugriff erlauben\"\n    }\n};\n\nexport default de;\n","import { ITranslation } from \"../../redux/store\";\n\nconst en: ITranslation = {\n    chat: {\n        actionMute: \"mute\",\n        actionUnmute: \"unmute\",\n        actorWaiting: \"{modelname} is waiting for you! Return to the chat now!\",\n        adultContentInfo: \"{modelname} does currently broadcast adult content. Do you want to see EVERYTHING?\",\n        autoRecharge: \"Your account is automatically being recharged with {amount}.\",\n        avsNeeded: \"Your chat with {modelname} has been closed because the age verification process could not be successfully completed. Verify your age now and you can chat with {modelname} again.\",\n        billingStart: \"Billing does not start before you are able to see the performer.\",\n        btnChargeNow: \"Charge now\",\n        browserOutdated: \"Your browser is outdated!\",\n        browserOutdatedTagLine: \"Take full advantage of all the VISIT-X livechat features.\",\n        browserOutdatedHrefText: \"Update your browser now!\",\n        camToCam: \"cam2cam\",\n        charge: \"Top up your balance\",\n        chargeNow: \"Top up\",\n        chargeSuccess: \"Charging of {amount} was successful!\",\n        chatStarted: \"Livechat started\",\n        checkConnection: \"Please check your internet connection before returning to the chat with {modelname}\",\n        chooseCamera: \"Choose your camera\",\n        closeConfirmation1: \"Do you really want to close the chat?\",\n        closeConfirmation2: \"{modelname} wants to continue chatting with you!\",\n        continue: \"Continue with chat\",\n        exit: \"Exit chat\",\n        enterFullscreen: \"Enter full screen\",\n        exitLoad: \"Load your account and you can start to chat.\",\n        exitLoadAgain: \"Load your account and you can chat again.\",\n        freeConnection: \"Connection establishment is free!\",\n        freeChatEndHeadline: \"The free chat has ended.\",\n        isMuted: \"Messaging with the model is currently not possible\",\n        hint: \"Hint\",\n        insertEmoticons: \"Insert emoticons\",\n        interrupted: \"Livechat interrupted\",\n        invitePrivateChat: \"Invite to a private chat? ({price} per minute)\",\n        leaveFullscreen: \"Leave full screen\",\n        liveChat: \"Live chat\",\n        livePreview: \"Live Preview\",\n        lowBalance: \"You are running out of balance!\",\n        members: \"{value} Members\",\n\t\tgroupChat: {\n\t\t\tsingleMember: \"{value} Member\",\n\t\t\tmentionHeaderPartOne: \"{value} members in\",\n\t\t\tmentionHeaderPartOneSingle: \"{value} member in\",\n\t\t\tmentionHeaderPartTwo: \"'s group chat\",\n            members: \"{value} Members\"\n\t\t},\n        needAvs: \"Age verification necessary\",\n        noMoney: \"You've run out of money\",\n        popup: {\n            avs: \"{modelname} does currently broadcast adult content. Verify your age now to enjoy the uncensored content.\",\n            ended: \"Your Livechat session has ended\",\n            kicked: \"You have been ejected from your chat with {modelname}.\",\n            offline1: \"{modelname} just went offline. Please try again later.\",\n            offline2: \"You are offline. Please check your internet connection and try again.\",\n            offline3: \"{modelname} is now offline and the chat is over. We hope, you liked the chat?\",\n            previewConnection: \"{live_preview_type} could not be started. Please check your internet connection and try again\",\n            previewDisabled: \"Sorry, {modelname} does not provide a {live_preview_type}.\",\n            previewLimit: \"Your {live_preview_type} has reached its limit for this hour. Please try again in a short time!\",\n            privateCam: \"{modelname} is currently in a private camsession. Please try again later.\",\n            privateChat1: \"{modelname} is now in a private chat.\",\n            privateChat2: \"{modelname} is now in a private chat. Click on the button below and attend the private chat.\",\n            recharge: \"This feature is available after your first account charge.\",\n            reconnect: \"Do you want to reconnect?\",\n            videoConnection: \"Video chat could not be started. Please check your internet connection and try again.\",\n            vip: \"This feature is available after your first account charge or with a VIP membership.\",\n            voicecall: \"Voicecall ended\"\n        },\n        previewEndCountdown: \"You can continue to use the free text chat until the countdown ends or switch directly to a live chat with {modelname}.\",\n        previewEndHeadline: \"The free chat preview has ended.\",\n        previewEndText: \"You are free to continue using the free text chat or to start a Livechat with {modelname}\",\n        privateChat: \"Private Chat\",\n        sendGift: \"Send a gift\",\n        sendImage: \"Send an image\",\n        softchat: \"SoftChat\",\n        softChatWait: \"Please wait until the performer accepted you for a Soft-Chat!\",\n        startVoyeur: \"Start voyeurcam\",\n        stopLiveChat: \"Stop live chat\",\n        timeLimit: \"You will shortly reach your text chat time limit!\",\n        tipAmount: \"Which amount do you want to give away?\",\n        tipFail: \"Could not send your tip! :-(\",\n        tipOk: \"Tip sent! What a gentleman!\",\n        tip1: \"Do you like the show?\",\n        tip2: \"Show it to the model by a tip.\",\n        tip3: \"Tip now!\",\n        tip4: \"Give a tip\",\n        tooltipNoVolume1: \"The live chat is started without sound.\",\n        tooltipNoVolume2: \"To hear the amateur, activate the sound here.\",\n        tooltipPreview: \"{seconds} seconds live chat preview and free text chat\",\n        tooltipVideochat: \"Live webcam chat. Watch and write.\",\n        tooltipVoyeur: \"Watch anonymous as a voyeur without writing.\",\n        toyControl: {\n            highTooltipText: \"Use level low or medium to unlock level high for this chat.\",\n            highTooltipTitle: \"high intensity\",\n            maximumToyDuration: \"( up to {value} sec )\",\n            toyControl: \"Toy Control\",\n            toyDescription: \"You are in control - Decide for yourself how to bring your chosen one to orgasm with the Lovense Toy. You have the choice - hard or tender!\",\n            toyDuration: \"( {value} sec )\",\n            toyIntensityHigh: \"High\",\n            toyIntensityLow: \"Low\",\n            toyIntensityMedium: \"Medium\",\n            toyIntensityRandom: \"Random\",\n            toyLearnMore: \"Learn more\",\n            lovenseAvailable: \"Lovense available\",\n            lovenseFinished: \"Lovense finished\",\n            lovenseStartedMessage: \"Lovense started (${name} ${price}${currency})\",\n            lovenseVibrating: \"Lovense Vibrating\",\n            randomTooltipText: \"Use level high to unlock level random for this chat. Intensity and duration are selected randomly.\",\n            randomTooltipTitle: \"{name} - various intensities\"\n        },\n        verifyAge: \"Verify age\",\n        vipLivePreview: \"VIP Live Preview\",\n        vipPreviewStarted: \"VIP Preview started\",\n        voyeur: \"Voyeur\",\n        voyeurCam: \"Voyeur Cam\",\n        voyeurTip1: \"Do you like the show?\",\n        voyeurTip2: \"Then show it & give away anonymous tip!\",\n        voyeurTip3: \"You stay in the voyeurchat\",\n        voyeurTip4: \"Give away now\",\n        voyeurTipFail: \"Could not send your tip! :-(\",\n        voyeurTipOk: \"Tip sent! What a gentleman!\",\n        voyeurToSingleInfo: \"{modelname} is now in a private chat. Would you like to spy on the private chat?\"\n    },\n    common: {\n        advertised: \"advertised\",\n        all: \"All\",\n        archive: \"archived\",\n        archived: \"archived\",\n        cancel: \"cancel\",\n        close: \"Close\",\n        done: \"done\",\n        edit: \"edit\",\n        gift: \"Gift\",\n        gifts: \"Gifts\",\n        hint: \"Hint\",\n        header: {\n            lastMessageOn: \"Messages from:\",\n            messageFrom: \"Last message on {value}\"\n        },\n        giftBundles: \"Gift Bundles\",\n        bundleBuy: \"Buy for {amount}\",\n        bundleBuySuccess: \"Your gift bundle purchase has been successful!\",\n        bundles: \"Bundles\",\n        contains: \"Contains\",\n        bundleInfo: \"After purchase, these items are automatically added to your inventory\",\n        bundlesReducedPrice: \"Packages at a reduced price\",\n        imageUploadFail: \"File upload unsuccessful - unaccepted file format!\",\n        imageUploadOk: \"The picture has been uploaded with success!\",\n        networkoff: \"Connection to server lost.\",\n        no: \"No\",\n        none: \"none\",\n        notNow: \"Not now\",\n        notes: \"Notes\",\n        off: \"Off\",\n        ok: \"ok\",\n        on: \"On\",\n        onehour: \"before 1 Hour\",\n        paymentSuccess: \"Payment successful!\",\n        perMinute: \"{price} / MIN\",\n        read: \"read\",\n        regularcustomer: \"Regular Customer\",\n        reload: \"reload\",\n        save: \"Save\",\n        seconds: \"seconds\",\n        sure: \"are you sure?\",\n        thankYou: \"Thank you\",\n        title: \"VXLIVE\",\n        titlemessage: \"new Message\",\n        titlemessages: \"new Messages\",\n        unarchive: \"unarchived\",\n        userinfos: \"Userinfos\",\n        yes: \"Yes\",\n        yesterday: \"yesterday\"\n    },\n    error: {\n        error: \"An error occurred\",\n        noCamera: \"No camera detected!\",\n        initFail: \"Messenger could not be initialized.\",\n        textLimit: \"The message is too long. Limit is 1000 letters.\"\n    },\n    warning: {\n        connectionPoor: \"Your internet connection is bad. Video chat quality may suffer.\"\n    },\n    message: {\n        delete: \"Delete message\",\n        deleteConfirmation: \"Do you really want to delete the message permanently?\",\n        selectEmoticon: \"Select an emoticon\",\n        send: \"send message\",\n        sendGifts: \"Send gifts\",\n        sendImage: \"Send an image\",\n        sendNow: \"Send now\",\n        write: \"Write a message\",\n        writeFree: \"Write a message (free)\",\n        writePrice: \"Type here... just for {amount}\",\n        menuSendGift: \"Send a gift\",\n        menuSendMoney: \"Send money\",\n        menuSendPhotos: \"Send photos\",\n        menuSendEmoticon: \"Select an emoticon\",\n        sendAudioMessage: \"Send audio message\"\n    },\n    user: {\n        addFavorite: \"Add as favorite\",\n        addNote: \"Add your note\",\n        becomeVIP: \"or become a VIP member now\",\n        boughtGifts: \"Bought gifts\",\n        boughtGiftsHeading: \"Your already purchased gifts:\",\n        noMoney: \"Not enough money for this action!\",\n        removeFavorite: \"Remove favorite\",\n        stock: \"Stock\",\n        verifyAge: \"Verify age now\",\n        vip: \"VIP\",\n        visitProfile: \"Visit profile\",\n        youAreOffline: \"You are offline!\",\n        yourNote: \"Your note\",\n        yourStock: \"Your Stock\"\n    },\n    avs: {\n        hint: \"Important hint:\",\n        requestAccess: \"To verify you age, we need access to your webcam\",\n        allowAccess: \"Allow access\"\n    }\n};\n\nexport default en;\n","import { ITranslation } from \"../../redux/store\";\n\nconst es: ITranslation = {\n    avs: {\n        allowAccess: \"Permitir acceso\",\n        hint: \"Nota importante:\",\n        requestAccess: \"Para verificar tu edad necesitamos acceso a tu webcam\",\n    },\n    chat: {\n        actionMute: \"Silenciar\",\n        actionUnmute: \"Activar sonido\",\n        actorWaiting: \"¡{modelname} te está esperando! ¡Vuelve al Videochat ahora!\",\n        adultContentInfo: \"{modelname} está actualmente emitiendo contenido para adultos. ¿Te gustaría realmente verlo TODO?\",\n        autoRecharge: \"Tu cuenta ha sido automáticamente recargada con {amount}.\",\n        avsNeeded: \"Tu Videochat con {modelname} ha finalizado porque el proceso de verificación de edad no se ha podido completar con éxito. Verifica tu edad ahora y podrás volver a chatear con {modelname}.\",\n        billingStart: \"La facturación se inicia solo cuando puedas ver a la modelo.\",\n        browserOutdated: \"¡Tu navegador está anticuado!\",\n        browserOutdatedHrefText: \"¡Actualiza tu navegador ahora!\",\n        browserOutdatedTagLine: \"Aprovecha al máximo todas las funciones del Videochat de VISIT-X.\",\n        btnChargeNow: \"Carga ahora\",\n        camToCam: \"Tu webcam\",\n        charge: \"Recarga tu saldo\",\n        chargeNow: \"Recargar\",\n        chargeSuccess: \"¡Se cargó {amount} con éxito!\",\n        chatStarted: \"Videochat en vivo iniciado\",\n        checkConnection: \"Por favor comprueba tu conexión a internet antes de volver al Videochat de {modelname}\",\n        chooseCamera: \"Elige tu camara\",\n        closeConfirmation1: \"¿Realmente quieres cerrar el Videochat?\",\n        closeConfirmation2: \"¡{modelname} quiere continuar chateando contigo!\",\n        continue: \"Continuar chateando\",\n        enterFullscreen: \"Abrir a pantalla completa\",\n        exit: \"Salir del Videochat\",\n        exitLoad: \"Carga tu cuenta para empezar a chatear.\",\n        exitLoadAgain: \"Recarga tu cuenta para continuar chateando.\",\n        freeChatEndHeadline: \"El chat gratuito ha finalizado.\",\n        freeConnection: \"¡Establecimiento de conexión sin coste!\",\n        isMuted: \"Actualmente no se puede chatear con la modelo\",\n        hint: \"Nota\",\n        insertEmoticons: \"Insertar emoticonos\",\n        interrupted: \"Videochat en vivo interrumpido\",\n        invitePrivateChat: \"¿Invitar al chat privado? ({price} por minuto)\",\n        leaveFullscreen: \"Salir de pantalla completa\",\n        liveChat: \"Videochat\",\n        livePreview: \"Previo en vivo\",\n        lowBalance: \"¡Te estás quedando sin saldo!\",\n        members: \"{value} usarios\",\n\t\tgroupChat: {\n\t\t\tsingleMember: \"{value} Member\",\n\t\t\tmentionHeaderPartOne: \"{value} member in\",\n\t\t\tmentionHeaderPartOneSingle: \"{value} members in\",\n\t\t\tmentionHeaderPartTwo: \"'s group chat\",\n\t\t\tmembers: \"{value} usarios\",\n\t\t},\n        needAvs: \"Verificación de edad necesaria\",\n        noMoney: \"Te has quedado sin saldo\",\n        popup: {\n            avs: \"{modelname} está emitiendo contenido explusivo para adultos. Verifica tu edad para disfrutar de la emisión del Videochat sin censura.\",\n            ended: \"Tu sesión de Videochat ha finalizado\",\n            kicked: \"Has dejado de chatear con {modelname}.\",\n            offline1: \"{modelname} se acaba de desconectar. Por favor inténtalo de nuevo más tarde.\",\n            offline2: \"Sin conexión a internet. Por favor verifica tu conexión a Internet e inténtalo de nuevo.\",\n            offline3: \"{modelname} está desconectada y el chat ha terminado. Esperamos que hayas disfrutado. \",\n            previewConnection: \"{live_preview_type} no se ha podido iniciar. Por favor verifica tu conexión a internet e inténtalo de nuevo.\",\n            previewDisabled: \"Lo sentimos, {modelname} no dispone de {live_preview_type}.\",\n            previewLimit: \"Tu {live_preview_type} ha alcanzado su límite de tiempo en esta hora. ¡Por favor inténtalo de nuevo más tarde!\",\n            privateCam: \"{modelname} está actualmente en un Privado.\",\n            privateChat1: \"{modelname} está ahora en un chat Privado.\",\n            privateChat2: \"{modelname} está ahora en un chat Privado. Toca el botón abajo para unirte al Privado como Voyeur.\",\n            recharge: \"Esta función solo está disponible después de tu primer cargo.\",\n            reconnect: \"¿Quieres volver a conectarte?\",\n            videoConnection: \"Desafortunadamente, el chat de video no pudo iniciarse. ¡Por favor inténtalo de nuevo más tarde!\",\n            vip: \"Esta función solo está disponible después de tu primer cargo en cuenta o como miembro VIP.\",\n            voicecall: \"Llamada de voz finalizada\"\n        },\n        previewEndCountdown: \"Puede continuar utilizando el chat de texto gratuito hasta que finalice la cuenta regresiva o cambiar directamente a un chat en vivo con {modelname}.\",\n        previewEndHeadline: \"El previo gratuito ha finalizado.\",\n        previewEndText: \"Puedes continuar usando el chat de texto gratuito o iniciar un Videochat con {modelname}\",\n        privateChat: \"Privado\",\n        sendGift: \"Envíar un regalo\",\n        sendImage: \"Envíar una imagen\",\n        softChatWait: \"¡Por favor espera a que la modelo haya aceptado el Soft-Chat!\",\n        softchat: \"SoftChat\",\n        startVoyeur: \"Iniciar Voyeurcam\",\n        stopLiveChat: \"Detener Videochat\",\n        timeLimit: \"¡Pronto llegarás a tu límite de tiempo en el chat de texto!\",\n        tipAmount: \"¿Qué cantidad quieres dar?\",\n        tipFail: \"¡No se ha podido enviar tu propina! :-(\",\n        tipOk: \"¡Propina enviada! ¡Qué caballero!\",\n        tip1: \"¿Te gusta el espectáculo?\",\n        tip2: \"Muéstresela a la modelo con un consejo.\",\n        tip3: \"Regalar ahora!\",\n        tip4: \"Hacer una propina\",\n        tooltipNoVolume1: \"El Videochat se iniciado sin sonido.\",\n        tooltipNoVolume2: \"Para escuchar al amateur, activa el sonido aquí.\",\n        tooltipPreview: \"Videochat previo de {seconds} segundos y chat de texto gratuito\",\n        tooltipVideochat: \"Chat de webcam en vivo. Observa y escribe.\",\n        tooltipVoyeur: \"Observa anónimamente como voyeur sin escribir.\",\n        toyControl: {\n            highTooltipText: \"Use el nivel bajo o medio para desbloquear el nivel alto para este chat.\",\n            highTooltipTitle: \"Alta intensidad\",\n            lovenseAvailable: \"Lovense disponible\",\n            lovenseFinished: \"Lovense terminado\",\n            lovenseStartedMessage: \"Lovense comenzó (${name} ${price}${currency})\",\n            lovenseVibrating: \"Lovense vibrante\",\n            maximumToyDuration: \"( hasta {value} seg )\",\n            randomTooltipText: \"Use el nivel alto para desbloquear el nivel aleatorio para este chat. La intensidad y la duración se seleccionan al azar.\",\n            randomTooltipTitle: \"${name} - varias intensidades\",\n            toyControl: \"Control de Juguete\",\n            toyDescription: \"Tu tienes el control - Decide como llevar al orgasmo a tu elegida con el juguete de Lovense. Tu eliges ¡Duro o suave!\",\n            toyDuration: \"( {value} seg )\",\n            toyIntensityHigh: \"Alto\",\n            toyIntensityLow: \"Bajo\",\n            toyIntensityMedium: \"Medio\",\n            toyIntensityRandom: \"Aleatorio\",\n            toyLearnMore: \"Saber más\"\n        },\n        verifyAge: \"Verificar edad\",\n        vipLivePreview: \"Previo en vivo VIP\",\n        vipPreviewStarted: \"Previo VIP iniciado\",\n        voyeur: \"Voyeur\",\n        voyeurCam: \"Voyeur Cam\",\n        voyeurTip1: \"¿Te está gustando el show?\",\n        voyeurTip2: \"¡Entonces demuestraselo y dale una propina anónima!\",\n        voyeurTip3: \"Te quedas en el Voyeurchat\",\n        voyeurTip4: \"Regalar ahora\",\n        voyeurTipFail: \"¡No se ha podido enviar tu propina! :-(\",\n        voyeurTipOk: \"¡Propina enviada! ¡Qué caballero!\",\n        voyeurToSingleInfo: \"{modelname} esta en un Privado. ¿Te gustaría espiar su Privado?\"\n    },\n    common: {\n        advertised: \"Anunciado\",\n        all: \"Todos\",\n        archive: \"Archivado\",\n        archived: \"Archivado\",\n        bundleBuy: \"Compra por {amount}\",\n        bundleBuySuccess: \"¡Compra de paquete regalo realizada con éxito!\",\n        bundleInfo: \"Después de la compra, estos productos son automáticamente agregados a tu inventario\",\n        bundles: \"Paquetes\",\n        bundlesReducedPrice: \"Paquetes a precio reducido\",\n        cancel: \"Cancelar\",\n        close: \"Cerrar\",\n        contains: \"contiene:\",\n        done: \"Hecho\",\n        edit: \"Editar\",\n        gift: \"Regalo\",\n        giftBundles: \"Paquetes regalo:\",\n        gifts: \"Regalos\",\n        hint: \"Nota\",\n        header: {\n            lastMessageOn: \"Mensaje de:\",\n            messageFrom: \"Último mensaje en {value}\"\n        },\n        imageUploadFail: \"¡No se ha podido subir el archivo - formato de archivo incorrecto!\",\n        imageUploadOk: \"¡La imagen se ha subido correctamente!\",\n        networkoff: \"Conexión con el servidor perdida.\",\n        no: \"No\",\n        none: \"Ninguno\",\n        notNow: \"Ahora no\",\n        notes: \"Notas\",\n        off: \"Desactivado\",\n        ok: \"OK\",\n        on: \"Activado\",\n        onehour: \"hace 1 hora\",\n        paymentSuccess: \"¡Pago realizado con éxito!\",\n        perMinute: \"{price} / MIN\",\n        read: \"Leer\",\n        regularcustomer: \"Cliente habitual\",\n        reload: \"Recargar\",\n        save: \"Guardar\",\n        seconds: \"segundos\",\n        sure: \"¿Estás seguro?\",\n        thankYou: \"Gracias\",\n        title: \"VXLIVE\",\n        titlemessage: \"nuevo Mensaje\",\n        titlemessages: \"nuevos Mensajes\",\n        unarchive: \"Desarchivado\",\n        userinfos: \"Información del usuario\",\n        yes: \"Sí\",\n        yesterday: \"ayer\"\n    },\n    error: {\n        error: \"Ha ocurrido un error\",\n        initFail: \"No se pudo inicializar Messenger\",\n        noCamera: \"¡No se ha detectado la webcam!\",\n        textLimit: \"El mensaje es muy largo. El límite es de 1000 letras.\"\n    },\n    warning: {\n        connectionPoor: \"Tu conexión a internet es mala. La calidad del video chat puede sufrir.\"\n    },\n    message: {\n        delete: \"Borrar mensaje\",\n        deleteConfirmation: \"¿Realmente quieres borrar el mensaje permanentemente?\",\n        menuSendEmoticon: \"Enviar emoticono\",\n        menuSendGift: \"Enviar un regalo\",\n        menuSendMoney: \"Enviar dinero\",\n        menuSendPhotos: \"Enviar fotos\",\n        selectEmoticon: \"Selecciona un emoticono\",\n        send: \"Enviar mensaje\",\n        sendGifts: \"Enviar regalos\",\n        sendImage: \"Enviar una imagen\",\n        sendNow: \"Enviar ahora\",\n        write: \"Escribe tu siguiente mensaje\",\n        writeFree: \"Escribe un mensaje aquí\",\n        writePrice: \"Escribe aquí... por solo {amount}\",\n        sendAudioMessage: \"Enviar mensaje de audio\"\n    },\n    user: {\n        addFavorite: \"Añadir a favoritos\",\n        addNote: \"Añade tu nota\",\n        becomeVIP: \"hazte miembro VIP ahora\",\n        boughtGifts: \"Regalos comprados\",\n        boughtGiftsHeading: \"Tus regalos ya comprados:\",\n        noMoney: \"¡Sin créditos suficientes para esta acción!\",\n        removeFavorite: \"Eliminar de favoritos\",\n        stock: \"Surtido\",\n        verifyAge: \"Verifica tu edad ahora\",\n        vip: \"VIP\",\n        visitProfile: \"Ver perfil\",\n        youAreOffline: \"Estás desconectado!\",\n        yourNote: \"Tu nota\",\n        yourStock: \"Tu surtido\"\n    }\n};\n\nexport default es;\n","import ITheme from \"./interfaces\";\n\nconst primaryColor = \"#FFFFFF\";\nconst secondaryColor = \"#888888\";\n\nconst greyColor = \"#aaa\";\nconst lightGreyColor = \"#EBECED\";\nconst darkGreyColor = \"#888\";\nconst blackColor = \"#151617\";\n\nconst theme: ITheme = {\n    name: \"light-theme\",\n    typography: {\n        fontFamily: \"Roboto\",\n        secondaryFontFamily: \"\",\n        weight: {\n            thin: 100,\n            light: 250,\n            regular: 300,\n            medium: 400,\n            bold: 700\n        },\n\t},\n\n\tlayout: {\n\t\ttextMode: {\n\t\t\tminWidth: 500,\n\t\t\tminHeight: 500\n\t\t},\n\t\tmessageSection: {\n\t\t\tresponsiveBreakpointWidth: 425\n\t\t}\n\t},\n\n    colors: {\n\t\toverlay: \"#000\",\n    \tbaseButtonIcon: '#aaa',\n        recordingIcon: '#aaa',\n\t    fontSwitcherIcon: '#888',\n        sendMessageButton: '#1F93E9',\n        cancelRecordingHover: '#1F93E9',\n\t\tcam2CamBackgroundColor: \"#3C3D3E\",\n        cam2CamDisabledColor: \"#bdbcbf\",\n\t\tcam2CamHoverColor: \"#626365\",\n        messengerWrapper: primaryColor,\n        messengerClose: \"#AAAAAA\",\n        messengerLoader: secondaryColor,\n        messageEditorBackgroundColor: primaryColor,\n        messageEditorPlaceholderColor: greyColor,\n        messageEditorTextColor: darkGreyColor,\n        mentionBackground: '#ECECEE',\n\t\tmentionHeaderText: darkGreyColor,\n\n        groupChat: {\n            modelInfoText: '#43B31C',\n            pictureBorder: '#43B31C',\n\n            userMessageText: blackColor,\n            userMessageBackground: primaryColor,\n            usernameColorSet: [\n                \"#0080FF\", \"#02CE96\", \"#E100C3\", \"#7D02CE\", \"#E10000\",\n                \"#0026E1\", \"#F2CA00\", \"#E47B04\", \"#BF5300\", \"#F37396\",\n                \"#555555\", \"#5D371A\", \"#7A84DB\", \"#5ACCFF\", \"#265F98\",\n                \"#940059\", \"#055000\"\n            ],\n\n            modelMessageText: blackColor,\n            modelMessageBackground: primaryColor,\n            modelMessageUsername: \"#43b31c\",\n\n            clientMessageText: blackColor,\n            clientMessageBackground: \"#c1d9eb\",\n            clientName: \"#262728\",\n\n            participants: {\n                bgColor: '#262728',\n                textColor: '#FFF'\n            }\n        },\n\n        chatBoxContainer: lightGreyColor,\n        imageUrlContent: '#111111',\n        groupColor: lightGreyColor,\n        groupTextColor: secondaryColor,\n        profileLink: \"#000\",\n        profileLinkHover: \"#626365\",\n        profileMotto: secondaryColor,\n        messengerButtonInvertedBackground: greyColor,\n        messengerButtonHover: secondaryColor,\n        messengerButtonInvertedText: primaryColor,\n        windowBackground: \"#F7F7F7\",\n        windowItemsShadow: blackColor,\n        windowPaginatorBackground: \"#EAEAEA\",\n        clientMessageBackground: \"#c1d9eb\",\n        fullscreenSystemMessageBackground: darkGreyColor,\n        fullscreenSystemMessageText: '#FFF',\n        modelMessageBackground: primaryColor,\n        messageText: \"#111111\",\n        messageTimeAgo: secondaryColor,\n        videoChatBackground: blackColor,\n        videoChatControlsBackground: \"transparent\",\n        videoChatControlsBackgroundHover: \"#626365\",\n        videoChatControlsText: primaryColor,\n        onlineBulletColor: \"#43B31C\",\n        offlineBulletColor: '#F1F1F1',\n\n        selectedButton: {\n            defaultBackground: \"#43b31c\",\n            defaultBackgroundHover: \"#66e03b\",\n\n            blackBackground: '#3C3D3E',\n            blackBackgroundHover: '#626365',\n\n\t\t\tdefaultDropDownBackground: greyColor,\n            blueBackgroundHover: '#1F93E9',\n            greyBackgroundHover: '#aaaaaa',\n\n            text: primaryColor,\n\t        clickHighlight: '#00000000'\n        },\n\n        initiallyMutedButtonBackground: '#0192e6',\n\t\tinitiallyMutedToolTipContentText: blackColor,\n\n        checkedStrokeColor: primaryColor,\n        checkedFillColor: secondaryColor,\n\n        dropDownContentBgColor: '#F7F7F7',\n\n        timerFillColor: \"#ff4d3c\",\n        timerUnfillColor: darkGreyColor,\n        timerBgColor: \"#3c3d3e\",\n        timerTextColor: primaryColor,\n\n        livePreviewTimer: {\n            fillColor: \"#1F93E9\",\n            unfillColor: \"#CCCCCC\",\n            bgColor: primaryColor,\n            textColor: \"#1D1E1F\"\n        },\n\n        editor: {\n            background: primaryColor,\n            text: '#151617'\n        },\n\n        giftPageTitle: darkGreyColor,\n        giftPageText: '#888',\n\n        avsCam2CamPopup: {\n            backgroundColor: primaryColor,\n            smallTextColor: secondaryColor,\n            mainTextColor: blackColor,\n            button: {\n                standard: '#1F93E9',\n                onHover: '#1F93E9',\n                textColor: primaryColor\n            }\n        },\n\n        preChatPopup: {\n            backgroundColor: \"#1b1c1d\",\n            textColor: \"#dddddd\"\n        },\n\n        actionResponse: {\n            warningColor: \"#fffba1\",\n            errorColor: \"#ffc9c4\",\n            successfulColor: \"#c6e8ba\"\n        },\n\n        userPrompt: {\n            tipColor: \"#000000\",\n            tipPriceColor: darkGreyColor,\n            tipButtonColor: primaryColor,\n            tipButtonBackgroundColor: '#43b31c',\n            tipButtonBackgroundHoverColor: '#66e03b'\n        },\n\n        modalCloseButtonColor: '#FFF',\n\n        toySection: {\n            primaryColor: \"#FE4584\",\n            secondaryColor: \"#DF359C\",\n            lock: blackColor,\n            text: primaryColor,\n            hoverTooltipText: blackColor,\n            headerSectionBackground: \"#F2F2F2\",\n            headerSectionBorderColor: \"#CCC\",\n\t        optionText: '#FFF',\n            headerSectionLink: \"#888\",\n            inactiveToyMessageText: \"#888\"\n        },\n\n        informationDialog: {\n            title: '#202020'\n        },\n\n        messageTypeHeader: {\n            modelTitle: \"#FF4D3C\",\n            title: \"#151617\",\n            subtitle: \"#888\"\n        },\n\n        cameraSelection: {\n            option: {\n                defaultColor: '#CCCCCC',\n                selectedColor: '#43B31C'\n            }\n        },\n\n\t\tnoteButton: '#3C3D3E',\n\t\tgiftsCloseButton: secondaryColor\n    }\n};\n\nexport default theme;\n","import { map } from \"lodash\";\nimport { SupportedLanguage } from \"vxcontrol-client-lib\";\n\nimport IStore, { IData, LoadingStatus } from \"./store\";\nimport config from \"../static/config\";\nimport de from \"../mocks/translations/de\";\nimport en from \"../mocks/translations/en\";\nimport es from \"../mocks/translations/es\";\nimport defaultTheme from \"../themes/defaultTheme\";\nimport { PreferenceName } from \"../services/AppService/types\";\n\nconst initialStore: IStore = {};\n\nexport const getInitialInstanceData = (): IData => ({\n    messenger: {\n        isOpen: false,\n        isTextEnabled: true,\n        isResponsive: false,\n        hasEditor: true,\n        isMentionSectionOpen: false,\n\t\tshouldDisplayCustomMentionSection: false,\n        loadingStatus: LoadingStatus.NONE,\n\n        mentionQuery: '',\n\n        audioMessage: {\n            shouldSendMessage: false,\n            isRecording: false,\n            secondsElapsed: 0,\n            isMicEnabled: false\n        },\n\n        editorState: {\n            text: \"\",\n            gifts: []\n        },\n\n        contactNote: {\n            isOpen: false,\n            text: \"\"\n        },\n\n        messages: [],\n        failedMessages: [],\n        emoticons: [],\n        toyOptions: [],\n        activeSymbols: {},\n        modalContent: {\n            imgSrc: \"\"\n        },\n\n        windowToggleState: {\n            userPrompts: [],\n            isVersionOpen: false,\n            isDropDownOpen: false,\n            isToySectionOpen: false,\n            isGiftSectionOpen: false,\n            isEmoticonSectionOpen: false,\n        },\n\n        groupChatColors: map(defaultTheme.colors.groupChat.usernameColorSet, color => ({\n            color,\n            users: []\n        }))\n    },\n    session: {\n        channelId: \"\",\n        sessionID: \"\",\n        webtoken: \"\",\n        uploadMediaUrl: \"\",\n        gifts: [],\n        giftCategories: [],\n        giftBundles: [],\n        freeMessages: 0,\n\n        autoRecharge: {\n            available: false,\n            amount: null\n        },\n\n        oneClickRecharge: {\n            available: false,\n            defaultAmount: null,\n            amounts: []\n        },\n\n        chatFeatures: {\n            freeChatDuration: 0,\n            livePreviewDurationText: 0,\n            livePreviewDurationVideo: 0\n        },\n\n        currency: {\n            name: \"\",\n            symbol: \"\"\n        },\n    },\n    user: {\n        language: SupportedLanguage.EN,\n        isVip: false,\n        translations: { en, de, es },\n        isOnline: window.navigator.onLine,\n\t\tpreferences: {\n\t\t\t[PreferenceName.ShouldIncreaseMessageFontSize]: false,\n\t\t\t[PreferenceName.VolumeLevel]: 1,\n\t\t}\n    },\n    model: {\n        name: \"\",\n        motto: \"\",\n        profilePicture: \"\",\n        isOnline: false,\n        isFavorite: false,\n        freeMessages: 0,\n        freeChatDuration: 0,\n\n        partner: {\n            id: \"\",\n            key: \"\"\n        },\n\n        prices: {\n            messagePrice: 0,\n            videoChatPrice: 0,\n            voyeurChatPrice: 0\n        }\n    },\n    videochat: {\n        shouldHideVideochatControls: false,\n        isOpen: false,\n        isPlaying: false,\n        isFullscreen: false,\n        isMutedByClient: false,\n        isMutedByModel: true,\n        shouldRenderOnlyVideochat: false,\n\n        qualityBoundaries: {\n            low: 0,\n            medium: 200,\n            good: 1000\n        },\n\n        timeLeft: Number.MAX_SAFE_INTEGER,\n        livePreviewTimeLeft: Number.MAX_SAFE_INTEGER,\n        livePreviewTextTimeLimit: Number.MAX_SAFE_INTEGER,\n        livePreviewTextTimeLeft: Number.MAX_SAFE_INTEGER,\n\n        cam2Cam: {\n\t\t\tisEnabled: false,\n            isActive: false,\n            isMinimized: false,\n            cameras: []\n        },\n\n        initialResolution: {\n            width: config.initialVideoResolution.width,\n            height: config.initialVideoResolution.height\n        },\n        groupChatParticipants: [],\n        groupChatClientName: \"\",\n\t\tisAutoplayRestricted: false\n    },\n    features: {\n        hasFavorite: true,\n\t\thasGifts: true,\n\t\thasTips: false,\n        hasEmoticons: true,\n        hasToyControl: true,\n\t    hasGroupChatIndicator: true,\n\n        hasSendMessageButton: true,\n        hasImageUpload: true,\n        hasContactNote: true,\n        hasExitPopups: true,\n        hasModelProfilePicture: true,\n        hasModelName: true,\n        hasModelMotto: true,\n        hasPrivateChat: true,\n        hasVoyeur: true,\n        hasCam2Cam: true,\n        hasCloseButton: true,\n        hasFullscreen: true,\n        hasHistorySectionsOpened: true,\n        hasHistoryMessages: true,\n        hasMessagesGrouped: true,\n\t\thasPreloaderPaymentText: true,\n\t\thasBehaviorOnClickOutside: true,\n\n\t\tisMessageTypeHeader: false,\n        hasAudioMessages: false,\n\t\thasGroupChatClientName: false,\n\t\thasFullscreenLayoutOnLandscape: false,\n\t\thasProductionDebugEnabled: false,\n\t\tshowCensoredContent: true\n\t},\n\n\toptions: {\n\t\ttip: config.defaultTipOption,\n\t\tswitchToPortraitWidth: config.viewSizes.switchToPortraitWidth,\n\t\tinitialVideochatVolume: 1,\n\t\tpreloader: \"\",\n\t\tupdateBrowserLink: \"\",\n\t\tanalyticsKey: \"\",\n\t\tcensoredContentImage: config.censoredContentImage\n\t},\n\n    platformProps: null,\n\thooks: {}\n});\n\nexport default initialStore;\n","import { createAction, createActionType } from \"../utils\";\nimport { ActionIds } from \"../interfaces\";\n\nconst createAppActionType = createActionType(ActionIds.APP, { isReduxAction: true });\n\n// Actions\nexport const RESET_STORE = createAppActionType(\"RESET_STORE\");\n\n// Action Creators\nexport const resetStore = createAction(RESET_STORE);\n","import {\n\tAbilities,\n\tChargeInfo,\n\tChat as CoreChat,\n\tChatConfig,\n\tExitCode,\n\tLimits,\n\tQuery,\n\tSourceSet,\n\tTargetSet,\n\tUser,\n\tUserEvent,\n\tUserEventType\n} from 'vchat-core';\n\n// re-export vchat-core things and use them from here, to avoid testing problems\nexport {\n\tAbilities,\n\tChatConfig,\n\tChargeInfo,\n\tExitCode,\n\tLimits,\n\tQuery,\n\tCoreChat,\n\tSourceSet,\n\tTargetSet,\n\tUser,\n\tUserEvent,\n\tUserEventType\n};\n\nexport enum GET_CHAT_ERROR {\n\tBAD_CHAT_CONFIG = \"BAD_CHAT_CONFIG\"\n}\n\n","import { handleActions, Action } from \"redux-actions\";\n\nimport { createAction, createActionType } from \"../utils\";\nimport { IFeatures } from \"../store\";\nimport { getInitialInstanceData } from \"../initialStore\";\nimport { ActionIds } from \"../interfaces\";\nimport { RESET_STORE } from \"./app\";\nimport { AnyAction } from \"redux\";\n\nconst createFeatureActionType = createActionType(ActionIds.FEATURES, { isReduxAction: true });\n\n// Actions\nconst SET_FEATURES = createFeatureActionType(\"SET_FEATURES\");\n\n// Action Creators\nexport const setFeatures = createAction<IFeatures>(SET_FEATURES);\n\n// Reducer\nconst features = handleActions<IFeatures>({\n    [RESET_STORE]: (state: IFeatures, action: AnyAction) => getInitialInstanceData().features,\n\n    [SET_FEATURES]: (state: IFeatures, { payload }: Action<IFeatures>) => payload\n}, getInitialInstanceData().features);\n\nexport default features;\n","import { handleActions, Action } from \"redux-actions\";\n\nimport { createAction, createActionType } from \"../utils\";\nimport { IOptions } from \"../store\";\nimport { getInitialInstanceData } from \"../initialStore\";\nimport { ActionIds } from \"../interfaces\";\nimport { AnyAction } from \"redux\";\nimport { RESET_STORE } from \"./app\";\n\nconst createOptionsActionType = createActionType(ActionIds.OPTIONS, { isReduxAction: true });\n\n// Actions\nexport const SET_OPTIONS = createOptionsActionType(\"SET_OPTIONS\");\n\n// Action Creators\nexport const setOptions = createAction<IOptions>(SET_OPTIONS);\n\n\n// Reducer\nconst options = handleActions({\n    [RESET_STORE]: (_: IOptions, action: AnyAction) => getInitialInstanceData().options,\n    [SET_OPTIONS]: (_: IOptions, { payload }: Action<IOptions>) => payload\n}, getInitialInstanceData().options);\n\nexport default options;\n","import { produce } from \"immer\";\nimport { AnyAction } from \"redux\";\nimport { handleActions, Action } from \"redux-actions\";\n\nimport {RESET_STORE} from \"./app\";\nimport { createAction, createActionType } from \"../utils\";\nimport { getInitialInstanceData } from \"../initialStore\";\nimport { IModel, IPartner, IOnlineState, IModelPrices } from \"../store\";\nimport { ActionIds } from \"../interfaces\";\n\nconst createModelActionType = createActionType(ActionIds.MODEL, { isReduxAction: true });\n\n// Actions\nexport const SET_PARTNER = createModelActionType(\"SET_PARTNER\");\nexport const RESET_MODEL = createModelActionType(\"RESET_MODEL\");\nexport const SET_FAVORITE = createModelActionType(\"SET_FAVORITE\");\n\nexport const SET_MODEL_NAME = createModelActionType(\"SET_MODEL_NAME\");\nexport const RESET_MODEL_NAME = createModelActionType(\"RESET_MODEL_NAME\");\n\nexport const SET_MOTTO = createModelActionType(\"SET_MOTTO\");\nexport const RESET_MOTTO = createModelActionType(\"RESET_MOTTO\");\n\nexport const SET_MODEL_PRICES = createModelActionType(\"SET_MODEL_PRICES\");\nexport const SET_MESSAGE_PRICE = createModelActionType(\"SET_MESSAGE_PRICE\");\n\nexport const SET_PROFILE_PICTURE = createModelActionType(\"SET_PROFILE_PICTURE\");\nexport const RESET_PROFILE_PICTURE = createModelActionType(\"RESET_PROFILE_PICTURE\");\n\nexport const SET_MODEL_ONLINE_STATE = createModelActionType(\"SET_MODEL_ONLINE_STATE\");\nexport const SET_IS_ONLINE = createModelActionType(\"SET_IS_ONLINE\");\nexport const SET_CHAT_ABILITY = createModelActionType(\"SET_CHAT_ABILITY\");\nexport const SET_LIVE_PREVIEW_ABILITY = createModelActionType(\"SET_LIVE_PREVIEW_ABILITY\");\nexport const SET_PRIVATE_CHAT_ABILITY = createModelActionType(\"SET_PRIVATE_CHAT_ABILITY\");\nexport const SET_TIP_ABILITY = createModelActionType(\"SET_TIP_ABILITY\");\n\nexport const SET_FREE_MESSAGES = createModelActionType(\"SET_FREE_MESSAGES\");\nexport const SET_FREE_CHAT_DURATION = createModelActionType(\"SET_FREE_CHAT_DURATION\");\nexport const RESET_FREE_CHAT_DURATION = createModelActionType(\"RESET_FREE_CHAT_DURATION\");\n\n// Action Creators\nexport const resetModel = createAction(RESET_MODEL);\nexport const setPartner = createAction<IPartner | undefined>(SET_PARTNER);\nexport const setProfilePicture = createAction<string>(SET_PROFILE_PICTURE);\nexport const resetProfilePicture = createAction(RESET_PROFILE_PICTURE);\n\nexport const setModelName = createAction<string>(SET_MODEL_NAME);\nexport const resetModelName = createAction(RESET_MODEL_NAME);\n\nexport const setModelPrices = createAction<IModelPrices>(SET_MODEL_PRICES);\nexport const setMessagePrice = createAction<number>(SET_MESSAGE_PRICE);\nexport const setFavorite = createAction<boolean>(SET_FAVORITE);\n\nexport const setMotto = createAction<string>(SET_MOTTO);\nexport const resetMotto = createAction(RESET_MOTTO);\n\nexport const setModelOnlineState = createAction<IOnlineState>(SET_MODEL_ONLINE_STATE);\nexport const setIsOnline = createAction<boolean>(SET_IS_ONLINE);\nexport const setChatAbility = createAction<boolean>(SET_CHAT_ABILITY);\nexport const setLivePreviewAbility = createAction<boolean>(SET_LIVE_PREVIEW_ABILITY);\nexport const setPrivateChatAbility = createAction<boolean>(SET_PRIVATE_CHAT_ABILITY);\nexport const setTipAbility = createAction<boolean>(SET_TIP_ABILITY);\n\nexport const setFreeModelMessages = createAction<number>(SET_FREE_MESSAGES);\nexport const setModelFreeChatDuration = createAction<number>(SET_FREE_CHAT_DURATION);\nexport const resetModelFreeChatDuration = createAction(RESET_FREE_CHAT_DURATION);\n\n// Reducer\nconst model = handleActions({\n    [RESET_STORE]: (state: IModel, action: AnyAction) => getInitialInstanceData().model,\n\n    [RESET_MODEL]: produce((draft: IModel, action: AnyAction) => ({\n        ...getInitialInstanceData().model,\n        partner: draft.partner\n    })),\n\n    [SET_PROFILE_PICTURE]: produce((draft: IModel, { payload }: Action<string>) => {\n        draft.profilePicture = payload;\n    }),\n\n    [RESET_PROFILE_PICTURE]: produce((draft: IModel, action: AnyAction) => {\n        draft.profilePicture = getInitialInstanceData().model.profilePicture;\n    }),\n\n    [SET_MODEL_NAME]: produce((draft: IModel, { payload }: Action<string>) => {\n        draft.name = payload;\n    }),\n\n    [RESET_MODEL_NAME]: produce((draft: IModel, { payload }: Action<string>) => {\n        draft.name = getInitialInstanceData().model.name;\n    }),\n\n    [SET_MODEL_PRICES]: produce((draft: IModel, { payload }: Action<IModelPrices>) => {\n        draft.prices = payload;\n    }),\n\n    [SET_MESSAGE_PRICE]: produce((draft: IModel, { payload }: Action<number>) => {\n        draft.prices.messagePrice = payload;\n    }),\n\n    [SET_PARTNER]: produce((draft: IModel, { payload }: Action<IPartner>) => {\n        draft.partner = payload;\n    }),\n\n    [SET_FAVORITE]: produce((draft: IModel, { payload }: Action<boolean>) => {\n        draft.isFavorite  = payload;\n    }),\n\n    [SET_MOTTO]: produce((draft: IModel, { payload }: Action<string>) => {\n        draft.motto = payload;\n    }),\n\n    [RESET_MOTTO]: produce((draft: IModel, action: AnyAction) => {\n        draft.motto = getInitialInstanceData().model.motto;\n    }),\n\n    [SET_MODEL_ONLINE_STATE]: produce((draft: IModel, { payload }: Action<IOnlineState>) => {\n        draft.onlineState = payload;\n    }),\n\n    [SET_IS_ONLINE]: produce((draft: IModel, { payload }: Action<boolean>) => {\n        draft.isOnline = payload;\n    }),\n\n    [SET_CHAT_ABILITY]: produce((draft: IModel, { payload }: Action<boolean>) => {\n        draft.onlineState = draft.onlineState || {};\n        draft.onlineState.supportsChat = payload;\n    }),\n\n    [SET_LIVE_PREVIEW_ABILITY]: produce((draft: IModel, { payload }: Action<boolean>) => {\n        draft.onlineState = draft.onlineState || {};\n        draft.onlineState.supportsPreviewChat  = payload;\n    }),\n\n    [SET_PRIVATE_CHAT_ABILITY]: produce((draft: IModel, { payload }: Action<boolean>) => {\n        draft.onlineState = draft.onlineState || {};\n        draft.onlineState.supportsPrivateChat  = payload;\n    }),\n\n    [SET_TIP_ABILITY]: produce((draft: IModel, { payload }: Action<boolean>) => {\n        draft.onlineState = draft.onlineState || {};\n        draft.onlineState.supportsTip  = payload;\n    }),\n\n    [SET_FREE_MESSAGES]: produce((draft: IModel, { payload }: Action<number>) => {\n        draft.freeMessages = payload;\n    }),\n\n    [SET_FREE_CHAT_DURATION]: produce((draft: IModel, { payload }: Action<number>) => {\n        draft.freeChatDuration = payload;\n    }),\n\n    [RESET_FREE_CHAT_DURATION]: produce((draft: IModel, action: AnyAction) => {\n        draft.freeChatDuration = 0;\n    })\n}, getInitialInstanceData().model);\n\nexport default model;\n","import { handleActions, Action } from \"redux-actions\";\n\nimport { createAction, createActionType } from \"../utils\";\nimport { IPlatformProps } from \"../store\";\nimport { getInitialInstanceData } from \"../initialStore\";\nimport { ActionIds } from \"../interfaces\";\nimport { RESET_STORE } from \"./app\";\nimport {AnyAction} from \"redux\";\n\nconst createPlatformPropsActionType = createActionType(ActionIds.PLATFORM_PROPS, { isReduxAction: true });\n\n// Actions\nconst SET_PLATFORM_PROPS = createPlatformPropsActionType(\"SET_PLATFORM_PROPS\");\n\n// Action Creator\nexport const setPlatformProps = createAction<IPlatformProps>(SET_PLATFORM_PROPS);\n\n// Reducer\nconst platformProps = handleActions({\n    [RESET_STORE]: (state: IPlatformProps, action: AnyAction) => getInitialInstanceData().platformProps,\n\n    [SET_PLATFORM_PROPS]: (state: IPlatformProps, { payload }: Action<IPlatformProps>) => payload\n}, getInitialInstanceData().platformProps);\n\nexport default platformProps;\n","import { produce } from 'immer';\nimport { AnyAction } from 'redux';\nimport { find, map } from 'lodash';\nimport { Action, handleActions } from 'redux-actions';\n\nimport {\n\tIAutoRecharge,\n\tIBundle,\n\tIChat,\n\tIChatFeatures,\n\tICurrency,\n\tIGift,\n\tIGiftCategory,\n\tIOneClickRecharge,\n\tISession\n} from '../store';\nimport { createAction, createActionType } from '../utils';\nimport { RESET_STORE } from \"./app\";\nimport types from '../../sagas/websockets/types';\nimport { getInitialInstanceData } from '../initialStore';\nimport { ActionIds } from '../interfaces';\n\nexport interface IHandleQuantitiesPayload {\n\tgiftId: number;\n\tquantityToHandle: number;\n}\n\nconst createSessionActionType = createActionType(ActionIds.SESSION, { isReduxAction: true });\n\n// Actions\nexport const SET_CHAT = createSessionActionType(\"SET_CHAT\");\nexport const SET_CHAT_ID = createSessionActionType(\"SET_CHAT_ID\");\nexport const RESET_CHAT = createSessionActionType(\"RESET_CHAT\");\nexport const SET_CHANNEL = createSessionActionType(\"SET_CHANNEL\");\nexport const RESET_CHANNEL = createSessionActionType(\"RESET_CHANNEL\");\nexport const SET_SESSION = createSessionActionType(\"SET_SESSION\");\nexport const RESET_SESSION = createSessionActionType(\"RESET_SESSION\");\n\nconst SET_CHAT_FEATURES = createSessionActionType(\"SET_CHAT_FEATURES\");\nconst SET_FREE_MESSAGES = createSessionActionType(\"SET_FREE_MESSAGES\");\nconst RESET_FREE_CHAT_DURATION = createSessionActionType(\"RESET_FREE_CHAT_DURATION\");\nconst SET_CURRENCY = createSessionActionType(\"SET_CURRENCY\");\nexport const SET_WEBTOKEN = createSessionActionType(\"SET_WEBTOKEN\");\nexport const SET_UPLOAD_MEDIA_URL = createSessionActionType(\"SET_UPLOAD_MEDIA_URL\");\n\nconst SET_AUTO_RECHARGE = createSessionActionType(\"SET_AUTO_RECHARGE\");\nconst SET_ONE_CLICK_RECHARGE = createSessionActionType(\"SET_ONE_CLICK_RECHARGE\");\nconst SET_LAST_CHARGED_AMOUNT = createSessionActionType(\"SET_LAST_CHARGED_AMOUNT\");\nconst RESET_LAST_CHARGED_AMOUNT = createSessionActionType(\"RESET_LAST_CHARGED_AMOUNT\");\n\nconst SET_GIFTS = createSessionActionType(\"SET_GIFTS\");\nconst SET_ACTIVE_GIFT_CATEGORIES = createSessionActionType(\"SET_ACTIVE_GIFT_CATEGORIES\");\nconst SET_ACTIVE_GIFT_BUNDLES = createSessionActionType(\"SET_ACTIVE_GIFT_BUNDLES\");\nconst INITIALIZE_QUANTITIES_TO_INVENTORY_GIFTS = createSessionActionType(\"INITIALIZE_QUANTITIES_TO_INVENTORY_GIFTS\");\nexport const DECREASE_CURRENT_GIFT_QUANTITY = createSessionActionType(\"DECREASE_CURRENT_GIFT_QUANTITY\");\nconst RESET_CURRENT_QUANTITIES = createSessionActionType(\"RESET_CURRENT_QUANTITIES\");\n\n/**\n * When we send a message containing gifts, the initial quantity has to become the current one,\n * until we receive the feedback from the back-end, in order to always have the gift quantities synced.\n */\nconst SYNC_QUANTITIES_ON_MESSAGE_SENT = createSessionActionType(\"SYNC_QUANTITIES_ON_MESSAGE_SENT\");\n\n// Action Creators\nexport const setWebtoken = createAction<string>(SET_WEBTOKEN);\nexport const setUploadMediaUrl = createAction<string>(SET_UPLOAD_MEDIA_URL);\nexport const setChat = createAction<IChat>(SET_CHAT);\nexport const setChatId = createAction<string>(SET_CHAT_ID);\nexport const resetChat = createAction(RESET_CHAT);\n\nexport const setFreePlatformMessages = createAction<number>(SET_FREE_MESSAGES);\nexport const setChatFeatures = createAction<IChatFeatures>(SET_CHAT_FEATURES);\nexport const setCurrency = createAction<ICurrency>(SET_CURRENCY);\n\nexport const setChannel = createAction<string>(SET_CHANNEL);\nexport const resetChannel = createAction(RESET_CHANNEL);\nexport const setSession = createAction<string>(SET_SESSION);\nexport const resetSession = createAction(RESET_SESSION);\n\nexport const setGifts = createAction<IGift[]>(SET_GIFTS);\nexport const setGiftCategories = createAction<IGiftCategory[]>(SET_ACTIVE_GIFT_CATEGORIES);\nexport const setGiftBundles = createAction<IBundle[]>(SET_ACTIVE_GIFT_BUNDLES);\n\nexport const setAutoRecharge = createAction<IAutoRecharge>(SET_AUTO_RECHARGE);\nexport const setOneClickRecharge = createAction<IOneClickRecharge>(SET_ONE_CLICK_RECHARGE);\nexport const setLastChargedAmount = createAction<number>(SET_LAST_CHARGED_AMOUNT);\nexport const resetLastChargedAmount = createAction(SET_LAST_CHARGED_AMOUNT);\n\nexport const initializeQuantitiesToInventoryGifts = createAction<types.IInventoryGift[]>(\n\tINITIALIZE_QUANTITIES_TO_INVENTORY_GIFTS\n);\n\nexport const decreaseCurrentGiftQuantity = createAction<IHandleQuantitiesPayload>(DECREASE_CURRENT_GIFT_QUANTITY);\nexport const resetCurrentQuantities = createAction(RESET_CURRENT_QUANTITIES);\nexport const resetPlatformFreeChatDuration = createAction(RESET_FREE_CHAT_DURATION);\nexport const syncQuantitiesOnMessageSent = createAction(SYNC_QUANTITIES_ON_MESSAGE_SENT);\n\n// Reducer\nconst session = handleActions({\n\t[RESET_STORE]: (state: ISession, action: AnyAction) => getInitialInstanceData().session,\n\n\t[SET_CHAT]: produce((draft: ISession, { payload }: Action<IChat>) => {\n\t\tdraft.chat = payload;\n\t}),\n\n\t[SET_CHAT_ID]: produce((draft: ISession, { payload }: Action<string>) => {\n\t\tif (draft.chat) {\n\t\t\tdraft.chat.chatId = payload;\n\t\t}\n\t}),\n\n\t[RESET_CHAT]: produce((draft: ISession, action: AnyAction) => {\n\t\tdraft.chat = getInitialInstanceData().session.chat;\n\t}),\n\n\t[SET_CHAT_FEATURES]: produce((draft: ISession, { payload }: Action<IChatFeatures>) => {\n\t\tdraft.chatFeatures = payload;\n\t}),\n\n\t[RESET_FREE_CHAT_DURATION]: produce((draft: ISession, action: AnyAction) => {\n\t\tdraft.chatFeatures.freeChatDuration = 0;\n\t}),\n\n\t[SET_CURRENCY]: produce((draft: ISession, { payload }: Action<ICurrency>) => {\n\t\tdraft.currency = payload;\n\t}),\n\n\t[SET_CHANNEL]: produce((draft: ISession, { payload }: Action<string>) => {\n\t\tdraft.channelId = payload;\n\t}),\n\n\t[RESET_CHANNEL]: produce((draft: ISession, action: AnyAction) => {\n\t\tdraft.channelId = getInitialInstanceData().session.channelId;\n\t}),\n\n\t[SET_FREE_MESSAGES]: produce((draft: ISession, { payload }: Action<number>) => {\n\t\tdraft.freeMessages = payload;\n\t}),\n\n\t[SET_GIFTS]: produce((draft: ISession, { payload }: Action<IGift[]>) => {\n\t\tdraft.gifts = payload;\n\t}),\n\n\t[SET_ACTIVE_GIFT_CATEGORIES]: produce((draft: ISession, { payload }: Action<IGiftCategory[]>) => {\n\t\tdraft.giftCategories = payload;\n\t}),\n\n\t[SET_ACTIVE_GIFT_BUNDLES]: produce((draft: ISession, { payload }: Action<IBundle[]>) => {\n\t\tdraft.giftBundles = payload;\n\t}),\n\n\t[INITIALIZE_QUANTITIES_TO_INVENTORY_GIFTS]: produce((draft: ISession, { payload }: Action<types.IInventoryGift[]>) => {\n\t\tdraft.gifts = map(draft.gifts, (gift: IGift) => {\n\t\t\tconst inventoryGift = find(payload, (invGift: types.IInventoryGift) =>\n\t\t\t\tinvGift.gift.id === gift.id\n\t\t\t);\n\n\t\t\tif (inventoryGift) {\n\t\t\t\tgift.initialQuantity = inventoryGift.quantity;\n\t\t\t\tgift.currentQuantity = inventoryGift.quantity;\n\t\t\t}\n\n\t\t\treturn gift;\n\t\t});\n\t}),\n\n\t[DECREASE_CURRENT_GIFT_QUANTITY]: produce((draft: ISession, { payload }: Action<IHandleQuantitiesPayload>) => {\n\t\tconst giftToDecrease: IGift | undefined = find(draft.gifts,\n\t\t\t(gift: IGift) => gift.id === payload.giftId\n\t\t);\n\n\t\tif (giftToDecrease && giftToDecrease.initialQuantity) {\n\t\t\tgiftToDecrease.currentQuantity = giftToDecrease.initialQuantity - payload.quantityToHandle;\n\t\t}\n\t}),\n\n\t[RESET_CURRENT_QUANTITIES]: produce((draft: ISession, action: AnyAction) => {\n\t\tdraft.gifts = map(draft.gifts, (gift: IGift) => {\n\t\t\tif (gift.initialQuantity) {\n\t\t\t\tgift.currentQuantity = gift.initialQuantity;\n\t\t\t}\n\n\t\t\treturn gift;\n\t\t});\n\t}),\n\n\t[SYNC_QUANTITIES_ON_MESSAGE_SENT]: produce((draft: ISession, action: AnyAction) => {\n\t\tdraft.gifts = map(draft.gifts, (gift: IGift) => {\n\t\t\tif (gift.initialQuantity) {\n\t\t\t\tgift.initialQuantity = gift.currentQuantity;\n\t\t\t}\n\n\t\t\treturn gift;\n\t\t});\n\t}),\n\n\t[SET_SESSION]: produce((draft: ISession, { payload }: Action<string>) => {\n\t\tdraft.sessionID = payload;\n\t}),\n\n\t[SET_WEBTOKEN]: produce((draft: ISession, { payload }: Action<string>) => {\n\t\tdraft.webtoken = payload;\n\t}),\n\n\t[SET_UPLOAD_MEDIA_URL]: produce((draft: ISession, { payload }: Action<string>) => {\n\t\tdraft.uploadMediaUrl = payload;\n\t}),\n\n\t[SET_AUTO_RECHARGE]: produce((draft: ISession, { payload }: Action<IAutoRecharge>) => {\n\t\tdraft.autoRecharge = payload;\n\t}),\n\n\t[SET_ONE_CLICK_RECHARGE]: produce((draft: ISession, { payload }: Action<IOneClickRecharge>) => {\n\t\tdraft.oneClickRecharge = payload;\n\t}),\n\n\t[SET_LAST_CHARGED_AMOUNT]: produce((draft: ISession, { payload }: Action<number>) => {\n\t\tdraft.lastChargedAmount = payload;\n\t}),\n\n\t[RESET_LAST_CHARGED_AMOUNT]: produce((draft: ISession, action: AnyAction) => {\n\t\tdraft.lastChargedAmount = getInitialInstanceData().session.lastChargedAmount;\n\t})\n}, getInitialInstanceData().session);\n\nexport default session;\n","import { get } from 'lodash';\nimport { produce } from 'immer';\nimport { AnyAction } from 'redux';\nimport { Action, handleActions } from \"redux-actions\";\nimport { SupportedLanguage } from 'vxcontrol-client-lib';\n\nimport { RESET_STORE } from \"./app\";\nimport { ActionIds, IPreferenceActionPayload } from '../interfaces';\nimport { IUser, Translations } from '../store';\nimport { createAction, createActionType } from '../utils';\nimport { getInitialInstanceData } from \"../initialStore\";\nimport { PreferenceName } from \"../../services/AppService/types\";\n\nconst createUserActionType = createActionType(ActionIds.USER, { isReduxAction: true });\n\n// Actions\nexport const SET_LANGUAGE = createUserActionType(\"SET_LANGUAGE\");\nexport const SET_IS_VIP = createUserActionType(\"SET_IS_VIP\");\nexport const SET_TRANSLATIONS = createUserActionType(\"SET_TRANSLATIONS\");\nexport const SET_USER_ONLINE_STATE = createUserActionType(\"SET_USER_ONLINE_STATE\");\nexport const SET_USER_KEY = createUserActionType(\"SET_USER_KEY\");\nexport const SET_PREFERENCE = createUserActionType(\"SET_PREFERENCE\");\n\n// Action Creators\nexport const setLanguage = createAction<SupportedLanguage>(SET_LANGUAGE);\nexport const setIsVip = createAction<boolean>(SET_IS_VIP);\nexport const setTranslations = createAction<Translations>(SET_TRANSLATIONS);\nexport const setUserOnlineState = createAction<boolean>(SET_USER_ONLINE_STATE);\nexport const setUserKey = createAction<string>(SET_USER_KEY);\nexport const setPreference = createAction<IPreferenceActionPayload>(SET_PREFERENCE);\n\n// Reducer\nconst user = handleActions<IUser>({\n\t[RESET_STORE]: produce((draft: IUser, { payload }) => ({\n\t\t...getInitialInstanceData().user,\n\t\tisOnline: get(navigator, \"online\", true)\n\t})),\n\n\t[SET_LANGUAGE]: produce((draft: IUser, { payload }: AnyAction) => {\n\t\tdraft.language = payload;\n\t}),\n\n\t[SET_TRANSLATIONS]: produce((draft: IUser, { payload }: AnyAction) => {\n\t\tconst { EN, DE, ES } = payload;\n\t\tdraft.translations = { en: EN, de: DE, es: ES };\n\t}),\n\n\t[SET_IS_VIP]: produce((draft: IUser, { payload }: Action<boolean>) => {\n\t\tdraft.isVip = payload;\n\t}),\n\n\t[SET_USER_ONLINE_STATE]: produce((draft: IUser, { payload }: Action<boolean>) => {\n\t\tdraft.isOnline = payload;\n\t}),\n\n\t[SET_USER_KEY]: produce((draft: IUser, { payload }: Action<string>) => {\n\t\tdraft.userKey = payload;\n\t}),\n\n\t[SET_PREFERENCE]: produce((draft: IUser, { payload }: Action<IPreferenceActionPayload>) => {\n\t\tconst { preferenceName, value } = payload;\n\n\t\tif (preferenceName === PreferenceName.ShouldIncreaseMessageFontSize) {\n\t\t\tdraft.preferences[PreferenceName.ShouldIncreaseMessageFontSize] = value as boolean;\n\t\t} else if (preferenceName === PreferenceName.VolumeLevel && value !== 0) {\n\t\t\tdraft.preferences[PreferenceName.VolumeLevel] = value as number;\n\t\t}\n\t}),\n}, getInitialInstanceData().user);\n\nexport default user;\n","import { produce } from \"immer\";\nimport { AnyAction } from \"redux\";\nimport { handleActions, Action } from \"redux-actions\";\nimport { filter, findIndex } from 'lodash';\n\nimport { createAction, createActionType } from \"../utils\";\nimport {RESET_STORE} from \"./app\";\nimport config from '../../static/config';\nimport { ExitCode } from \"../../services/ChatService/types\";\nimport { getInitialInstanceData } from '../initialStore';\nimport {\n    PreChatInformationType,\n    IResolution,\n    IVideochat,\n    VideochatInformationType,\n    VideoChatType,\n    ICameraDevice,\n    IExitEvent\n} from \"../store\";\nimport { ActionIds } from \"../interfaces\";\n\nexport interface ISetExitMessagePayload {\n    exitCode: ExitCode | number;\n    exitMessage?: string;\n}\n\nconst createVideochatActionType = createActionType(ActionIds.VIDEOCHAT_REDUX, { isReduxAction: true });\n\n// Actions\nexport const SET_QUALITY = createVideochatActionType(\"SET_QUALITY\");\nexport const SET_IS_MOBILE_MENU_OPEN = createVideochatActionType(\"SET_IS_MOBILE_MENU_OPEN\");\n\nexport const OPEN_FULLSCREEN = createVideochatActionType(\"OPEN_FULLSCREEN\");\nexport const CLOSE_FULLSCREEN = createVideochatActionType(\"CLOSE_FULLSCREEN\");\nexport const TOGGLE_FULLSCREEN = createVideochatActionType(\"TOGGLE_FULLSCREEN\");\n\nexport const SET_IS_MUTED_BY_CLIENT = createVideochatActionType(\"SET_IS_MUTED_BY_CLIENT\");\nexport const SET_IS_INITIALLY_MUTED = createVideochatActionType(\"SET_IS_INITIALLY_MUTED\");\nexport const DISPLAY_INITIALLY_MUTED_HINT = createVideochatActionType(\"DISPLAY_INITIALLY_MUTED_HINT\");\nexport const HIDE_INITIALLY_MUTED_HINT = createVideochatActionType(\"HIDE_INITIALLY_MUTED_HINT\");\n\nexport const SET_CAM2CAM_ACTIVE = createVideochatActionType(\"SET_CAM2CAM_ACTIVE\");\nexport const SET_CAM2CAM_INACTIVE = createVideochatActionType(\"SET_CAM2CAM_INACTIVE\");\nexport const SET_CAM2CAM_CAMERAS = createVideochatActionType(\"SET_CAM2CAM_CAMERAS\");\nexport const SET_CAM2CAM_SELECTED_CAMERA = createVideochatActionType(\"SET_CAM2CAM_SELECTED_CAMERA\");\nexport const RESET_CAM2CAM_SELECTED_CAMERA = createVideochatActionType(\"RESET_CAM2CAM_SELECTED_CAMERA\");\n\nexport const CAM2CAM_MINIMIZE = createVideochatActionType(\"CAM2CAM_MINIMIZE\");\nexport const CAM2CAM_MAXIMIZE = createVideochatActionType(\"CAM2CAM_MAXIMIZE\");\nexport const SET_CAM2CAM_STATUS = createVideochatActionType(\"SET_CAM2CAM_STATUS\");\n\nexport const SET_INFORMATION = createVideochatActionType(\"SET_INFORMATION\");\nexport const RESET_INFORMATION = createVideochatActionType(\"RESET_INFORMATION\");\n\nexport const SET_PRE_CHAT_INFORMATION = createVideochatActionType(\"SET_PRE_CHAT_INFORMATION\");\nexport const RESET_PRE_CHAT_INFORMATION = createVideochatActionType(\"RESET_PRE_CHAT_INFORMATION\");\n\nexport const OPEN_VIDEOCHAT = createVideochatActionType(\"OPEN_VIDEOCHAT\");\nexport const CLOSE_VIDEOCHAT = createVideochatActionType(\"CLOSE_VIDEOCHAT\");\n\nexport const SET_TYPE = createVideochatActionType(\"SET_TYPE\");\nexport const RESET_TYPE = createVideochatActionType(\"RESET_TYPE\");\n\nexport const SET_INITIAL_VIDEOCHAT_TYPE = createVideochatActionType(\"SET_INITIAL_VIDEOCHAT_TYPE\");\nexport const RESET_INITIAL_VIDEOCHAT_TYPE = createVideochatActionType(\"RESET_INITIAL_VIDEOCHAT_TYPE\");\n\nexport const SET_VIDEOCHAT_TIME_LIMIT = createVideochatActionType(\"SET_VIDEOCHAT_TIME_LIMIT\");\nexport const SET_LIVE_PREVIEW_TIME_LIMIT = createVideochatActionType(\"SET_LIVE_PREVIEW_TIME_LIMIT\");\nexport const SET_LIVE_PREVIEW_TEXT_TIME_LIMIT = createVideochatActionType(\"SET_LIVE_PREVIEW_TEXT_TIME_LIMIT\");\nexport const SET_LIVE_PREVIEW_TEXT_TIME_LEFT = createVideochatActionType(\"SET_LIVE_PREVIEW_TEXT_TIME_LEFT\");\nexport const SET_VIDEOCHAT_TIME_LIMIT_BELOW_THRESHOLD = createVideochatActionType(\"SET_VIDEOCHAT_TIME_LIMIT_BELOW_THRESHOLD\");\n\nexport const SET_IS_MUTED_BY_MODEL = createVideochatActionType(\"SET_IS_MUTED_BY_MODEL\");\nexport const SET_INITIAL_RESOLUTION = createVideochatActionType(\"SET_INITIAL_RESOLUTION\");\nexport const SET_PLAYING_STATUS = createVideochatActionType(\"SET_PLAYING_STATUS\");\n\nexport const SHOULD_RENDER_ONLY_VIDEOCHAT = createVideochatActionType(\"SHOULD_RENDER_ONLY_VIDEOCHAT\");\n\nexport const SET_EXIT_EVENT = createVideochatActionType(\"SET_EXIT_EVENT\");\nexport const RESET_EXIT_EVENT = createVideochatActionType(\"RESET_EXIT_EVENT\");\n\nexport const SET_RESUME_CHAT_TIMESTAMP = createVideochatActionType(\"SET_RESUME_CHAT_TIMESTAMP\");\nexport const SET_SHOULD_HIDE_VIDEOCHAT_CONTROLS = createVideochatActionType(\"SET_SHOULD_HIDE_VIDEOCHAT_CONTROLS\");\n\nexport const SET_IS_GROUP_CHAT = createVideochatActionType(\"SET_IS_GROUP_CHAT\");\n\nexport const SET_IS_IN_VOYEUR_MODE = createVideochatActionType(\"SET_IS_IN_VOYEUR_MODE\");\n\nexport const SET_GROUP_CHAT_PARTICIPANTS = createVideochatActionType(\"SET_GROUP_CHAT_PARTICIPANTS\");\nexport const ADD_GROUP_CHAT_PARTICIPANT = createVideochatActionType(\"ADD_GROUP_CHAT_PARTICIPANT\");\nexport const REMOVE_GROUP_CHAT_PARTICIPANT = createVideochatActionType(\"REMOVE_GROUP_CHAT_PARTICIPANT\");\nexport const SET_GROUP_CHAT_CLIENTNAME = createVideochatActionType(\"SET_GROUP_CHAT_CLIENTNAME\");\n\nexport const SET_IS_AUTOPLAY_RESTRICTED = createVideochatActionType(\"SET_IS_AUTOPLAY_RESTRICTED\");\n\n// Action Creators\nexport const setQuality = createAction<boolean>(SET_QUALITY);\n\nexport const openFullscreen = createAction(OPEN_FULLSCREEN);\nexport const closeFullscreen = createAction(CLOSE_FULLSCREEN);\nexport const toggleFullscreen = createAction(TOGGLE_FULLSCREEN);\n\nexport const setCam2CamActive = createAction(SET_CAM2CAM_ACTIVE);\nexport const setCam2CamInactive = createAction(SET_CAM2CAM_INACTIVE);\nexport const setCam2CamCameras = createAction<ICameraDevice[]>(SET_CAM2CAM_CAMERAS);\nexport const setCam2CamSelectedCamera = createAction<string>(SET_CAM2CAM_SELECTED_CAMERA);\nexport const resetCam2CamSelectedCamera = createAction(RESET_CAM2CAM_SELECTED_CAMERA);\nexport const cam2CamMinimize = createAction(CAM2CAM_MINIMIZE);\nexport const cam2CamMaximize = createAction(CAM2CAM_MAXIMIZE);\nexport const setCam2CamStatus = createAction(SET_CAM2CAM_STATUS);\nexport const setShouldHideVideochatControls = createAction<boolean>(SET_SHOULD_HIDE_VIDEOCHAT_CONTROLS);\n\nexport const setInformation = createAction<VideochatInformationType>(SET_INFORMATION);\nexport const resetInformation = createAction(RESET_INFORMATION);\n\nexport const setPreChatInformation = createAction<PreChatInformationType>(SET_PRE_CHAT_INFORMATION);\nexport const resetPreChatInformation = createAction(RESET_PRE_CHAT_INFORMATION);\n\nexport const openVideochat = createAction(OPEN_VIDEOCHAT);\nexport const closeVideochat = createAction(CLOSE_VIDEOCHAT);\n\nexport const setType = createAction<VideoChatType>(SET_TYPE);\nexport const resetType = createAction(RESET_TYPE);\nexport const setInitialVideoChatType = createAction<VideoChatType>(SET_INITIAL_VIDEOCHAT_TYPE);\nexport const resetInitialVideoChatType = createAction(RESET_INITIAL_VIDEOCHAT_TYPE);\n\nexport const setVideoChatTimeLimit = createAction<number>(SET_VIDEOCHAT_TIME_LIMIT);\nexport const setVideoChatTimeLimitBelowThreshold = createAction<boolean>(SET_VIDEOCHAT_TIME_LIMIT_BELOW_THRESHOLD);\nexport const setLivePreviewTimeLimit = createAction<number>(SET_LIVE_PREVIEW_TIME_LIMIT);\nexport const setLivePreviewTextTimeLeft = createAction<number>(SET_LIVE_PREVIEW_TEXT_TIME_LEFT);\nexport const setLivePreviewTextTimeLimit = createAction<number>(SET_LIVE_PREVIEW_TEXT_TIME_LIMIT);\n\nexport const setHasAudio = createAction<boolean>(SET_IS_MUTED_BY_MODEL);\nexport const setIsMutedByClient = createAction<boolean>(SET_IS_MUTED_BY_CLIENT);\nexport const setIsInitiallyMuted = createAction<boolean>(SET_IS_INITIALLY_MUTED);\nexport const displayInitiallyMutedHint = createAction(DISPLAY_INITIALLY_MUTED_HINT);\nexport const hideInitiallyMutedHint = createAction(HIDE_INITIALLY_MUTED_HINT);\n\nexport const setPlayingStatus = createAction<boolean>(SET_PLAYING_STATUS);\nexport const setInitialResolution = createAction<IResolution>(SET_INITIAL_RESOLUTION);\nexport const setIsMobileMenuOpen = createAction<boolean>(SET_IS_MOBILE_MENU_OPEN);\n\nexport const setShouldRenderOnlyVideochat = createAction<boolean>(SHOULD_RENDER_ONLY_VIDEOCHAT);\n\nexport const setExitEvent = createAction<ISetExitMessagePayload>(SET_EXIT_EVENT);\n\nexport const resetExitEvent = createAction(RESET_EXIT_EVENT);\nexport const setResumeChatTimestamp = createAction<Date>(SET_RESUME_CHAT_TIMESTAMP);\n\nexport const setIsGroupChat = createAction<boolean>(SET_IS_GROUP_CHAT);\nexport const setIsInVoyeurMode = createAction<boolean>(SET_IS_IN_VOYEUR_MODE);\n\nexport const setGroupChatParticipants = createAction<string[]>(SET_GROUP_CHAT_PARTICIPANTS);\nexport const addGroupChatParticipant = createAction<string>(ADD_GROUP_CHAT_PARTICIPANT);\nexport const removeGroupChatParticipant = createAction<string>(REMOVE_GROUP_CHAT_PARTICIPANT);\nexport const setGroupChatClientName = createAction<string>(SET_GROUP_CHAT_CLIENTNAME);\n\nexport const setIsAutoplayRestricted = createAction<boolean>(SET_IS_AUTOPLAY_RESTRICTED);\n\n// Reducer\nconst videochat = handleActions({\n    [RESET_STORE]: (state: IVideochat, action: AnyAction) => getInitialInstanceData().videochat,\n\n    [SET_QUALITY]: produce((draft: IVideochat, { payload }: Action<boolean>) => {\n        const { BAD_CONN_MAX_RESOLUTION, BAD_CONN_MAX_RESOLUTION_DESKTOP } = config.ChatSettings;\n        draft.qualityBoundaries.medium = payload\n            ? BAD_CONN_MAX_RESOLUTION\n            : BAD_CONN_MAX_RESOLUTION_DESKTOP;\n\n        draft.qualityBoundaries.good = payload ? 500 : 1000;\n    }),\n\n    [OPEN_FULLSCREEN]: produce((draft: IVideochat, action: AnyAction) => {\n        draft.isFullscreen = true;\n    }),\n\n    [CLOSE_FULLSCREEN]: produce((draft: IVideochat, action: AnyAction) => {\n        draft.isFullscreen = false;\n    }),\n\n    [TOGGLE_FULLSCREEN]: produce((draft: IVideochat, action: AnyAction) => {\n        draft.isFullscreen = !draft.isFullscreen;\n    }),\n\n    [SET_CAM2CAM_ACTIVE]: produce((draft: IVideochat, action: AnyAction) => {\n        draft.cam2Cam.isActive = true;\n    }),\n\n    [SET_CAM2CAM_INACTIVE]: produce((draft: IVideochat, action: AnyAction) => {\n        draft.cam2Cam.isActive = false;\n    }),\n\n    [SET_CAM2CAM_CAMERAS]: produce((draft: IVideochat, { payload }: Action<ICameraDevice[]>) => {\n        draft.cam2Cam.cameras = payload;\n    }),\n\n    [SET_CAM2CAM_SELECTED_CAMERA]: produce((draft: IVideochat, { payload }: Action<string>) => {\n        draft.cam2Cam.selectedCameraId = payload;\n    }),\n\n    [RESET_CAM2CAM_SELECTED_CAMERA]: produce((draft: IVideochat, _: AnyAction) => {\n        draft.cam2Cam.selectedCameraId = getInitialInstanceData().videochat.cam2Cam.selectedCameraId;\n    }),\n\n    [CAM2CAM_MINIMIZE]: produce((draft: IVideochat, _: AnyAction) => {\n        draft.cam2Cam.isMinimized = true;\n    }),\n\n    [CAM2CAM_MAXIMIZE]: produce((draft: IVideochat, _: AnyAction) => {\n        draft.cam2Cam.isMinimized = false;\n\t}),\n\n\t[SET_CAM2CAM_STATUS]: produce((draft: IVideochat, { payload }: Action<boolean>) => {\n        draft.cam2Cam.isEnabled = payload;\n\t}),\n\n    [SET_INFORMATION]: produce((draft: IVideochat, { payload }: Action<VideochatInformationType>) => {\n        draft.informationType = payload;\n    }),\n\n    [RESET_INFORMATION]: produce((draft: IVideochat, _: AnyAction) => {\n        draft.informationType = getInitialInstanceData().videochat.informationType;\n    }),\n\n    [SET_PRE_CHAT_INFORMATION]: produce((draft: IVideochat, { payload }: Action< PreChatInformationType>) => {\n        draft.preChatInformationType = payload;\n    }),\n\n    [RESET_PRE_CHAT_INFORMATION]: produce((draft: IVideochat, action: AnyAction) => {\n        draft.preChatInformationType = getInitialInstanceData().videochat.preChatInformationType;\n    }),\n\n    [OPEN_VIDEOCHAT]: produce((draft: IVideochat, action: AnyAction) => {\n        draft.isOpen = true;\n    }),\n\n    [CLOSE_VIDEOCHAT]: produce((draft: IVideochat, action: AnyAction) => {\n        draft.isOpen = false;\n    }),\n\n    [SET_TYPE]: produce((draft: IVideochat, { payload }: Action<VideoChatType>) => {\n        let type: VideoChatType = payload;\n\n    \t// for CONTENT_PARTNERS_CHAT we need kind of a special treatment:\n        // if vchat-core said it is in voyeur mode, we will use that info instead\n\t\tif (type === VideoChatType.CONTENT_PARTNERS_CHAT) {\n\t\t\ttype = draft.isInVoyeurMode ? VideoChatType.VOYEUR_CHAT: VideoChatType.LIVECHAT;\n\t\t}\n\n\t\t// if vchat-core said it's a group chat, we will use that info instead\n\t\tif (draft.isGroupChat) {\n\t\t\ttype = VideoChatType.GROUP_CHAT;\n\t\t}\n\n\t\tdraft.type = type;\n        draft.lastSuccessfulType = type;\n    }),\n\n    [RESET_TYPE]: produce((draft: IVideochat, action: AnyAction) => {\n        draft.type = getInitialInstanceData().videochat.type;\n    }),\n\n    [SET_INITIAL_VIDEOCHAT_TYPE]: produce((draft: IVideochat, { payload }: Action<VideoChatType>) => {\n        draft.initialVideoChatType = payload;\n    }),\n\n    [RESET_INITIAL_VIDEOCHAT_TYPE]: produce((draft: IVideochat, _: AnyAction) => {\n        draft.initialVideoChatType = getInitialInstanceData().videochat.initialVideoChatType;\n    }),\n\n    [SET_VIDEOCHAT_TIME_LIMIT]: produce((draft: IVideochat, { payload }: Action<number>) => {\n        draft.previousTimeLeft = draft.timeLeft;\n        draft.timeLeft = payload;\n    }),\n\n    [SET_VIDEOCHAT_TIME_LIMIT_BELOW_THRESHOLD]: produce((draft: IVideochat, { payload }: Action<boolean>) => {\n        draft.isTimeLeftBelowThreshold = payload;\n    }),\n\n    [SET_LIVE_PREVIEW_TIME_LIMIT]: produce((draft: IVideochat, { payload }: Action<number>) => {\n        draft.livePreviewTimeLeft = payload;\n    }),\n\n    [SET_LIVE_PREVIEW_TEXT_TIME_LIMIT]: produce((draft: IVideochat, { payload }: Action<number>) => {\n        draft.livePreviewTextTimeLimit= payload;\n        draft.livePreviewTextTimeLeft = payload;\n    }),\n\n    [SET_LIVE_PREVIEW_TEXT_TIME_LEFT]: produce((draft: IVideochat, { payload }: Action<number>) => {\n        draft.livePreviewTextTimeLeft = payload;\n    }),\n\n    [SET_IS_MUTED_BY_MODEL]: produce((draft: IVideochat, { payload }: Action<boolean>) => {\n        draft.isMutedByModel = payload;\n    }),\n\n    [SET_PLAYING_STATUS]: produce((draft: IVideochat, { payload }: Action<boolean>) => {\n        draft.isPlaying = payload;\n    }),\n\n    [SET_INITIAL_RESOLUTION]: produce((draft: IVideochat, { payload }: Action<IResolution>) => {\n        draft.initialResolution = payload;\n    }),\n\n    [SET_IS_MOBILE_MENU_OPEN]: produce((draft: IVideochat, { payload }: Action<boolean>) => {\n        draft.isMobileMenuOpen = payload;\n    }),\n\n    [SET_IS_MUTED_BY_CLIENT]: produce((draft: IVideochat, { payload }: Action<boolean>) => {\n        draft.isMutedByClient = payload;\n    }),\n\n    [SET_IS_INITIALLY_MUTED]: produce((draft: IVideochat, { payload }: Action<boolean>) => {\n        draft.isInitiallyMuted = payload;\n    }),\n\n    [DISPLAY_INITIALLY_MUTED_HINT]: produce((draft: IVideochat, action: AnyAction) => {\n        draft.isInitiallyMutedHintDisplayed = true;\n    }),\n\n    [HIDE_INITIALLY_MUTED_HINT]: produce((draft: IVideochat, action: AnyAction) => {\n        draft.isInitiallyMutedHintDisplayed = false;\n    }),\n\n    [SET_EXIT_EVENT]: produce((draft: IVideochat, { payload }: Action<IExitEvent>) => {\n        draft.exitEvent =  payload;\n    }),\n\n    [RESET_EXIT_EVENT]: produce((draft: IVideochat, action: AnyAction) => {\n        draft.exitEvent =  getInitialInstanceData().videochat.exitEvent;\n    }),\n\n    [SET_RESUME_CHAT_TIMESTAMP]: produce((draft: IVideochat, { payload }: Action<Date>) => {\n        draft.resumeChatTimestamp = payload;\n    }),\n\n    [SET_SHOULD_HIDE_VIDEOCHAT_CONTROLS]: produce((draft: IVideochat, { payload }: Action<boolean>) => {\n        draft.shouldHideVideochatControls = payload;\n    }),\n\n    [SET_IS_GROUP_CHAT]: produce((draft: IVideochat, { payload }: Action<boolean>) => {\n        draft.isGroupChat = payload;\n    }),\n\n    [SET_IS_IN_VOYEUR_MODE]: produce((draft: IVideochat, { payload }: Action<boolean>) => {\n        draft.isInVoyeurMode = payload;\n    }),\n\n    [SET_GROUP_CHAT_PARTICIPANTS]: produce((draft: IVideochat, { payload }: Action<string[]>) => {\n        draft.groupChatParticipants = payload;\n    }),\n\n    [SET_GROUP_CHAT_CLIENTNAME]: produce((draft: IVideochat, { payload }: Action<string>) => {\n        draft.groupChatClientName = payload;\n    }),\n\n    [ADD_GROUP_CHAT_PARTICIPANT]: produce((draft: IVideochat, { payload }: Action<string>) => {\n        draft.groupChatParticipants = draft.groupChatParticipants.concat(payload);\n    }),\n\n    [REMOVE_GROUP_CHAT_PARTICIPANT]: produce((draft: IVideochat, { payload }: Action<string>) => {\n        const foundIndex = findIndex(draft.groupChatParticipants, participant => participant === payload);\n        if (foundIndex >= 0) {\n            draft.groupChatParticipants =\n                filter(draft.groupChatParticipants, (participant, index) =>index !== foundIndex);\n        }\n    }),\n\n\t[SET_IS_AUTOPLAY_RESTRICTED]: produce((draft: IVideochat, { payload }: Action<boolean>) => {\n\t\tdraft.isAutoplayRestricted = payload;\n\t}),\n\n}, getInitialInstanceData().videochat);\n\nexport default videochat;\n","import { get } from \"lodash\";\nimport { createSelector } from \"reselect\";\nimport { isIE } from \"react-device-detect\";\n\nimport IStore, { IFeatures } from \"../store\";\nimport { getInitialInstanceData } from \"../initialStore\";\n\nexport const getFeatures = (store: IStore, instanceId: string | undefined) => {\n\tconst id = instanceId as string;\n\tconst data = get(store, id) || getInitialInstanceData();\n\treturn data.features;\n};\n\n/**\n * @return {boolean} if true preloader text is hidden\n */\nexport const hasPreloaderPaymentText = createSelector(getFeatures,\n\t(features: IFeatures) => features.hasPreloaderPaymentText\n);\n\n/**\n * @return {boolean} true if the messenger has the \"favorite\" feature active\n */\nexport const hasFavoriteFeature = createSelector(getFeatures, (features: IFeatures) => features.hasFavorite);\n\n/**\n * @return {boolean} true if the messenger has the \"contact note\" feature active\n */\nexport const hasContactNoteFeature = createSelector(getFeatures, (features: IFeatures) => features.hasContactNote);\n\n/**\n * @return {boolean} true if the messenger has \"gifts\" feature active\n */\nexport const hasGiftsFeature = createSelector(getFeatures, (features: IFeatures) => features.hasGifts);\n\n/**\n * @return {boolean} true if the messenger has the toy control feature active\n */\nexport const hasToyControlFeature = createSelector(getFeatures, (features: IFeatures) => features.hasToyControl);\n\n/**\n * @return {boolean} true if the messenger has the \"exit pop-ups\" feature active\n * (means that the exit informational pop-ups displayed are the default ones implemented in vxmessenger)\n * Useful when the platform intends to display its own customized exit pop-ups\n */\nexport const hasExitPopups = createSelector(getFeatures, (features: IFeatures) => features.hasExitPopups);\n\n/**\n * @return {boolean} true if the messenger has the \"modelProfilePicture\" feature active\n */\nexport const hasModelProfilePicture = createSelector(getFeatures, (features: IFeatures) => features.hasModelProfilePicture);\n\n/**\n * @return {boolean} true if the messenger has the \"modelMotto\" feature active\n */\nexport const hasModelMotto = createSelector(getFeatures, (features: IFeatures) => features.hasModelMotto);\n\n/**\n * @return {boolean} true if the messenger has the \"modelName\" feature active\n */\nexport const hasModelName = createSelector(getFeatures, (features: IFeatures) => features.hasModelName);\n\n/**\n * @return {boolean} true if the messenger has the \"cam2Cam\" feature active\n */\nexport const hasCam2Cam = createSelector(getFeatures, (features: IFeatures) => features.hasCam2Cam);\n\n/**\n * @return {boolean} true if the messenger has the \"voyeur\" feature active\n */\nexport const hasVoyeur = createSelector(getFeatures, (features: IFeatures) => features.hasVoyeur);\n\n/**\n * @return {boolean} true if the messenger has the \"privateChat\" feature active\n */\nexport const hasPrivateChat = createSelector(getFeatures, (features: IFeatures) => features.hasPrivateChat);\n\n/**\n * @return {boolean} true if the messenger has the \"closeButton\" feature active\n */\nexport const hasCloseButton = createSelector(getFeatures, (features: IFeatures) => features.hasCloseButton);\n\n/**\n * @return {boolean} true if the messenger has the fullscreen feature active. If not we will never\n * render the fullscreen button in the videochat container.\n */\nexport const hasFullscreen = createSelector(getFeatures, (features: IFeatures) => features.hasFullscreen);\n\n/**\n * @return {boolean} true if the messenger has the emoticons button rendered (functionality such as\n * using the shortcut in the textbox to transform the text into emoticon will be kept).\n */\nexport const hasEmoticons = createSelector(getFeatures, (features: IFeatures) => features.hasEmoticons);\n\n/**\n * @return {boolean} true if the client will have the ability to upload an image\n */\nexport const hasImageUploadFeature = createSelector(getFeatures, (features: IFeatures) => features.hasImageUpload);\n\n/**\n * @return {boolean} true if the arrow for sending the message to the model on click will be rendered\n */\nexport const hasSendMessageButton = createSelector(getFeatures, (features: IFeatures) => features.hasSendMessageButton);\n\n/**\n * @return {boolean} true if the history messages sections from the chatbox will be opened from the start\n */\nexport const hasHistorySectionsOpened = createSelector(getFeatures, (features: IFeatures) => features.hasHistorySectionsOpened);\n\n/**\n * @return {boolean} true if the messenger will contain the past conversation between the client and the model\n */\nexport const hasHistoryMessages = createSelector(getFeatures, (features: IFeatures) => features.hasHistoryMessages);\n\n/*\n * @return {boolean} true if the history messages will be grouped based on their previous livechat sessions\n */\nexport const hasMessagesGrouped = createSelector(getFeatures, (features: IFeatures) => features.hasMessagesGrouped);\n\nexport const hasGroupChatIndicator = createSelector(getFeatures, (features: IFeatures) => features.hasGroupChatIndicator);\n\n/**\n * @returns {boolean} true if messenger's header is visit-x\n * custom containing only messages info.\n */\nexport const isMessageTypeHeader = createSelector(getFeatures,\n\t(features: IFeatures) => features.isMessageTypeHeader as boolean\n);\n\n/**\n * @returns {boolean} true if the parent platform has configured the messenger\n * to enable the client the functionality of sending audio messages\n */\nexport const hasAudioMessageFeature = createSelector(getFeatures,\n\t(features: IFeatures) => !isIE && features.hasAudioMessages\n);\n\n/**\n * @returns {boolean} true if the parent platform has configured the messenger\n * to render the name of the client in the message bubble when the stream\n * is in group chat mode\n */\nexport const hasClientName = createSelector(getFeatures,\n\t(features: IFeatures) => features.hasGroupChatClientName\n);\n\n\n/**\n * @returns {boolean} true if the parent platform has configured the messenger\n * to render the fullscreen layout when the messenger has a stream active\n * inside a landscape container (width > height)\n */\nexport const hasFullscreenLayoutOnLandscape = createSelector(getFeatures,\n\t(features: IFeatures) => features.hasFullscreenLayoutOnLandscape\n)\n\n/**\n * @return {boolean} if true, when clicking outisde the messenger, we will trigger our custom logic\n */\nexport const hasBehaviorOnClickOutside = createSelector(getFeatures, (features: IFeatures) => features.hasBehaviorOnClickOutside);\n\n/**\n * @return {boolean} if the parent platforn has configured the messenger to have\n * the tipping features enabled - both custom tipping when a stream is active and\n * the anonymous tip when starting a voyeur chat\n */\nexport const hasTips = createSelector(getFeatures, (features: IFeatures) => features.hasTips);\n\n\n/**\n * @return {boolean} if true, censored content will be shown\n */\nexport const getShowCensoredContent = createSelector(getFeatures,\n\t(features: IFeatures) => features.showCensoredContent\n);\n","import { get } from \"lodash\";\nimport {createSelector} from \"reselect\";\n\nimport IStore, { IOptions } from \"../store\";\nimport config from \"../../static/config\";\nimport { getInitialInstanceData } from \"../initialStore\";\n\n// IE-SPECIFIC: Audio Messages are not currently working on any IE browser.\nexport const getOptions = (store: IStore, instanceId: string | undefined): IOptions => {\n    const id = instanceId as string;\n    const data = get(store, id) || getInitialInstanceData();\n\n\treturn data.options;\n};\n\n/**\n * @return the max width in pixels by which the messenger will stay in the portrait mode\n */\nexport const getSwitchToPortraitWidth = createSelector(getOptions, options =>\n    options.switchToPortraitWidth || config.viewSizes.switchToPortraitWidth\n);\n\n/**\n * @return the tipping information that will be displayed in the chat\n * after the customer has sent a tip to the model.\n */\nexport const getTip = createSelector(getOptions,\n\toptions => options.tip || config.defaultTipOption\n);\n\n/**\n * @returns {number | undefined} the initial videochat volume if it has\n * been configured by the parent platform. The value will be a float between 0 and 1.\n */\nexport const getInitialVideochatVolume = createSelector(getOptions,\n\toptions => options.initialVideochatVolume\t\n);\n\n/**\n * @return {string} - the preloader CDN image address for when the stream is loading. If no preloader\n * has been sent from the parent platform, we will use our visit-x default preloader.\n */\nexport const getPreloader = createSelector(getOptions, options => options.preloader);\n\n/**\n * @return {string} - the link presented to the user to update his presumable outdated browser\n */\nexport const getUpdateBrowserLink = createSelector(getOptions, options => options.updateBrowserLink);\n\n/**\n * @return {string} - the Google Analytics key for metric tracking\n */\nexport const getAnalyticsKey = createSelector(getOptions, options => options.analyticsKey);\n\n/**\n * @return {string} - the censored content image\n */\nexport const getCensoredContentImage = createSelector(getOptions, options => options.censoredContentImage);\n","// tslint:disable:no-console\nimport * as moment from 'moment';\n\nenum LEVEL {\n    TRACE = 'TRACE',\n    DEBUG = 'DEBUG',\n    WARNING = 'WARNING',\n    ERROR = 'ERROR',\n    NONE = 'NONE'\n}\n\ninterface ILogger {\n    error: (text: string, details?: any) => void;\n    warning: (text: string, details?: any) => void;\n    debug: (text: string, details?: any) => void;\n    trace: (text: string, details?: any) => void;\n}\n\nconst environmentLevel = process.env.LOG_LEVEL as LEVEL || LEVEL.NONE;\n\nconst logEntry = (loggerName: string, text: string, details?: any): string =>\n    `[${loggerName}][${moment().format('HH:mm:ss.SSS')}] ${text} ${details ? `\n${JSON.stringify(details)}` : ''}`;\n\n\nconst canLogTrace = (level: LEVEL): boolean => level === LEVEL.TRACE;\n\nconst canLogDebug = (level: LEVEL): boolean =>\n    level === LEVEL.DEBUG || canLogTrace(level);\n\nconst canLogWarning = (level: LEVEL): boolean =>\n    level === LEVEL.WARNING || canLogDebug(level);\n\nconst canLogError = (level: LEVEL): boolean =>\n    level === LEVEL.ERROR || canLogWarning(level);\n\nconst getLogger = (level: LEVEL, name: string): ILogger => ({\n    error: (text: string, details?: any) => {\n        if (canLogError(level)) {\n            console.log(logEntry(name, text, details));\n        }\n    },\n\n    warning: (text: string, details?: any) => {\n        if (canLogWarning(level)) {\n            console.log(logEntry(name, text, details));\n        }\n    },\n\n    debug: (text: string, details?: any) => {\n        if (canLogDebug(level)) {\n            console.log(logEntry(name, text, details));\n        }\n    },\n\n    trace: (text: string, details?: any) => {\n        if (canLogTrace(level)) {\n            console.log(logEntry(name, text, details));\n        }\n    }\n});\n\n/** Exported loggers */\n\nexport const chat = getLogger(environmentLevel, 'CHAT');\nexport const player = getLogger(environmentLevel, 'PLAYER');\nexport const saga = getLogger(environmentLevel, 'SAGA');\nexport const component = getLogger(environmentLevel, 'COMPONENT');\n\n\n\n","/** The messages from the chatbox are grouped by these time frames */\nimport { IEmoticon, IGift, IGroupMessage, IMessage, IModalContent } from '../../../redux/store';\n\nexport enum GroupTimestamp {\n\tTODAY = \"TODAY\",\n\tYESTERDAY = \"YESTERDAY\",\n\tONEWEEKAGO = \"ONEWEEKAGO\",\n\tTWOWEEKSAGO = \"TWOWEEKSAGO\",\n\tTHREEWEEKSAGO = \"THREEWEEKSAGO\",\n\tONEMONTHAGO = \"ONEMONTHAGO\",\n\tTWOMONTHSAGO = \"TWOMONTHSAGO\",\n\tTHREEMONTHSAGO = \"THREEMONTHSAGO\",\n\tSIXMONTHSAGO = \"SIXMONTHSAGO\"\n}\n\nexport type IOrganizedMessage = (IMessage[] | { [index: string]: (IGroupMessage | IMessage)[] });\n\nexport enum CONTENT_UPDATE_TYPE {\n\tMESSAGES = \"MESSAGES\",\n\tIMAGES = \"IMAGES\",\n\tGROUP = \"GROUP\"\n}\n\nexport interface IChatBoxProps {\n\tgifts: IGift[];\n\temoticons: IEmoticon[];\n\tisFullscreen: boolean;\n\tisResponsive: boolean;\n\tisMobileLandscape: boolean;\n\thasMessagesGrouped: boolean;\n\thasHistorySectionsOpened: boolean;\n\tmentionOptions: string[];\n\torganizedMessages: IOrganizedMessage;\n\twidth: number;\n\n\tsetModalContent: (modalContent?: IModalContent) => () => void;\n\tonContentUpdate: (content: CONTENT_UPDATE_TYPE, message?: IMessage) => () => void;\n}\n","export enum MessengerSpecificErrorCodes {\n    GUEST_OFFLINE = 100001\n}\n\n/**\n * Result codes returned by vxcontrol-client-lib\n */\nexport enum VXControlCodes {\n    /** Error when performing a messenger action (like sending a gift or purchasing a gift bundle) */\n    NO_CREDIT_MESSENGER = 4141,\n\n    /** Error when performing a videochat action (like starting a livechat session) */\n    NO_CREDIT_VIDEOCHAT = 6106,\n\n    SUCCESS_EXIT_CODE = 2000,\n\n    INVALID_PARAMETER = 5001,\n\n    UNKNOWN_ERROR = 6001,\n    INVALID_WEB_TOKEN = 6002,\n    MODEL_IS_OFFLINE = 6403,\n    SOFT_CHAT = 6601,\n    PREVIEW_LIMIT_EXCEEDED = 6401,\n    MODEL_IS_IN_PRIVATE_CHAT = 6906\n}\n","import * as loggers from './loggers';\n\nexport default loggers;","import { isEmpty, filter, find, isUndefined } from \"lodash\";\nimport { SourceSet, TargetSet } from \"./ChatService/types\";\nimport {\n    PlayInfo,\n    CameraConfig,\n    H5LivePlayerFactory,\n    HlsJsPlayerFactory,\n    HlsPlayerFactory,\n    JpegPlayerFactory,\n    Player,\n    CameraPosition,\n    PlayerHandler\n} from 'vchat-player';\n\nimport config from \"../static/config\";\nimport loggers from \"../loggers\";\nimport { IQualityBoundaries } from '../redux/store';\n\nconst PlayModes = {\n    PROMISE_PLAY_MUTED: 'mpp',\n    AUTO_PLAY_MUTED: 'map'\n};\n\ninterface IInputSelection {\n    selectedVideoDevice: MediaDeviceInfo;\n    selectedAudioDevice?: MediaDeviceInfo;\n}\n\ninterface IListeners {\n    cameraOnListener: (instanceId: string) => any,\n    cameraOffListener: (instanceId: string) => any | null,\n    cameraDeniedListener: (instanceId: string) => any,\n    playErrorListener: (instanceId: string, level: number, error?: any) => any,\n    playStartListener: (instanceId: string) => any,\n    playStopListener: (instanceId: string) => any,\n    onSendMetricsListener: (instanceId: string, info: any) => any,\n    onPlayInfoListener: (instanceId: string, info: PlayInfo) => any,\n    onVolumeChangeListener: (instanceId: string, volume: number) => any,\n    onInitiallyMutedListener: (instanceId: string, isMuted: boolean) => any,\n    onSelectingCameraListener: (instanceId: string, cameras: MediaDeviceInfo[]) => any\n}\n\nclass PlayerService {\n    private static services: PlayerService[] = [];\n    private static listeners: Partial<IListeners> = {};\n\n    constructor(instanceId: string) {\n        this.instanceId = instanceId;\n    }\n\n    private instanceId: string;\n\n    private player: Player | null;\n    private reloadCallback;\n    private playerContainer: HTMLElement | null;\n    private cameraSelectionResolve : (selection: IInputSelection) => void | null;\n    private cameraConfig: CameraConfig | undefined | null;\n    private isCameraStarted: boolean;\n\n    static getService(instanceId: string) {\n        let playerService = find(PlayerService.services, service => service.getInstanceId() === instanceId);\n\n        if (!playerService) {\n            playerService = new PlayerService(instanceId);\n            PlayerService.services.push(playerService);\n        }\n\n        return playerService;\n    }\n\n    static destroyService(instanceId: string) {\n        const playerService = find(PlayerService.services, service => service.getInstanceId() === instanceId);\n\n        if (playerService) {\n            playerService.closePlayer();\n            PlayerService.services =\n                filter(PlayerService.services, service => service.getInstanceId() !== instanceId);\n        }\n    }\n\n    static registerCameraOnListener(listener: (instanceId: string) => any) {\n        PlayerService.listeners.cameraOnListener = listener;\n    };\n\n    static registerCameraOffListener(listener: (instanceId: string) => any) {\n        PlayerService.listeners.cameraOffListener = listener;\n    };\n\n    static registerCameraDeniedListener(listener: (instanceId: string) => any) {\n        PlayerService.listeners.cameraDeniedListener = listener;\n    };\n\n    static registerPlayerInfoListener = (listener: (instanceId: string, info: PlayInfo) => any) => {\n        PlayerService.listeners.onPlayInfoListener = listener;\n    };\n\n    static registerSendMetricsListener = (listener: (instanceId: string, info) => any) => {\n        PlayerService.listeners.onSendMetricsListener = listener;\n    };\n\n    static registerPlayErrorListener(listener: (instanceId: string, level: number, error?: any) => any) {\n        PlayerService.listeners.playErrorListener = listener;\n    };\n\n    static registerPlayStartListener(listener: (instanceId: string) => any) {\n        PlayerService.listeners.playStartListener = listener;\n    };\n\n    static registerPlayStopListener(listener: (instanceId: string) => any) {\n        PlayerService.listeners.playStopListener = listener;\n    };\n\n    static registerVolumeChangeListener(listener: (instanceId: string, volume: number) => any) {\n        PlayerService.listeners.onVolumeChangeListener = listener;\n    };\n\n    static registerInitiallyMutedListener(listener: (instanceId: string, isMuted: boolean) => any) {\n        PlayerService.listeners.onInitiallyMutedListener = listener;\n    };\n\n    static registerSelectingCameraListener(listener: (instanceId: string,cameras: MediaDeviceInfo[]) => any) {\n        PlayerService.listeners.onSelectingCameraListener = listener;\n    };\n\n    private getPlayerHandler: () => PlayerHandler = () => {\n        const { instanceId } = this;\n\n        return {\n            onVolumeChange: (value: number) => {\n                loggers.player.debug('onVolumeChange ', { details: { value }});\n\n                if (isUndefined(value)) {\n\t\t\t\t\tloggers.player.debug('Volume changed to undefined; probably a bug in vchat-player. Ignore it');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (PlayerService.listeners.onVolumeChangeListener) {\n                    PlayerService.listeners.onVolumeChangeListener(instanceId, value);\n                }\n            },\n\n            onPlayerSwitch: (format: any) => {\n                loggers.player.debug('onPlayerSwitch ', { details: { format }});\n            },\n\n            onPlayerSwitchComplete: (format: any) => {\n                loggers.player.debug('onPlayerSwitchComplete ', { details: { format }});\n            },\n\n            onError: (error: string | object) => {\n                loggers.player.debug('onError ', { details: { error }});\n            },\n\n            onSendMetrics: (info: any) => {\n                loggers.player.debug('onSendMetrics ', { details: { info }});\n                if (isEmpty(info)) {\n                    return;\n                }\n\n                if (PlayerService.listeners.onSendMetricsListener) {\n                    PlayerService.listeners.onSendMetricsListener(instanceId, info);\n                }\n\n                const { playMode } = info;\n                const { AUTO_PLAY_MUTED, PROMISE_PLAY_MUTED } = PlayModes;\n\n                if (playMode && PlayerService.listeners.onInitiallyMutedListener) {\n                    PlayerService.listeners\n                        .onInitiallyMutedListener(instanceId, playMode === AUTO_PLAY_MUTED || playMode === PROMISE_PLAY_MUTED);\n                }\n            },\n\n            onPlayStart: (stream: string) => {\n                loggers.player.debug('onPlayStart');\n                if (PlayerService.listeners.playStartListener) {\n                    PlayerService.listeners.playStartListener(instanceId);\n                }\n            },\n\n            onPlayStop: () => {\n                loggers.player.debug('onPlayStop');\n                if (PlayerService.listeners.playStopListener) {\n                    PlayerService.listeners.playStopListener(instanceId);\n                }\n            },\n\n            onPlayInfo: (info: PlayInfo) => {\n                loggers.player.debug('onPlayInfo ', { details: { info }});\n                if (isEmpty(info)) {\n                    return;\n                }\n\n                if (PlayerService.listeners.onPlayInfoListener) {\n                    PlayerService.listeners.onPlayInfoListener(instanceId, info);\n                }\n            },\n\n            onPlayError: (level: number, error?: any) => {\n                loggers.player.debug('onPlayError ', {details: { level, error }});\n                if (PlayerService.listeners.playErrorListener) {\n                    PlayerService.listeners.playErrorListener(instanceId, level, error);\n                }\n            },\n\n            onCameraOn: () => {\n                this.isCameraStarted = true;\n                loggers.player.debug('onCameraOn');\n                if (PlayerService.listeners.cameraOnListener) {\n                    PlayerService.listeners.cameraOnListener(instanceId);\n                }\n            },\n\n            onCameraOff: () => {\n                this.isCameraStarted = false;\n                loggers.player.debug('onCameraOff');\n                if (PlayerService.listeners.cameraOffListener) {\n                    PlayerService.listeners.cameraOffListener(instanceId);\n                }\n            },\n\n            onCameraDenied: () => {\n                loggers.player.debug('onCameraDenied');\n                if (PlayerService.listeners.cameraDeniedListener) {\n                    PlayerService.listeners.cameraDeniedListener(instanceId);\n                }\n            },\n\n            onPublishStart: () => {\n                loggers.player.debug('onPublishStart');\n            },\n\n            onPublishStop: () => {\n                loggers.player.debug('onPublishStop');\n            },\n\n            onSelectInput: (videoInputs: MediaDeviceInfo[]): Promise<IInputSelection> => {\n                loggers.player.debug('onSelectInput', { details: { videoInputs }});\n\n                if (PlayerService.listeners.onSelectingCameraListener) {\n                    PlayerService.listeners.onSelectingCameraListener(instanceId, videoInputs);\n                }\n\n                return new Promise<IInputSelection>((resolve) => {\n                    this.cameraSelectionResolve = resolve;\n                });\n            }\n        };\n    };\n\n    getInstanceId = () => this.instanceId;\n\n    createPlayer = (\n\t\tcontainer: HTMLElement,\n\t\tqualityBoundaries: IQualityBoundaries,\n\t\tinitialVolume?: number\n\t): Player => {\n        const factories = [\n            new H5LivePlayerFactory(),\n            new HlsJsPlayerFactory({\n                waitingTimeout: config.ChatSettings.BAD_CONN_TIMEOUT_WAITING,\n                qualityBoundaries\n            }),\n            new HlsPlayerFactory({\n                waitingTimeout: config.ChatSettings.BAD_CONN_TIMEOUT_WAITING,\n                qualityBoundaries,\n                reloadCallback: (reloadCallback) => {\n                    this.reloadCallback = reloadCallback;\n                }\n            }),\n            new JpegPlayerFactory({})\n        ];\n\n        // we create it first time or destroy the previous and recreate it\n        if (container !== this.playerContainer || !this.player) {\n            if (this.player) {\n                this.closePlayer();\n            }\n\n            this.playerContainer = container;\n\n            this.player = new Player({\n                container,\n                factories,\n                handler: this.getPlayerHandler()\n            });\n\n            loggers.player.debug('player created');\n\n\t\t\t// Parent platform can configure an initial volume for the stream\n\t\t\tif (this.player && !isUndefined(initialVolume)) {\n\t\t\t\tthis.player.volume = initialVolume;\n\t\t\t}\n        } else {\n            loggers.player.debug('using an existing player instance');\n\t\t}\n\n\n        return this.player;\n    };\n\n    getPlayerContainer = (): HTMLElement | null => this.playerContainer;\n\n    /**\n     * Reload previously created player\n     */\n    reloadPlayer = (): void => {\n        if (this.reloadCallback) {\n\t\t\tloggers.player.debug('reload player');\n\t\t\tthis.reloadCallback();\n\t\t}\n    };\n\n    mutePlayer = (): void => {\n\t\tloggers.player.debug('Muting player by setting its volume to 0');\n    \tthis.setVolume(0);\n\t};\n\n\t/**\n\t * Set volume level for the stream\n\t * @param volume - number between 0 and 1 (inclusive), where 0 means muted and 1 means fully loud\n\t */\n\tsetVolume = (volume: number): void => {\n    \tif (this.player) {\n\t\t\tloggers.player.debug('Player volume set to ', { details: { volume }});\n    \t\tthis.player.volume = volume;\n\t\t}\n\t};\n\n    /**\n     * Play the provided stream to the previously created player\n     * @param sources\n     */\n    play = (sources: SourceSet): void => {\n        if (this.player && sources) {\n            try {\n                this.player.play(sources);\n                loggers.player.debug('player started');\n            } catch(error) {\n                loggers.player.debug(\n                    'Trying to play the stream raised this error: ',\n                    { details: { error }});\n            }\n        }\n    };\n\n    /**\n     * Start own camera, but don't publish it yet to the upstream\n     * @param configuration\n     */\n    startCamera = (configuration?: CameraConfig): void => {\n        if (this.isCameraStarted) {\n            loggers.player.debug('camera is started already');\n            return;\n        }\n\n        const { instanceId } = this;\n\n        if (this.player) {\n            this.player.hasCamera().then(\n                (hasCamera) => {\n                    if (this.player && hasCamera) {\n                        this.player.startCamera(configuration)\n                            .then(() => {\n                                this.cameraConfig = configuration;\n                                loggers.player.debug('camera started');\n                            })\n                            .catch(() => {\n                                this.isCameraStarted = false;\n                                loggers.player\n                                    .debug('camera not started');\n                                if (PlayerService.listeners.cameraDeniedListener) {\n                                    PlayerService.listeners.cameraDeniedListener(instanceId);\n                                }\n                            });\n                    } else {\n                        this.isCameraStarted = false;\n                        loggers.player\n                            .debug('no camera available');\n                        if (PlayerService.listeners.cameraDeniedListener) {\n                            PlayerService.listeners.cameraDeniedListener(instanceId);\n                        }\n                    }\n            });\n        }\n    };\n\n    /**\n     * Update aspect of the cam2cam video area\n     * @param configuration\n     * Note: close button won't be affected\n     */\n    updateCamera = (configuration: CameraConfig): void => {\n        if (this.player && this.cameraConfig) {\n            const newConfig: CameraConfig = {\n                ...this.cameraConfig,\n                ...configuration\n            };\n\n            this.player.updateCamera(newConfig);\n\n            loggers.player.debug(\n                'camera updated with the following config:',\n                { details: { configuration }}\n            );\n        }\n    };\n\n    /**\n     * publish own camera on the provided stream\n     */\n    publishCamera = (targets: TargetSet): void => {\n        if (this.player) {\n            let published = false;\n            try {\n                published = this.player.publish(targets);\n            } catch (e) {}\n\n            loggers.player.debug(published ? 'camera published' : 'camera not published');\n        }\n    };\n\n    /**\n     * Select a certain camera device from the available ones\n     * @param camera\n     */\n    selectCamera = (camera: MediaDeviceInfo): void => {\n        if (this.cameraSelectionResolve) {\n            loggers.player.debug('Resolving camera selection with ', { details: { camera }});\n            this.cameraSelectionResolve({\n                selectedVideoDevice: camera\n            });\n        }\n    };\n\n    /**\n     * Stop cam2cam on the previously created player\n     */\n    stopCamera = () => {\n        if (this.player) {\n            this.player.unpublish();\n            this.player.stopCamera();\n            this.cameraConfig = null;\n            this.isCameraStarted = false;\n            loggers.player.debug('camera stopped');\n        }\n    }\n\n    closePlayer = (): void => {\n        if (this.player) {\n            this.stopCamera();\n            this.player.destroy();\n            this.playerContainer = null;\n            this.player = null;\n            loggers.player.debug('player closed');\n        }\n    };\n\n    stopPlayer = (): void => {\n        if (this.player) {\n            this.stopCamera();\n            this.player.stop();\n            loggers.player.debug('player stopped');\n        }\n    };\n}\n\nexport default PlayerService;\n\n// re-export vchat-player things and use them from here, to avoid testing problems\nexport { CameraConfig, CameraPosition, Player, PlayInfo };\n\n","export const QUERYSINGLE = \"querysingle\";\n\n/** Dollar's id is always going to be 171 (static value in the database) */\nexport const dollarGiftStaticData = {\n    id: 171,\n    name: \"Dollar\"\n};\n\nexport enum BackenPayloadTypes {\n    guest = \"guest\",\n    channel = \"channel\"\n}\n\n/**\n * Reset interval for resetting the chat connection\n * Note: value is in minutes;\n */\nexport const resetChatInterval: number = 20;\n\n/**\n * The value is in miliseconds.\n */\nexport const loginWaitingTime = 5000;\n\n/**\n * Reset interval for hiding the videochat controls\n */\nexport const shouldHideVideoChatControlsTimeoutTime = 10000;\n\n/** The value is in miliseconds */\nexport const intervalBetweenClicks = 1000;\n\nexport const clickCountLimit: number = 7;\n\n/** The value is in pixels */\nexport const emoticonSize = {\n    large: 50,\n    small: 14\n};\n\n/** Line separator inside a message */\nexport const MESSAGE_LINE_SEPARATOR = '\\n';\n\n/** The value is in pixels */\nexport const TOY_MESSAGE_SIZE = 40;\n\n/** The value is in pixels */\nexport const TOY_SECTION_HEIGHT = 240;\n\nexport const ESC_KEY_CODE = 27;\n\nexport const ENTER_KEY_CODE = 13;\n\nexport const ARROW_UP_KEY_CODE = 38;\n\nexport const ARROW_DOWN_KEY_CODE = 40;\n\nexport const creditsDeprecatedName = 'Credits';\n\n/** The value is in pixels */\nexport const receivedMessageAndImageWrapperMarginLeft = 20;\n\n/** The value is in pixels */\nexport const receivedMessageAndImageWrapperPaddingRight = 8;\n\nexport const mentionSpecialCharacter = '@';\n\nexport const messageFontSizePercentage = 25;\n\nexport const defaultInstanceId = 'defaultId';\n","export enum DomCustomClass {\n    ActionResponse = 'action-response',\n    ActionSection = 'action-section',\n    ActionSectionBaseButton = 'action-section-base-button',\n    ActionResponseCloseButton = 'action-response-close-button',\n    AdvancedTooltipContent = 'advanced-tooltip-content',\n    Cam2CamButton = 'cam-2-cam-button',\n    CameraOption = 'cam-2-cam-option',\n    CamerasSection = 'cam-2-cam-section',\n    ClientMessage = 'client-message',\n    DialogButton = 'dialog-button',\n    FullScreenHeader = 'fullscreen-header',\n    FullScreenLightBox = 'fullscreen-light-box',\n    Gift = 'gift',\n    GiftDetail = 'gift-detail',\n    GiftName = 'gift-name',\n    GiftPage = 'gift-page',\n    GiftTab = 'gift-tab',\n    Group = 'group',\n    Header = 'header',\n    InformationDialog = 'information-dialog',\n    InitiallyMutedTooltip = 'initially-muted-tooltip',\n    LiveChatButton = 'live-chat-button',\n    LiveChatPreviewButton = 'live-chat-preview-button',\n    Message = 'message',\n    MessageEmoticon = 'message-emoticon',\n    MessageGift = 'message-gift',\n    MobileFooter = 'mobile-footer',\n    MobileHeader = 'mobile-header',\n    ModalInformationDialog = 'modal-information-dialog',\n    ModelMessage = 'model-message',\n    GroupChatParticipants = 'participants-number',\n    PreChatInformationDialog = 'pre-chat-information-dialog',\n    ReloadButton = 'reload-button',\n    SelectionButton = 'selection-button',\n    SelectionButtons = 'selection-buttons',\n    SystemMessage = 'system-message',\n    Tooltip = 'tooltip',\n    ToyMessage = 'toy-message',\n    ToyMessageInactive = 'toy-message-inactive',\n    ToyOption = 'toy-option',\n    ToyOptionWithTooltip = 'toy-option-with-tooltip',\n    ToySectionHeader = 'toy-section-header',\n    UserPromptTipButton = 'user-prompt-tip-button',\n    UserPromptTips = 'user-prompt-tips',\n    VideoChatBaseButton = 'video-chat-base-button',\n    VideoChatMobile = 'video-chat-mobile',\n    VipLiveChatPreviewButton = 'vip-live-chat-preview-button',\n    VoyeurCamButton = 'voyeur-cam-button',\n    WindowBox = 'window-box',\n\n    Disabled = 'disabled',\n    FullScreen = 'fullscreen'\n};\n","import * as constants from './constants';\n\nexport default constants;","import {\n\tchain,\n\tfilter,\n\tfind,\n\tfindIndex,\n\tforEach,\n\tget,\n\tgroupBy,\n\thas,\n\tincludes,\n\tisEmpty,\n\tisEqual,\n\tisObject,\n\tisUndefined,\n\tmap,\n\treplace,\n\treverse,\n\tsize,\n\tsortBy,\n\ttakeRight,\n\ttoUpper,\n\ttransform\n} from 'lodash';\nimport * as cuid from 'cuid';\nimport * as React from 'react';\nimport * as moment from 'moment';\nimport * as base64 from 'base-64';\nimport { ChatConfig, ExitCode } from \"../services/ChatService/types\";\nimport { isIOS, isSafari } from \"react-device-detect\";\nimport {\n\tCMDC_CMSG,\n\tEnumBooleanStringified,\n\tEnumMessageDirection,\n\tMessageParams,\n\tOnlineStateType,\n\tSupportedLanguage\n} from 'vxcontrol-client-lib'\n\nimport { IChatResponse } from '../sagas/websockets/types/types';\nimport { Player } from \"../services/PlayerService\";\nimport {\n\tIBundle,\n\tIBundleGift,\n\tIChat,\n\tIEmoticon,\n\tIGift,\n\tIGiftCategory,\n\tIGiftPage,\n\tIGiftTranslation,\n\tIGroupChatColor,\n\tIGroupMessage,\n\tIMessage,\n\tIModalContent,\n\tIOnlineState,\n\tIPlatformProps,\n\tIResolution,\n\tISession,\n\tIToyControlTranslation,\n\tIToyOption,\n\tMessageContentType,\n\tMessageDirection,\n\tMsgType,\n\tPreChatInformationType,\n\tQuestionType,\n\tTranslations,\n\tVideochatInformationType\n} from '../redux/store';\nimport config from '../static/config';\nimport { GroupTimestamp } from '../features/specific/ChatBox/types';\nimport { MessengerSpecificErrorCodes, VXControlCodes } from \"../static/constants/errorCodes\";\nimport { IPreferenceStore, PreferenceName } from \"../services/AppService/types\";\nimport constants from \"../static/constants\";\n\n\n// Create the Context for sending the instanceId to all components\nexport const InstanceContext = React.createContext(\"\");\n\n// This is no normal whitespace!\nexport const CHAR_BEHIND_GIFTS = \"　\";\n\nexport const versionNumber: string = process.env.VERSION_NUMBER || '';\n\n/**\n * Convert the emoticon code got from the back end into the special character which can be inserted into HTML\n * @param code\n */\nexport const emoticonCodeToPrintableChar = (code: string) => {\n\tconst codePoint = parseInt(code.substring(1), 16);\n\treturn String.fromCodePoint(codePoint);\n};\n\nexport const itemToRegex = (item: string): string => {\n\treturn item\n\t\t.replace(')', '\\\\)')\n\t\t.replace('(', '\\\\(')\n\t\t.replace('?', '\\\\?')\n\t\t.replace('*', '\\\\*')\n\t\t.replace('|', '\\\\|')\n\t\t.replace('[', '\\\\[')\n\t\t.replace('/', '\\\\/');\n};\n\nexport const getEmoticonsRegexp = (emoticons: IEmoticon[]): string => `(${getEmoticonsPattern(emoticons)})`;\n\nexport const getEmoticonsPattern = (emoticons: IEmoticon[]): string =>\n\temoticons.reduce((prevResult: string, emoticon: IEmoticon, index: number) => (\n\t\tprevResult + itemToRegex(emoticon.text) + (emoticons.length - 1 === index ? '' : '\\|')\n\t), '');\n\nexport const getEmoticonsShortcuts = (emoticons: IEmoticon[]) =>\n\tmap(emoticons, (emoticon: IEmoticon) => emoticon.text);\n\nexport const getGiftEncoding = (gift: IGift): string => base64.encode(gift.id.toString());\n\nexport const getGiftDecoded = (id: string): number => parseInt(base64.decode(id), 10);\n\nexport const getRegexForMessage = (specialChars: string[]): string => {\n\tconst regexSeparator = \"|\";\n\n\tlet pattern = \"\";\n\tforEach(specialChars, (chars: string) => {\n\t\tpattern += itemToRegex(chars) + regexSeparator;\n\t});\n\n\t/** Remove the regex separator from our pattern's end */\n\tpattern = pattern.substring(0, pattern.length - 1);\n\n\treturn pattern;\n};\n\n/**\n * Get the CSS class to be used for an emoticon\n * @param emoticon\n */\nexport const getEmoticonClass = (emoticon: IEmoticon) => emoticon.position ? 'emoticon-background' : 'emoticon';\n\nexport const getSpecialCharactersRegex = (\n\temoticons: IEmoticon[],\n\tgiftIcons: string[] = [],\n\tmentions: string[] = []\n): RegExp => {\n\tconst regexSeparator = \"|\";\n\tlet specialCharactersPattern = \"\";\n\n\t/** Compose the pattern for emoticons */\n\tspecialCharactersPattern += getEmoticonsPattern(emoticons);\n\n\tif (!isEmpty(giftIcons)) {\n\t\tspecialCharactersPattern += `${regexSeparator}${getRegexForMessage(giftIcons)}`;\n\t}\n\tif (!isEmpty(mentions)) {\n\t\tspecialCharactersPattern += `${regexSeparator}${getRegexForMessage(mentions)}`;\n\t}\n\n\treturn new RegExp(`(${specialCharactersPattern})`, \"gim\");\n};\n\n/**\n * Get the translated name for gift's name\n * @param gift IGift interface for the concept of gift\n * @param language SupportedLanguage interface, for instance: \"en\", \"de\"\n */\nexport const getTranslatedGiftName = (gift: IGift, language: SupportedLanguage): string => {\n\tconst giftTranslation = find(gift.translations,\n\t\t(translation: IGiftTranslation) => translation.language === language\n\t);\n\n\treturn giftTranslation ? giftTranslation.value : gift.name;\n}\n\nexport const findEmoticonWithRegex = (text, pattern, callback) => {\n\tlet matchArr;\n\tlet start;\n\tconst regexp = new RegExp(pattern, 'gi');\n\n\twhile ((matchArr = regexp.exec(text)) !== null) {\n\t\tstart = matchArr.index;\n\t\tcallback(start, start + matchArr[0].length);\n\t}\n};\n\n/**\n * Being given a translated template and a key: value dictionary,\n * it replaces all '{key}' occurrences in template with the actual provided values\n * @param translation\n * @param values\n */\nexport const translationWithValues = (translation: string, values: { [key: string]: string | number | undefined }) => (\n\tObject.keys(values).reduce((accumulator, key) =>\n\t\t\taccumulator.replace(new RegExp(`\\{${key}\\}`, \"g\"), `${get(values, key, '')}`),\n\t\ttranslation || '')\n);\n\n/**\n * Return the timestamp based on the value and time unit (days/weeks/month)\n */\nexport const getTimestamp = (value: number | Date, timeUnit?: \"days\" | \"weeks\" | \"month\"): number => {\n\tconst timeFormat = \"YYYY-MM-DD\";\n\n\treturn timeUnit && typeof value === \"number\"\n\t\t? moment(moment().add(value as number, timeUnit).format(timeFormat)).valueOf()\n\t\t: moment(moment(value).format(timeFormat)).valueOf();\n};\n\nexport const getSimplifiedDate = (date: string): string => moment(date).format(\"DD/MM/YYYY\");\n\nexport const checkIfMessageIsConsecutive = (messages: IMessage[], id: string) => {\n\tconst messageIndex = findIndex(messages, m => m.id === id);\n\n\t// The first message received can't be considered consecutive\n\tif (messageIndex === 0) {\n\t\treturn false;\n\t}\n\n\tconst currentMessage = messages[messageIndex];\n\tconst prevMessage = messages[messageIndex - 1];\n\n\tif (isEmpty(currentMessage) || isEmpty(prevMessage)) {\n\t\treturn false;\n\t}\n\n\t// System messages are not part of the algorithm for consecutive messages\n\tif (currentMessage.isSystem || prevMessage.isSystem) {\n\t\treturn false;\n\t}\n\n\t// Messages that have not been written in the same day\n\t// can't be considered consecutive messages\n\tif (!isEqual(\n\t\tgetSimplifiedDate(currentMessage.dateCreated),\n\t\tgetSimplifiedDate(prevMessage.dateCreated)\n\t)) {\n\t\treturn false;\n\t}\n\n\tconst isTextSession = prevMessage.msgType === MsgType.MESSENGER\n\t\t&& currentMessage.msgType === MsgType.MESSENGER;\n\n\tconst hasSameChatSession = prevMessage.msgType === MsgType.CHAT\n\t\t&& currentMessage.msgType === MsgType.CHAT\n\t\t&& isEqual(prevMessage.chatId, currentMessage.chatId);\n\n\t// Messages from different livechat/text sessions can be compared\n\t// and considered to be consecutive\n\tif (!isTextSession && !hasSameChatSession) {\n\t\treturn false;\n\t}\n\n\t// If has the same username with the previous message\n\tconst isConsecutiveFromUser = isEqual(prevMessage.username, currentMessage.username)\n\t\t&& !isEmpty(currentMessage.username);\n\n\t// The model has no value for the username property, but the message direction is in\n\tconst isConsecutiveFromModel = currentMessage.direction === MessageDirection.in\n\t\t&& prevMessage.direction === MessageDirection.in\n\t\t&& isEmpty(currentMessage.username)\n\t\t&& isEmpty(prevMessage.username);\n\n\t// The client is the only entity with message's direction to be out\n\tconst isConsecutiveFromClient = currentMessage.direction === MessageDirection.out\n\t\t&& prevMessage.direction === MessageDirection.out;\n\n\treturn isConsecutiveFromUser || isConsecutiveFromModel || isConsecutiveFromClient;\n};\n\nexport const checkIfMessageIsLastConsecutive = (messages: IMessage[], id: string) => {\n\tif (!checkIfMessageIsConsecutive(messages, id)) {\n\t\treturn false;\n\t}\n\n\tconst messageIndex = findIndex(messages, m => m.id === id);\n\tconst nextMessage = messages[messageIndex + 1];\n\n\tif (!nextMessage) {\n\t\treturn true;\n\t}\n\n\treturn !checkIfMessageIsConsecutive(messages, nextMessage.id);\n};\n\nexport const checkIfMessageIsSolo = (messages: IMessage[], id: string) => {\n\tif (checkIfMessageIsConsecutive(messages, id)) {\n\t\treturn false;\n\t}\n\n\tconst messageIndex = findIndex(messages, m => m.id === id);\n\tconst nextMessage = messages[messageIndex + 1];\n\n\tif (!nextMessage) {\n\t\treturn true;\n\t}\n\n\treturn !checkIfMessageIsConsecutive(messages, nextMessage.id);\n};\n\n/**\n * Return the array of timestamps for all the groups from the chat box\n */\nexport const getGroupTimestamps = (): { [key: string]: number } => {\n\tconst days = \"days\";\n\tconst weeks = \"weeks\";\n\tconst months = \"month\";\n\n\tconst groupTimestamps: { [key: string]: number } = {};\n\tgroupTimestamps[GroupTimestamp.SIXMONTHSAGO] = getTimestamp(-6, months);\n\tgroupTimestamps[GroupTimestamp.THREEMONTHSAGO] = getTimestamp(-3, months);\n\tgroupTimestamps[GroupTimestamp.TWOMONTHSAGO] = getTimestamp(-2, months);\n\tgroupTimestamps[GroupTimestamp.ONEMONTHAGO] = getTimestamp(-1, months);\n\tgroupTimestamps[GroupTimestamp.THREEWEEKSAGO] = getTimestamp(-3, weeks);\n\tgroupTimestamps[GroupTimestamp.TWOWEEKSAGO] = getTimestamp(-2, weeks);\n\tgroupTimestamps[GroupTimestamp.ONEWEEKAGO] = getTimestamp(-1, weeks);\n\tgroupTimestamps[GroupTimestamp.YESTERDAY] = getTimestamp(-1, days);\n\tgroupTimestamps[GroupTimestamp.TODAY] = getTodayTimestamp();\n\n\treturn groupTimestamps;\n};\n\nexport const getOrganizedMessages = (\n\tmessages: IMessage[],\n\tcurrentChatId?: string\n): { [index: string]: (IGroupMessage | IMessage)[] } => {\n\tconst messagesGroupedByDay = groupBy(messages, (message: IMessage | IGroupMessage) => moment(message.dateCreated).format('YYYY-MM-DD'));\n\n\tObject.keys(messagesGroupedByDay).forEach(key => {\n\t\t\tlet organizedMessages: (IGroupMessage | IMessage)[] = [];\n\t\t\tconst groupedMessages = groupBy(messagesGroupedByDay[key], (message: IMessage) => message.chatId);\n\n\t\t\tforEach(groupedMessages, (group: IMessage[]) => {\n\t\t\t\tconst referenceMessage = group[0];\n\n\t\t\t\tconst isSystemMessage = referenceMessage.msgType === MsgType.SYSTEM;\n\t\t\t\tconst isMessageOfCurrentChat = isEqual(referenceMessage.chatId, currentChatId);\n\n\t\t\t\tconst isChatGroup = !isMessageOfCurrentChat\n\t\t\t\t\t&& (group.length > 1 || (isSystemMessage && !isUndefined(referenceMessage.chatId)));\n\n\t\t\t\tif (isChatGroup) {\n\t\t\t\t\torganizedMessages.push({\n\t\t\t\t\t\tdateCreated: group[0].dateCreated,\n\t\t\t\t\t\tmessages: group\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\torganizedMessages = organizedMessages.concat(group);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\torganizedMessages = sortBy(organizedMessages, message => moment(message.dateCreated));\n\n\t\t\tmessagesGroupedByDay[key] = organizedMessages;\n\n\t\t}\n\t);\n\n\treturn messagesGroupedByDay;\n};\n\nexport const isGroupMessage = (message: (IMessage | IGroupMessage)) => has(message, 'messages');\n\nexport const getTimestampForMessage = (dateCreated: string) => moment(dateCreated).toDate().getTime();\n\n/**\n * Timestamp for today, returns the timestamp for it\n */\nexport const getTodayTimestamp = () => getTimestamp(new Date());\n\n/**\n * Returns timestamp in which the value is framing in. The default is the\n * largest timestamp possible - six months.\n */\nexport const getGroupTimestampForMessage = (value: number): number => {\n\tconst groupTimestamps = getGroupTimestamps();\n\n\tfor (const timestamp in GroupTimestamp) {\n\t\tif (value >= groupTimestamps[timestamp]) {\n\t\t\treturn groupTimestamps[timestamp];\n\t\t}\n\t}\n\n\treturn groupTimestamps[GroupTimestamp.SIXMONTHSAGO];\n};\n\n/**\n * Format a number to have two decimals; useful for money amounts\n * @param value\n */\nexport const withTwoDecimals = (value: number) => Number(value).toFixed(2);\n\n/**\n * Deep diff between two object, using lodash; useful for debugging purposes\n * @param  {Object} object Object compared\n * @param  {Object} base   Object to compare with\n * @return {Object}        Return a new object who represent the diff\n */\nexport const getDifference = (object, base) => transform(object, (result: any, value, key) => {\n\tif (!isEqual(value, base[key])) {\n\t\tresult[key] = isObject(value) && isObject(base[key])\n\t\t\t? getDifference(value, base[key])\n\t\t\t: value;\n\t}\n});\n\n/**\n * Reconcile the existing messages with the ones we got when calling websockets for history\n * @param existingMessages\n * @param historyCommands\n * @param recentMessagesMaxLimit\n * @return messages to be added, if any\n */\nexport const reconcileMessages = (\n\texistingMessages: IMessage[],\n\thistoryCommands: CMDC_CMSG[],\n\trecentMessagesMaxLimit: number,\n\tgifts: IGift[]\n): IMessage[] => {\n\n\t/** Apply pagination */\n\tlet commands = historyCommands.slice(existingMessages.length);\n\tcommands = reverse(commands);\n\tcommands = takeRight(commands, recentMessagesMaxLimit);\n\n\t/** If there are no more history messages, do not dispatch redux actions anymore */\n\tif (isEmpty(commands)) {\n\t\treturn [];\n\t}\n\n\treturn map(commands, (command: CMDC_CMSG) => {\n\t\tconst params = command.params;\n\t\tconst isAudio = !isEmpty(params.mediaType) && params.mediaType === \"Audio\";\n\t\tconst isImage = isEmpty(params.text);\n\t\tconst isImageUrl = !isUndefined(params.imgSrc) && !isUndefined(params.link);\n\t\tlet contentType: MessageContentType;\n\t\tlet content;\n\n\t\tif (isAudio) {\n\t\t\tcontentType = MessageContentType.AUDIO;\n\t\t\tcontent = {\n\t\t\t\taudioM4a: params.audioM4a,\n\t\t\t\taudioMp3: params.audioMp3,\n\t\t\t\taudioOgg: params.audioOgg\n\t\t\t};\n\t\t} else if (isImageUrl) {\n\t\t\tcontentType = MessageContentType.IMAGE_URL;\n\t\t\tcontent = {\n\t\t\t\ttext: getReceivedTextMessage(gifts, params.text, isMessageFromChat(params)),\n\t\t\t\timgSrc: params.imgSrc,\n\t\t\t\tlink: params.link\n\t\t\t}\n\t\t} else if (isImage) {\n\t\t\tcontentType = MessageContentType.IMAGE;\n\t\t\tcontent = params.imgSrc;\n\t\t} else {\n\t\t\tcontentType = MessageContentType.TEXT;\n\t\t\tcontent = getReceivedTextMessage(gifts, params.text, isMessageFromChat(params));\n\t\t}\n\n\t\t// Get the CDN address for the original(big) picture\n\t\tlet modalContent: IModalContent | undefined;\n\n\t\tif (params.imgSrcSet) {\n\t\t\tmodalContent = {\n\t\t\t\timgSrc: params.imgSrc || '',\n\t\t\t\timgSrcSet: params.imgSrcSet,\n\t\t\t\timgWidth: params.imgWidth,\n\t\t\t\timgHeight: params.imgHeight\n\t\t\t}\n\t\t}\n\n\t\tconst partialMessage: IMessage = {\n\t\t\tid: params.messageId || cuid.slug(),\n\t\t\tisSystem: params.msgType === \"sys\",\n\t\t\tmessageKey: params.messageKey || cuid.slug(),\n\t\t\tdateCreated: getDateCreatedForMessage(params.time as string),\n\t\t\tdirection: params.direction === EnumMessageDirection.IN\n\t\t\t\t? MessageDirection.in\n\t\t\t\t: MessageDirection.out,\n\t\t\tisDeleted: params.isDeleted === \"1\",\n\t\t\tisFromHistory: true,\n\t\t\tmodalContent,\n\t\t\tcontentType,\n\t\t\tcontent\n\t\t};\n\n\t\tif (params.chatID) {\n\t\t\tpartialMessage.chatId = params.chatID;\n\t\t}\n\n\t\tif (params.msgType) {\n\t\t\tpartialMessage.msgType = params.msgType as any as MsgType;\n\t\t}\n\n\t\treturn partialMessage;\n\t});\n};\n\nexport const hashify = (object: any): string => {\n\treturn JSON.stringify(object);\n};\n\nexport const isMobilePhone = (isMobile: boolean, isTablet: boolean) => isMobile && !isTablet;\n\n/** This function works only on Android devices */\nexport const isMobileOrientationLandscape = (isTablet: boolean = false) => {\n\tconst orientationAngle: number = Math.abs((window.screen as any).orientation.angle);\n\n\treturn orientationAngle === 90 || orientationAngle === 270;\n};\n\n/** It may apply for both gifts and toy options */\nexport const encodeForChatCommunication = (item: IGift | IToyOption) => `[${item.name}]`;\n\n/** It will apply only for gifts - there are no toy options without chat */\nconst encodeForMessengerCommunication = (gift: IGift) => `${gift.id}_${gift.name}`;\n\n/**\n * Replaces the gifts encodings (based on their channel of communication) with our\n * base64.encode(giftId) and return the new message to be stored in Redux.\n *\n * @param gifts - the array with all the active gifts that maybe were set\n * @param message the text sent\n * @param isFromChat a flag to apply the correct decoding of the message\n */\nexport const getReceivedTextMessage = (\n\tgifts: IGift[],\n\tmessage: string = \"\",\n\tisFromChat: boolean\n) => {\n\tlet text = message;\n\n\tforEach(gifts, (gift: IGift) => {\n\t\tif (isFromChat) {\n\t\t\tlet chatEncoding = encodeForChatCommunication(gift);\n\t\t\tchatEncoding = replace(chatEncoding, \"[\", \"\\\\[\");\n\t\t\tchatEncoding = replace(chatEncoding, \"]\", \"\\\\]\");\n\t\t\tchatEncoding = replace(chatEncoding, \"-\", CHAR_BEHIND_GIFTS);\n\t\t\ttext = replace(text, \"-\", CHAR_BEHIND_GIFTS);\n\n\t\t\ttext = replace(\n\t\t\t\ttext,\n\t\t\t\tnew RegExp(chatEncoding, \"gm\"),\n\t\t\t\tbase64.encode(gift.id.toString())\n\t\t\t);\n\n\t\t\ttext = replace(text, CHAR_BEHIND_GIFTS, \"-\");\n\t\t} else {\n\t\t\ttext = replace(text,\n\t\t\t\tnew RegExp(encodeForMessengerCommunication(gift), \"gm\"),\n\t\t\t\tbase64.encode(gift.id.toString())\n\t\t\t);\n\t\t}\n\t});\n\n\treturn text;\n};\n\n/**\n * Replaces the gifts with their encoding based on the channel of communication\n * and returns the new modified message to be sent to the model.\n * @param gifts\n * @param message\n * @param useChat\n */\nexport const getTextMessageToSend = (gifts: IGift[], message: string, useChat: boolean): string => {\n\tlet giftIdRegex: any;\n\tlet patternToReplaceWith: any;\n\tlet text = message;\n\n\tforEach(gifts, (gift: IGift) => {\n\t\tgiftIdRegex = new RegExp(getGiftEncoding(gift), \"g\");\n\n\t\tpatternToReplaceWith = useChat\n\t\t\t? encodeForChatCommunication(gift)\n\t\t\t: encodeForMessengerCommunication(gift);\n\n\t\ttext = text.replace(giftIdRegex, patternToReplaceWith);\n\t});\n\n\treturn text;\n};\n\n/** Returns the array of gift ids from a message text in their correct order */\nexport const getGiftsFromMessage = (gifts: IGift[], message: string): number[] => {\n\tlet result;\n\tlet giftIdRegex;\n\tconst giftIds: { position: number, id: number }[] = [];\n\n\tforEach(gifts, (gift: IGift) => {\n\t\tgiftIdRegex = new RegExp(getGiftEncoding(gift), \"g\");\n\t\tconst matches = message.match(giftIdRegex);\n\n\t\tif (!isEmpty(matches)) {\n\t\t\twhile (result = giftIdRegex.exec(message)) {\n\t\t\t\tgiftIds.push({\n\t\t\t\t\tid: gift.id,\n\t\t\t\t\tposition: result.index\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t});\n\n\treturn chain(giftIds)\n\t\t.sortBy(giftId => giftId.position)\n\t\t.map(giftId => giftId.id)\n\t\t.value() as number[];\n};\n\n/** A JOIN between giftCategories and gifts coming from the INIT request */\nexport const getGiftPages = (session: ISession, language: SupportedLanguage, bundleTabTitle: string): IGiftPage[] => {\n\tconst { gifts, giftCategories, giftBundles } = session;\n\n\tconst translatedGifts = map(gifts, (gift: IGift) => ({\n\t\t...gift,\n\t\tname: getTranslatedGiftName(gift, language)\n\t}));\n\n\t/**\n\t * Gift pages hover text should be translated\n\t */\n\tconst giftPages: IGiftPage[] = map(giftCategories, (category: IGiftCategory) => {\n\t\tconst translation = getItemTranslation(language, category.translations);\n\n\t\treturn ({\n\t\t\tid: category.id,\n\t\t\tname: translation.value,\n\t\t\ttranslations: category.translations,\n\t\t\tgifts: filter(translatedGifts,\n\t\t\t\t(gift: IGift) => gift.categoryId === category.id && gift.active\n\t\t\t)\n\t\t});\n\t});\n\n\tconst inventoryGifts: IGift[] = filter(translatedGifts,\n\t\t(gift: IGift) => !!gift.initialQuantity && gift.initialQuantity > 0\n\t);\n\n\tif (!isEmpty(inventoryGifts)) {\n\t\tgiftPages[0].gifts = inventoryGifts;\n\t}\n\n\tconst { giftBundlesId } = config.specialGiftPages;\n\n\t/** Add the gift bundles as the last gift page => the gifts name should be translated */\n\tconst giftBundlePage: IGiftPage = {\n\t\tid: giftBundlesId,\n\t\tname: bundleTabTitle,\n\t\ttranslations: [],\n\t\tgifts: map(giftBundles, (bundle: IBundle) => {\n\n\t\t\tconst translation = getItemTranslation(language, bundle.translations);\n\n\t\t\treturn ({\n\t\t\t\tid: bundle.id,\n\t\t\t\tactive: bundle.active,\n\t\t\t\tcategoryId: giftBundlesId,\n\t\t\t\tname: translation.value,\n\t\t\t\timageUrl: bundle.imageUrl,\n\t\t\t\ttranslations: bundle.translations,\n\t\t\t\tinitialPrice: getInitialBundlePrice(translatedGifts, bundle),\n\t\t\t\tprice: bundle.price\n\t\t\t});\n\t\t})\n\t};\n\n\tgiftPages.push(giftBundlePage);\n\n\t/** Return only the non-empty gift pages */\n\treturn filter(giftPages, (page: IGiftPage) => !isEmpty(page.gifts));\n};\n\nconst getInitialBundlePrice = (gifts: IGift[], bundle: IBundle): number => {\n\tlet initialPrice = 0;\n\n\tforEach(bundle.gifts, (giftFromBundle: IBundleGift) => {\n\t\tconst gift = find(gifts, (g: IGift) => g.id === giftFromBundle.gift.id);\n\n\t\tif (gift) {\n\t\t\tinitialPrice += giftFromBundle.quantity * gift.price;\n\t\t}\n\t});\n\n\treturn initialPrice;\n};\n\nexport const getOnlineStateFromResponseParams = (params: OnlineStateType): IOnlineState => ({\n\tsupportsChat: params.multi === EnumBooleanStringified.TRUE,\n\tsupportsPrivateChat: params.single === EnumBooleanStringified.TRUE,\n\tsupportsSoftChat: params.soft === EnumBooleanStringified.TRUE,\n\tsupportsPreviewChat: params.preview === EnumBooleanStringified.TRUE,\n\tsupportsVoyeurChat: params.voyeur === EnumBooleanStringified.TRUE,\n\tsupportsVoyeurToPrivateChat: params.voyeur2s === EnumBooleanStringified.TRUE,\n\tsupportsToyControl: params.toy === EnumBooleanStringified.TRUE\n});\n\n/**\n * When in Fullscreen mode the last 3 messages should descrease in opacity\n */\nexport const messageOpacity = (\n\tlength: number,\n\tposition: number,\n\tisFullscreen: boolean = false\n): number => {\n\tconst defaultOpacity = 1;\n\tconst mapPositionToOpacity = {};\n\tconst maxNumberOfMessages = config.limitations.maxNumberOfMessages.onFullscreen;\n\n\tif (!isFullscreen) {\n\t\treturn defaultOpacity;\n\t}\n\n\tmapPositionToOpacity[maxNumberOfMessages - 2] = 0.8;\n\tmapPositionToOpacity[maxNumberOfMessages - 1] = 0.5;\n\tmapPositionToOpacity[maxNumberOfMessages] = 0.3;\n\n\treturn isNaN(mapPositionToOpacity[length - position])\n\t\t? defaultOpacity\n\t\t: mapPositionToOpacity[length - position];\n};\n\nexport const getChatConfig = (chat: IChat, messengerProperties: IPlatformProps): ChatConfig => ({\n\thost: chat.server,\n\tclientId: chat.clientId,\n\tplayerVersion: Player.VERSION,\n\tversion: `M/${versionNumber}`,\n\tpauseSupport: true,\n\tignoreUnload: false,\n\tinitData: 'vxmessenger',\n\tmessengerProperties\n});\n\nexport const getResolutionFromChatResponse = (chatResponse: IChatResponse): IResolution => ({\n\twidth: chatResponse.width,\n\theight: chatResponse.height\n});\n\nexport const getChatFromChatResponse = (chatResponse: IChatResponse): IChat => ({\n\tchatId: chatResponse.chatId,\n\tclientId: chatResponse.clientId,\n\tserver: chatResponse.server\n});\n\nexport const getDateCreatedForMessage = (time: string) => moment(time, \"x\").toISOString();\n\nexport const getShouldDisplayIcon = (shouldDisplayIcon?: boolean) =>\n\tisUndefined(shouldDisplayIcon) || shouldDisplayIcon;\n\nexport const getPreselectedOneClickAmount =\n\t(amounts: number[], expectedAmount = config.mostCommonRechargeValue): number => {\n\t\tlet retVal = 0;\n\t\tif (!isEmpty(amounts)) {\n\t\t\tretVal = amounts.reduce((acc, item) => {\n\t\t\t\tconst origDiff = Math.abs(acc - expectedAmount);\n\t\t\t\tconst currDiff = Math.abs(item - expectedAmount);\n\n\t\t\t\tif (currDiff < origDiff) {\n\t\t\t\t\tacc = item;\n\t\t\t\t}\n\n\t\t\t\treturn acc;\n\t\t\t}, Math.max.apply(null, amounts));\n\t\t}\n\n\t\treturn retVal;\n\t};\n\n/**\n * Get the containing DOM node for the entire VXMessenger;\n * Caveat: it assumes that only one messenger is open at a certain moment\n * FUTURE TODO: try to get the node in a more Reactful way;\n * currently having troubles with styled-components and React Ref\n */\nexport const getMessengerNode = (instanceId: string): Element | undefined =>\n\tdocument.querySelector(\n\t\t`.${config.messengerClassName}[${config.messengerInstanceIdAttribute}=\"${instanceId}\"]`\n\t) || undefined;\n\nexport const getWindowDimensions = (): IResolution => {\n\t// kind of an workaround for this bug: https://bugs.webkit.org/show_bug.cgi?id=170595\n\tconst windowSizeIsBogus = isIOS && !isSafari;\n\tconst documentElement = document.documentElement;\n\tconst body = document.getElementsByTagName('body')[0];\n\n\tconst width = (windowSizeIsBogus ? 0 : window.innerWidth)\n\t\t|| (documentElement && documentElement.clientWidth) || body.clientWidth;\n\tconst height = (windowSizeIsBogus ? 0 : window.innerHeight)\n\t\t|| (documentElement && documentElement.clientHeight) || body.clientHeight;\n\n\treturn { width, height }\n};\n\nexport const isMessageFromChat = (message: MessageParams) => !isEmpty(message.chatID);\n\nexport const isOutOfMoneyInformationDialog = (informationType: VideochatInformationType) => {\n\tconst { OUT_OF_MONEY, OUT_OF_MONEY_ONE_CLICK_RECHARGE } = VideochatInformationType;\n\n\treturn includes(\n\t\t[OUT_OF_MONEY, OUT_OF_MONEY_ONE_CLICK_RECHARGE],\n\t\tinformationType\n\t);\n};\n\nexport const isLoadAccountUserPrompt = (userPromptType: QuestionType) => {\n\tconst { LOAD_ACCOUNT, LOAD_ACCOUNT_AUTO_RECHARGE, LOAD_ACCOUNT_ONE_CLICK } = QuestionType;\n\n\treturn includes(\n\t\t[LOAD_ACCOUNT, LOAD_ACCOUNT_AUTO_RECHARGE, LOAD_ACCOUNT_ONE_CLICK],\n\t\tuserPromptType\n\t);\n};\n\n/**\n * Get the desired value based on the current language.\n */\nexport const getValueByLanguage = (\n\tlanguage: string | SupportedLanguage,\n\tvalues = SupportedLanguage\n) => {\n\tconst formattedLanguage = toUpper(language) || SupportedLanguage.EN;\n\treturn values[formattedLanguage] || values.EN;\n};\n\n/**\n * Get the translation based on the current language.\n */\nexport const getTranslation = (\n\tlanguage: SupportedLanguage,\n\tstoredTranslations: Translations\n) => storedTranslations[language] || storedTranslations.en;\n\n/**\n * Get the name translated for different back-end item's based on the current language\n * (examples: gift's name, gift bundle's name or toy control option's name)\n */\nexport const getItemTranslation = (\n\tlanguage: SupportedLanguage,\n\ttranslations: IGiftTranslation[]\n): IGiftTranslation => {\n\tconst defaultTranslation = find(translations,\n\t\tgiftTranslation => giftTranslation.language === SupportedLanguage.EN\n\t) as IGiftTranslation;\n\n\treturn find(translations,\n\t\tgiftTranslation => giftTranslation.language === language\n\t) || defaultTranslation;\n};\n\n/**\n * Checks if the chat was reseted before/20 minutes ago;\n */\nexport const shouldResetChat = (timestamp: Date) => {\n\tif (!timestamp) {\n\t\treturn true;\n\t}\n\n\tconst timestampDifference = (new Date()).getTime() - timestamp.getTime();\n\n\treturn (timestampDifference / 60000) >= constants.resetChatInterval;\n};\n\n\n/**\n * Counts the clicks number, if intervalBetweenClicks is reached clickCouter is reseted.\n */\nexport const clickCounter = (intervalBetweenClicks: number) => {\n\tlet lastClickTimestamp: Date;\n\tlet clickCount: number = 1;\n\n\tconst onClick = () => {\n\t\tconst currentTimestamp: Date = new Date();\n\n\t\tif (lastClickTimestamp instanceof Date) {\n\t\t\tconst timeElapsed = currentTimestamp.getTime() - lastClickTimestamp.getTime();\n\t\t\tclickCount = timeElapsed > intervalBetweenClicks ? 1 : clickCount + 1;\n\t\t}\n\n\t\tlastClickTimestamp = currentTimestamp;\n\t};\n\n\tconst getClickCount = () => clickCount;\n\n\treturn { onClick, getClickCount };\n};\n\n/**\n * Used to calculate the delay of transition group for user prompts\n * we need 2xtimeInSeconds. Because it needs to wait timeInSeconds before the transition\n * and timeInSeconds to execute de transition\n */\nexport const getTransitionTimeInMilliseconds = (timeInSeconds: number) => timeInSeconds * 2 * 1000;\n\n/**\n * It verifies if the hook given as param has been configured by the parent platform\n */\nexport const hasHookConfigured = (hook: any) => !isUndefined(hook);\n\n/**\n * After replacing all gifts with just one character and emoticons with the length\n * of their shortcut, we will check if the message exceeds the text max limit set in config.\n * @param text\n */\nexport const hasExceededTextLimit = (text: string): boolean => text.length > config.maxTextCharLimit;\n\n/**\n * If the message is NOT of type TOY, we will return it unaltered.\n * If the message is of type TOY, we will update some properties.\n */\nexport const convertToToyMessage = (\n\tmessage: IMessage,\n\ttoyOption: IToyOption,\n\ttranslation: IToyControlTranslation\n): IMessage => {\n\n\tconst { lovenseFinished, lovenseVibrating } = translation;\n\tconst text = toyOption.isPlaying ? lovenseVibrating : lovenseFinished;\n\n\treturn ({\n\t\t...message,\n\t\tcontent: null,\n\t\tmsgType: MsgType.TOY,\n\t\tdirection: MessageDirection.none,\n\t\tisSystem: false,\n\t\ttoy: {\n\t\t\ttext,\n\t\t\tactiveImage: toyOption.imageUrl,\n\t\t\tinactiveImage: toyOption.imageUrlDeactivated,\n\t\t\tisActive: toyOption.isPlaying,\n\t\t\tisDefault: false\n\t\t}\n\t});\n};\n\nexport const getCameraCloseButton = () => {\n\tconst cameraCloseButton = document.createElement('i');\n\tcameraCloseButton.className = '-icon-close-full';\n\tcameraCloseButton.setAttribute('style',\n\t\t\"font-size: 14px; cursor: pointer; color: #888\");\n\n\treturn cameraCloseButton;\n};\n\nexport const getFormattedDuration = (duration: number): string => {\n\tconst seconds = `0${Math.round(duration % 60)}`.slice(-2);\n\tconst minutes = `${Math.floor(duration / 60)}`;\n\n\treturn `${minutes}:${seconds}`\n};\n\nexport const queryString = params => Object.keys(params).map(key => `${key}=${params[key]}`).join('&');\n\n/**\n * Being given an error code, it returns the type of the Pre-Chat Information Dialog to be displayed,\n * or undefined if none should be displayed\n * @param code\n */\nexport const getPrechatByErrorCode: (code: ExitCode | VXControlCodes | MessengerSpecificErrorCodes)\n\t=> PreChatInformationType | undefined\n\t= (code: ExitCode | VXControlCodes) => {\n\n\tconst codesWithoutPrechat: (ExitCode | VXControlCodes | MessengerSpecificErrorCodes)[] = [\n\t\tVXControlCodes.NO_CREDIT_VIDEOCHAT\n\t];\n\n\tif (includes(codesWithoutPrechat, code)) {\n\t\treturn;\n\t}\n\n\tconst codesMapping: { [key: number]: PreChatInformationType } = {};\n\tcodesMapping[MessengerSpecificErrorCodes.GUEST_OFFLINE] = PreChatInformationType.GUEST_OFFLINE;\n\n\tcodesMapping[ExitCode.PREVIEW_OFFLINE] = PreChatInformationType.HOST_OFFLINE;\n\tcodesMapping[VXControlCodes.MODEL_IS_OFFLINE] = PreChatInformationType.HOST_OFFLINE;\n\n\tcodesMapping[ExitCode.HOSTSINGLE] = PreChatInformationType.PRIVATE_CHAT;\n\tcodesMapping[ExitCode.PREVIEW_SINGLE] = PreChatInformationType.PRIVATE_CHAT;\n\tcodesMapping[VXControlCodes.MODEL_IS_IN_PRIVATE_CHAT] = PreChatInformationType.PRIVATE_CHAT;\n\n\tcodesMapping[ExitCode.PREVIEW_ACCESS_DENIE] = PreChatInformationType.CHARGE_ACCOUNT_OR_VIP;\n\n\tcodesMapping[VXControlCodes.PREVIEW_LIMIT_EXCEEDED] = PreChatInformationType.LIMIT_REACHED;\n\tcodesMapping[ExitCode.PREVIEW_LIMIT_HOUR] = PreChatInformationType.LIMIT_REACHED;\n\tcodesMapping[ExitCode.PREVIEW_LIMIT_HOST] = PreChatInformationType.LIMIT_REACHED;\n\n\tcodesMapping[ExitCode.FSKDENIED] = PreChatInformationType.VERIFY_AGE;\n\tcodesMapping[ExitCode.PREVIEW_FSK_DENIED] = PreChatInformationType.VERIFY_AGE;\n\tcodesMapping[VXControlCodes.SOFT_CHAT] = PreChatInformationType.VERIFY_AGE;\n\n\tcodesMapping[ExitCode.PREVIEW_DISABLED] = PreChatInformationType.NOT_AVAILABLE;\n\n\tcodesMapping[ExitCode.ERROR] = PreChatInformationType.CONNECTION_ERROR;\n\n\treturn codesMapping[code] || PreChatInformationType.CONNECTION_ERROR;\n};\n\n/**\n * Renders the color with which the username should be renderd during\n * a group chat mode. It will return the color with fewest active usernames.\n * @param colors all the group chat colors available for usage\n */\nexport const getColorForUsername = (colors: IGroupChatColor[], username?: string): string => {\n\tconst alreadyDefinedColor = find(colors, groupColor =>\n\t\t!isEmpty(find(groupColor.users, coloredUsername => isEqual(coloredUsername, username))\n\t\t));\n\n\treturn alreadyDefinedColor?.color ||\n\t\tchain(colors)\n\t\t\t.sortBy(groupColor => size(groupColor.users))\n\t\t\t.map(groupColor => groupColor.color)\n\t\t\t.first()\n\t\t\t.valueOf() as string;\n};\n\n\nexport const shouldOpenMentionSection = (participants: string[], query: string, isMentionSectionOpen: boolean) => {\n\tif (participants.includes(query) && !isMentionSectionOpen) {\n\t\treturn false;\n\t}\n\n\treturn !isEmpty(find(participants, participant => participant.startsWith(query)));\n};\n\nexport const hasActiveMentions = (participants: string[], query: string) =>\n\t!isEmpty(find(participants, participant => participant.startsWith(query)));\n\nexport const computeMessageFontSize = (shouldIncreaseMessageFontSize, fontSize) =>\n\tshouldIncreaseMessageFontSize ? `calc(${fontSize}px + ${constants.messageFontSizePercentage}%)` : `${fontSize}px`;\n\nexport const defaultPreferenceStore: IPreferenceStore = {\n\tgetPreference: (preferenceName: PreferenceName, instanceId?: string) => {\n\t\tconst preferencesKey = `${instanceId || constants.defaultInstanceId}_preferences`;\n\t\tlet preferences = localStorage.getItem(preferencesKey);\n\n\t\tif (preferences) {\n\t\t\tpreferences = JSON.parse(preferences);\n\t\t\tif (preferences) {\n\t\t\t\tconst preferenceValue = preferences[preferenceName];\n\n\t\t\t\tif (preferenceValue) {\n\t\t\t\t\tif (preferenceName === PreferenceName.VolumeLevel) {\n\t\t\t\t\t\treturn parseFloat(preferenceValue);\n\t\t\t\t\t} else if (preferenceName === PreferenceName.ShouldIncreaseMessageFontSize) {\n\t\t\t\t\t\treturn preferenceValue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t},\n\tsetPreference: (preferenceName: PreferenceName, value: boolean | number, instanceId?: string) => {\n\t\tconst preferencesKey = `${instanceId || constants.defaultInstanceId}_preferences`;\n\t\tlet preferences = localStorage.getItem(preferencesKey);\n\n\t\tif (preferences) {\n\t\t\tpreferences = JSON.parse(preferences);\n\n\t\t\tif (preferences) {\n\t\t\t\tpreferences[preferenceName] = value;\n\t\t\t}\n\n\t\t\tlocalStorage.setItem(preferencesKey, JSON.stringify(preferences));\n\t\t} else {\n\t\t\tlocalStorage.setItem(preferencesKey, JSON.stringify({\n\t\t\t\t[preferenceName]: value\n\t\t\t}));\n\t\t}\n\t}\n}\n","import screenfull from \"screenfull\";\n\n/** Check if the window is in fullscreen mode */\nexport const isFullscreen = () => screenfull.isEnabled && screenfull.isFullscreen;\n\n/** Toggle the fullscreen status for a certain HTML element */\nexport const toggle = (element: Element | undefined) => {\n\tif (screenfull.isEnabled) {\n\t\tscreenfull.toggle(element);\n\t}\n};\n\n/** Exit window's fullscreen state */\nexport const exit = () => {\n\tif (screenfull.isEnabled && screenfull.isFullscreen) {\n\t\tscreenfull.exit();\n\t}\n};\n\n/** You can configurate a hook that will be called when the fullscreen state changes */\nexport const onChange = (func: (args: any) => void) => {\n    if (screenfull && screenfull.isEnabled && screenfull.onchange) {\n        screenfull.onchange((args: any) => {\n        \tfunc(args);\n        });\n    }\n};\n","import * as utils from './utils';\nimport * as screenfull from './screenfull';\n\nexport { screenfull };\nexport default utils;\n","import { chain, filter, find, get, isEmpty, some } from 'lodash';\nimport { createSelector } from \"reselect\";\n\nimport utils from '../../utils';\nimport config from \"../../static/config\";\nimport IStore, { IMessage, IMessenger, IQuestion, LoadingStatus, QuestionType } from \"../store\";\nimport { getInitialInstanceData } from \"../initialStore\";\n\nexport const getMessenger = (store: IStore, instanceId: string | undefined) => {\n\tconst id = instanceId as string;\n\tconst data = get(store, id) || getInitialInstanceData();\n\treturn data.messenger;\n};\n\n/**\n * @return {WindowSectionState} - a slice of the store keeping status for:\n * - emoticons section - if it is open or not\n * - gift section - if it is open or not\n * - user prompts - those sliding areas asking for refill, verifying age, sending tip, etc\n * - countdown warnings - countdown watch warnings, like: running out of money, running out of time\n */\nexport const getWindowToggleState = createSelector(getMessenger, selection => selection.windowToggleState);\n\n/**\n * @return {Question[]} - a slice of the store keeping status of the user prompts\n * (those sliding areas asking for balance refill, verifying age, sending tip, etc)\n */\nexport const getUserPrompts = createSelector(getWindowToggleState, selection => selection.userPrompts);\n\nexport const hasLoadAccountUserPrompts = createSelector(getUserPrompts,\n\t(userPrompts: IQuestion[]) => some(userPrompts, (prompt) => utils.isLoadAccountUserPrompt(prompt.type))\n);\n\nexport const hasSendTipPromptOpen = createSelector(getUserPrompts,\n\t(userPrompts: IQuestion[]) => some(userPrompts, (userPrompt) => userPrompt.type === QuestionType.SEND_ANONYMOUS_TIP)\n);\n\n/**\n * @return {ActionResponse | undefined} action response\n * (sliding element informing about success or failure of a certain API request\n */\nexport const getActionResponse = createSelector(getMessenger, selection => selection.actionResponse);\n\n/**\n * @return {IMessage[]} - messages to be displayed in the messenging area\n */\nexport const getMessages = createSelector(getMessenger, messenger => filter(\n\tmessenger.messages,\n\t(message: IMessage) => !message.isDeleted\n));\n\n/**\n * @return {IMessage} - message to meet the condition(s) of provided predicate\n */\nexport const findMessage = (predicate: (message: IMessage) => boolean) =>\n\tcreateSelector(getMessages, selection => find(selection, predicate));\n\n/**\n * @return {string[]} - messages not sent because token has expired\n */\nexport const getFailedMessages = createSelector(getMessenger, selection => selection.failedMessages);\n\n/**\n * @return {}boolean} true if failed messages should be sent again\n */\nexport const shouldResendFailedMessages = createSelector(getMessenger, selection => selection.shouldResendFailedMessages);\n\n/**\n * @return {IEmoticon[]} - list of available emoticons obtained either from the back end APIs or the default list\n */\nexport const getEmoticons = createSelector(getMessenger, selection =>\n\tisEmpty(selection.emoticons)\n\t\t? config.defaultEmoticons\n\t\t: selection.emoticons\n);\n\nexport const getModalContent = createSelector(getMessenger, selection => selection.modalContent);\n\n/**\n * @return {LoadingStatus} the messenger loading status with details about how the loading process ended\n * (with success or failure)\n */\nexport const getMessengerLoadingStatus = createSelector(getMessenger, selection => selection.loadingStatus);\n\n/**\n * @return {boolean} true if the messenger is still loading\n */\nexport const isMessengerLoading = createSelector(getMessengerLoadingStatus, selection =>\n\tselection === LoadingStatus.LOADING);\n\n/**\n * @return {boolean} true if the messenger is open\n */\nexport const isOpen = createSelector(getMessenger, selection => selection.isOpen);\n\n/**\n * @return {IContactNote} - text note about the current model and if the contact note editor is open or not\n */\nexport const getContactNote = createSelector(getMessenger, selection => selection.contactNote);\n\n/**\n * @return {boolean} true if the contact note section is open\n */\nexport const isContactNoteOpen = createSelector(getContactNote, contactNote => contactNote.isOpen);\n\n/**\n * @return {boolean} true if the model has attached a note about her\n */\nexport const hasContactNoteText = createSelector(getContactNote,\n\tselection => !isEmpty(selection.text)\n);\n\n/**\n * @return {boolean} - true if the user can write text messages to a model\n */\nexport const isTextEnabled = createSelector(getMessenger, messenger => messenger.isTextEnabled);\n\n/**\n * @return {boolean} - true if currently there is an user prompt displayed on the screen\n */\nexport const isAnyUserPromptOpen = createSelector(getUserPrompts,\n\t(userPrompts: IQuestion[]) => !isEmpty(userPrompts)\n);\n\n/**\n * @return {boolean} - true if currently there is a displayed user prompt asking for close chat confirmation\n */\nexport const isCloseChatUserPromptOpen = createSelector(getUserPrompts,\n\t(userPrompts: IQuestion[]) =>\n\t\tuserPrompts.some((prompt: IQuestion) => prompt.type === QuestionType.CLOSE_CHAT)\n);\n\n/**\n * @return {boolean} true if drop down menu is open\n */\nexport const isDropDownMenuOpen = createSelector(getWindowToggleState,\n\tselection => selection.isDropDownOpen\n);\n\n/**\n * @return {boolean} true if the toy section is open\n */\nexport const isToySectionOpen = createSelector(getWindowToggleState,\n\twindowToggleState => windowToggleState.isToySectionOpen\n);\n\n/**\n * @return {boolean} true if the box displaying the messenger's version is open\n */\nexport const isVersionOpen = createSelector(getWindowToggleState, selection => selection.isVersionOpen);\n\n/**\n * @return {boolean} - true if draft.js editor is working on the current browser or os\n */\nexport const hasEditor = createSelector(getMessenger, messenger => messenger.hasEditor);\n\n/**\n * @returns {string/undefined} - returns active gift or undefined if there is none selected\n */\nexport const getActiveGift = createSelector(getMessenger, messenger => messenger.activeSymbols.gift);\n\n/**\n * @returns {string/undefined} - returns active emoticon or undefined if there is none selected\n */\nexport const getActiveEmoticon = createSelector(getMessenger, messenger => messenger.activeSymbols.emoticon);\n\n/**\n * @returns {string/undefined} - returns active mention or undefined if there is none selected\n */\nexport const getActiveMention = createSelector(getMessenger, messenger => messenger.activeSymbols.mention);\n\n/**\n * @return {StoredEditorState} current store of the editor (containing text, emoticons, gifts)\n */\nexport const getEditorState = createSelector(getMessenger, messenger => messenger.editorState);\n\n/**\n * @return {boolean} - true if there any user prompts open\n */\nexport const areAnyUserPromptsOpen = createSelector(getWindowToggleState, selection =>\n\t!isEmpty(selection.userPrompts)\n);\n\n/**\n * @return {boolean} - true if the messenger is in responsive mode\n */\nexport const isResponsive = createSelector(getMessenger, messenger => messenger.isResponsive);\n\n/**\n * return {boolean} true if the image upload dialog was requested to appear\n */\nexport const wasRequestedAnImageUpload = createSelector(\n\tgetWindowToggleState,\n\tselection => !!selection.requestImageUpload\n);\n\n/**\n * return {boolean} true if the anonymous tip is open\n */\nexport const isTipPromptOpen = createSelector(\n\tgetUserPrompts,\n\t(userPrompts: IQuestion[]) => some(userPrompts, (userPrompt) =>\n\t\tuserPrompt.type === QuestionType.SEND_ANONYMOUS_TIP ||\n\t\tuserPrompt.type === QuestionType.SEND_TIP)\n);\n\n/**\n * @return {IToyOptions[]} if the model has activated the toy control feature and the client\n * is in an active LIVECHAT, the client will have acces to the toy section, where\n * he has multiple vibration options from which to choose. It returns these choices.\n */\nexport const getToyOptions = createSelector(getMessenger,\n\t(messenger: IMessenger) => messenger.toyOptions\n);\n\n/**\n * @return {IToyOption} the active toy option if there is one\n */\nexport const getActiveToyOption = createSelector(getMessenger,\n\t(messenger: IMessenger) => find(messenger.toyOptions, option => option.isPlaying)\n);\n\n/**\n * @return {boolean} true if any section is open\n */\nexport const isAnySectionOpen = createSelector(getWindowToggleState, windowState =>\n\twindowState.isEmoticonSectionOpen ||\n\twindowState.isGiftSectionOpen ||\n\twindowState.isToySectionOpen\n);\n\n/**\n * @return {boolean} true id we have any user prompt open when\n * the messenger is rendered in a responsive context\n */\nexport const areAnyPromptsOpenInResponsiveMode = createSelector(\n\t[getMessenger, areAnyUserPromptsOpen],\n\t(messenger: IMessenger, areUserPromptsOpen: boolean) => messenger.isResponsive && areUserPromptsOpen\n);\n\n\nexport const getLastMessage = createSelector(getMessages, (messages: IMessage[]) =>\n\tchain(messages)\n\t\t.orderBy((message) => message.dateCreated, \"desc\")\n\t\t.first()\n\t\t.value()\n);\n\nexport const isAnyTextInEditor = createSelector(\n\tgetMessenger,\n\t(messenger: IMessenger) => !isEmpty(messenger.editorState.text)\n);\n\nexport const getShouldSendMessage = createSelector(\n\tgetMessenger,\n\t(messenger: IMessenger) => messenger.audioMessage.shouldSendMessage\n);\n\nexport const getSecondsElapsed = createSelector(\n\tgetMessenger,\n\t(messenger: IMessenger) => messenger.audioMessage.secondsElapsed\n);\n\nexport const isRecording = createSelector(getMessenger,\n\t(messenger: IMessenger) => messenger.audioMessage.isRecording\n);\n\n/**\n * @return {boolean} true if the microphone is enabled by user.\n */\n\nexport const isMicEnabled = createSelector(getMessenger,\n\t(messenger: IMessenger) => messenger.audioMessage.isMicEnabled\n);\n\n/**\n * Returns a list of colors, which will be used only in group chat mode\n * for rendering the username for other clients' messages.\n */\nexport const getGroupChatColors = createSelector(getMessenger,\n\tmessenger => messenger.groupChatColors\n);\n\nexport const getMentionQuery = createSelector(getMessenger,\n\t(messenger: IMessenger) => messenger.mentionQuery\n);\n\n/**\n * return focused option in mentions section\n */\nexport const getFocusedMentionOption = createSelector(getMessenger,\n\t(messenger: IMessenger) => messenger.focusedMentionOption\n);\n\nexport const shouldDisplayCustomMentionSection = createSelector(getMessenger,\n\t(messenger: IMessenger) => messenger.shouldDisplayCustomMentionSection\n);\n","import { isEmpty, get } from \"lodash\";\nimport { createSelector } from \"reselect\";\n\nimport IStore, { IModel } from \"../store\";\nimport { getInitialInstanceData } from \"../initialStore\";\n\nexport const getModel = (store: IStore, instanceId: string | undefined) => {\n    const id = instanceId as string;\n    const data = get(store, id) || getInitialInstanceData();\n    return data.model;\n};\n\n/**\n * @return {string} a string containing the motto of the model\n */\nexport const getModelMotto = createSelector(getModel, selection => selection.motto);\n\n/**\n * @return {string} - model's name\n */\nexport const getModelName = createSelector(getModel, selection => selection.name);\n\n/**\n * @return {string} - link to model's picture\n */\nexport const getModelProfilePicture = createSelector(getModel, selection => selection.profilePicture);\n\n/**\n * @return {boolean} - true if current model was marked as favorite\n */\nexport const isModelFavorite = createSelector(getModel, selection => selection.isFavorite);\n\n/**\n * @return {Partner} a structure identifying the chat partner (aka. model)\n */\nexport const getPartner = createSelector(getModel, selection => selection.partner);\n\n/**\n * @return {IOnlineState} a structure with all online state flags;\n * useful especially when wants to see if it was set yet or not\n */\nexport const getOnlineState = createSelector(getModel, model => model.onlineState);\n\n/**\n * @return {boolean} - true if the model is online\n */\nexport const isModelOnline = createSelector(getModel, selection => selection.isOnline);\n\n/**\n * @return {boolean} - true if the model is allowing a regular video chat session\n */\nexport const isModelSupportingChat = createSelector(getModel,\n    selection => (selection.onlineState && selection.onlineState.supportsChat) as boolean\n);\n\n/**\n * @return {boolean} true if the model is currently in a private chat session\n */\nexport const isModelInPrivateChat = createSelector(getModel,\n    model => (\n        model.isOnline &&\n        model.onlineState &&\n        !model.onlineState.supportsChat) as boolean\n);\n\n/**\n * @return {boolean} true if the model is allowing a private video chat session\n */\nexport const isModelSupportingPrivateChat = createSelector(getModel,\n    selection => (selection.onlineState && selection.onlineState.supportsPrivateChat) as boolean\n);\n\n/**\n * @return {boolean} true if the model is allowing a soft chat session\n * (model is currently doing a soft show, appropriate for people under 18\n */\nexport const isModelSupportingSoftChat = createSelector(getModel,\n    selection => (selection.onlineState && selection.onlineState.supportsSoftChat) as boolean\n);\n\n/**\n * @return {boolean} true if the model is allowing a short preview video session\n */\nexport const isModelSupportingPreviewChat = createSelector(getModel,\n    selection => (selection.onlineState && selection.onlineState.supportsPreviewChat) as boolean\n);\n\n/**\n * @return {boolean} true if the model is allowing a voyeur video chat session\n * (user can watch, but cannot interact with the model)\n */\nexport const isModelSupportingVoyeurChat = createSelector(getModel,\n    selection => (selection.onlineState && selection.onlineState.supportsVoyeurChat) as boolean\n);\n\n/**\n * @return {boolean} true if the model has toy control support activated\n */\nexport const isModelSupportingToyControl = createSelector(getModel,\n    model => (model.onlineState && model.onlineState.supportsToyControl) as boolean\n);\n\n/**\n * @return {boolean} true if the model is allowing a voyeur video chat session\n * even if she is in a private chat with someone else\n */\nexport const isModelSupportingVoyeurToPrivateChat = createSelector(getModel,\n    selection => (selection.onlineState && selection.onlineState.supportsVoyeurToPrivateChat) as boolean\n);\n\n/**\n * @return {boolean} true if the model can receive tips\n */\nexport const isModelSupportingTip = createSelector(getModel,\n    model => (model.onlineState && model.onlineState.supportsTip) as boolean\n);\n\n/**\n * @return {number} - price and currency per minute of regular video chat\n */\nexport const getLiveChatPrice = createSelector(getModel, model => model.prices.videoChatPrice);\n\n/**\n * @return {number} - price and currency per minute of voyeur video chat\n */\nexport const getVoyeurCamPrice = createSelector(getModel, model => model.prices.voyeurChatPrice);\n\n/**\n * @return {boolean} - if we receive any price from the back-end\n */\nexport const hasPrices = createSelector([getModel],\n    (model: IModel) => !isEmpty(model.prices)\n);\n\n/**\n * @return {number} - price and currency per message sent (when not in a video session)\n */\nexport const getMessagePrice = createSelector(getModel, model => model.prices.messagePrice);\n\n/**\n * @return {number} representing the free messages between the client and this specific model\n */\nexport const hasFreeModelMessages = createSelector(getModel, model => model.freeMessages);\n\n/**\n * @return {boolean} true if the client has free stream time for this specific model\n */\nexport const hasFreeModelChatDuration = createSelector(getModel, model => model.freeChatDuration > 0);\n\n/**\n * @return {number} returns the number of free seconds between the client and this specific model\n */\nexport const getFreeModelChatDuration = createSelector(getModel, model => model.freeChatDuration);","import { get } from \"lodash\";\nimport { createSelector } from \"reselect\";\n\nimport IStore from \"../store\";\nimport { getInitialInstanceData } from \"../initialStore\";\n\nexport const getSession = (store: IStore, instanceId: string | undefined) => {\n\tconst id = instanceId as string;\n\tconst data = get(store, id) || getInitialInstanceData();\n\treturn data.session;\n};\n\n/**\n * @return {string} id of the video chat session\n */\nexport const getSessionId = createSelector(getSession, session => session.sessionID);\n\n/**\n * @return {Currency} the active currency received from the init response. For VXPages we have Credits, for others, euro or dollar\n */\nexport const getCurrency = createSelector(getSession, session => session.currency);\n\n/**\n * @return {IChat | undefined} - structure containing identifiers used to create a vchat-core instance\n */\nexport const getChat = createSelector(getSession, session => session.chat);\n\n/**\n * @return {IChat | undefined} - structure containing identifiers from the parent platform\n * in order to create a vchat-core instance\n */\nexport const getExternallyProvidedChat = createSelector(getSession, session => ({\n\tclientId: session.chat?.clientId,\n\tserver: session.chat?.server,\n\texternallyProvided: true\n}));\n\n/**\n * @return {string | undefined} - returns chatId of the chat session\n */\nexport const getChatId = createSelector(getChat, chat => chat?.chatId);\n\n/**\n * @return {boolean} - true if chat (conf) was provided by the external platform\n */\nexport const isChatExternallyProvided = createSelector(getSession, session =>\n\t(session.chat && session.chat.externallyProvided) as boolean);\n\n/**\n * @return {ChatFeatures} - flags about different messenger features that could be activated or not\n */\nexport const getChatFeatures = createSelector(getSession, session => session.chatFeatures);\n\n/**\n * @return {boolean} - true if the user has not been yet charged and he is not a VIP\n */\nexport const isNotChargedNorVip = createSelector(getChatFeatures,\n\tchatFeatures => chatFeatures.livePreviewDurationVideo <= 0\n);\n\n/**\n * @return {boolean} if the client has free messages for this model\n */\nexport const hasFreePlatformChatDuration = createSelector(getChatFeatures,\n\tchatFeatures => chatFeatures.freeChatDuration > 0\n)\n\n/**\n * @deprecated - use getTranslatedGifts instead\n * @return {IGift[]} - list of gifts\n */\nexport const getGifts = createSelector(getSession, session => session.gifts);\n\nexport const getActiveGifts = createSelector(getGifts, gifts => gifts.filter(gift => gift.active));\n\n/**\n * @return {GiftCategory[]} - list of gift categories\n */\nexport const getGiftCategories = createSelector(getSession, session => session.giftCategories);\n\n/**\n * @return {number} - the last amount recharged by the user into his balance\n */\nexport const getLastRechargedAmount = createSelector(getSession, session =>\n\tsession.lastChargedAmount || { value: 0, currency: 'EUR' });\n\n/**\n * @return {OneClickRecharge} - details about one click recharge feature\n * (possibility to add some predefined amounts to his balance with a single click)\n * being available for the logged in user\n */\nexport const getOneClickRecharge = createSelector(getSession, session => session.oneClickRecharge);\n\n/**\n * @return {boolean} - true if one click recharge is avialable for the current logged in user\n */\nexport const isOneClickRechargeAvailable = createSelector(getOneClickRecharge, oneClickRecharge => oneClickRecharge.available);\n\n/**\n * @return {number[]} - list of predefined amounts for one click recharge feature\n * (empty if that feature is not available)\n */\nexport const getOneClickRechargeAmounts = createSelector(getOneClickRecharge,\n\toneClickRecharge => oneClickRecharge.available && oneClickRecharge.amounts || []);\n\n/**\n * @return {number | undefined} - default chosen amount for one click recharge feature;\n * undefined if one click recharge is not available\n */\nexport const getOneClickRechargeDefaultAmount = createSelector(getOneClickRecharge,\n\toneClickRecharge => oneClickRecharge.available && oneClickRecharge.defaultAmount || undefined);\n\n/**\n * @return {string} - JWT web token used to authenticate a user\n */\nexport const getWebtoken = createSelector(getSession, session => session.webtoken);\n\n/**\n * @return {string} - string containing the channel identifier, in the form of\n * <user_platform_id>.<user_id>-<model_platforn_id>.<model_id>\n */\nexport const getChannelId = createSelector(getSession, session => session.channelId);\n\nexport const getUploadMediaUrl = createSelector(getSession, selection => selection.uploadMediaUrl);\n\n/**\n * @return {boolean} - true if the user can send message without being charged for that\n */\nexport const hasFreePlatformMessages = createSelector(getSession, session => session.freeMessages > 0);\n","import { get } from \"lodash\";\nimport {createSelector} from \"reselect\";\n\nimport utils from \"../../utils\";\nimport IStore, { IUser, ITranslation } from \"../store\";\nimport { getInitialInstanceData } from \"../initialStore\";\nimport { PreferenceName } from \"../../services/AppService/types\";\n\nexport const getUser = (store: IStore, instanceId: string | undefined) => {\n    const id = instanceId as string;\n    const data = get(store, id) || getInitialInstanceData();\n    return data.user; \n};\n\n/**\n * @return {ITranslation} - an object containing all translation for the current language\n */\nexport const getTranslation = createSelector(getUser,\n\t(user: IUser) => utils.getTranslation(user.language, user.translations)\n);\n\n/**\n * We will take only the texts for error contexts\n */\nexport const getTranslationForErrors = createSelector(getTranslation,\n    (translation: ITranslation) => translation.error\n);\n\n/**\n * @return {number} client side volume setting, but not considering the muting flag\n */\nexport const getNotMutedClientVolume = createSelector(getUser, (user: IUser) =>\n\tuser.preferences[PreferenceName.VolumeLevel]);\n\n/**\n * @return {SupportedLanguage} - current selected language; at this moment, only en, de and es are supported\n */\nexport const getLanguage = createSelector(getUser, (user: IUser) => user.language);\n\n/**\n * @return {string | undefined} - current user key, provided by the hosting platform\n */\nexport const getUserKey = createSelector(getUser, (user: IUser) => user.userKey);\n\n/**\n * @return {boolean} - true if the current user is currently online\n */\nexport const isUserOnline = createSelector(getUser, (user: IUser) => user.isOnline as boolean);\n\n/**\n * @return {boolean} - true if the user is currently offline (disconnected)\n */\nexport const isUserOffline = createSelector(getUser, (user: IUser) => !user.isOnline);\n\n/**\n * @return {boolean} - true if the user's account is a VIP one\n */\nexport const isVip = createSelector(getUser, (user: IUser) => user.isVip);\n\n/**\n * @return {boolean} shouldIncreaseMessageFontSize preference\n */\nexport const getShouldIncreaseMessageFontSize = createSelector(getUser,\n\t(user: IUser) => user.preferences[PreferenceName.ShouldIncreaseMessageFontSize]\n);\n","import { includes, get } from 'lodash';\nimport { createSelector } from \"reselect\";\nimport { isMobile } from 'react-device-detect';\n\nimport IStore, { VideochatInformationType, VideoChatType, IVideochat } from \"../store\";\nimport { getInitialInstanceData } from '../initialStore';\n\nexport const getVideoChat = (store: IStore, instanceId: string | undefined) => {\n    const id = instanceId as string;\n    const data = get(store, id) || getInitialInstanceData();\n\n    return data.videochat;\n};\n\n/**\n * @return {VideochatInformationType | undefined} - type of the informational pop-up to be displayed\n * when the video stream is interrupted for various reasons\n */\nexport const getInformationType = createSelector(getVideoChat, selection => selection.informationType);\n\n/**\n * @return {boolean} - true if the current information type to be displayed when the stream ends\n * is implying that the messenger itself will be closed as well\n */\nexport const isExitingInformationType = createSelector(getVideoChat,\n    selection => !!selection.informationType &&\n        includes([\n            VideochatInformationType.LIVECHAT_SESSION_ENDED,\n            VideochatInformationType.EJECTED,\n            VideochatInformationType.HOST_OFFLINE,\n            VideochatInformationType.PRIVATE_CHAT,\n            VideochatInformationType.VOICECALL_ENDED,\n            VideochatInformationType.ERROR_OCCURRED,\n            VideochatInformationType.OUT_OF_MONEY\n        ], selection.informationType)\n);\n\n/**\n * @return {PreChatInformationType | undefined} - type of the informational pop-up to be displayed\n * before the video stream is actually started\n */\nexport const getPreChatInformationType = createSelector(getVideoChat,\n    selection => selection.preChatInformationType);\n\n/**\n * @return {IResolution | undefined} - suggested width and height of the video stream, obtained from the API\n */\nexport const getInitialResolution = createSelector(getVideoChat,\n    selection => selection.initialResolution);\n\n/**\n * @return {IQualityBoundaries} - details about the qualities of the video stream, to be feed to the video player\n */\nexport const getVideoChatQualityBoundaries = createSelector(getVideoChat, selection => selection.qualityBoundaries);\n\n/**\n * @return {VideoChatType | undefined} - type of the started video stream\n */\nexport const getVideoChatType = createSelector(getVideoChat, selection => selection.type);\n\n/**\n * @return {boolean} - true if video chat is in live chat mode\n */\nexport const isVideoChatInLiveChatMode = createSelector(getVideoChatType,\n    videoChatType => videoChatType === VideoChatType.LIVECHAT\n);\n\n/**\n * @return {boolean} - true if video chat is in free chat mode\n */\nexport const isVideoChatInFreeChatMode = createSelector(getVideoChatType,\n    videoChatType => videoChatType === VideoChatType.FREECHAT\n);\n\n/**\n * @return {boolean} - true if video chat is in preview mode\n */\nexport const isVideoChatInPreviewMode = createSelector(getVideoChatType,\n    videoChatType => videoChatType === VideoChatType.LIVE_PREVIEW\n);\n\n/**\n * @return {boolean} - true if video chat is in free mode (the client has free duration chat)\n */\nexport const isVideoChatInFreeMode = createSelector(getVideoChatType,\n    videoChatType => videoChatType === VideoChatType.FREECHAT\n);\n\n/**\n * @return {boolean} - true if the videochat type is preview or freechat, in order\n * to render the continue with livechat dialog when the free seconds have been consumed.\n */\nexport const shouldDisplayContinueWithLiveChat = createSelector(\n    [isVideoChatInPreviewMode, isVideoChatInFreeMode],\n    (isInPreview, isInFreeChat) => isInPreview || isInFreeChat\n);\n\n/**\n * @return {boolean} - true if video chat is in voyeur mode\n */\nexport const isVideoChatInVoyeurMode = createSelector(getVideoChatType,\n    videoChatType => videoChatType === VideoChatType.VOYEUR_CHAT\n);\n\n\n/**\n * @return {boolean} - true if video chat is in group chat mode\n */\nexport const isVideoChatInGroupMode = createSelector(getVideoChatType,\n    videoChatType => videoChatType === VideoChatType.GROUP_CHAT\n);\n\n/**\n * @return {boolean} - true if video chat is in voyeur mode,\n * but with a model currently being in a private chat with someone else\n */\nexport const isVideoChatInVoyeurPrivateMode = createSelector(getVideoChatType,\n    videoChatType => videoChatType === VideoChatType.VOYEUR_PRIVATE_CHAT\n);\n\n/**\n * @return {VideoChatType | undefined} - type of the last successfully started video stream\n */\nexport const getLastSuccessfulVideoChatType = createSelector(getVideoChat, selection => selection.lastSuccessfulType);\n\n/**\n * @return {VideoChatType | undefined} - type of the video chat session to be automatically started\n */\nexport const getInitialVideoChatType = createSelector(getVideoChat,selection => selection.initialVideoChatType);\n\n/**\n * @return {boolean} true if the model cannot be heard\n */\nexport const getVideoChatIsMutedByModel = createSelector(getVideoChat, selection => selection.isMutedByModel);\n\n/**\n * @return {boolean} true if the client muted the audio stream\n */\nexport const getVideoChatIsMutedByClient = createSelector(getVideoChat, selection => selection.isMutedByClient);\n\n/**\n * @return {boolean} true if the video chat is initially muted due to browser's restrictions\n */\nexport const displayVolumeAsInitiallyMuted = createSelector(getVideoChat, selection =>\n    selection.isMutedByClient && selection.isInitiallyMuted);\n\n/**\n * @return {boolean} true to display the hint for initially muted button due to browser's restrictions\n */\nexport const isInitiallyMutedHintDisplayed = createSelector(getVideoChat, selection =>\n    selection.isInitiallyMutedHintDisplayed);\n\n/**\n * @return {boolean} true if cam to cam feature was activated or not\n * (user turned on his web cam and send video stream to the model)\n */\nexport const isCam2CamActive = createSelector(getVideoChat, selection => selection.cam2Cam.isActive);\n\n/**\n * @return {boolean} true if the cam2cam feature is enabled\n */\nexport const isCam2CamEnabled = createSelector(getVideoChat, videochat => videochat.cam2Cam.isEnabled);\n\n/**\n * @return {boolean} true if cam to cam video area is minimized\n * (usually because of overall video available area being to small)\n */\nexport const isCam2CamMinimized = createSelector(getVideoChat, selection => selection.cam2Cam.isMinimized);\n\n/**\n * @return {ICameraDevice[]} list of available cameras on the current device\n */\nexport const getCam2CamCameras = createSelector(getVideoChat, selection => selection.cam2Cam.cameras);\n\n/**\n * @return {ICameraDevice | null} selected camera (if more that one are available) to be used for the cam2cam\n */\nexport const getCam2CamSelectedCamera = createSelector(getVideoChat, (videochat: IVideochat) =>\n    videochat.cam2Cam.selectedCameraId\n        ? videochat.cam2Cam.cameras.find(camera => camera.deviceId === videochat.cam2Cam.selectedCameraId)\n        : null\n);\n\n/**\n * @return {boolean} true if the messenger is in full screen mode\n */\nexport const isFullScreen = createSelector(getVideoChat, selection => selection.isFullscreen);\n\n/**\n * @return {boolean} true if the video chat mode is open\n */\nexport const isVideoChatOpen = createSelector(getVideoChat, selection => selection.isOpen);\n\n/**\n * @return {number} available time in seconds (correlated with the actual available money)\n * before video chat is turned off\n */\nexport const getVideoChatTimeLeft = createSelector(getVideoChat,\n    selection => selection.timeLeft);\n\n/**\n * @return {boolean} true if the available time left is under a critical threshold\n */\nexport const isVideoChatTimeLeftBelowThreshold = createSelector(getVideoChat,\n    selection => selection.isTimeLeftBelowThreshold);\n\n/**\n * @return {number} available time in seconds for the video chat session,\n * got in the previous notification from the API\n */\nexport const getVideoChatPreviousTimeLeft = createSelector(getVideoChat,\n    selection => selection.previousTimeLeft);\n\n/**\n * @return {number} initial time in seconds to send messages to the model,\n * after a live preview session has ended\n */\nexport const getLivePreviewTextTimeLimit = createSelector(getVideoChat,\n    selection => selection.livePreviewTextTimeLimit);\n\n/**\n * @return {number} available left time (in seconds) to send messages to the model,\n * after a live preview session has ended\n */\nexport const getLivePreviewTextTimeLeft = createSelector(getVideoChat,\n    selection => selection.livePreviewTextTimeLeft);\n\n/**\n * @return {boolean} - whether pre-chat information dialog should be displayed or not\n */\nexport const shouldRenderPreChatInformationDialog = createSelector(getVideoChat,\n    selection => selection.preChatInformationType\n        && !selection.isPlaying\n        && !selection.type\n);\n\n/**\n * @return {boolean} - Whether chat information dialog can be displayed or not.\n * This means that a minimum set of requirements is fulfilled in order to display the informational pop up\n */\nexport const canRenderInformationDialog = createSelector([getVideoChat],\n    (selection) => !!selection.informationType\n        && !selection.isPlaying\n);\n\n/**\n * @return {boolean} true if a regular chat information dialog should be displayed\n */\nexport const shouldRenderRegularInformationDialog = createSelector([canRenderInformationDialog, isExitingInformationType],\n    (canRender, isExiting) => canRender && !isExiting);\n\n/**\n * @return {boolean} - true if  the (video) session is starting - this logic\n * will not apply for self-streaming (age verification scenario)\n */\nexport const isStarting = createSelector(getVideoChat,\n\tvideoChat => videoChat.isOpen\n\t\t&& !videoChat.isPlaying\n\t\t&& !videoChat.informationType\n\t\t&& videoChat.type !== VideoChatType.NO_DOWNSTREAM\n);\n\n/**\n * @return {boolean} - true if the vide stream is playing\n */\nexport const isPlaying = createSelector(getVideoChat, videochat => videochat.isPlaying);\n\n/**\n * Display or not the messenger section during a video session\n * @return {boolean}\n */\nexport const shouldRenderOnlyVideochat = createSelector(getVideoChat, videochat => videochat.shouldRenderOnlyVideochat);\n\n/**\n * @return {boolean} - true if the drop-down menu for mobile devices is open\n */\nexport const isMobileMenuOpen = createSelector(getVideoChat, videochat => videochat.isMobileMenuOpen);\n\n/**\n * @return {ExitEvent} - the last exiting error for video chat\n */\nexport const getExitEvent = createSelector(getVideoChat, videoChat => videoChat.exitEvent);\n\n/**\n * @return {boolean} true if the messenger was open in AVS (age-verification-system) mode;\n */\nexport const isInAVSMode = createSelector(getInitialVideoChatType, selection =>\n    selection === VideoChatType.NO_DOWNSTREAM\n);\n\n/**\n * @return {boolean} - true if  the (video) pre-loader should be rendered;\n * Note: it should be rendered if videochat is open, video is not playing, not avs mode\n * and there is no information dialog\n */\nexport const shouldRenderPreloader = createSelector([isStarting, isInAVSMode],\n    (starting: boolean, avsMode: boolean) => starting && !avsMode\n);\n\nexport const resumeChatTimestamp = createSelector(getVideoChat, videochat => videochat.resumeChatTimestamp);\n\nexport const isMobileLandscape = createSelector(isFullScreen, (isFullscreen: boolean) => isFullscreen && isMobile);\n\nexport const shouldHideVideochatControls = createSelector([getVideoChat, isPlaying],\n\t\t(videochat, isVideochatPlaying: boolean) => isVideochatPlaying && videochat.shouldHideVideochatControls);\n\n/** Number of participants in a group chat */\nexport const getGroupChatParticipantsNumber = createSelector(getVideoChat,\n    videochat => videochat.groupChatParticipants.length\n);\n\n/** The list of group chat participants withing a group chat sessions */\nexport const getGroupChatParticipants = createSelector(getVideoChat,\n\tvideochat => videochat.groupChatParticipants\n);\n\n/** Client's name/alies used for starting a group chat session */\nexport const getGroupChatClientName = createSelector(getVideoChat,\n    videochat => videochat.groupChatClientName\n);\n\n/**\n * @return {boolean} true if the number of participants in a group chat should be displayed\n */\nexport const shouldRenderGroupChatParticipants = createSelector(getVideoChat,\n    videochat => videochat.type === VideoChatType.GROUP_CHAT\n        && !!videochat.groupChatParticipants.length\n);\n\n/**\n * @return {boolean} true if video stream is restricted by autoplay policies\n */\nexport const isAutoplayRestricted = createSelector(getVideoChat,\n    videochat => !!videochat.isAutoplayRestricted\n);\n","import { createSelector } from 'reselect';\nimport { SupportedLanguage } from 'vxcontrol-client-lib';\nimport { filter, find, includes, isEmpty, keys, map } from 'lodash';\nimport { isIOS, isMobile, isMobileOnly, isTablet } from \"react-device-detect\";\n\nimport config from '../../static/config';\nimport utils from '../../utils';\nimport { getLanguage, getTranslation, getUser, isUserOffline } from \"./user\";\nimport IStore, {\n\tIBundle,\n\tIChat,\n\tIContactNote,\n\tICountdownWarning,\n\tIGift,\n\tIGiftPage,\n\tIMessage,\n\tIMessenger,\n\tIModalContent,\n\tISession, IUser,\n\tIVideochat,\n\tIWindowSectionState,\n\tVideoChatType\n} from '../store';\n\nimport {\n\thasAudioMessageFeature,\n\thasBehaviorOnClickOutside,\n\thasCam2Cam,\n\thasContactNoteFeature,\n\thasEmoticons,\n\thasExitPopups,\n\thasFavoriteFeature,\n\thasGiftsFeature,\n\thasHistoryMessages,\n\thasImageUploadFeature,\n\thasModelMotto,\n\thasModelProfilePicture,\n\thasPrivateChat,\n\thasSendMessageButton,\n\thasTips,\n\thasToyControlFeature,\n\thasVoyeur\n} from \"./features\";\n\nimport {\n\tareAnyUserPromptsOpen,\n\tgetContactNote,\n\tgetMessages,\n\tgetMessenger,\n\tgetModalContent,\n\tgetWindowToggleState,\n\tisDropDownMenuOpen,\n\tisResponsive,\n\tisTextEnabled,\n\tisToySectionOpen,\n\tshouldDisplayCustomMentionSection\n} from \"./messenger\";\n\nimport {\n\tgetModelName,\n\thasFreeModelChatDuration,\n\thasFreeModelMessages,\n\thasPrices,\n\tisModelOnline,\n\tisModelSupportingPreviewChat,\n\tisModelSupportingPrivateChat,\n\tisModelSupportingTip,\n\tisModelSupportingToyControl,\n\tisModelSupportingVoyeurToPrivateChat\n} from \"./model\";\n\nimport {\n\tgetChat,\n\tgetGifts,\n\tgetSession,\n\thasFreePlatformChatDuration,\n\thasFreePlatformMessages,\n\tisChatExternallyProvided\n} from \"./session\";\n\nimport {\n\tcanRenderInformationDialog,\n\tgetGroupChatParticipants,\n\tgetLivePreviewTextTimeLeft,\n\tgetVideoChat,\n\tgetVideoChatType,\n\tisCam2CamActive,\n\tisCam2CamEnabled,\n\tisExitingInformationType,\n\tisFullScreen,\n\tisInAVSMode,\n\tisPlaying,\n\tisStarting,\n\tisVideoChatInFreeChatMode,\n\tisVideoChatInGroupMode,\n\tisVideoChatInPreviewMode,\n\tisVideoChatInVoyeurPrivateMode,\n\tisVideoChatOpen,\n\tshouldRenderPreChatInformationDialog\n} from \"./videochat\";\nimport { PreferenceName } from \"../../services/AppService/types\";\n\n/**\n * Get a list with all the instance ids contained in the store\n * @param store\n */\nexport const getInstanceIds = (store: IStore) => keys(store);\n\n/**\n * Get instanceId of the instance being in full screen (if any)\n * @param store\n * @return {string | undefined}\n */\nexport const getFullScreenInstance = (store: IStore) => find(\n\tgetInstanceIds(store), instanceId => isFullScreen(store, instanceId)\n);\n\n/**\n * Get the list of bundles with the translated names\n * @return {GiftBundle[]}\n */\nexport const getGiftBundles = createSelector([getSession, getLanguage],\n    (session: ISession, language: SupportedLanguage) => map(session.giftBundles, (giftBundle: IBundle) => {\n        const translation = utils.getItemTranslation(language, giftBundle.translations);\n\n        return {\n            ...giftBundle,\n            name: translation.value\n        };\n    }));\n\n/**\n * A JOIN between gift categories, bundles and simple gifts from the INIT request\n */\nexport const getGiftPages = createSelector(\n    [getSession, getLanguage, getTranslation],\n    (session, language, translation) => utils.getGiftPages(session, language, translation.common.bundles)\n);\n\n/**\n * If messenger is for content partner, we will remove the gifts option.\n * If the messenger is not for content partners, but no gifts come from our request,\n * we will remove the gifts option.\n */\nexport const isGiftButtonVisible = createSelector(\n    [getGiftPages, hasGiftsFeature],\n    (giftPages: IGiftPage[], hasGiftsConfigured: boolean) =>\n\t\t!isEmpty(giftPages) && hasGiftsConfigured\n);\n\n/**\n * Gift's name is translated based on user's chosen language\n */\nexport const getTranslatedGifts = createSelector(\n    [getGifts, getLanguage],\n    (gifts: IGift[], language: SupportedLanguage) => map(gifts,\n        (gift: IGift) => ({\n            ...gift,\n            name: utils.getTranslatedGiftName(gift, language)\n        }))\n);\n\n/**\n * @return { ICountdownWarning | undefined } - data about the countdown warning,\n * announcing that after a certain amount of seconds,\n * a major event (usually out of money) would likely to stop the video stream\n */\nexport const getCountdownWarning = createSelector(\n    [getWindowToggleState, getVideoChatType, isPlaying],\n    (selection: IWindowSectionState, type: VideoChatType, playing: boolean) =>\n        !!type && playing && selection.countdownWarning);\n\n/**\n * @return {boolean} - returns true if countdown warning is open\n */\n\nexport const isCountdownWarningOpen = createSelector(\n    getCountdownWarning,\n    (countdownWarning: (ICountdownWarning | undefined)) => !isEmpty(countdownWarning)\n);\n\n/**\n * @return {boolean} - true if the video chat mode is spending money\n * (and implicitly makes the video time limit decrease)\n */\nexport const isVideoChatInSpendingMode = createSelector(getVideoChatType,\n    selection => !!selection &&\n        !includes([VideoChatType.LIVE_PREVIEW, VideoChatType.FREECHAT], selection));\n\n/**\n * @return {boolean} true if the user can interact with the model\n * (send text, images, emoticons and/ or gifts)\n */\nexport const isInteractive = createSelector(\n\t[\n\t\tisTextEnabled,\n\t\tisVideoChatInVoyeurPrivateMode,\n\t\tisVideoChatInPreviewMode,\n\t\tgetLivePreviewTextTimeLeft,\n\t\tisStarting\n\t],\n    (\n\t\thasModelAllowedText,\n\t\tisVoyeurPrivate,\n\t\tisPreview,\n\t\ttextTime,\n\t\tisStreamStarting\n\t) => {\n\t\tconst isInteractiveStream = !(isVoyeurPrivate || (isPreview && textTime <= 0));\n\n\t\tconst canClientSendMessages = hasModelAllowedText\n\t\t\t&& isInteractiveStream\n\t\t\t&& !isStreamStarting;\n\n\t\treturn canClientSendMessages;\n\t}\n);\n\n/**\n * @return {boolean} true if the emoticons section is open\n */\nexport const isEmoticonSectionOpen = createSelector([isInteractive, getWindowToggleState],\n    (interactive: boolean, toggleState: IWindowSectionState) => interactive && toggleState.isEmoticonSectionOpen);\n\n/**\n * @return {boolean} true if the gifts section is open\n */\nexport const isGiftSectionOpen = createSelector([isInteractive, getWindowToggleState],\n    (interactive: boolean, toggleState: IWindowSectionState) => interactive && toggleState.isGiftSectionOpen);\n\n/**\n * @return {boolean} true if the user can initiate a regular video chat session\n */\nexport const canInitiateLiveChat = createSelector(\n    [getVideoChatType, isModelOnline, isStarting],\n    (videoChatType: VideoChatType, isOnline: boolean, isVideoStarting: boolean) =>\n        isOnline &&\n        !isVideoStarting &&\n        (isEmpty(videoChatType) || (videoChatType === VideoChatType.LIVE_PREVIEW))\n);\n\n/**\n * @return {boolean} true if the user can initiate a live preview video chat session\n */\nexport const canInitiateLivePreview = createSelector(\n    [\n        getVideoChatType,\n        isModelOnline,\n        isModelSupportingPreviewChat,\n        isStarting,\n    ], (\n        videoChatType: VideoChatType,\n        isOnline: boolean,\n        supportsLivePreview: boolean,\n        isVideoStarting: boolean\n    ) =>\n        isOnline &&\n        !utils.isMobilePhone(isMobile, isTablet) &&\n        !isVideoStarting &&\n        supportsLivePreview &&\n        isEmpty(videoChatType)\n);\n\n/**\n * @return {boolean} true if the user can initiate a private video chat session\n */\nexport const canInitiatePrivateChat = createSelector(\n    [\n        getVideoChatType,\n        isModelOnline,\n        isModelSupportingPrivateChat,\n        hasPrivateChat,\n        isStarting,\n        isVideoChatInFreeChatMode\n    ], (\n        videoChatType: VideoChatType,\n        isOnline: boolean,\n        supportsPrivateChat: boolean,\n        hasPrivateChatFeature: boolean,\n        isVideoStarting: boolean,\n        isInFreeChatMode: boolean\n    ) =>\n        isOnline &&\n        !isVideoStarting &&\n        !isInFreeChatMode &&\n        supportsPrivateChat &&\n        hasPrivateChatFeature &&\n        videoChatType === VideoChatType.LIVECHAT ||\n        videoChatType === VideoChatType.FREECHAT\n);\n\n/**\n * @return {boolean} true if the user can initiate a voyeur video chat session\n */\nexport const canInitiateVoyeurChat = createSelector(\n    [getVideoChatType, isModelOnline, isStarting, hasVoyeur],\n    (\n        videoChatType: VideoChatType,\n        isOnline: boolean,\n        isVideoStarting: boolean,\n        hasVoyeurCam: boolean\n    ) =>\n        isOnline &&\n        !isVideoStarting &&\n        isEmpty(videoChatType) &&\n        hasVoyeurCam\n);\n\n/**\n * @return {boolean} true if the user can initiate a voyeur video chat session,\n * but with a model being currently in a private chat with someone else\n */\nexport const canInitiateVoyeurToPrivateChat = createSelector(\n    [isModelOnline, isModelSupportingVoyeurToPrivateChat, isStarting],\n    (isOnline: boolean, supportsVoyeurPrivateChat: boolean, isVideoStarting: boolean) =>\n        isOnline && !isVideoStarting && supportsVoyeurPrivateChat\n);\n\n/**\n * @return {boolean} true if the user can initiate a cam-to-cam session\n */\nexport const canInitiateCam2Cam = createSelector(\n    [isVideoChatOpen, isCam2CamEnabled, isModelOnline, hasCam2Cam, isStarting, getVideoChatType],\n    (\n\t\tisVideochatOpen: boolean,\n\t\thasCam2CamEnabled: boolean,\n        isPartnerOnline: boolean,\n        hasCam2CamFeature: boolean,\n        isVideoStarting: boolean,\n\t\tvideoChatType: VideoChatType,\n\t) =>\n\t\tisVideochatOpen &&\n\t\thasCam2CamEnabled &&\n        hasCam2CamFeature &&\n        isPartnerOnline &&\n        !(isMobile && isIOS) &&\n        !isVideoStarting &&\n\n\t\t// FUTURE TODO: remove this when the \"cam2cam\" ability flag from vchat-core will be a reliable source of truth;\n\t\t// currently it came true for LIVE_PREVIEW\n\t\tvideoChatType !== VideoChatType.LIVE_PREVIEW\n\t);\n\n/**\n * @return {boolean} true if any action button is to be rendered\n */\nexport const hasActionButtons = createSelector([\n        canInitiateLiveChat,\n        canInitiateLivePreview,\n        canInitiatePrivateChat,\n        canInitiateVoyeurChat,\n        canInitiateCam2Cam\n    ], (\n    canLive: boolean, canPreview: boolean,\n    canPrivate: boolean, canVoyeur: boolean, canCam2Cam: boolean) =>\n    canLive || canPreview || canPrivate || canVoyeur || canCam2Cam\n);\n\n/**\n * @return {boolean} - true if the motto should be rendered\n * (when the model is offline or during a non-fullscreen videochat)\n */\nexport const shouldRenderMotto = createSelector(\n    [isModelOnline, isVideoChatOpen, isFullScreen, hasModelMotto],\n    (isOnline: boolean, isVideochatOpen: boolean, isVideochatOnFullscreen: boolean, hasMotto: boolean) =>\n        (!isOnline || (isVideochatOpen && !isVideochatOnFullscreen)) && hasMotto\n);\n\n/**\n * @returns {boolean} - true if the action section buttons should be rendered\n * (only if the model is online or the client is in a videochat)\n */\nconst hasActionSection = createSelector(\n    [isModelOnline, isVideoChatOpen, hasPrices, isChatExternallyProvided],\n    (isOnline: boolean, isVideochatOpen: boolean, hasReceivedPrices: boolean, isExternallyProvided: boolean) =>\n        (isExternallyProvided || hasReceivedPrices) && (isOnline || isVideochatOpen)\n);\n\n/**\n * @returns {boolean} true if the action section should be rendered and the messenger\n * is not opened in mobile. In this case, the action section will be part of the model's\n * profile section.\n */\nexport const hasActionSectionInProfile = createSelector(hasActionSection,\n    (hasActionSectionButtons) => hasActionSectionButtons && !utils.isMobilePhone(isMobile, isTablet)\n);\n\n/**\n * @returns {boolean} true if the action section should be rendered and the messenger\n * is opened in mobile, without an active stream.\n * In this case, the action section will be rendered under the texbox\n */\nexport const hasActionSectionUnderTextbox = createSelector(\n    [hasActionSection, isVideoChatOpen],\n    (hasActionSectionButtons, isVideoOpen) =>\n        hasActionSectionButtons &&\n        utils.isMobilePhone(isMobile, isTablet) &&\n        !isVideoOpen\n);\n\n/**\n * @returns {boolean} true if the action section should be rendered inside the\n * responsive dropdown (as the last option) when the messenger is opened in\n * mobile with an active videochat stream.\n */\nexport const hasActionSectionInDropDown = createSelector(\n    [hasActionSection, isVideoChatOpen],\n    (hasActionSectionButtons, isVideoOpen) =>\n        hasActionSectionButtons &&\n        utils.isMobilePhone(isMobile, isTablet) &&\n        isVideoOpen\n);\n\n/**\n * @return {boolean} - true if the user offline information dialog should be rendered\n * (only if the user is offline and is in a videochat)\n */\nexport const shouldRenderUserOfflineInformation = createSelector(\n    [isUserOffline, isVideoChatOpen, hasExitPopups],\n    (isOffline: boolean, isVideochatOpen: boolean, hasPopupsFeature: boolean) =>\n        isOffline && isVideochatOpen && hasPopupsFeature\n);\n\n/**\n * @return {boolean} - true if an exiting chat information dialog should be displayed\n */\nexport const shouldRenderExitingInformationDialog = createSelector(\n    [canRenderInformationDialog, isExitingInformationType, hasExitPopups],\n    (canRender, isExiting, hasExit) => canRender && isExiting && hasExit);\n\nconst hasMultipleInstancesOpen = (state: IStore) => {\n    const instances = Object.values(state);\n    return instances.filter(data => data.messenger.isOpen).length > 1;\n};\n\n/**\n * @return {boolean} - true if the messenger should be closed\n * (usually when clicking outside of it)\n */\nexport const shouldCloseMessenger = createSelector(\n    [\n        hasMultipleInstancesOpen,\n        isVideoChatOpen,\n        getModalContent,\n        getContactNote,\n        shouldRenderPreChatInformationDialog,\n\t\tshouldRenderExitingInformationDialog,\n\t\thasBehaviorOnClickOutside\n    ],(\n        hasMultipleInstances: boolean,\n        isVideochatOpen: boolean,\n        modalContent: IModalContent,\n        contactNote: IContactNote,\n        shouldRenderPrechat: boolean,\n\t\tshouldRenderDialog: boolean,\n\t\thasOnClickOutsideConfigured: boolean\n\t) =>\n\t\thasOnClickOutsideConfigured\n        && !isVideochatOpen\n        && !hasMultipleInstances\n        && isEmpty(modalContent.imgSrc)\n        && !contactNote.isOpen\n        && !shouldRenderPrechat\n        && !shouldRenderDialog\n);\n\n/**\n * @return {boolean} - true if the contact note can be rendered.\n * This implies that the messenger is not on fullscreen mode and\n * has this feature from the parent platform.\n */\nexport const hasContactNote = createSelector(\n\t[hasContactNoteFeature, isFullScreen, isChatExternallyProvided],\n\t(hasNote: boolean, isOnFullscreen: boolean, hasExternalChat: boolean) =>\n\t\t!isOnFullscreen\n\t\t&& !hasExternalChat\n\t\t&& hasNote\n);\n\nexport const hasFavorite = createSelector(\n\t[hasFavoriteFeature, isChatExternallyProvided],\n\t(canFavorite: boolean, hasExternalChat: boolean) => !hasExternalChat && canFavorite\n);\n\n/**\n * @return {boolean} = true if we should lift chatbox;\n * occurs when we are in fullscreen and we have a countdown warning open\n */\nexport const shouldLiftChatbox = createSelector([isFullScreen, isCountdownWarningOpen],\n    (isFullscreen, isCountdownOpen) => !isMobile && isFullscreen && isCountdownOpen);\n\n/**\n *  @return {boolean} true if the cam2cam popup for age-verification-system should be displayed\n */\nexport const shouldRenderAVSCam2CamPopup = createSelector(\n    [isInAVSMode, isVideoChatOpen, isCam2CamActive, getVideoChatType],\n    (avsMode: boolean, isVideoOpen: boolean, cam2CamActive: boolean, type: VideoChatType) =>\n        avsMode && isVideoOpen && !cam2CamActive && type === VideoChatType.NO_DOWNSTREAM\n);\n\n/**\n *  @return {boolean} - true for mobile devices which are in the videochat mode\n *  and for android devices which are in messenger mode and have their height less than maxHeightBlurEditor\n */\nexport const shouldCloseMobileKeyboard = createSelector([isVideoChatOpen], (isVideoOpen: boolean) => {\n        const { height } = utils.getWindowDimensions();\n\n        return isVideoOpen && isMobileOnly\n            || !isVideoOpen && isMobileOnly && !isIOS && (height < config.maxHeightToHideMobileKeyboard);\n    }\n);\n\n/**\n * Active messages as they should be displayed on the messenger\n * @return {IMessage[]}\n */\nexport const getActiveMessages = createSelector(\n    [getMessages, isFullScreen, getChat],\n    (selection: IMessage[], isFullScreenActive: boolean, chat: IChat) => {\n\t\tconst { maxNumberOfMessages } = config.limitations;\n\n        // if fullscreen, keep the ones from the current chat\n        const shouldFilterByChatId = (isFullScreenActive && chat && chat.chatId) as boolean;\n\n\t\tconst messages = shouldFilterByChatId\n\t\t\t? filter(selection, (message: IMessage) => message.chatId === chat.chatId)\n\t\t\t: selection;\n\n        let startPositionForSlicing = messages.length - maxNumberOfMessages.onFullscreen;\n\t\tstartPositionForSlicing = Math.max(startPositionForSlicing, 0);\n\n\t\t// then again, if full screen, limit how many will be displayed\n        return isFullScreenActive ? messages.slice(startPositionForSlicing) : messages;\n    }\n);\n\n/**\n * @return {boolean} - true if the client has any type of free messages for this model:\n * free messages for the entire platform or free messages for this specific model.\n */\nexport const hasFreeMessages = createSelector(\n    [hasFreePlatformMessages, hasFreeModelMessages],\n    (hasPlatformMessages, hasModelMessages) => hasModelMessages || hasPlatformMessages\n);\n\n/**\n * @return {boolean} - true if the client has any free livechat time for this model:\n * free livechat time for the entire platform or free livechat time for this specific model\n */\nexport const hasFreeChatDuration = createSelector(\n    [hasFreePlatformChatDuration, hasFreeModelChatDuration],\n    (hasPlatformChatDuration, hasModelChatDuration) => hasModelChatDuration || hasPlatformChatDuration\n);\n\n/**\n *  @return {boolean} - true if we should render profile picture in the profile component\n */\nexport const hasModelPictureInProfile = createSelector(\n    [isVideoChatOpen, hasModelProfilePicture],\n    (isOpen: boolean, hasProfilePicture: boolean) => !isOpen && hasProfilePicture && !isMobile\n);\n\n/**\n *  @return {boolean} - true if we should display the anonymous tip\n */\nexport const shouldOpenAnonymousTipPrompt = createSelector(\n    [hasTips, isChatExternallyProvided],\n    (hasTipping: boolean, isChatExternallyProv: boolean) => hasTipping && !isChatExternallyProv\n);\n\nexport const hasToyControl = createSelector(\n    [isModelSupportingToyControl, getVideoChatType, hasToyControlFeature], (\n        isToySupportedByModel: boolean,\n        videoChatType: VideoChatType,\n        hasToyFeature: boolean\n    ) =>\n\t\tisToySupportedByModel\n\t\t&& hasToyFeature\n        && (videoChatType === VideoChatType.LIVECHAT || videoChatType === VideoChatType.PRIVATE_CHAT)\n);\n\n/**\n * @return {boolean} true if we should render the toy control icon as\n * one of our message section buttons - this should happen in fullscren and in mobile\n */\nexport const hasToyControlButton = createSelector(\n    [hasToyControl, isFullScreen],\n    (hasToy: boolean, isVideoOnFullscreen: boolean) => hasToy && isVideoOnFullscreen\n);\n\n/**\n * @return {boolean} true if we should render only the toy section header, which will contain\n * only some informative text and it on click will open the entire toy section.\n */\nexport const shouldRenderToySectionHeader = createSelector(\n    [hasToyControl, isToySectionOpen, isResponsive],\n    (hasToyFeature: boolean, isToyOpen: boolean, isResponsiveActive: boolean) =>\n        hasToyFeature\n        && !isToyOpen\n        && !isResponsiveActive\n);\n\n/**\n *  @return {boolean} - true if the tip feature should be offered to the user\n */\nexport const shouldShowTipping = createSelector(\n    [hasTips, isChatExternallyProvided, isModelSupportingTip],\n    (hasTipping: boolean, isChatExternallyProv: boolean, isSupportingTip: boolean) =>\n        hasTipping && isChatExternallyProv && isSupportingTip\n);\n\nexport const shouldShowHistory = createSelector(\n    [hasHistoryMessages, isVideoChatInGroupMode],\n    (hasHistoryFeature: boolean, isInGroupChatMode: boolean) =>\n        !isInGroupChatMode && hasHistoryFeature\n);\n\n/**\n * @return {boolean} true if the client can upload images\n */\nexport const hasImageUpload = createSelector(\n    [isInteractive, hasImageUploadFeature, isVideoChatInGroupMode],\n    (interactive: boolean, canUploadImages: boolean, isGroupChatActive) =>\n        interactive && canUploadImages && !isGroupChatActive\n);\n\n/**\n * @return {boolean} true if the user can send audio messages\n */\nexport const hasAudioMessages = createSelector(\n    [hasAudioMessageFeature, isVideoChatInGroupMode],\n    (canSendAudioMessages: boolean, isGroupChatActive: boolean) =>\n        canSendAudioMessages && !isGroupChatActive\n);\n\n/**\n * @return true if any message section functionality is configured on true from\n * the parent platform: send message arrow, gifts, emoticons or image upload.\n */\nexport const shouldDisplayMessageSectionButtons = createSelector([\n        isInteractive,\n        hasGiftsFeature,\n        hasEmoticons,\n        hasImageUpload,\n        hasSendMessageButton\n], (\n        interactive: boolean,\n        hasGifts: boolean,\n        hasEmoticonsFeature: boolean,\n        canUploadImages: boolean,\n        hasSendMessageFeature: boolean\n    ) =>\n        interactive &&\n        (hasGifts || hasEmoticonsFeature || canUploadImages || hasSendMessageFeature)\n);\n\n/**\n * @return true if the send message arrow has been configured on true from the parent platform,\n * but all the other message section features are on false (gifts, emoticons and image upload).\n */\nexport const hasOnlySendButton = createSelector([\n        hasGiftsFeature,\n        hasEmoticons,\n        hasImageUpload,\n        hasSendMessageButton\n    ], (\n        hasGifts: boolean,\n        hasEmoticonsFeature: boolean,\n        canUploadImages: boolean,\n        hasSendMessageFeature: boolean\n    ) => hasSendMessageFeature && !(hasGifts || hasEmoticonsFeature || canUploadImages)\n);\n\nexport const isConsecutiveGroupMessage = (id: string) => createSelector(\n    [getMessages],\n    (messages: IMessage[]) => utils.checkIfMessageIsConsecutive(messages, id)\n);\n\nexport const isLastConsecutiveGroupMessage = (id: string) => createSelector(\n    [getMessages],\n    (messages: IMessage[]) => utils.checkIfMessageIsLastConsecutive(messages, id)\n);\n\nexport const isSoloMessage = (id: string) => createSelector(\n    [getMessages],\n    (messages: IMessage[]) => utils.checkIfMessageIsSolo(messages, id)\n);\n\nexport const getMentionOptions =\n    createSelector([getGroupChatParticipants, getModelName, shouldDisplayCustomMentionSection],\n        (groupChatParticipants: string[], modelName: string, hasCustomMentionSection: boolean) =>\n\t\t\thasCustomMentionSection ? groupChatParticipants : [modelName, ...groupChatParticipants]);\n\nexport const isMentionSectionOpen = createSelector([getMessenger, isFullScreen, shouldDisplayCustomMentionSection],\n\t(messenger: IMessenger, isFullscreen, shouldDisplayCustomMenu) =>\n\t\tshouldDisplayCustomMenu ? !isFullscreen && messenger.isMentionSectionOpen : messenger.isMentionSectionOpen\n);\n\n/**\n * @return {boolean} true if all the user prompts and sections are closed\n */\nexport const areAllPopUpsClosed = createSelector(\n\t[getMessenger, areAnyUserPromptsOpen, isGiftSectionOpen, isEmoticonSectionOpen, isToySectionOpen],\n\t(messenger: IMessenger,\n\t areUserPromptsOpen: boolean,\n\t isGiftSectOpen: boolean,\n\t isEmoticonSectOpen: boolean,\n\t isToySectOpen: boolean) =>\n\t\t!messenger.windowToggleState.isDropDownOpen\n\t\t&& !isGiftSectOpen\n\t\t&& !isEmoticonSectOpen\n\t\t&& !isToySectOpen\n\t\t&& !areUserPromptsOpen\n);\n\nexport const shouldUseDropdownAnimation = createSelector(\n\t[isDropDownMenuOpen, isGiftSectionOpen, isEmoticonSectionOpen, isToySectionOpen, isResponsive],\n\t(isDropDownOpen: boolean,\n\t isGiftSectOpen: boolean,\n\t isEmoticonSectOpen: boolean,\n\t isToySectOpen: boolean,\n\t isResponsiveActive: boolean) =>\n\t\t!isDropDownOpen\n\t\t&& !isGiftSectOpen\n\t\t&& !isEmoticonSectOpen\n\t\t&& !isToySectOpen\n\t\t&& isResponsiveActive\n)\n\n/**\n * @return {number} client side volume setting\n */\nexport const getClientVolume = createSelector([getUser, getVideoChat], (user: IUser, videochat: IVideochat) =>\n\tvideochat.isMutedByClient ? 0 : user.preferences[PreferenceName.VolumeLevel]);\n","import { get } from \"lodash\";\n\nimport IStore from \"../store\";\nimport { getInitialInstanceData } from \"../initialStore\";\n\nexport const getPlatformProps = (store: IStore, instanceId: string | undefined) => {\n    const id = instanceId as string;\n    const data = get(store, id) || getInitialInstanceData();\n    return data.platformProps;\n};","import { get } from \"lodash\";\nimport {createSelector} from \"reselect\";\n\nimport IStore, { IHooks } from \"../store\";\nimport { getInitialInstanceData } from \"../initialStore\";\n\nexport const getHooks = (store: IStore, instanceId: string | undefined) => {\n    const id = instanceId as string;\n    const data = get(store, id) || getInitialInstanceData();\n    return data.hooks;\n};\n\n\n/**\n * @param hookName\n * @return array of arguments (if any) for the previous call of the specified hook\n */\nexport const geHook = (hookName: keyof IHooks) => createSelector(\n    getHooks,\n    hooks => hooks[hookName]\n);\n","import * as features from './features';\nimport * as options from './options';\nimport * as messenger from './messenger';\nimport * as model from './model';\nimport * as session from './session';\nimport * as user from './user';\nimport * as videochat from './videochat';\nimport * as common from './common';\nimport * as platformProps from './platformProps';\nimport * as hooks from './hooks';\n\nexport default {\n\t...features,\n    ...options,\n    ...messenger,\n    ...model,\n    ...session,\n    ...user,\n    ...common,\n    ...videochat,\n    ...platformProps,\n\t...hooks\n};\n","import styled from \"styled-components\";\nimport config from \"../static/config\";\nimport vxIcons from './vx-icons';\n\nexport const VXMessengerWrapper = styled.div.attrs({className: config.messengerClassName})`\n\t${vxIcons}\n\n    width: 100%;\n    height: 100%;\n    \n    /* selector is needed here because I have no control over visualizer container which is managed by react-mic package */\n    .visualizer {\n        display: none;\n    }\n    \n    /* selector is needed here because I have no control over h5_live_player div which is managed by vchat-player package */\n    #h5_live_player {\n        pointer-events: none;\n    }\n     \n    box-sizing: content-box;\n         \n    * {\n    \tbox-sizing: inherit;\n    }\n\n`;\n","const vxIcons = `\n[class^=\"-icon-\"], [class*=\" -icon-\"] {\n\t/* use !important to prevent issues with browser extensions that change fonts */\n\tfont-family: 'vx_iconfont' !important;\n\tspeak: none;\n\tfont-style: normal;\n\tfont-weight: normal;\n\tfont-variant: normal;\n\ttext-transform: none;\n\tline-height: 1;\n\n\t/* Better Font Rendering =========== */\n\t-webkit-font-smoothing: antialiased;\n\t-moz-osx-font-smoothing: grayscale;\n}\n\n.-icon-archived:before {\n\tcontent: \"\\\\e933\";\n}\n.-icon-archived-line:before {\n\tcontent: \"\\\\e001\";\n}\n.-icon-download:before {\n\tcontent: \"\\\\e95f\";\n}\n.-icon-download-line:before {\n\tcontent: \"\\\\e002\";\n}\n.-icon-arrow-down-full:before {\n\tcontent: \"\\\\e902\";\n}\n.-icon-arrow-left-full:before {\n\tcontent: \"\\\\e903\";\n}\n.-icon-arrow-right-full:before {\n\tcontent: \"\\\\e904\";\n}\n.-icon-arrow-up-full:before {\n\tcontent: \"\\\\e905\";\n}\n.-icon-single-arrow-down-line:before {\n\tcontent: \"\\\\e84b\";\n}\n.-icon-single-arrow-left-line:before {\n\tcontent: \"\\\\e84c\";\n}\n.-icon-single-arrow-up-line:before {\n\tcontent: \"\\\\e84e\";\n}\n.-icon-single-arrow-right-line:before {\n\tcontent: \"\\\\e84d\";\n}\n.-icon-double-arrow-left-line:before {\n\tcontent: \"\\\\e90f\";\n}\n.-icon-double-arrow-down-line:before {\n\tcontent: \"\\\\e90e\";\n}\n.-icon-double-arrow-up-line:before {\n\tcontent: \"\\\\e911\";\n}\n.-icon-double-arrow-right-line:before {\n\tcontent: \"\\\\e910\";\n}\n.-icon-complete-arrow-left-line:before {\n\tcontent: \"\\\\e844\";\n}\n.-icon-complete-arrow-down-line:before {\n\tcontent: \"\\\\e843\";\n}\n.-icon-complete-arrow-up-line:before {\n\tcontent: \"\\\\e846\";\n}\n.-icon-complete-arrow-right-line:before {\n\tcontent: \"\\\\e912\";\n}\n.-icon-back-full:before {\n\tcontent: \"\\\\e941\";\n}\n.-icon-back-line:before {\n\tcontent: \"\\\\e004\";\n}\n.-icon-send-msg-single-full:before {\n\tcontent: \"\\\\e807\";\n}\n.-icon-send-msg-single-line:before {\n\tcontent: \"\\\\e005\";\n}\n.-icon-send-msg-full:before {\n\tcontent: \"\\\\e806\";\n}\n.-icon-send-msg-line:before {\n\tcontent: \"\\\\e006\";\n}\n.-icon-close-full:before {\n\tcontent: \"\\\\e929\";\n}\n.-icon-close-line:before {\n\tcontent: \"\\\\e92a\";\n}\n.-icon-success-rounded-thinner:before {\n\tcontent: \"\\\\e96f\";\n}\n.-icon-success-rounded-full:before {\n\tcontent: \"\\\\e948\";\n}\n.-icon-plus-full:before {\n\tcontent: \"\\\\e919\";\n}\n.-icon-plus-line:before {\n\tcontent: \"\\\\e007\";\n}\n.-icon-minus-full:before {\n\tcontent: \"\\\\e975\";\n}\n.-icon-minus-line:before {\n\tcontent: \"\\\\e008\";\n}\n.-icon-round-close:before {\n\tcontent: \"\\\\e977\";\n}\n.-icon-round-cancel-line:before {\n\tcontent: \"\\\\e935\";\n}\n.-icon-round-minus-full:before {\n\tcontent: \"\\\\e009\";\n}\n.-icon-round-minus-line:before {\n\tcontent: \"\\\\e010\";\n}\n.-icon-round-plus:before {\n\tcontent: \"\\\\e978\";\n}\n.-icon-round-plus-line:before {\n\tcontent: \"\\\\e011\";\n}\n.-icon-round-success-full:before {\n\tcontent: \"\\\\e012\";\n}\n.-icon-round-success-line:before {\n\tcontent: \"\\\\e937\";\n}\n.-icon-round-info-full:before {\n\tcontent: \"\\\\e013\";\n}\n.-icon-round-info-line:before {\n\tcontent: \"\\\\e936\";\n}\n.-icon-round-warning-full:before {\n\tcontent: \"\\\\e014\";\n}\n.-icon-round-warning-line:before {\n\tcontent: \"\\\\e93e\";\n}\n.-icon-round-time-full:before {\n\tcontent: \"\\\\e98e\";\n}\n.-icon-round-time-line:before {\n\tcontent: \"\\\\e015\";\n}\n.-icon-dot-full:before {\n\tcontent: \"\\\\e92b\";\n}\n.-icon-dot-line:before {\n\tcontent: \"\\\\e92c\";\n}\n.-icon-hamburger-line:before {\n\tcontent: \"\\\\e91c\";\n}\n.-icon-filter-regulator:before {\n\tcontent: \"\\\\e96d\";\n}\n.-icon-categorie-line2:before {\n\tcontent: \"\\\\e92f\";\n}\n.-icon-categorie-tile:before {\n\tcontent: \"\\\\e963\";\n}\n.-icon-dollar-full:before {\n\tcontent: \"\\\\e90d\";\n}\n.-icon-dollar-line:before {\n\tcontent: \"\\\\e016\";\n}\n.-icon-euro-full:before {\n\tcontent: \"\\\\e017\";\n}\n.-icon-euro-line:before {\n\tcontent: \"\\\\e914\";\n}\n.-icon-single-euro-line:before {\n\tcontent: \"\\\\e018\";\n}\n.-icon-data-shield:before {\n\tcontent: \"\\\\e967\";\n}\n.-icon-data-shield-line:before {\n\tcontent: \"\\\\e019\";\n}\n.-icon-bell-full:before {\n\tcontent: \"\\\\e906\";\n}\n.-icon-bell-line:before {\n\tcontent: \"\\\\e020\";\n}\n.-icon-earth-full:before {\n\tcontent: \"\\\\e93d\";\n}\n.-icon-geolocation-full:before {\n\tcontent: \"\\\\e915\";\n}\n.-icon-geolocation-line:before {\n\tcontent: \"\\\\e021\";\n}\n.-icon-calendar-full:before {\n\tcontent: \"\\\\e022\";\n}\n.-icon-calendar:before {\n\tcontent: \"\\\\e965\";\n}\n.-icon-voyeur-full:before {\n\tcontent: \"\\\\e81e\";\n}\n.-icon-voyeur-line:before {\n\tcontent: \"\\\\e023\";\n}\n.-icon-eyes-full:before {\n\tcontent: \"\\\\e024\";\n}\n.-icon-eyes-line:before {\n\tcontent: \"\\\\e913\";\n}\n.-icon-categorie-line:before {\n\tcontent: \"\\\\e949\";\n}\n.-icon-girl-full:before {\n\tcontent: \"\\\\e942\";\n}\n.-icon-heart-full:before {\n\tcontent: \"\\\\e917\";\n}\n.-icon-heart-line:before {\n\tcontent: \"\\\\e918\";\n}\n.-icon-user-full:before {\n\tcontent: \"\\\\e931\";\n}\n.-icon-vx-user-outline:before {\n\tcontent: \"\\\\e96b\";\n}\n.-icon-user-round-full:before {\n\tcontent: \"\\\\e025\";\n}\n.-icon-user-round-line:before {\n\tcontent: \"\\\\e026\";\n}\n.-icon-female-full:before {\n\tcontent: \"\\\\e029\";\n}\n.-icon-male-full:before {\n\tcontent: \"\\\\e030\";\n}\n.-icon-hetero-full:before {\n\tcontent: \"\\\\e031\";\n}\n.-icon-transgender-full:before {\n\tcontent: \"\\\\e032\";\n}\n.-icon-female-line:before {\n\tcontent: \"\\\\e94a\";\n}\n.-icon-male-line:before {\n\tcontent: \"\\\\e94c\";\n}\n.-icon-hetero-line:before {\n\tcontent: \"\\\\e94b\";\n}\n.-icon-transgender-line:before {\n\tcontent: \"\\\\e94d\";\n}\n.-icon-like-full:before {\n\tcontent: \"\\\\e97a\";\n}\n.-icon-like-line:before {\n\tcontent: \"\\\\e033\";\n}\n.-icon-unlike-full:before {\n\tcontent: \"\\\\e979\";\n}\n.-icon-unlike-line:before {\n\tcontent: \"\\\\e034\";\n}\n.-icon-sad-full:before {\n\tcontent: \"\\\\e035\";\n}\n.-icon-sad-line:before {\n\tcontent: \"\\\\e036\";\n}\n.-icon-smile-full:before {\n\tcontent: \"\\\\e924\";\n}\n.-icon-smile-line:before {\n\tcontent: \"\\\\e037\";\n}\n.-icon-star-full:before {\n\tcontent: \"\\\\e939\";\n}\n.-icon-star-line:before {\n\tcontent: \"\\\\e926\";\n}\n.-icon-star-half-full:before {\n\tcontent: \"\\\\e938\";\n}\n.-icon-star-round:before {\n\tcontent: \"\\\\e96e\";\n}\n.-icon-star-round-line:before {\n\tcontent: \"\\\\e038\";\n}\n.-icon-pin-full:before {\n\tcontent: \"\\\\e824\";\n}\n.-icon-pin-line:before {\n\tcontent: \"\\\\e825\";\n}\n.-icon-person-vip:before {\n\tcontent: \"\\\\e003\";\n}\n.-icon-person-vip-line:before {\n\tcontent: \"\\\\e039\";\n}\n.-icon-share-icon:before {\n\tcontent: \"\\\\e966\";\n}\n.-icon-reload:before {\n\tcontent: \"\\\\e959\";\n}\n.-icon-power-line:before {\n\tcontent: \"\\\\e921\";\n}\n.-icon-three-dots-full:before {\n\tcontent: \"\\\\e97c\";\n}\n.-icon-chat-flat:before {\n\tcontent: \"\\\\e908\";\n}\n.-icon-chat-flat-line:before {\n\tcontent: \"\\\\e041\";\n}\n.-icon-chat-full:before {\n\tcontent: \"\\\\e909\";\n}\n.-icon-chat-line:before {\n\tcontent: \"\\\\e042\";\n}\n.-icon-chatlist-full:before {\n\tcontent: \"\\\\e90c\";\n}\n.-icon-chatlist-line:before {\n\tcontent: \"\\\\e043\";\n}\n.-icon-chat-text-full:before {\n\tcontent: \"\\\\e90a\";\n}\n.-icon-chat-text-line:before {\n\tcontent: \"\\\\e90b\";\n}\n.-icon-webcam-single-full:before {\n\tcontent: \"\\\\e93c\";\n}\n.-icon-webcam-single-line:before {\n\tcontent: \"\\\\e046\";\n}\n.-icon-webcam-c2c-full:before {\n\tcontent: \"\\\\e927\";\n}\n.-icon-webcam-private-full:before {\n\tcontent: \"\\\\e81f\";\n}\n.-icon-round-support-full:before {\n\tcontent: \"\\\\e047\";\n}\n.-icon-support-line:before {\n\tcontent: \"\\\\e925\";\n}\n.-icon-faq-full:before {\n\tcontent: \"\\\\e92d\";\n}\n.-icon-faq-line:before {\n\tcontent: \"\\\\e048\";\n}\n.-icon-envelope-full:before {\n\tcontent: \"\\\\e944\";\n}\n.-icon-envelope-line:before {\n\tcontent: \"\\\\e943\";\n}\n.-icon-folder-full:before {\n\tcontent: \"\\\\e940\";\n}\n.-icon-folder-line:before {\n\tcontent: \"\\\\e049\";\n}\n.-icon-settings-full:before {\n\tcontent: \"\\\\e900\";\n}\n.-icon-settings-line:before {\n\tcontent: \"\\\\e050\";\n}\n.-icon-single-play-full:before {\n\tcontent: \"\\\\e051\";\n}\n.-icon-single-play-line:before {\n\tcontent: \"\\\\e052\";\n}\n.-icon-play-rounded-full:before {\n\tcontent: \"\\\\e91f\";\n}\n.-icon-play-rounded-line:before {\n\tcontent: \"\\\\e920\";\n}\n.-icon-mediathek:before {\n\tcontent: \"\\\\e95c\";\n}\n.-icon-medialibrary-line:before {\n\tcontent: \"\\\\e053\";\n}\n.-icon-play-full:before {\n\tcontent: \"\\\\e91d\";\n}\n.-icon-play-line:before {\n\tcontent: \"\\\\e91e\";\n}\n.-icon-videocamera:before {\n\tcontent: \"\\\\e970\";\n}\n.-icon-videocamera-line:before {\n\tcontent: \"\\\\e054\";\n}\n.-icon-video-play-full:before {\n\tcontent: \"\\\\e055\";\n}\n.-icon-video-play-line:before {\n\tcontent: \"\\\\e056\";\n}\n.-icon-videotake-full:before {\n\tcontent: \"\\\\e953\";\n}\n.-icon-videotake-line:before {\n\tcontent: \"\\\\e057\";\n}\n.-icon-videotake-play-line:before {\n\tcontent: \"\\\\e058\";\n}\n.-icon-videotake-play-full:before {\n\tcontent: \"\\\\e954\";\n}\n.-icon-fullscreen-close:before {\n\tcontent: \"\\\\e930\";\n}\n.-icon-fullscreen-open:before {\n\tcontent: \"\\\\e934\";\n}\n.-icon-fullscreen-player-close-full:before {\n\tcontent: \"\\\\e059\";\n}\n.-icon-fullscreen-player-close-line:before {\n\tcontent: \"\\\\e831\";\n}\n.-icon-fullscreen-player-open-full:before {\n\tcontent: \"\\\\e060\";\n}\n.-icon-fullscreen-player-open-line:before {\n\tcontent: \"\\\\e832\";\n}\n.-icon-speaker-full:before {\n\tcontent: \"\\\\e93a\";\n}\n.-icon-speaker-line:before {\n\tcontent: \"\\\\e061\";\n}\n.-icon-speaker-muted-full:before {\n\tcontent: \"\\\\e947\";\n}\n.-icon-speaker-muted-line:before {\n\tcontent: \"\\\\e062\";\n}\n.-icon-tv:before {\n\tcontent: \"\\\\e95e\";\n}\n.-icon-tv-full:before {\n\tcontent: \"\\\\e063\";\n}\n.-icon-tv-premium:before {\n\tcontent: \"\\\\e95d\";\n}\n.-icon-image-album-full:before {\n\tcontent: \"\\\\e808\";\n}\n.-icon-image-album-lite:before {\n\tcontent: \"\\\\e972\";\n}\n.-icon-image-full:before {\n\tcontent: \"\\\\e932\";\n}\n.-icon-image-line:before {\n\tcontent: \"\\\\e91a\";\n}\n.-icon-camera-full:before {\n\tcontent: \"\\\\e907\";\n}\n.-icon-camera-line:before {\n\tcontent: \"\\\\e064\";\n}\n.-icon-mobile-full:before {\n\tcontent: \"\\\\e95a\";\n}\n.-icon-mobile-line:before {\n\tcontent: \"\\\\e065\";\n}\n.-icon-mobile-send:before {\n\tcontent: \"\\\\e95b\";\n}\n.-icon-mobile-send-line:before {\n\tcontent: \"\\\\e066\";\n}\n.-icon-smartphone-full:before {\n\tcontent: \"\\\\e067\";\n}\n.-icon-smartphone-line:before {\n\tcontent: \"\\\\e068\";\n}\n.-icon-keylock_close:before {\n\tcontent: \"\\\\e94f\";\n}\n.-icon-keylock_close_line:before {\n\tcontent: \"\\\\e069\";\n}\n.-icon-keylock_open:before {\n\tcontent: \"\\\\e950\";\n}\n.-icon-keylock_open_line:before {\n\tcontent: \"\\\\e070\";\n}\n.-icon-archiv-full:before {\n\tcontent: \"\\\\e951\";\n}\n.-icon-archiv-line:before {\n\tcontent: \"\\\\e071\";\n}\n.-icon-note-full:before {\n\tcontent: \"\\\\e072\";\n}\n.-icon-note-line:before {\n\tcontent: \"\\\\e955\";\n}\n.-icon-pen-full:before {\n\tcontent: \"\\\\e816\";\n}\n.-icon-pen-lite:before {\n\tcontent: \"\\\\e073\";\n}\n.-icon-phone-full:before {\n\tcontent: \"\\\\e91b\";\n}\n.-icon-phone-line:before {\n\tcontent: \"\\\\e074\";\n}\n.-icon-trash-cancel-full:before {\n\tcontent: \"\\\\e94e\";\n}\n.-icon-trash-cancel-line:before {\n\tcontent: \"\\\\e075\";\n}\n.-icon-trash-full:before {\n\tcontent: \"\\\\e81d\";\n}\n.-icon-trash-empty:before {\n\tcontent: \"\\\\e964\";\n}\n.-icon-search-full:before {\n\tcontent: \"\\\\e923\";\n}\n.-icon-search-round-full:before {\n\tcontent: \"\\\\e076\";\n}\n.-icon-no-videos:before {\n\tcontent: \"\\\\e946\";\n}\n.-icon-image-album-full2:before {\n\tcontent: \"\\\\e945\";\n}\n.-icon-gift-full:before {\n\tcontent: \"\\\\e952\";\n}\n.-icon-gift-line:before {\n\tcontent: \"\\\\e901\";\n}\n.-icon-cart-full:before {\n\tcontent: \"\\\\e916\";\n}\n.-icon-cart-line:before {\n\tcontent: \"\\\\e077\";\n}\n.-icon-merchandise-sale-full:before {\n\tcontent: \"\\\\e973\";\n}\n.-icon-merchandise-sale-lite:before {\n\tcontent: \"\\\\e974\";\n}\n.-icon-videosale:before {\n\tcontent: \"\\\\e971\";\n}\n.-icon-videosale-line:before {\n\tcontent: \"\\\\e079\";\n}\n.-icon-voucher-icon-full:before {\n\tcontent: \"\\\\e080\";\n}\n.-icon-voucher-icon:before {\n\tcontent: \"\\\\e976\";\n}\n.-icon-round-social-facebook-full:before {\n\tcontent: \"\\\\e081\";\n}\n.-icon-round-social-instagram-full:before {\n\tcontent: \"\\\\e082\";\n}\n.-icon-round-social-snapchat-full:before {\n\tcontent: \"\\\\e083\";\n}\n.-icon-round-social-twitter-full:before {\n\tcontent: \"\\\\e084\";\n}\n.-icon-round-social-whatsapp-full:before {\n\tcontent: \"\\\\e085\";\n}\n.-icon-social-facebook:before {\n\tcontent: \"\\\\e958\";\n}\n.-icon-social-snapchat:before {\n\tcontent: \"\\\\e960\";\n}\n.-icon-social-twitter:before {\n\tcontent: \"\\\\e956\";\n}\n.-icon-social-facebook-line:before {\n\tcontent: \"\\\\e086\";\n}\n.-icon-social-instagram:before {\n\tcontent: \"\\\\e957\";\n}\n.-icon-social-snapchat-line:before {\n\tcontent: \"\\\\e087\";\n}\n.-icon-social-twitter-line:before {\n\tcontent: \"\\\\e088\";\n}\n.-icon-social-whatsapp:before {\n\tcontent: \"\\\\e922\";\n}\n.-icon-toy-control:before {\n\tcontent: \"\\\\e93b\";\n}\n.-icon-toy-control-vibrating:before {\n\tcontent: \"\\\\e97b\";\n}\n.-icon-visitx-logo-line:before {\n\tcontent: \"\\\\e962\";\n}\n.-icon-visitx-logo-single:before {\n\tcontent: \"\\\\e961\";\n}\n.-icon-visitx-logo-vertical:before {\n\tcontent: \"\\\\e089\";\n}\n.-icon-vx-fetish-messenger:before {\n\tcontent: \"\\\\e969\";\n}\n.-icon-vx-summer-messenger-full:before {\n\tcontent: \"\\\\e090\";\n}\n.-icon-vx-summer-messenger:before {\n\tcontent: \"\\\\e96a\";\n}\n.-icon-vx-winter-messenger:before {\n\tcontent: \"\\\\e96c\";\n}\n.-icon-exit-cinema-mode-line:before {\n\tcontent: \"\\\\e97e\";\n}\n.-icon-cinema-mode-line:before {\n\tcontent: \"\\\\e97f\";\n}\n.-icon-load-10min-forward-line:before {\n\tcontent: \"\\\\e980\";\n}\n.-icon-load-10min-backward-line:before {\n\tcontent: \"\\\\e981\";\n}\n.-icon-share-icon-line:before {\n\tcontent: \"\\\\e928\";\n}\n.-icon-pause-full:before {\n\tcontent: \"\\\\e92e\";\n}\n.-icon-fullscreen-weight-player-open-line:before {\n\tcontent: \"\\\\e93f\";\n}\n.-icon-fullscreen-weight-player-close-line:before {\n\tcontent: \"\\\\e968\";\n}\n.-icon-fullscreen-height-player-open-line:before {\n\tcontent: \"\\\\e97d\";\n}\n.-icon-fullscreen-height-player-close-line:before {\n\tcontent: \"\\\\e982\";\n}\n.-icon-smarttv-line:before {\n\tcontent: \"\\\\e983\";\n}\n.-icon-smarttv-full:before {\n\tcontent: \"\\\\e984\";\n}\n.-icon-sort-line:before {\n\tcontent: \"\\\\e985\";\n}\n.-icon-home-full:before {\n\tcontent: \"\\\\e986\";\n}\n.-icon-home-line:before {\n\tcontent: \"\\\\e987\";\n}\n.-icon-voice-recording-line:before {\n\tcontent: \"\\\\e988\";\n}\n.-icon-voice-recording-full:before {\n\tcontent: \"\\\\e989\";\n}\n.-icon-voice-recording-muted-full:before {\n\tcontent: \"\\\\e98a\";\n}\n.-icon-voice-recording-muted-line:before {\n\tcontent: \"\\\\e98b\";\n}\n.-icon-send-chat-line:before {\n\tcontent: \"\\\\e98c\";\n}\n.-icon-send-chat-full:before {\n\tcontent: \"\\\\e98d\";\n}\n.-icon-smartphone-frontcam-full:before {\n\tcontent: \"\\\\e98f\";\n}\n.-icon-load-15sec-forward-line”’:before {\n\tcontent: \"\\\\e990\";\n}\n.-icon-load-15sec-backward-line”’:before {\n\tcontent: \"\\\\e991\";\n}\n.-icon-group-livechat-full:before {\n\tcontent: \"\\\\e992\";\n}\n.-icon-group-livechat-line”’:before {\n\tcontent: \"\\\\e993\";\n}\n.-icon-hotlive-full:before {\n\tcontent: \"\\\\e994\";\n}\n.-icon-hotlive-line”’:before {\n\tcontent: \"\\\\e995\";\n}\n.-icon-font-size-hover-big:before {\n\tcontent: \"\\\\e996\";\n}\n.-icon-font-size-hover-small:before {\n\tcontent: \"\\\\e997\";\n}\n`;\n\nexport default vxIcons;\n","import styled from \"styled-components\";\n\ninterface IVersionBoxProps {\n    className? : string;\n}\n\nexport const VersionBox = styled.div.attrs({ className: 'version-box' })<IVersionBoxProps>`\n    ${props => `\n        font-family: ${props.theme.typography.fontFamily};\n        font-weight: ${props.theme.typography.weight.bold};\n    `}\n    \n    width: 100px;\n    height: 50px;\n    position: absolute;\n    z-index: 1;\n    display: flex;\n    text-align: center;\n    justify-content: center;\n    flex-direction: column;\n    border-radius: 5px;\n    opacity: 1;\n    transition: opacity .5s ease-in-out;\n    \n    color: white;\n    background: black;\n    \n    &.hidden {\n        opacity: 0;\n    }\n`;","import * as React from 'react';\nimport { VersionBox as VersionBoxWrapper } from './style';\n\nexport interface IVersionBoxProps {\n    isVersionOpen: boolean;\n    version: string;\n}\n\nconst VersionBox = (props: IVersionBoxProps) => (\n    <VersionBoxWrapper className={!props.isVersionOpen ? 'hidden' : ''}>\n        {props.version}\n    </VersionBoxWrapper>\n);\n\nexport default VersionBox;","import moment from \"moment\";\nimport { produce } from \"immer\";\nimport { AnyAction } from \"redux\";\nimport { Action, handleActions } from \"redux-actions\";\nimport { filter, find, includes, isEqual, map, remove, uniqBy } from \"lodash\";\n\nimport { createAction, createActionType } from \"../utils\";\nimport { RESET_STORE } from \"./app\";\nimport { getInitialInstanceData } from \"../initialStore\";\nimport {\n\tAnswerType,\n\tIActionResponse,\n\tICountdownWarning,\n\tIEmoticon,\n\tIGroupChatColor,\n\tIMessage,\n\tIMessenger,\n\tIModalContent,\n\tIQuestion,\n\tIStoredEditorState,\n\tIToyOption,\n\tLoadingStatus,\n\tQuestionType\n} from \"../store\";\nimport { ActionIds } from \"../interfaces\";\n\nexport interface IImageLoadedPayload {\n\tmessageKey: string;\n\timgSrc: string;\n\timgSrcSet?: string;\n\timgWidth?: string;\n\timgHeight?: string;\n}\n\nexport interface IAnswerUserPromptPayload {\n\tquestion: IQuestion;\n\tanswer: AnswerType;\n}\n\nexport interface ISetHasTooltipPayload {\n\tid: number;\n\thasTooltip: boolean;\n}\n\nconst createMessengerActionType = createActionType(ActionIds.MESSENGER, { isReduxAction: true });\n\n// Actions for isOpen\nexport const OPEN_MESSENGER = createMessengerActionType(\"OPEN_MESSENGER\");\nexport const CLOSE_MESSENGER = createMessengerActionType(\"CLOSE_MESSENGER\");\n\n// Actions for audio message\nexport const SET_SHOULD_SEND_MESSAGE = createMessengerActionType(\"SET_SHOULD_SEND_MESSAGE\");\nexport const SET_SECONDS_ELAPSED = createMessengerActionType(\"SET_SECONDS_ELAPSED\");\nexport const SET_IS_RECORDING_AUDIO_MESSAGE = createMessengerActionType(\"SET_IS_RECORDING_AUDIO_MESSAGE\");\nexport const SET_IS_MIC_ENABLED = createMessengerActionType(\"SET_IS_MIC_ENABLED\");\n\n// Actions for messages\nexport const ADD_MESSAGE = createMessengerActionType(\"ADD_MESSAGE\");\nexport const INSERT_ALL_MESSAGES = createMessengerActionType(\"INSERT_ALL_MESSAGES\");\nexport const UPDATE_MESSAGE = createMessengerActionType(\"UPDATE_MESSAGE\");\nexport const REMOVE_ALL_MESSAGES = createMessengerActionType(\"REMOVE_ALL_MESSAGES\");\nexport const REMOVE_MESSAGE = createMessengerActionType(\"REMOVE_MESSAGE\");\nexport const UPDATE_IMAGE_MESSAGE_WHEN_LOADED = createMessengerActionType(\"UPDATE_IMAGE_MESSAGE_WHEN_LOADED\");\n\n// Actions for failed messages\nexport const ADD_FAILED_MESSAGE = createMessengerActionType(\"ADD_FAILED_MESSAGE\");\nexport const CLEAR_FAILED_MESSAGES = createMessengerActionType(\"CLEAR_FAILED_MESSAGES\");\nexport const SET_SHOULD_RESEND_FAILED_MESSAGES = createMessengerActionType(\"SET_SHOULD_RESEND_FAILED_MESSAGES\");\n\n// Actions for symbols\nexport const SET_ACTIVE_GIFT = createMessengerActionType(\"SET_ACTIVE_GIFT\");\nexport const SET_ACTIVE_EMOTICON = createMessengerActionType(\"SET_ACTIVE_EMOTICON\");\nexport const SET_ACTIVE_MENTION = createMessengerActionType(\"SET_ACTIVE_MENTION\");\nexport const SET_FOCUSED_MENTION_OPTION = createMessengerActionType(\"SET_FOCUSED_MENTION_OPTION\");\nexport const RESET_FOCUSED_MENTION_OPTION = createMessengerActionType(\"RESET_FOCUSED_MENTION_OPTION\");\nexport const RESET_SYMBOLS = createMessengerActionType(\"RESET_SYMBOLS\");\n\n// Actions for emoticons\nexport const SET_EMOTICONS = createMessengerActionType(\"SET_EMOTICONS\");\n\n// Actions for isTextEnabled\nconst SET_IS_TEXT_ENABLED = createMessengerActionType(\"SET_IS_TEXT_ENABLED\");\n\n// Actions for modelContent\nexport const SET_MODAL_CONTENT = createMessengerActionType(\"SET_MODAL_CONTENT\");\nexport const RESET_MODAL_CONTENT = createMessengerActionType(\"RESET_MODAL_CONTENT\");\n\n// Actions for actionResponse\nexport const SET_ACTION_RESPONSE = createMessengerActionType(\"SET_ACTION_RESPONSE\");\nexport const RESET_ACTION_RESPONSE = createMessengerActionType(\"RESET_ACTION_RESPONSE\");\n\n// Actions for isResponsive\nexport const SET_IS_RESPONSIVE = createMessengerActionType(\"SET_IS_RESPONSIVE\");\n\n// Actions for contactNote\nexport const OPEN_CONTACT_NOTE = createMessengerActionType(\"OPEN_CONTACT_NOTE\");\nconst CLOSE_CONTACT_NOTE = createMessengerActionType(\"CLOSE_CONTACT_NOTE\");\nconst SET_CONTACT_NOTE = createMessengerActionType(\"SET_CONTACT_NOTE\");\nconst RESET_CONTACT_NOTE = createMessengerActionType(\"RESET_CONTACT_NOTE\");\n\n// Actions for windowToggleState\nexport const OPEN_EMOTICON_SECTION = createMessengerActionType(\"OPEN_EMOTICON_SECTION\");\nexport const CLOSE_EMOTICON_SECTION = createMessengerActionType(\"CLOSE_EMOTICON_SECTION\");\n\nexport const OPEN_GIFT_SECTION = createMessengerActionType(\"OPEN_GIFT_SECTION\");\nexport const CLOSE_GIFT_SECTION = createMessengerActionType(\"CLOSE_GIFT_SECTION\");\n\nexport const OPEN_TOY_SECTION = createMessengerActionType(\"OPEN_TOY_SECTION\");\nexport const CLOSE_TOY_SECTION = createMessengerActionType(\"CLOSE_TOY_SECTION\");\nexport const TOGGLE_TOY_SECTION = createMessengerActionType(\"TOGGLE_TOY_SECTION\");\n\nexport const OPEN_MENTION_SECTION = createMessengerActionType(\"OPEN_MENTION_SECTION\");\nexport const CLOSE_MENTION_SECTION = createMessengerActionType(\"CLOSE_MENTION_SECTION\");\nexport const ADD_MENTION = createMessengerActionType(\"ADD_MENTION\");\n\nexport const OPEN_USER_PROMPT_SECTION = createMessengerActionType(\"OPEN_USER_PROMPT_SECTION\");\nexport const CLOSE_USER_PROMPT_SECTION = createMessengerActionType(\"CLOSE_USER_PROMPT_SECTION\");\nexport const RESET_USER_PROMPTS = createMessengerActionType(\"RESET_USER_PROMPTS\");\nexport const ANSWER_USER_PROMPT_SECTION = createMessengerActionType(\"ANSWER_USER_PROMPT_SECTION\");\n\nexport const OPEN_COUNTDOWN_WARNING = createMessengerActionType(\"OPEN_COUNTDOWN_WARNING\");\nexport const CLOSE_COUNTDOWN_WARNING = createMessengerActionType(\"CLOSE_COUNTDOWN_WARNING\");\n\nexport const CLOSE_SECTIONS = createMessengerActionType(\"CLOSE_SECTIONS\");\nexport const TOGGLE_DROP_DOWN = createMessengerActionType(\"TOGGLE_DROP_DOWN\");\nexport const CLOSE_DROP_DOWN = createMessengerActionType(\"CLOSE_DROP_DOWN\");\n\nexport const SET_MESSENGER_LOADING_STATUS = createMessengerActionType(\"SET_MESSENGER_LOADING_STATUS\");\n\n// Actions for hasEditor\nconst SET_HAS_EDITOR = createMessengerActionType(\"SET_HAS_EDITOR\");\n\n// Actions for Version Box\nexport const OPEN_VERSION = createMessengerActionType(\"OPEN_VERSION\");\nexport const CLOSE_VERSION = createMessengerActionType(\"CLOSE_VERSION\");\n\n// Actions for editor's state\nexport const SET_STORED_EDITOR_STATE = createMessengerActionType(\"SET_STORED_EDITOR_STATE\");\n\n// Actions for Image Uploader\nexport const REQUEST_IMAGE_UPLOAD = createMessengerActionType(\"REQUEST_IMAGE_UPLOAD\");\nexport const RESET_IMAGE_UPLOAD_STATUS = createMessengerActionType(\"RESET_IMAGE_UPLOAD_STATUS\");\n\nconst CLOSE_LOAD_ACCOUNT_USER_PROMPTS = createMessengerActionType(\"CLOSE_LOAD_ACCOUNT_USER_PROMPTS\");\n\n// Actions for toy control feature\nexport const ACTIVATE_TOY_OPTION = createMessengerActionType(\"ACTIVATE_TOY_OPTION\");\nconst SET_TOY_OPTIONS = createMessengerActionType(\"SET_TOY_OPTIONS\");\nconst INACTIVATE_TOY_OPTION = createMessengerActionType(\"INACTIVATE_TOY_OPTION\");\nconst INACTIVATE_TOY_MESSAGE = createMessengerActionType(\"INACTIVATE_TOY_MESSAGE\");\nconst SET_HAS_TOOLTIP_OPEN = createMessengerActionType(\"SET_HAS_TOOLTIP_OPEN\");\nconst CLOSE_TOY_OPTION_TOOLTIP = createMessengerActionType(\"CLOSE_TOY_OPTION_TOOLTIP\");\n\nconst SET_GROUP_CHAT_COLORS = createMessengerActionType(\"SET_GROUP_CHAT_COLORS\");\n\nconst SET_MENTION_QUERY = createMessengerActionType(\"SET_MENTION_QUERY\");\nconst RESET_EDITOR_STATE = createMessengerActionType(\"RESET_EDITOR_STATE\");\n\n// Action Creators\nexport const openMessenger = createAction(OPEN_MESSENGER);\nexport const closeMessenger = createAction(CLOSE_MESSENGER);\nexport const addMessage = createAction<IMessage>(ADD_MESSAGE);\n\nexport const setMentionQuery = createAction<string>(SET_MENTION_QUERY);\n\n/**\n * Stop the loading animation and update the id from the database\n * @param messageKey message's id from the database\n * @param imgSrc message's imgSrc from the database\n */\nexport const updateImageMessageWhenLoaded = createAction<IImageLoadedPayload>(UPDATE_IMAGE_MESSAGE_WHEN_LOADED);\n\n/**\n * DON'T USE THIS ACTION CREATOR - use insertAllMessagesToStore, which\n * will apply some intermediate formatting before adding to store.\n * @param payload\n */\nexport const insertAllMessages = createAction<IMessage[]>(INSERT_ALL_MESSAGES);\nexport const removeAllMessages = createAction(REMOVE_ALL_MESSAGES);\nexport const updateMessage = createAction<IMessage>(UPDATE_MESSAGE);\nexport const removeMessage = createAction<string>(REMOVE_MESSAGE);\n\n// Action Creators for audio messages\nexport const setShouldSendMessage = createAction<boolean>(SET_SHOULD_SEND_MESSAGE);\nexport const setSecondsElapsed = createAction<number>(SET_SECONDS_ELAPSED);\nexport const setIsRecordingAudioMessage = createAction<boolean>(SET_IS_RECORDING_AUDIO_MESSAGE);\nexport const setIsMicEnabled = createAction<boolean>(SET_IS_MIC_ENABLED);\n\n// Action Creators for failed messages\nexport const addFailedMessage = createAction<string>(ADD_FAILED_MESSAGE);\nexport const clearFailedMessages = createAction(CLEAR_FAILED_MESSAGES);\nexport const setShouldResendFailedMessages = createAction<boolean>(SET_SHOULD_RESEND_FAILED_MESSAGES);\n\nexport const setEmoticons = createAction<IEmoticon[]>(SET_EMOTICONS);\n\n// Action Creators for isTextEnabled\nexport const setIsTextEnabled = createAction<boolean>(SET_IS_TEXT_ENABLED);\n\n// Action Creators for modalContent\nexport const setModalContent = createAction<IModalContent>(SET_MODAL_CONTENT);\nexport const resetModalContent = createAction(RESET_MODAL_CONTENT);\n\n// Action Creators for actionResponse\nexport const setActionResponse = createAction<IActionResponse>(SET_ACTION_RESPONSE);\nexport const resetActionResponse = createAction(RESET_ACTION_RESPONSE);\n\n// Action Creators for contactNote\nexport const openContactNote = createAction(OPEN_CONTACT_NOTE);\nexport const closeContactNote = createAction(CLOSE_CONTACT_NOTE);\nexport const setContactNote = createAction<string>(SET_CONTACT_NOTE);\nexport const resetContactNote = createAction(RESET_CONTACT_NOTE);\n\n// Action Creators for windowToggleState\nexport const openEmoticonSection = createAction(OPEN_EMOTICON_SECTION);\nexport const closeEmoticonSection = createAction(CLOSE_EMOTICON_SECTION);\n\nexport const openGiftSection = createAction(OPEN_GIFT_SECTION);\nexport const closeGiftSection = createAction(CLOSE_GIFT_SECTION);\n\nexport const toggleToySection = createAction(TOGGLE_TOY_SECTION);\nexport const openToySection = createAction(OPEN_TOY_SECTION);\nexport const closeToySection = createAction(CLOSE_TOY_SECTION);\n\nexport const openMentionSection = createAction(OPEN_MENTION_SECTION);\nexport const closeMentionSection = createAction(CLOSE_MENTION_SECTION);\nexport const addMention = createAction(ADD_MENTION);\n\nexport const toggleDropDown = createAction(TOGGLE_DROP_DOWN);\nexport const closeDropDown = createAction(CLOSE_DROP_DOWN);\n\nexport const openUserPromptSection = createAction<IQuestion>(OPEN_USER_PROMPT_SECTION);\nexport const closeUserPromptSection = createAction<QuestionType>(CLOSE_USER_PROMPT_SECTION);\nexport const openCountdownWarning = createAction<ICountdownWarning>(OPEN_COUNTDOWN_WARNING);\nexport const closeCountdownWarning = createAction(CLOSE_COUNTDOWN_WARNING);\nexport const resetUserPrompts = createAction(RESET_USER_PROMPTS);\n\nexport const answerUserPromptSection = createAction<IAnswerUserPromptPayload>(ANSWER_USER_PROMPT_SECTION);\n\nexport const closeSections = createAction(CLOSE_SECTIONS);\nexport const setMessengerLoadingStatus = createAction<LoadingStatus>(SET_MESSENGER_LOADING_STATUS);\n\n// Action Creators for hasEditor\nexport const setHasEditor = createAction<boolean>(SET_HAS_EDITOR);\n\nexport const setIsResponsive = createAction<boolean>(SET_IS_RESPONSIVE);\n\n// Action Creators for Version Box\nexport const openVersion = createAction(OPEN_VERSION);\nexport const closeVersion = createAction(CLOSE_VERSION);\n\n// Action Creator for stored Editor's state\nexport const setActiveGift = createAction<string>(SET_ACTIVE_GIFT);\nexport const setActiveEmoticon = createAction<string>(SET_ACTIVE_EMOTICON);\nexport const setActiveMention = createAction<string>(SET_ACTIVE_MENTION);\nexport const setFocusedMentionOption = createAction<string>(SET_FOCUSED_MENTION_OPTION);\nexport const resetFocusedMentionOption = createAction<string>(RESET_FOCUSED_MENTION_OPTION);\nexport const resetSymbols = createAction(RESET_SYMBOLS);\nexport const setStoredEditorState = createAction<IStoredEditorState>(SET_STORED_EDITOR_STATE);\n\n// Action Creators for image upload\nexport const requestImageUpload = createAction(REQUEST_IMAGE_UPLOAD);\nexport const resetImageUploadStatus = createAction(RESET_IMAGE_UPLOAD_STATUS);\nexport const closeLoadAccountUserPrompts = createAction(CLOSE_LOAD_ACCOUNT_USER_PROMPTS);\n\n// Action Creators for toys\nexport const setToyOptions = createAction<IToyOption[]>(SET_TOY_OPTIONS);\nexport const activateToyOption = createAction<number>(ACTIVATE_TOY_OPTION);\nexport const inactivateToyOption = createAction(INACTIVATE_TOY_OPTION);\nexport const inactivateToyMessage = createAction<string>(INACTIVATE_TOY_MESSAGE);\n\nexport const setHasTooltipOpen = createAction<ISetHasTooltipPayload>(SET_HAS_TOOLTIP_OPEN);\n\nexport const closeToyOptionTooltip = createAction(CLOSE_TOY_OPTION_TOOLTIP);\n\nexport const setGroupChatColors = createAction<IGroupChatColor[]>(SET_GROUP_CHAT_COLORS);\n\nexport const resetEditorState = createAction(RESET_EDITOR_STATE);\n\n// Reducer\nconst messenger = handleActions({\n\t[RESET_STORE]: (state: IMessenger, action: AnyAction) => getInitialInstanceData().messenger,\n\n\t[RESET_EDITOR_STATE]: produce((draft: IMessenger, action: AnyAction) => {\n\t\tdraft.editorState = getInitialInstanceData().messenger.editorState;\n\t}),\n\n\t[OPEN_MESSENGER]: produce((draft: IMessenger, action: AnyAction) => {\n\t\tdraft.isOpen = true;\n\t}),\n\n\t[CLOSE_MESSENGER]: produce((draft: IMessenger, action: AnyAction) => {\n\t\tdraft.isOpen = false;\n\t}),\n\n\t[ADD_MESSAGE]: produce((draft: IMessenger, { payload }: Action<IMessage>) => {\n\t\t// Update the value for colors if this is a group chat message\n\t\tif (payload.usernameColor) {\n\t\t\tconst color = find(draft.groupChatColors,\n\t\t\t\tgroupColor => isEqual(groupColor.color, payload.usernameColor)\n\t\t\t);\n\n\t\t\tif (color && payload.username) {\n\t\t\t\tconst alreadyHasUser = find(color.users, user => isEqual(user, payload.username));\n\n\t\t\t\tif (!alreadyHasUser) {\n\t\t\t\t\tcolor.users.push(payload.username);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tdraft.messages.push(payload);\n\t}),\n\n\t[UPDATE_MESSAGE]: produce((draft: IMessenger, { payload }: Action<IMessage>) => {\n\t\tdraft.messages = map(draft.messages,\n\t\t\t(message: IMessage) => message.messageKey === payload.messageKey ? payload : message\n\t\t);\n\t}),\n\n\t[UPDATE_IMAGE_MESSAGE_WHEN_LOADED]: produce((draft: IMessenger, { payload }: Action<IImageLoadedPayload>) => {\n\t\tconst { messageKey, imgSrc, imgSrcSet, imgWidth, imgHeight } = payload;\n\n\t\tdraft.messages = map(draft.messages, (message: IMessage) =>\n\t\t\tmessage.isOnLoading\n\t\t\t\t? {\n\t\t\t\t\t...message,\n\t\t\t\t\tmessageKey,\n\t\t\t\t\tcontent: imgSrc,\n\t\t\t\t\tisOnLoading: false,\n\t\t\t\t\tmodalContent: {\n\t\t\t\t\t\timgSrc,\n\t\t\t\t\t\timgSrcSet,\n\t\t\t\t\t\timgWidth,\n\t\t\t\t\t\timgHeight\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t: message\n\t\t);\n\t}),\n\n\t[INSERT_ALL_MESSAGES]: produce((draft: IMessenger, { payload }: Action<IMessage[]>) => {\n\t\tdraft.messages.unshift(...payload);\n\t}),\n\n\t[REMOVE_ALL_MESSAGES]: produce((draft: IMessenger, action: AnyAction) => {\n\t\tremove(draft.messages);\n\t}),\n\n\t[REMOVE_MESSAGE]: produce((draft: IMessenger, { payload }: Action<string>) => {\n\t\tdraft.messages = filter(draft.messages,\n\t\t\t(message: IMessage) => message.messageKey !== payload\n\t\t);\n\t}),\n\n\t[ADD_FAILED_MESSAGE]: produce((draft: IMessenger, { payload: text }: Action<string>) => {\n\t\tdraft.failedMessages.push(text);\n\t}),\n\n\t[CLEAR_FAILED_MESSAGES]: produce((draft: IMessenger) => {\n\t\tdraft.failedMessages = [];\n\t}),\n\n\t[SET_SHOULD_RESEND_FAILED_MESSAGES]: produce((draft: IMessenger, { payload: shouldResend }: Action<boolean>) => {\n\t\tdraft.shouldResendFailedMessages = shouldResend;\n\t}),\n\n\t[SET_EMOTICONS]: produce((draft: IMessenger, { payload }: Action<IEmoticon[]>) => {\n\t\tdraft.emoticons = payload;\n\t}),\n\n\t[SET_IS_TEXT_ENABLED]: produce((draft: IMessenger, { payload }: Action<boolean>) => {\n\t\tdraft.isTextEnabled = payload;\n\t}),\n\n\t[SET_MODAL_CONTENT]: produce((draft: IMessenger, { payload }: Action<IModalContent>) => {\n\t\tdraft.modalContent = payload;\n\t}),\n\n\t[RESET_MODAL_CONTENT]: produce((draft: IMessenger, action: AnyAction) => {\n\t\tdraft.modalContent = getInitialInstanceData().messenger.modalContent;\n\t}),\n\n\t[SET_ACTION_RESPONSE]: produce((draft: IMessenger, { payload }: Action<IActionResponse>) => {\n\t\tdraft.actionResponse = payload;\n\t}),\n\n\t[RESET_ACTION_RESPONSE]: produce((draft: IMessenger, action: AnyAction) => {\n\t\tdraft.actionResponse = getInitialInstanceData().messenger.actionResponse;\n\t}),\n\n\t[OPEN_CONTACT_NOTE]: produce((draft: IMessenger, action: AnyAction) => {\n\t\tdraft.contactNote.isOpen = true;\n\t}),\n\n\t[CLOSE_CONTACT_NOTE]: produce((draft: IMessenger, action: AnyAction) => {\n\t\tdraft.contactNote.isOpen = false;\n\t}),\n\n\t[SET_CONTACT_NOTE]: produce((draft: IMessenger, { payload }: Action<string>) => {\n\t\tdraft.contactNote.text = payload;\n\t}),\n\n\t[RESET_CONTACT_NOTE]: produce((draft: IMessenger, action: AnyAction) => {\n\t\tdraft.contactNote = getInitialInstanceData().messenger.contactNote;\n\t}),\n\n\t[OPEN_EMOTICON_SECTION]: produce((draft: IMessenger, action: AnyAction) => {\n\t\tdraft.windowToggleState = {\n\t\t\t...draft.windowToggleState,\n\t\t\tisEmoticonSectionOpen: true,\n\t\t\tisGiftSectionOpen: false,\n\t\t\tisToySectionOpen: false,\n\t\t\tuserPrompts: getInitialInstanceData().messenger.windowToggleState.userPrompts\n\t\t};\n\n\t\tif (draft.shouldDisplayCustomMentionSection) {\n\t\t\tdraft.isMentionSectionOpen = false;\n\t\t}\n\t}),\n\n\t[CLOSE_EMOTICON_SECTION]: produce((draft: IMessenger, action: AnyAction) => {\n\t\tdraft.windowToggleState.isEmoticonSectionOpen = false;\n\t}),\n\n\t[OPEN_TOY_SECTION]: produce((draft: IMessenger, action: AnyAction) => {\n\t\tdraft.windowToggleState = {\n\t\t\t...draft.windowToggleState,\n\t\t\tisToySectionOpen: true,\n\t\t\tisGiftSectionOpen: false,\n\t\t\tisEmoticonSectionOpen: false,\n\t\t\tuserPrompts: getInitialInstanceData().messenger.windowToggleState.userPrompts\n\t\t};\n\n\t\tif (draft.shouldDisplayCustomMentionSection) {\n\t\t\tdraft.isMentionSectionOpen = false;\n\t\t}\n\t}),\n\n\t[CLOSE_TOY_SECTION]: produce((draft: IMessenger, action: AnyAction) => {\n\t\tdraft.windowToggleState.isToySectionOpen = false;\n\n\t\tif (draft.isResponsive) {\n\t\t\tdraft.windowToggleState.isDropDownOpen = false;\n\t\t}\n\t}),\n\n\t[TOGGLE_TOY_SECTION]: produce((draft: IMessenger, action: AnyAction) => {\n\t\tdraft.windowToggleState.isToySectionOpen = !draft.windowToggleState.isToySectionOpen;\n\n\t\tif (draft.windowToggleState.isToySectionOpen) {\n\t\t\tdraft.windowToggleState.isEmoticonSectionOpen = false;\n\t\t\tdraft.windowToggleState.isGiftSectionOpen = false;\n\t\t\tdraft.windowToggleState.userPrompts = getInitialInstanceData().messenger.windowToggleState.userPrompts;\n\t\t}\n\t}),\n\n\t[CLOSE_SECTIONS]: produce((draft: IMessenger, action: AnyAction) => {\n\t\tdraft.windowToggleState = {\n\t\t\t...draft.windowToggleState,\n\t\t\tisEmoticonSectionOpen: false,\n\t\t\tisGiftSectionOpen: false,\n\t\t\tisToySectionOpen: false,\n\t\t\tisDropDownOpen: false\n\t\t};\n\n\t\tif (draft.shouldDisplayCustomMentionSection) {\n\t\t\tdraft.isMentionSectionOpen = false;\n\t\t}\n\t}),\n\n\t[OPEN_GIFT_SECTION]: produce((draft: IMessenger, action: AnyAction) => {\n\t\tdraft.windowToggleState = {\n\t\t\t...draft.windowToggleState,\n\t\t\tisGiftSectionOpen: true,\n\t\t\tisToySectionOpen: false,\n\t\t\tisEmoticonSectionOpen: false,\n\t\t\tuserPrompts: getInitialInstanceData().messenger.windowToggleState.userPrompts\n\t\t};\n\n\t\tif (draft.shouldDisplayCustomMentionSection) {\n\t\t\tdraft.isMentionSectionOpen = false;\n\t\t}\n\t}),\n\n\t[TOGGLE_DROP_DOWN]: produce((draft: IMessenger, action: AnyAction) => {\n\t\tdraft.windowToggleState.isDropDownOpen = !draft.windowToggleState.isDropDownOpen;\n\t}),\n\n\t[CLOSE_DROP_DOWN]: produce((draft: IMessenger, action: AnyAction) => {\n\t\tdraft.windowToggleState.isDropDownOpen = false;\n\t}),\n\n\t[CLOSE_GIFT_SECTION]: produce((draft: IMessenger, action: AnyAction) => {\n\t\tdraft.windowToggleState.isGiftSectionOpen = false;\n\t}),\n\n\t[OPEN_USER_PROMPT_SECTION]: produce((draft: IMessenger, { payload }: Action<IQuestion>) => {\n\t\tif (draft.isResponsive) {\n\t\t\tdraft.windowToggleState.userPrompts = uniqBy(\n\t\t\t\tdraft.windowToggleState.userPrompts.concat(payload),\n\t\t\t\t(item: IQuestion) => item.type\n\t\t\t);\n\t\t} else {\n\t\t\tconst { userPrompts } = getInitialInstanceData().messenger.windowToggleState;\n\t\t\tdraft.windowToggleState.isGiftSectionOpen = false;\n\t\t\tdraft.windowToggleState.isEmoticonSectionOpen = false;\n\t\t\tdraft.windowToggleState.userPrompts = userPrompts.concat(payload)\n\t\t}\n\n\t\tif (draft.shouldDisplayCustomMentionSection) {\n\t\t\tdraft.isMentionSectionOpen = false;\n\t\t}\n\t}),\n\n\t[CLOSE_USER_PROMPT_SECTION]: produce((draft: IMessenger, { payload }: Action<QuestionType>) => {\n\t\tdraft.windowToggleState.userPrompts = filter(\n\t\t\tdraft.windowToggleState.userPrompts,\n\t\t\t(item: IQuestion) => item.type !== payload\n\t\t);\n\t}),\n\n\t[RESET_USER_PROMPTS]: produce((draft: IMessenger, action: AnyAction) => {\n\t\tdraft.windowToggleState.userPrompts = getInitialInstanceData().messenger.windowToggleState.userPrompts;\n\t}),\n\n\t[OPEN_COUNTDOWN_WARNING]: produce((draft: IMessenger, { payload }: Action<ICountdownWarning>) => {\n\t\tdraft.windowToggleState.countdownWarning = payload;\n\t}),\n\n\t[CLOSE_COUNTDOWN_WARNING]: produce((draft: IMessenger, action: AnyAction) => {\n\t\tdraft.windowToggleState.countdownWarning = getInitialInstanceData().messenger.windowToggleState.countdownWarning;\n\t}),\n\n\t[OPEN_VERSION]: produce((draft: IMessenger, action: AnyAction) => {\n\t\tdraft.windowToggleState.isVersionOpen = true;\n\t}),\n\n\t[CLOSE_VERSION]: produce((draft: IMessenger, action: AnyAction) => {\n\t\tdraft.windowToggleState.isVersionOpen = false;\n\t}),\n\n\t[SET_MESSENGER_LOADING_STATUS]: produce((draft: IMessenger, { payload }: Action<LoadingStatus>) => {\n\t\tdraft.loadingStatus = payload;\n\t}),\n\n\t[SET_HAS_EDITOR]: produce((draft: IMessenger, { payload }: Action<boolean>) => {\n\t\tdraft.hasEditor = payload;\n\t}),\n\n\t[SET_ACTIVE_GIFT]: produce((draft: IMessenger, { payload }: Action<string>) => {\n\t\tdraft.activeSymbols.gift = payload;\n\t}),\n\n\t[SET_ACTIVE_EMOTICON]: produce((draft: IMessenger, { payload }: Action<string>) => {\n\t\tdraft.activeSymbols.emoticon = payload;\n\t}),\n\n\t[SET_ACTIVE_MENTION]: produce((draft: IMessenger, { payload }: Action<string>) => {\n\t\tdraft.activeSymbols.mention = payload;\n\t}),\n\n\t[SET_FOCUSED_MENTION_OPTION]: produce((draft: IMessenger, { payload }: Action<string>) => {\n\t\tdraft.focusedMentionOption = payload;\n\t}),\n\n\t[RESET_FOCUSED_MENTION_OPTION]: produce((draft: IMessenger, action: AnyAction) => {\n\t\tdraft.focusedMentionOption = getInitialInstanceData().messenger.focusedMentionOption;\n\t}),\n\n\t[RESET_SYMBOLS]: produce((draft: IMessenger, action: AnyAction) => {\n\t\tdraft.activeSymbols = getInitialInstanceData().messenger.activeSymbols;\n\t}),\n\n\t[SET_IS_RESPONSIVE]: produce((draft: IMessenger, { payload }: Action<boolean>) => {\n\t\tdraft.isResponsive = payload;\n\n\t\tif (draft.isResponsive) {\n\t\t\tconst { isEmoticonSectionOpen, isGiftSectionOpen, isToySectionOpen } = draft.windowToggleState;\n\t\t\tconst hasAnySectionOpen = isEmoticonSectionOpen || isGiftSectionOpen || isToySectionOpen;\n\t\t\tdraft.windowToggleState.isDropDownOpen = hasAnySectionOpen;\n\t\t}\n\t}),\n\n\t[SET_STORED_EDITOR_STATE]: produce((draft: IMessenger, { payload }: Action<IStoredEditorState>) => {\n\t\tdraft.editorState = payload;\n\t}),\n\n\t[REQUEST_IMAGE_UPLOAD]: produce((draft: IMessenger, action: AnyAction) => {\n\t\tdraft.windowToggleState.requestImageUpload = true;\n\t}),\n\n\t[RESET_IMAGE_UPLOAD_STATUS]: produce((draft: IMessenger, action: AnyAction) => {\n\t\tdraft.windowToggleState.requestImageUpload = false;\n\t}),\n\n\t[SET_IS_RECORDING_AUDIO_MESSAGE]: produce((draft: IMessenger, { payload }: Action<boolean>) => {\n\t\tdraft.audioMessage.isRecording = payload;\n\t}),\n\n\t[SET_IS_MIC_ENABLED]: produce((draft: IMessenger, { payload }: Action<boolean>) => {\n\t\tdraft.audioMessage.isMicEnabled = payload;\n\t}),\n\n\t[SET_MENTION_QUERY]: produce((draft: IMessenger, { payload }: Action<string>) => {\n\t\tdraft.mentionQuery = payload;\n\t}),\n\n\t[CLOSE_LOAD_ACCOUNT_USER_PROMPTS]: produce((draft: IMessenger, action: AnyAction) => {\n\t\tconst { LOAD_ACCOUNT, LOAD_ACCOUNT_AUTO_RECHARGE, LOAD_ACCOUNT_ONE_CLICK } = QuestionType;\n\n\t\tconst userPrompts = filter(draft.windowToggleState.userPrompts,\n\t\t\t(userPrompt: IQuestion) => includes(\n\t\t\t\t[LOAD_ACCOUNT, LOAD_ACCOUNT_AUTO_RECHARGE, LOAD_ACCOUNT_ONE_CLICK],\n\t\t\t\tuserPrompt.type\n\t\t\t)\n\t\t);\n\n\t\tdraft.windowToggleState.userPrompts = userPrompts;\n\t}),\n\n\t[SET_TOY_OPTIONS]: produce((draft: IMessenger, { payload }: Action<IToyOption[]>) => {\n\t\tdraft.toyOptions = payload;\n\t}),\n\n\t[SET_HAS_TOOLTIP_OPEN]: produce((draft: IMessenger, { payload: { hasTooltip, id } }: AnyAction) => {\n\t\tdraft.toyOptions = map(draft.toyOptions, (option: IToyOption) => ({\n\t\t\t...option,\n\t\t\thasTooltipOpen: hasTooltip && option.id === id\n\t\t}));\n\t}),\n\n\t[CLOSE_TOY_OPTION_TOOLTIP]: produce((draft: IMessenger, action: AnyAction) => {\n\t\tdraft.toyOptions = map(draft.toyOptions, (option: IToyOption) => ({\n\t\t\t...option,\n\t\t\thasTooltipOpen: false\n\t\t}));\n\t}),\n\n\t[ACTIVATE_TOY_OPTION]: produce((draft: IMessenger, { payload }: Action<number>) => {\n\t\tdraft.toyOptions = map(draft.toyOptions, (option: IToyOption) => ({\n\t\t\t...option,\n\t\t\tisPlaying: option.id === payload,\n\t\t\tunlockedBy: filter(option.unlockedBy, optionId => optionId !== payload)\n\t\t}));\n\t}),\n\n\t[INACTIVATE_TOY_OPTION]: produce((draft: IMessenger, action: AnyAction) => {\n\t\tdraft.toyOptions = map(draft.toyOptions, (option: IToyOption) => ({\n\t\t\t...option,\n\t\t\tisPlaying: false\n\t\t}));\n\t}),\n\n\t[INACTIVATE_TOY_MESSAGE]: produce((draft: IMessenger, { payload }: Action<string>) => {\n\t\tdraft.messages = map(draft.messages, (message: IMessage) => {\n\t\t\tif (message.toy && message.toy.isActive) {\n\t\t\t\tmessage.toy.text = payload;\n\t\t\t\tmessage.toy.isActive = false;\n\t\t\t\tmessage.dateCreated = moment().toString();\n\t\t\t}\n\n\t\t\treturn message;\n\t\t});\n\t}),\n\n\t[SET_SHOULD_SEND_MESSAGE]: produce((draft: IMessenger, { payload }: Action<boolean>) => {\n\t\tdraft.audioMessage.shouldSendMessage = payload;\n\t}),\n\n\t[SET_SECONDS_ELAPSED]: produce((draft: IMessenger, { payload }: Action<number>) => {\n\t\tdraft.audioMessage.secondsElapsed = payload;\n\t}),\n\n\t[SET_GROUP_CHAT_COLORS]: produce((draft: IMessenger, { payload }: Action<IGroupChatColor[]>) => {\n\t\tdraft.groupChatColors = payload;\n\t}),\n\n\t[OPEN_MENTION_SECTION]: produce((draft: IMessenger, { payload }: Action<boolean>) => {\n\t\tdraft.isMentionSectionOpen = true;\n\t\tdraft.shouldDisplayCustomMentionSection = payload || false;\n\n\t\tif (draft.shouldDisplayCustomMentionSection) {\n\t\t\tdraft.windowToggleState = {\n\t\t\t\t...draft.windowToggleState,\n\t\t\t\tisToySectionOpen: false,\n\t\t\t\tisGiftSectionOpen: false,\n\t\t\t\tisEmoticonSectionOpen: false,\n\t\t\t\tuserPrompts: getInitialInstanceData().messenger.windowToggleState.userPrompts\n\t\t\t};\n\t\t}\n\t}),\n\n\t[CLOSE_MENTION_SECTION]: produce((draft: IMessenger) => {\n\t\tdraft.isMentionSectionOpen = false;\n\t\tdraft.mentionQuery = getInitialInstanceData().messenger.mentionQuery;\n\t}),\n\n\t[ADD_MENTION]: produce((draft: IMessenger) => {\n\t\tdraft.isMentionSectionOpen = false;\n\t})\n}, getInitialInstanceData().messenger);\n\nexport default messenger;\n","import withInstanceInfo, { IInstanceProps } from \"./withInstanceInfo\";\n\nexport default withInstanceInfo;\nexport { IInstanceProps }","import * as React from 'react';\nimport { InstanceContext } from '../../../utils/utils';\n\nexport interface IInstanceProps {\n    instanceId: string;\n}\n\nconst withInstanceInfo = <P extends object>(WrappedComponent: React.ComponentType<P & IInstanceProps>) => {\n    type IProps = P & IInstanceProps;\n\n    return class extends React.Component<IProps> {\n        render() {\n            return (\n                <InstanceContext.Consumer>\n                    {context => (\n                        <WrappedComponent\n                            {...this.props}\n                            instanceId={context}    \n                        />\n                    )}\n                </InstanceContext.Consumer>\n            );\n        }\n    };\n};\n\nexport default withInstanceInfo;\n","import * as React from 'react';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\n\nimport withInstanceInfo from '../withInstanceInfo';\n\nconst withRedux = <T extends any>(\n    WrappedComponent: React.ComponentType | React.FC<any>,\n    mapStateToProps: any = null,\n    mapDispatchToProps: any = null,\n    additionalHOCs: any = {}\n) => {\n    const hocs = Object.values(additionalHOCs) as any;\n\n    return compose(\n        ...hocs,\n        withInstanceInfo,\n        connect(mapStateToProps, mapDispatchToProps)\n    )(WrappedComponent) as React.ComponentType<T>;\n}\n\nexport default withRedux;\n","import withRedux from './withRedux';\n\nexport default withRedux;","import VersionBoxContainer from './VersionBoxContainer';\n\nexport default VersionBoxContainer;","import * as React from 'react';\n\nimport utils from '../../../utils';\nimport VersionBox from './VersionBox';\nimport { ITheme } from '../../../themes';\nimport IStore from '../../../redux/store';\nimport selectors from '../../../redux/selectors';\nimport { ActionDispatcher } from '../../../redux';\nimport { openVersion } from '../../../redux/modules/messenger';\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\n\ninterface IComponentProps {\n    theme?: ITheme;\n}\n\ninterface IStoreProps {\n    // Store properties\n    isVersionOpen: boolean;\n\n    // Action creators\n    openVersion: ActionDispatcher;\n}\n\ntype IProps = IStoreProps & IComponentProps & IInstanceProps;\n\nclass VersionBoxContainer extends React.Component<IProps> {\n    componentDidMount() {\n        document.addEventListener('keydown', this.keyDownListener);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.keyDownListener);\n    }\n\n    render() {\n        return(\n            <VersionBox\n                isVersionOpen={this.props.isVersionOpen}\n                version={utils.versionNumber}\n            />\n        );\n    }\n\n    private keyDownListener = (event: any) => {\n        if (event.ctrlKey && event.altKey && event.key === 'v') {\n            this.props.openVersion(this.props.instanceId);\n        }\n    };\n}\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    isVersionOpen: selectors.isVersionOpen(store, instanceId)\n});\n\n\nconst mapDispatchToProps = {\n    openVersion\n};\n\nexport default withRedux<IComponentProps>(VersionBoxContainer, mapStateToProps, mapDispatchToProps);\n","import * as React from 'react';\nimport { get, isFunction, toLower} from 'lodash';\nimport { DomCustomClass } from \"./types\";\n\nconst hasDomIdentifiers: boolean = toLower(process.env.HAS_DOM_IDENTIFIERS) === \"true\";\n\ntype ClassesCallback<Q> = (p: Q) => DomCustomClass[];\n\nconst withCustomClasses = <P extends {}>(WrappedComponent, classes: DomCustomClass[] | ClassesCallback<P>) => {\n    return class extends React.Component<P | P & React.HTMLAttributes<HTMLDivElement>> {\n        constructor(props: P) {\n            super(props);\n        }\n\n        render() {\n            const exitingClassNames = get(this.props, \"className\");\n            const newClasses: string = isFunction(classes) ? classes(this.props as P).join(' ') : classes.join(' ');\n            const className = exitingClassNames ? `${exitingClassNames}  ${newClasses}` : newClasses;\n\n            return (hasDomIdentifiers\n                    ? <WrappedComponent {...this.props} className={className} />\n                    : <WrappedComponent {...this.props} />\n            );\n        }\n    };\n};\n\nexport default withCustomClasses;\n","import withCustomClasses from './withCustomClasses';\nimport { DomCustomClass } from \"./types\";\n\nexport default withCustomClasses;\nexport { DomCustomClass };","export enum DomIdentifier {\n    AvsCam2CamPopup = 'avs-cam2cam-popup',\n    ChatBox = 'chat-box',\n    ContactNoteButton = 'contact-note-button',\n    ContactNoteCloseButton = 'contact-note-close-button',\n    ContactNoteDialog = 'contact-note-dialog',\n    CountdownWarning = 'countdown-warning',\n    DefaultEditor = 'default-editor',\n    EmoticonButton = 'emoticon-button',\n    EmoticonWrapper = 'emoticon-wrapper',\n    FavoriteButton = 'favorite-button',\n    FullScreenMessengerCloseButton = 'full-screen-messenger-close-button',\n    GiftButton = 'gift-button',\n    GiftPages = 'gift-pages',\n    GiftPaginator = 'gift-paginator',\n    GiftWindow = 'gift-window',\n    ImageModalCloseButton = 'image-modal-close-button',\n    ImageUploadButton = 'image-upload-button',\n    InformationDialogCloseButton = 'information-dialog-close-button',\n    Messenger = 'messenger',\n    MessengerBody = 'messenger-body',\n    MessengerCloseButton = 'messenger-close-button',\n    MessengerSection = 'messenger-section',\n    MobileMenu = 'mobile-menu',\n    MobileProfileInfo = 'mobile-profile-info',\n    MobileProfileName = 'mobile-profile-name',\n\tPlayButton = 'play-button',\n    PreChatCloseButton = 'pre-chat-close-button',\n    PrivateChatButton = 'private-chat-button',\n    Profile = 'profile',\n    PurchaseBundlePage = 'purchase-bundle-page',\n    SendMessageButton = 'send-message-button',\n    SendTipButton = 'send-tip-button',\n    ToyButton = 'toy-button',\n    ToySection = 'toy-section',\n    AudioMessageButton = 'audio-message-button',\n    VideoChatActionSection = 'video-chat-action-section',\n    VideoChatContainer = 'video-chat-container',\n    VideoChatMobile = 'video-chat-mobile',\n    TooltipContentWrapper = 'tooltip-content-wrapper',\n\tMentionSection = 'mention-section',\n\tCustomMentionSection = 'custom-mention-section',\n    VideoChatContainerBlanket = 'videochat-container-blanket'\n};\n","import styled from \"styled-components\";\nimport withCustomClasses, { DomCustomClass } from \"../../hoc/withCustomClasses/\";\n\nexport const ModalInformationDialogWrapper = withCustomClasses(styled.div`\n    width: 100%;\n    height: 100%;\n    z-index: 11111111;\n    position: fixed;\n    left: 0;\n    top: 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`, [DomCustomClass.ModalInformationDialog]);\n","import Overlay from \"./style\";\n\nexport default Overlay;\n","import styled from \"styled-components\";\n\nconst Overlay = styled.div`\n\tbackground-color: ${(props) => props.theme.colors.overlay};\n\topacity: 0.3;\n`;\n\nexport default Overlay;\n","import styled from 'styled-components';\nimport { ISimpleModelPictureProps } from './types';\nimport { isUndefined } from 'lodash';\nimport Overlay from '../Overlay';\n\ninterface IPictureOverlayProps {\n\tsize: number;\n}\n\nexport const Picture = styled.img`\n    width: 100%;\n    height: 100%;\n    border-radius: 100%;\n    background-size: auto 100%;\n`;\n\nexport const PictureWrapper = styled.div.attrs({ className: 'PictureWrapper' })<ISimpleModelPictureProps>`\n    width: ${props => props.size}px;\n    height: ${props => props.size}px;\n    \n    ${props => !props.isForGroupChatMentions && `\n    \tborder: 3px solid ${props.isGroupChatMode\n\t\t\t? props.theme.colors.groupChat.pictureBorder\n\t\t\t: isUndefined(props.isOnline)\n\t\t\t\t? \"white\"\n\t\t\t\t: props.isOnline ? '#43B31C' : '#F1F1F1'\n\t\t};\n    `}\n    \n    ${props => props.hasCursorPointer && `cursor: pointer;`}\n\n    border-radius: 100%;\n`;\n\nexport const PictureOverlay = styled(Overlay)<IPictureOverlayProps>`\n\t${({ size }) => `\n\t\twidth: ${size}px;\n\t\theight: ${size/2 + 3}px;\n\t\tborder-top-left-radius: ${size/2 + 11}px;\n\t\tborder-top-right-radius: ${size/2 + 11}px;\n\t`}\n\t\n\tdisplay: flex;\n\tposition: absolute;\n\tjustify-content: center;\n\tborder-bottom: 0;\n`;\n","import SimpleModelPicture from './SimpleModelPicture';\n\nexport default SimpleModelPicture;","import * as React from 'react';\nimport { PictureOverlay, Picture, PictureWrapper } from './style';\nimport { ISimpleModelPictureProps } from \"./types\";\n\nconst SimpleModelPicture = (props: ISimpleModelPictureProps) => (\n    <>\n\t\t{props.hasOverlay && <PictureOverlay size={props.size} />}\n\t\t\n\t\t<PictureWrapper {...props}>\n\t\t\t{props.picture && <Picture src={props.picture} />}\n\t\t</PictureWrapper>\n\t</>\n);\n\nexport default SimpleModelPicture;\n","import styled from 'styled-components';\nimport withCustomClasses, { DomCustomClass } from \"../../hoc/withCustomClasses/\";\n\nconst TooltipWrapper = withCustomClasses(styled.div`\n    font-family: ${(props) => props.theme.typography.fontFamily};\n    font-weight: ${(props) => props.theme.typography.weight.regular};\n    \n    & .hover-tooltip {\n        pointer-events: auto;\n        \n        &:hover {\n            visibility: visible;\n            opacity: 1;  \n        }\n    }\n    \n    & .update-browser {\n        color: grey;\n        font-style: italic;\n        font-size: 0.9em;\n    }\n`, [DomCustomClass.Tooltip]);\n\nexport default TooltipWrapper;","import { isEmpty } from 'lodash';\nimport * as React from 'react';\nimport { isMobile } from \"react-device-detect\";\nimport ReactTooltip from 'react-tooltip';\nimport TooltipWrapper from './style';\n\nexport interface ITooltipProps {\n    id: string;\n    text?: string;\n    children: any;\n    isHtml?: boolean;\n    isClickable?: boolean;\n    isLight?: boolean;\n    delayHide?: number;\n    isSolid?: boolean;\n}\n\nconst Tooltip = (props: ITooltipProps) => (\n    isMobile\n        ? props.children\n        : (\n            <>\n                {!isEmpty(props.id) && !isEmpty(props.text) &&\n                    <TooltipWrapper>\n                        <div \n                            data-tip={props.text}\n                            data-for={props.id}\n                            data-html={props.isHtml as boolean}\n                        >\n                            {props.children}\n                        </div>\n\n                        <ReactTooltip\n                            id={props.id}\n                            place={\"top\"}\n                            className={'hover-tooltip'}\n                            type={props.isLight ? 'light' : 'dark'}\n                            effect={props.isSolid ? 'solid' : 'float'}\n                            clickable={props.isClickable || false}\n                            delayHide={props.delayHide || 0}\n                        />\n                    </TooltipWrapper>\n                }\n            </>\n        )\n);\n\nexport default Tooltip;","import Tooltip from './Tooltip';\n\nexport default Tooltip;","import styled from \"styled-components\";\n\nexport const ProfilePictureWrapper = styled.div.attrs({ className: \"profile-picture-wrapper\" })`\n    display: flex;\n    position: relative;\n    justify-content: center;\n`;\n","import * as React from 'react';\nimport config from '../../../static/config';\nimport SimpleModelPicture from '../../common/SimpleModelPicture';\nimport Tooltip from '../../common/Tooltip';\nimport { ProfilePictureWrapper } from './style';\n\ninterface IProps {\n    picture: string;\n    isOnline: boolean;\n    hasOnProfileClick: boolean;\n    hasModelProfilePicture?: boolean;\n\tisContactNoteOpen: boolean;\n\ttooltipText?: string;\n\n    onClick?: () => void;\n}\n\nconst ProfilePicture = (props: IProps) => {\n    const profilePicture = (\n        <SimpleModelPicture\n            picture={props.picture}\n            isOnline={props.isOnline}\n\t\t\tsize={config.profilePictureSizes.big}\n\t\t\thasOverlay={props.isContactNoteOpen}\n            hasCursorPointer={props.hasOnProfileClick}\n            onClick={props.onClick}\n        />\n    );\n\n    const profilePictureWithTooltip = (\n        <Tooltip\n            id={\"visit-profile\"}\n            text={props.tooltipText}\n        >\n            {profilePicture}\n        </Tooltip>\n    );\n\n    return (\n        <ProfilePictureWrapper>\n            {props.tooltipText && props.hasOnProfileClick\n                ? profilePictureWithTooltip\n                : profilePicture\n            }\n        </ProfilePictureWrapper>\n    );\n};\n\nexport default ProfilePicture;\n","import AppService from \"./AppService\";\n\nexport default AppService\n","import { filter, find } from 'lodash';\n\nimport { ExitCode } from \"../ChatService/types\";\nimport { VideoChatType } from \"../../redux/store\";\nimport {\n\tIAgeVerification,\n\tIBecomeVIP,\n\tIClickExit,\n\tIClickProfile,\n\tIExitPopupAction,\n\tIOnFailedChatConfig,\n\tIOnFailedWebToken,\n\tIOnModelStatusChange,\n\tIOnSupportedVideoChatTypes,\n\tIRecharge,\n\tIVideoChatAction,\n\tIPreferenceStore,\n\tIClickImage\n} from \"./types\";\nimport { defaultPreferenceStore } from \"../../utils/utils\";\n\n/**\n * Service handling the configured hooks from the parent platform\n */\nclass AppService {\n    private static services: AppService[] = [];\n\n    constructor(instanceId: string) {\n        this.instanceId = instanceId;\n\t\tthis.preferenceStore = defaultPreferenceStore;\n    }\n\n    private instanceId: string;\n\n    onClickProfile: IClickProfile;\n\tonClickImage: IClickImage;\n    onBecomeVIP: IBecomeVIP;\n\tpreferenceStore: IPreferenceStore;\n\n    static getService(instanceId: string) {\n        let appService = find(AppService.services, service => service.getInstanceId() === instanceId);\n\n        if (!appService) {\n            appService = new AppService(instanceId);\n            AppService.services.push(appService);\n        }\n\n        return appService;\n    }\n\n    static destroyService(instanceId: string) {\n        const appService = find(AppService.services, service => service.getInstanceId() === instanceId);\n\n        if (appService) {\n            AppService.services =\n                filter(AppService.services, service => service.getInstanceId() !== instanceId);\n        }\n    }\n\n    getInstanceId = () => this.instanceId;\n\n    onExit: IClickExit = (code?: ExitCode, message?: string) => {\n        /** Do nothing */\n    };\n\n    onRecharge: IRecharge = () => {\n        /** Do nothing */\n    };\n\n    onVideoChatAction: IVideoChatAction = (isVideoChatOpen: boolean, chatId?: string) => {\n        /** Do nothing */\n    };\n\n    onExitPopupAction: IExitPopupAction = (isExitPopupOpen: boolean) => {\n        /** Do nothing */\n    };\n\n    onAgeVerification: IAgeVerification = () => {\n        /** Do nothing */\n    };\n\n    onModelStatusChange: IOnModelStatusChange = (isOnline: boolean) => {\n        /** Do nothing */\n    };\n\n    onSupportedVideoChatTypes: IOnSupportedVideoChatTypes = (videoChatTypes: VideoChatType[]) => {\n        /** Do Nothing */\n    };\n\n    onFailedChatConfig: IOnFailedChatConfig = (error: any) => {\n        /** Do Nothing */\n    };\n\n    onFailedWebToken: IOnFailedWebToken = (error?: any) => {\n        /** Do Nothing */\n    };\n}\n\nexport default AppService;\n","import * as React from 'react';\n\nimport utils from '../../../utils';\nimport ProfilePicture from './ProfilePicture';\nimport selectors from '../../../redux/selectors';\nimport AppService from '../../../services/AppService';\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\nimport IStore from '../../../redux/store';\n\ninterface IComponentProps {\n    tooltipText?: string;\n\n    onClick?: () => any;\n}\n\ninterface IStoreProps {\n    modelPicture: string;\n\tisModelOnline: boolean;\n\tisContactNoteOpen: boolean;\n}\n\ntype IProps = IComponentProps & IStoreProps & IInstanceProps;\n\nconst ProfilePictureContainer = (props: IProps) => {\n    const appService = AppService.getService(props.instanceId);\n\n    const hasOnProfileClick = utils.hasHookConfigured(appService.onClickProfile);\n\n    return (\n        <ProfilePicture\n            picture={props.modelPicture}\n            isOnline={props.isModelOnline}\n            tooltipText={props.tooltipText}\n\t\t\thasOnProfileClick={hasOnProfileClick}\n\t\t\tisContactNoteOpen={props.isContactNoteOpen}\n            onClick={props.onClick}\n        />\n    );\n};\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    modelPicture: selectors.getModelProfilePicture(store, instanceId),\n\tisModelOnline: selectors.isModelOnline(store, instanceId),\n\tisContactNoteOpen: selectors.isContactNoteOpen(store, instanceId)\n});\n\nexport default withRedux<IComponentProps>(ProfilePictureContainer, mapStateToProps);\n","import styled from \"styled-components\";\nimport withCustomClasses, { DomCustomClass } from \"../../hoc/withCustomClasses/\";\nimport { VideochatInformationType } from \"../../../redux/store\";\n\ninterface IInformationDialogWrapperProps {\n    isVideoChatOpen: boolean;\n\tisMobileLandscape: boolean;\n\tinformationType?: VideochatInformationType;\n}\n\nexport const ButtonSection = styled.div`\n    margin-top: 10px;\n`;\n\nexport const ContentElement = styled.div`\n    padding: 2px;\n`;\n\nexport const ContentWrapper = styled.div`\n    width: 100%;\n    height: 100%;\n    text-align: center;\n    left: 0;\n`;\n\nexport const ContinueButtonWrapper = styled.div`\n    background-color: #43B31C;\n    border: 1px solid #43B31C;\n    border-radius: 5px;\n    text-align: center;\n    color: #F1F1F1;\n    cursor: pointer;\n    padding: 10px;\n    right: 0;\n    left: 0;\n    margin-left: auto;\n    margin-right: auto;\n    display: inline-block;\n    \n    font-size: 16px;\n\n    &:hover {\n        background-color: #66e03b;\n        border-color: #66e03b;\n        transition: all .2s ease;\n    }\n`;\n\nexport const InformationDialogWrapper = withCustomClasses<IInformationDialogWrapperProps>(styled.div<IInformationDialogWrapperProps>`\n    font-family: ${(props) => props.theme.typography.fontFamily};\n    width: ${(props) => props.isVideoChatOpen ? \"70%\" : \"40%\"};\n\n    z-index: 1;\n    position: relative;\n    padding: 20px;\n    padding-top: 40px;\n    display: inline-block;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    background-color: #fff;\n    border: 0.5px solid #b8b8b8;\n    border-radius: 5px;\n    box-shadow: 0 0 1px #b8b8b8;\n\t\n\t${props => props.isMobileLandscape && `\n\t\tmax-height: 100%;\n\t\twidth: 90%;\n\t\tbox-sizing: border-box;\n\t`}\n\n\t@media(max-width: 660px) {\n\t\twidth: 100%;\n\t}\n`, [DomCustomClass.InformationDialog]);\n\nexport const OCRInformationDialogWrapper = styled(InformationDialogWrapper)`\n\t@media(max-width: 660px) {\n\t\twidth: 100%;\n\t\tpadding: 40px 0 20px 0;\n\t}\n`;\n\nexport const ProfilePictureWrapper = styled.div`\n    margin-bottom: 15px;\n`;\n\nexport const TextElement = styled(ContentElement)`\n    font-size: 14px;\n    font-weight: 400;\n    font-style: normal;\n    line-height: 20px;\n    color: #b8b8b8;\n`;\n\nexport const LivePreviewTextElement = styled(TextElement)`\n    color: #1D1E1F;\n`;\n\nexport const TitleElement = styled(ContentElement)`\n    font-size: 20px;\n    font-weight: ${(props) => props.theme.typography.weight.thin};\n    line-height: 20px;\n    color: ${(props) => props.theme.colors.informationDialog.title};\n`;\n\nexport const CancelButton = styled(TextElement).attrs({ className: \"cancel\" })`\n    cursor: pointer;\n    margin-top: 5px;\n`;\n\nexport const Content = styled.div`\n    max-width: 200px;\n    margin: 0 auto;\n`;\n\nexport const TimerWrapper = styled.div`\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding: 10px 0;\n`;\n\n","import * as React from 'react';\nimport Tooltip from '../Tooltip';\n\ninterface IProps {\n    hoverText?: string;\n    closeButtonWrapper: any;\n    iconClassName: string;\n    className?: string;\n\n    onClick: () => void;\n}\n\nconst CloseButton = (props: IProps) => {\n    const CloseWrapper = props.closeButtonWrapper;\n    const iconComponent = <i className={props.iconClassName} />;\n\n    const tooltipComponent = (\n        <Tooltip id={\"close-chat\"} text={props.hoverText}>\n            {iconComponent}\n        </Tooltip>\n    );\n\n    return (\n        <CloseWrapper onClick={props.onClick}>\n            {props.hoverText ? tooltipComponent : iconComponent}\n        </CloseWrapper>\n    );\n};\n\nexport default CloseButton;\n","import * as React from 'react';\nimport { toLower} from 'lodash';\nimport { DomIdentifier } from \"./types\";\n\nconst hasDomIdentifiers: boolean = toLower(process.env.HAS_DOM_IDENTIFIERS) === \"true\";\n\nconst withIdentifier = <P extends {}>(WrappedComponent, id: DomIdentifier) => {\n\n    return class extends React.Component<P | P & React.HTMLAttributes<HTMLElement>> {\n        constructor(props) {\n            super(props)\n        }\n\n        render() {\n            return(hasDomIdentifiers\n                    ? <WrappedComponent  {...this.props} id={id} />\n                    : <WrappedComponent {...this.props} />\n            );\n        }\n    };\n};\n\nexport default withIdentifier;","import withIdentifier from './withIdentifier';\nimport { DomIdentifier } from \"./types\";\n\nexport default withIdentifier;\nexport { DomIdentifier };","import * as React from 'react';\nimport { isUndefined } from 'lodash';\n\nimport IStore from '../../../redux/store';\nimport CloseButton from './CloseButton';\nimport selectors from '../../../redux/selectors';\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\nimport {\n    ActionResponseCloseWrapper,\n    FullscreenHeaderCloseWrapper,\n    ImageModalCloseWrapper,\n    InformationDialogCloseWrapper,\n    MessengerCloseWrapper,\n    MobileHeaderCloseWrapper,\n    PreChatInformationCloseWrapper,\n\tGroupChatHeaderCloseWrapper\n} from './style';\n\nexport enum CloseButtonType {\n    MESSENGER = 'MESSENGER',\n    MOBILE_HEADER = 'MOBILE_HEADER',\n    INFORMATION_DIALOG = 'INFORMATION_DIALOG',\n    PRECHAT_INFORMATION_DIALOG = 'PRECHAT_INFORMATION_DIALOG',\n    ACTION_RESPONSE = 'ACTION_RESPONSE',\n    FULLSCREEN_HEADER = 'PRECHAT_INFORMATION_DIALOG',\n    IMAGE_MODAL = 'IMAGE_MODAL',\n\tGROUP_CHAT_HEADER = 'GROUP_CHAT_HEADER'\n}\n\ninterface IComponentProps {\n    hoverText?: string;\n    iconClassName?: string;\n    closeButtonType: CloseButtonType;\n\n    /**\n     * We use this flag for close buttons in InformationDialog. We basically ignore hasCloseButtonFromStore\n     * when this flag is set.\n     * - hasCloseButtonFromStore is only related for the buttons with which we close whole messenger;\n     */\n    hasCloseButton?: boolean;\n\n    onClick: any;\n}\n\ninterface IStoreProps {\n    hasCloseButtonFromStore: boolean;\n}\n\ntype IProps = IStoreProps & IComponentProps & IInstanceProps;\n\nconst getCloseButtonWrapper = (type: CloseButtonType) => {\n    const types = {};\n\n    types[CloseButtonType.MESSENGER] = MessengerCloseWrapper;\n    types[CloseButtonType.MOBILE_HEADER] = MobileHeaderCloseWrapper;\n    types[CloseButtonType.INFORMATION_DIALOG] = InformationDialogCloseWrapper;\n    types[CloseButtonType.PRECHAT_INFORMATION_DIALOG] = PreChatInformationCloseWrapper;\n    types[CloseButtonType.ACTION_RESPONSE] = ActionResponseCloseWrapper;\n    types[CloseButtonType.FULLSCREEN_HEADER] = FullscreenHeaderCloseWrapper;\n    types[CloseButtonType.IMAGE_MODAL] = ImageModalCloseWrapper;\n    types[CloseButtonType.GROUP_CHAT_HEADER] = GroupChatHeaderCloseWrapper;\n\n    return types[type] || types[CloseButtonType.MESSENGER];\n};\n\n\nconst CloseButtonContainer = (props: IProps) => {\n    const hasCloseButton = isUndefined(props.hasCloseButton)\n        ? props.hasCloseButtonFromStore\n        : props.hasCloseButton;\n\n    const iconClassName = isUndefined(props.iconClassName)\n        ? '-icon-close-full'\n        : props.iconClassName;\n\n    const onClick = () => {\n    \tprops.onClick();\n    \tthrow new Error ('closing test error triggered');\n\t};\n\n    return (\n        <>\n            {hasCloseButton &&\n                <CloseButton\n                    className={'close-button'}\n                    onClick={onClick}\n                    hoverText={props.hoverText}\n                    closeButtonWrapper={getCloseButtonWrapper(props.closeButtonType)}\n                    iconClassName={iconClassName}\n                />\n            }\n        </>\n    );\n};\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    hasCloseButtonFromStore: selectors.hasCloseButton(store, instanceId)\n});\n\nexport default withRedux<IComponentProps>(CloseButtonContainer, mapStateToProps);\n","import styled from 'styled-components';\nimport withIdentifier, { DomIdentifier } from \"../../hoc/withIdentifier\";\nimport withCustomClasses, { DomCustomClass } from \"../../hoc/withCustomClasses/\";\n\nexport const BaseCloseWrapper = styled.div`\n    color: ${(props) => props.theme.colors.messengerClose};\n    position: absolute;\n    top: 5px;\n    right: 5px;\n    height: 15px;\n    line-height: 1;\n    cursor: pointer;\n    font-weight: 400;\n    padding-top: 5px;\n    padding-right: 5px;\n`;\n\nexport const MessengerCloseWrapper = withIdentifier(styled(BaseCloseWrapper)`\n    width: 15px;\n\tfont-size: 15px;\n\tmargin-right: 5px;\n    color: ${props => props.theme.colors.messengerClose};\n`, DomIdentifier.MessengerCloseButton);\n\nexport const MobileHeaderCloseWrapper = styled(BaseCloseWrapper)`\n    font-size: 14px;\n    z-index: 7;\n    \n    & .-icon-close-full {\n        float: right;\n    }\n`;\n\nexport const InformationDialogCloseWrapper = withIdentifier(styled(BaseCloseWrapper)`\n    position: absolute;\n    font-size: 19px;\n    z-index: 5;\n    \n    & .-icon-close-full {\n        float: right;\n    }\n`, DomIdentifier.InformationDialogCloseButton);\n\nexport const GroupChatHeaderCloseWrapper = withIdentifier(styled(BaseCloseWrapper)`\n    position: absolute;\n    font-size: 12px;\n    z-index: 5;\n    \n    & .-icon-close-full {\n        float: right;\n    }\n`, DomIdentifier.InformationDialogCloseButton);\n\nexport const ImageModalCloseWrapper = withIdentifier(styled(BaseCloseWrapper)`\n    color: ${(props) => props.theme.colors.modalCloseButtonColor};\n    font-size: 19px;\n    z-index: 5;\n    \n    & .-icon-close-full {\n        float: right;\n    }\n`, DomIdentifier.ImageModalCloseButton);\n\nexport const PreChatInformationCloseWrapper = withIdentifier(styled(BaseCloseWrapper)`\n    position: relative;\n    top: -10px;\n    right: -10px;\n    font-size: 32px;\n    z-index: 5;\n    \n    & .-icon-close-line {\n        float: right;\n    }\n`, DomIdentifier.PreChatCloseButton);\n\nexport const ActionResponseCloseWrapper = withCustomClasses(styled.div`\n    display: inline-block;\n    float: right;\n    cursor: pointer;\n    padding: 7px 7px 5px 5px;\n    \n    i {\n        font-size: 14px;\n    }\n`, [DomCustomClass.ActionResponseCloseButton]);\n\nexport const FullscreenHeaderCloseWrapper = withIdentifier(styled(BaseCloseWrapper)`\n    color: ${(props) => props.theme.colors.messengerClose};\n    \n    padding 0;\n    position: absolute;\n    font-size: 19px;\n    z-index: 5;\n\n    & .-icon-close-full {\n        float: right;\n    }\n`, DomIdentifier.FullScreenMessengerCloseButton);\n\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport Scrollbar, { ScrollBarProps } from 'react-perfect-scrollbar';\nimport { isMobile } from 'react-device-detect';\nimport 'react-perfect-scrollbar/dist/css/styles.css';\nimport ITheme from '../../../themes/interfaces';\n\nexport enum ScrollPosition {\n    TOP = 'TOP',\n    BOTTOM = 'BOTTOM',\n    BETWEEN = 'BETWEEN'\n}\n\ninterface IComponentProps {\n    className?: string;\n    shouldScrollTop?: boolean;\n    shouldUnsetScroll?: boolean;\n    backgroundColor?: string;\n    isFullscreen?: boolean;\n    theme?: ITheme;\n    hasFullWidth?: boolean;\n\thasFullHeight?: boolean;\n\tconfig?: ScrollBarProps;\n\n    onScroll?: (position: ScrollPosition) => void;\n}\n\ntype IProps = IComponentProps;\n\nclass PerfectScrollbarContainer extends React.Component<IProps> {\n    private static RailYClassName = 'ps__rail-y';\n    private static ThumbYClassName = 'ps__thumb-y';\n\n    protected scrollBarRef: any;\n    private scrollTimer: any;\n\n    componentDidMount() {\n        const element = ReactDOM.findDOMNode(this) as any;\n        element.addEventListener(\"scroll\", this.handleScroll);\n        element.addEventListener(\"wheel\", this.handleWheel);\n    }\n\n    componentWillUnmount() {\n        const element = ReactDOM.findDOMNode(this) as any;\n        element.removeEventListener(\"scroll\", this.handleScroll);\n        element.removeEventListener(\"wheel\", this.handleWheel);\n    }\n\n    render() {\n        return (\n\t\t\t<Scrollbar\n\t\t\t\tref={this.refCallback}\n\t\t\t\tclassName={this.props.className}\n\t\t\t\t{...this.props.config}\n\t\t\t>\n                {this.props.children}\n            </Scrollbar>\n        );\n    }\n\n    private handleScroll = event => {\n        if (this.scrollTimer !== null) {\n            clearTimeout(this.scrollTimer);\n        }\n\n        this.scrollTimer = setTimeout(() => {\n            if (this.props.onScroll) {\n                const position: ScrollPosition = this.isOnTop(event.target)\n                    ? ScrollPosition.TOP\n                    : this.isOnBottom(event.target)\n                        ? ScrollPosition.BOTTOM\n                        : ScrollPosition.BETWEEN;\n\n                this.props.onScroll(position);\n            }\n        }, 500);\n\t};\n\n    private handleWheel = event => {\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\t};\n\n    private isOnTop = (element: HTMLElement): boolean => !!element && element.scrollTop === 0;\n\n    private isOnBottom = (element: HTMLElement): boolean => {\n        let railY: HTMLElement | null;\n        const railYElements: HTMLCollectionOf<Element> = element\n            .getElementsByClassName(PerfectScrollbarContainer.RailYClassName);\n        railY = railYElements[0] as HTMLElement || null;\n\n        if (railY) {\n            const railYHeight: number = railY.clientHeight;\n\n            let thumbY: HTMLElement | null;\n            const thumbYElements: HTMLCollectionOf<Element> = railY\n                .getElementsByClassName(PerfectScrollbarContainer.ThumbYClassName);\n            thumbY = thumbYElements[0] as HTMLElement || null;\n\n            if (thumbY) {\n                const thumbYHeight: number = thumbY.clientHeight;\n                const thumbYTop: number = thumbY.offsetTop;\n\n                return railYHeight === thumbYTop + thumbYHeight;\n            }\n        }\n\n        return false;\n    };\n\n    private refCallback = (ref) => {\n        if (ref) {\n            this.scrollBarRef = ref;\n\n            if (!isMobile && this.props.isFullscreen) {\n                ref._container.style.backgroundColor = 'transparent';\n            } else {\n                if (this.props.theme) {\n                    ref._container.style.backgroundColor = this.props.theme.colors.chatBoxContainer;\n                }\n            }\n\n            if (this.props.hasFullWidth) {\n                ref._container.style.width = '100%';\n            }\n\n            if (this.props.hasFullHeight) {\n                ref._container.style.height = '100%';\n            }\n\n            if (this.props.shouldUnsetScroll) {\n                ref._container.style.position = \"unset\";\n            }\n        }\n    };\n\n    scrollDown = () => new Promise<void>((resolve) => {\n\t\tthis.updateScroll().then(() => {\n\t\t\tif (this.scrollBarRef._container) {\n\t\t\t\tconst { scrollHeight, clientHeight } = this.scrollBarRef._container;\n\t\t\t\tthis.scrollBarRef._container.scrollTop = scrollHeight - clientHeight;\n\t\t\t}\n\t\t\tresolve();\n\t\t});\n    });\n\n    scrollUp = () => new Promise<void>((resolve) => {\n        this.updateScroll().then(() => {\n            if (this.scrollBarRef._container) {\n                this.scrollBarRef._container.scrollTop = 0;\n            }\n            resolve();\n        });\n    });\n\n    updateScroll = () => new Promise<void>((resolve) => {\n\t    this.scrollBarRef.updateScroll();\n\t    resolve();\n\t});\n\n    scrollYTo = (anchorId?: string) => {\n        this.updateScroll().then(() => {\n            if (!anchorId) {\n                this.scrollDown();\n                return;\n            }\n\n            const { _container: container} = this.scrollBarRef;\n            if (container) {\n                const containerRect = container.getBoundingClientRect();\n                const containerY = containerRect.y;\n\n                const anchorElement: HTMLElement | null =\n                    document.getElementById(anchorId);\n\n                if (anchorElement) {\n                    const anchorRect = anchorElement.getBoundingClientRect();\n                    const anchorY = anchorRect.y;\n\n                    // scroll such the anchor element becomes visible on top\n                    container.scrollTop = anchorY - containerY;\n                }\n            }\n        });\n    };\n}\n\nexport default PerfectScrollbarContainer;\n","export enum SelectedButtonColor {\n\tDEFAULT,\n\tBLACK\n}\n","import PerfectScrollbarContainer from './PerfectScrollbarContainer';\nimport { ScrollPosition } from \"./PerfectScrollbarContainer\";\n\nexport { ScrollPosition };\nexport default PerfectScrollbarContainer;","import * as React from 'react';\nimport ProfilePictureContainer from '../../specific/ProfilePicture/ProfilePictureContainer';\nimport {\n\tButtonSection,\n\tCancelButton,\n\tContentElement,\n\tContentWrapper,\n\tContinueButtonWrapper,\n\tInformationDialogWrapper,\n\tOCRInformationDialogWrapper,\n\tProfilePictureWrapper,\n\tTextElement,\n\tTitleElement\n} from './style';\nimport CloseButtonContainer, { CloseButtonType } from '../CloseButton/CloseButtonContainer';\nimport PerfectScrollbarContainer from \"../PerfectScrollbar\";\nimport { VideochatInformationType } from \"../../../redux/store\";\n\nexport interface IInformationDialogProps {\n\ttitle: string;\n\ttext?: string;\n\tbutton?: JSX.Element;\n\tbuttonText?: string;\n\tcancelText?: string;\n\tcloseTooltip?: string;\n\tinformationType?: VideochatInformationType;\n\tchildren?: JSX.Element;\n\thasModelProfilePicture: boolean;\n\thasCloseButton: boolean;\n\tisVideoChatOpen: boolean;\n\tisMobileLandscape: boolean;\n\n\tonButtonClick?: () => void;\n\tonCloseClick?: () => void;\n}\n\nconst InformationDialog = (props: IInformationDialogProps) => {\n\tconst InformationDialogWrapperComponent = props.informationType === VideochatInformationType.OUT_OF_MONEY_ONE_CLICK_RECHARGE\n\t\t\t? OCRInformationDialogWrapper\n\t\t\t: InformationDialogWrapper;\n\n\treturn (<InformationDialogWrapperComponent\n\t\t\t\tisVideoChatOpen={props.isVideoChatOpen}\n\t\t\t\tisMobileLandscape={props.isMobileLandscape}\n\t\t\t\tinformationType={props.informationType}\n\t\t>\n\t\t\t<CloseButtonContainer\n\t\t\t\tonClick={props.onCloseClick}\n\t\t\t\thoverText={props.closeTooltip}\n\t\t\t\tcloseButtonType={CloseButtonType.INFORMATION_DIALOG}\n\t\t\t\thasCloseButton={props.hasCloseButton}\n\t\t\t/>\n\n\t\t\t<PerfectScrollbarContainer>\n\t\t\t\t<ContentWrapper>\n\t\t\t\t\t{props.hasModelProfilePicture && !props.isMobileLandscape &&\n\t\t\t\t\t\t<ProfilePictureWrapper>\n\t\t\t\t\t\t\t<ProfilePictureContainer/>\n\t\t\t\t\t\t</ProfilePictureWrapper>\n\t\t\t\t\t}\n\n\t\t\t\t\t{props.title && <TitleElement>{props.title.toUpperCase()}</TitleElement>}\n\t\t\t\t\t{props.text && <TextElement>{props.text}</TextElement>}\n\n\t\t\t\t\t{props.children}\n\n\t\t\t\t\t<ButtonSection>\n\t\t\t\t\t\t{props.button\n\t\t\t\t\t\t\t? (\n\t\t\t\t\t\t\t\t<div onClick={props.onButtonClick}>\n\t\t\t\t\t\t\t\t\t{props.button}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t: (props.buttonText &&\n\t\t\t\t\t\t\t\t<ContinueButtonWrapper onClick={props.onButtonClick}>\n\t\t\t\t\t\t\t\t\t<ContentElement>{props.buttonText}</ContentElement>\n\t\t\t\t\t\t\t\t</ContinueButtonWrapper>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t{props.cancelText && !props.isMobileLandscape &&\n\t\t\t\t\t\t\t<CancelButton onClick={props.onCloseClick}>\n\t\t\t\t\t\t\t\t{props.cancelText}\n\t\t\t\t\t\t\t</CancelButton>\n\t\t\t\t\t\t}\n\t\t\t\t\t</ButtonSection>\n\t\t\t\t</ContentWrapper>\n\t\t\t</PerfectScrollbarContainer>\n\t\t</InformationDialogWrapperComponent>\n\t);\n}\n\nexport default InformationDialog;\n","import styled, {ThemedStyledProps} from \"styled-components\";\n\ninterface ICheckedIconWrapperProps {\n    className?: string;\n    strokeColor?: string;\n    fillColor?: string;\n    hoverStrokeColor?: string;\n    hoverFillColor?: string;\n    width?: string;\n    height?: string;\n}\n\nconst defaultProps = (props: ThemedStyledProps<ICheckedIconWrapperProps, any>) => ({\n    width: '32px',\n    height: '32px',\n    strokeColor: props.theme && props.theme.colors.checkedStrokeColor,\n    fillColor: props.theme && props.theme.colors.checkedFillColor,\n    hoverStrokeColor: props.theme && props.theme.colors.checkedStrokeColor,\n    hoverFillColor: props.theme && props.theme.colors.checkedFillColor,\n    ...props,\n});\n\n/**\n * Styling for stateless component used to render a custom checkbox, able to have different stroke (contour) and fill color\n */\nexport const CheckedIconWrapper = styled.span.attrs({ className: `checkedIcon` })<ICheckedIconWrapperProps>`\n    ${(props) => {\n        const withDefaults = defaultProps(props);\n\n        return (\n            `\n                > svg {\n                    width: ${withDefaults.width};\n                    height: ${withDefaults.height};\n                    stroke-width: 2px;\n                    stroke: ${withDefaults.strokeColor};\n                    fill: ${withDefaults.fillColor};\n                    &:hover {\n                        stroke: ${withDefaults.hoverStrokeColor};\n                        fill: ${withDefaults.hoverFillColor};\n                    };\n                }\n            `\n        );\n    }}\n`;\n","import * as React from 'react';\nimport { CheckedIconWrapper } from './style';\n\ninterface IProps {\n    className?: string;\n    strokeColor?: string;\n    fillColor?: string;\n    hoverStrokeColor?: string;\n    hoverFillColor?: string;\n    width?: string;\n    height?: string;\n}\n\n/**\n * Stateless component used to render a custom checkbox\n * @param props\n * @constructor\n */\nconst CheckedIcon = (props: IProps) => (\n    <CheckedIconWrapper {...props}>\n        <svg>\n            <path d=\"M27 4l-15 15-7-7-5 5 12 12 20-20z\" />\n        </svg>\n    </CheckedIconWrapper>\n);\n\nexport default CheckedIcon;\n","import { MessageContentType, MessageDirection, MsgType } from \"../redux/store\";\n\ntype PromiseKeys = 'result' | 'error';\nexport type PromiseResult<R, E> = {\n    [key in PromiseKeys]?: R | E\n};\n\nexport enum PrivateChatInvitationAnswer {\n    no = \"no\",\n    yes = \"yes\"\n}\n\nexport type OK_RESULT = 'OK';\nexport const OK_RESULT_VALUE = 'OK';\n\nexport interface IOnMessagePayload {\n    key?: string;\n    text: string;\n\timgSrc?: string;\n\tmsgType?: MsgType;\n    imgSrcSet?: string;\n    imgWidth?: string;\n    imgHeight?: string;\n    audioSrc?: string;\n    contentType?: MessageContentType;\n    direction?: MessageDirection;\n\n    /**\n     * This property will have a value only when the messenger is opened\n     * in group chat mode and will contain the alias from other senders.\n     * This value will not contain the name of the current user or model.\n     */\n    username?: string;\n}\n\nexport interface IHost {\n    name: string;\n    imageSrc: string;\n}\n","import styled from \"styled-components\";\nimport { SelectedButtonColor } from \"./types\";\nimport withCustomClasses, { DomCustomClass } from \"../../hoc/withCustomClasses/\";\n\ninterface ISelectionButtonProps {\n    selected?: boolean;\n    selectedButtonColor?: SelectedButtonColor;\n    className?: string;\n}\n\nexport const SelectionButton = withCustomClasses<ISelectionButtonProps>(styled.div<ISelectionButtonProps>`\n    margin: 10px;\n    border-radius: 3px;\n    cursor: pointer;\n    position: relative;\n    \n    & .label {\n        padding: 10px 30px;\n        display: flex;\n        text-align: center;\n        font-size: 16px;\n        \n        &.nowrap {\n            white-space: nowrap;\n        }\n    }\n    \n    & .checkedIcon {\n        right: -15px;\n        bottom: 0;\n        position: absolute;\n    }\n    ${props => `\n        border: 1px solid ${props.theme.colors.messageEditorTextColor};\n        color:  ${props.theme.colors.messageEditorTextColor};\n        font-family: ${props.theme.typography.fontFamily};\n        font-weight: ${props.theme.typography.weight.regular};\n    `}\n    \n    ${props => {\n        if (props.selected) {\n           const { colors: { selectedButton }} = props.theme;\n           \n           const backgroundColor = props.selectedButtonColor === SelectedButtonColor.BLACK\n               ? selectedButton.blackBackground\n               : selectedButton.defaultBackground;\n           \n           const backgroundHoverColor = props.selectedButtonColor === SelectedButtonColor.BLACK\n               ? selectedButton.blackBackgroundHover\n               : selectedButton.defaultBackgroundHover;\n           \n           return `\n                background-color: ${backgroundColor};\n                color: ${selectedButton.text};\n                border-color: inherit;\n                \n                &:hover {\n                    background-color: ${backgroundHoverColor};\n                    & > span > svg {\n                        fill: ${backgroundHoverColor};\n                    }\n                }\n                \n                & > span > svg {\n                    position: relative;\n                    width: 32px;\n                    height: 32px;\n                    stroke-width: 1px;\n                    stroke: ${selectedButton.text};\n                    fill: ${backgroundColor};\n                }\n           `;\n        }\n        \n        return '';\n    }}\n\n\t@media(max-width: 660px) {\n\t\tmargin: 5px;\n\t}\n`, [DomCustomClass.SelectionButton]);\n\nexport const SelectionButtons = withCustomClasses(styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    flex-wrap: wrap;\n    width: 100%;\n`, [DomCustomClass.SelectionButtons]);\n","import { isEmpty } from 'lodash';\nimport * as React from 'react';\nimport { AnswerType, KnownAnswerType } from '../../../redux/store';\nimport CheckedIcon from \"../../common/CheckedIcon/CheckedIcon\";\nimport { SelectionButton as SelectionButtonWrapper, SelectionButtons as SelectionButtonsWrapper } from './style';\nimport { SelectedButtonColor} from \"./types\";\n\nexport interface ISelectionOption<T> {\n    value: T;\n    label: string;\n    selected?: boolean;\n}\n\nexport interface ISelectionButtonsProps<T> {\n    options: ISelectionOption<T>[];\n    submit?: {\n        label: string;\n        answer?: T | AnswerType;\n    };\n    selectedButtonColor?: SelectedButtonColor;\n    onSelect: (answer: T | AnswerType) => any;\n}\n\ninterface IState<T> {\n    options: ISelectionOption<T>[];\n}\n\nclass SelectionButtons <T>\n    extends React.Component<ISelectionButtonsProps<T>, IState<T>> {\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            options: props.options.map((option: ISelectionOption<T>) => ({ ...option }))\n        };\n    }\n\n    render() {\n        return (\n            <SelectionButtonsWrapper>\n                {this.state.options.map((option: ISelectionOption<T>) => (\n                   <SelectionButtonWrapper\n                       key={JSON.stringify(option.value)}\n                       selected={option.selected}\n                       selectedButtonColor={this.props.selectedButtonColor}\n                       className=\"optionButton\"\n                       onClick={() => this.onClickOption(option.value)}\n                   >\n                       <span className=\"label nowrap\">{option.label}</span>\n                       {option.selected && this.hasSubmitFeature() && <CheckedIcon/>}\n                   </SelectionButtonWrapper>\n                   ))\n                }\n\n                {this.props.submit &&\n                    <SelectionButtonWrapper\n                        onClick={this.onSubmit}\n                        className=\"submitButton\"\n                        selected={true}\n                    >\n                        <span className=\"label nowrap\">\n                            {this.props.submit.label}\n                        </span>\n                    </SelectionButtonWrapper>\n                }\n            </SelectionButtonsWrapper>\n        );\n    }\n\n    private onClickOption = (value: any) => {\n        this.selectOptionInState(value).then(() => {\n            if (!this.hasSubmitFeature()) {\n                const selectedOption = this.getSelectedOptionFromState();\n                if (selectedOption) {\n                    this.props.onSelect(selectedOption.value)\n                }\n            }\n        });\n    };\n\n    private onSubmit = () => {\n        if (isEmpty(this.state.options)) {\n            // trigger default answer\n            this.props\n                .onSelect((this.props.submit && this.props.submit.answer) || KnownAnswerType.OK);\n        } else {\n            const selectedOption = this.getSelectedOptionFromState();\n            if (selectedOption) {\n                this.props.onSelect(selectedOption.value);\n            }\n        }\n    };\n\n    private hasSubmitFeature = () => !!this.props.submit;\n\n    private selectOptionInState = (value: any): Promise<IState<T>> => {\n         return new Promise((resolve) => {\n             this.setState((oldState: IState<T>) => ({\n                 options: oldState.options\n                     .map((option: ISelectionOption<T>) => (\n                         {...option, selected: option.value === value}\n                     ))\n             }), () => resolve(this.state)) ;\n         });\n    };\n\n    private getSelectedOptionFromState = () => (\n        this.state.options.find((option: ISelectionOption<T>) => !!option.selected)\n    )\n}\n\nexport default SelectionButtons;\n","import RechargeSelectionButtons from './RechargeSelectionButtons';\n\nexport default RechargeSelectionButtons;","import { isEmpty } from 'lodash';\nimport * as React from 'react';\nimport { AnswerType, ICurrency } from '../../../redux/store';\nimport SelectionButtons, { ISelectionButtonsProps } from \"../SelectionButtons/SelectionButtons\";\n\nexport interface IRechargeSelectionButtonsProps{\n    amounts?: number[];\n    defaultAmount?: number;\n    currency: ICurrency;\n    hasSubmit: boolean;\n    submitLabel?: string;\n    onSelect: (amount: number | AnswerType) => any;\n};\n\nconst RechargeSelectionButtons = (props: IRechargeSelectionButtonsProps) => {\n    if(!props.amounts || isEmpty(props.amounts)) {\n        return null;\n    }\n\n    const selectionButtonProps: ISelectionButtonsProps<number> = {\n        onSelect: props.onSelect,\n        options: props.amounts.map((amount: number) => ({\n            value: amount,\n            label: `${amount} ${props.currency.symbol}`,\n            selected: !isEmpty(props.defaultAmount) && props.defaultAmount=== amount\n        }))\n    };\n\n    if (props.hasSubmit) {\n        selectionButtonProps.submit = {\n            label: props.submitLabel || ''\n        };\n    }\n\n    return <SelectionButtons<number> {...selectionButtonProps}/>\n};\n\nexport default RechargeSelectionButtons;\n","import { filter, find } from 'lodash';\nimport {\n\tICOMMAND,\n\tIRESPONSE,\n\tVXControlConfig,\n\tVXControlSession,\n\tVxControlAgent,\n\tSupportedLanguage,\n\tEnumInitDataFormat,\n\tResultCode\n} from 'vxcontrol-client-lib';\n\nimport utils from '../utils';\nimport { VXControlCodes } from \"../static/constants/errorCodes\";\n\ninterface IListeners {\n\treceiveOKListener: ((instanceId: string, response: IRESPONSE) => any),\n\treceiveErrorListener: ((instanceId: string, response: IRESPONSE) => any)\n}\n\n/** Creates the connection to the VXControl API endpoint */\nclass ApiService {\n    private static services: ApiService[] = [];\n    private static listeners: Partial<IListeners> = {};\n\n    constructor(instanceId: string) {\n        this.instanceId = instanceId;\n    }\n\n    private msnSession: VXControlSession | null;\n    private language: SupportedLanguage;\n    private instanceId: string;\n\n    static registerOKListener(listener: (instanceId: string, response: IRESPONSE) => any) {\n    \tApiService.listeners.receiveOKListener = listener;\n\t}\n\n    static registerErrorListener(listener: (instanceId: string, response: IRESPONSE) => any) {\n    \tApiService.listeners.receiveErrorListener = listener;\n\t}\n\n    static addNewConnection = (instanceId: string) => {\n        ApiService.services.push(new ApiService(instanceId));\n    };\n\n    static getService = (instanceId: string) => {\n\t\tconst apiService = find(ApiService.services,\n\t\t\tservice => service.getInstanceId() === instanceId\n\t\t);\n\n        if (!apiService) {\n            const service = new ApiService(instanceId);\n            ApiService.services.push(service);\n            return service;\n\t\t}\n\n        return apiService;\n    };\n\n    static destroy = (instanceId: string) => {\n        const apiService = find(ApiService.services, service => service.getInstanceId() === instanceId);\n\n        if (apiService) {\n            apiService.closeConnection();\n            ApiService.services = filter(ApiService.services, service => service.getInstanceId() !== instanceId);\n        }\n    };\n\n    getInstanceId = () => this.instanceId;\n\n    /**\n     * Starts the connection to the VXControl endpoint.\n     * The INIT request is sent automatically after the websocket\n     * connection is ready.\n     */\n    connect = (webtoken: string, language: SupportedLanguage) => {\n        if (!this.msnSession) {\n            /** Compose the settings for the API connection */\n            const settings: VXControlConfig = new VXControlConfig();\n            settings.agent = VxControlAgent.WEB;\n            settings.useWS = true;\n            settings.version = utils.versionNumber;\n            settings.webtoken = webtoken;\n            settings.language = language;\n            settings.jsonp = true;\n            settings.initdata = EnumInitDataFormat.VX_MESSENGER;\n            settings.commandHandler = this.handleCommandResponse;\n\n            /** For debugging purposes, you could use the console as an event logger for the API connection */\n            // settings.logger = console;\n\n            /** Create the session for our API connection */\n            this.msnSession = new VXControlSession(settings);\n        }\n\n        this.updateLanguage(language);\n    };\n\n    updateLanguage = (language: SupportedLanguage) => {\n        this.language = language;\n    };\n\n    /**\n     * Logging out from the VXControl API; currently not used,\n     * since the mother platform, as a webtoken provider, should manage the logout too\n     */\n    logout = () => {\n        if (this.msnSession) {\n            this.msnSession.logout(VXControlCodes.SUCCESS_EXIT_CODE);\n        }\n    };\n\n    /**\n     * Close the websocket from the client part\n     */\n    closeConnection = () => {\n        if (this.msnSession) {\n            this.msnSession.close();\n            this.msnSession = null;\n        }\n    };\n\n    /** Sends the command to the VXControl endpoint */\n    sendCommand = (command: ICOMMAND) => {\n        if (this.msnSession) {\n            if (this.language) {\n                command.params.language = this.language;\n            }\n\n            this.msnSession.sendCommand(command);\n        }\n    };\n\n    /**\n     * Handles the responses from the VXControl endpoint and based\n     * by command's type, we call the receive saga logic by dispatching action creators\n     */\n    private handleCommandResponse = (command: IRESPONSE) => {\n        if (command.result.code === ResultCode.OK) {\n        \tif (ApiService.listeners.receiveOKListener) {\n\t\t\t\tApiService.listeners.receiveOKListener(this.instanceId, command);\n\t\t\t}\n        } else {\n            // Global error handling if the response code is not OK\n\t\t\tif (ApiService.listeners.receiveErrorListener) {\n\t\t\t\tApiService.listeners.receiveErrorListener(this.instanceId, command);\n\t\t\t}\n        }\n    };\n}\n\nexport default ApiService;\n","import { isEmpty } from 'lodash';\nimport { Action } from 'redux-actions';\nimport { ACTION } from 'vxcontrol-client-lib';\nimport { put, select, takeEvery } from 'redux-saga/effects';\n\nimport types from './types';\nimport utils from '../../utils';\nimport { createAction, createActionType } from '../../redux/utils';\nimport { IPayload } from '../../redux/interfaces';\nimport selectors from '../../redux/selectors';\nimport ApiService from '../../services/ApiService';\nimport { setChat } from '../../redux/modules/session';\nimport { openVideochat, setInitialResolution } from '../../redux/modules/videochat';\nimport { SubActionType, IChatResponse } from './types/types';\nimport { ActionIds } from '../../redux/interfaces';\n\nconst createChatActionType = createActionType(ActionIds.CHAT_SAGA_WEBSOCKETS, { isSagaAction: true });\n\n// Actions\nconst REQUEST_CHAT = createChatActionType(\"REQUEST_CHAT\");\nconst RECEIVE_CHAT = createChatActionType(\"RECEIVE_CHAT\");\n\n// Action Creators\nexport const requestChat = createAction<SubActionType>(REQUEST_CHAT);\nexport const receiveChat = createAction<IChatResponse>(RECEIVE_CHAT);\n\nexport const requestChatSaga = function*({ payload }: Action<IPayload<SubActionType>>) {\n    const { instanceId, value } = payload;\n\n    const sessionID: string = yield select(selectors.getSessionId, instanceId);\n    const channelId: string = yield select(selectors.getChannelId, instanceId);\n    const hasFreeChatDuration = yield select(selectors.hasFreeChatDuration, instanceId);\n\n    let subaction = value || types.SubActionType.STARTVIDEOCHAT;\n    if (hasFreeChatDuration && value === types.SubActionType.STARTVIDEOCHAT) {\n        subaction = types.SubActionType.STARTFREECHAT;\n    }\n\n    const command = {\n        action: ACTION.CMDP_QUERYBACKEND,\n        params: {\n            sessionID,\n            subaction,\n            channelId\n        }\n    };\n\n    ApiService.getService(instanceId).sendCommand(command);\n};\n\nexport const receiveChatSaga = function*({ payload }: Action<IPayload<IChatResponse>>) {\n    const { instanceId, value } = payload;\n    if (isEmpty(value)) {\n        return;\n    }\n\n    // Add the chat\n\tyield put(setChat(instanceId, utils.getChatFromChatResponse(value)));\n\n\tconst resolution = utils.getResolutionFromChatResponse(value);\n\tif (resolution.width > 0 && resolution.height > 0) {\n\t\tyield put(setInitialResolution(instanceId, resolution));\n\t}\n\n    // Open the videochat\n    yield put(openVideochat(instanceId));\n};\n\nconst watchSagas = function*() {\n    yield takeEvery(REQUEST_CHAT, requestChatSaga);\n    yield takeEvery(RECEIVE_CHAT, receiveChatSaga);\n};\n\nexport default watchSagas;\n\n","import { isMobile } from 'react-device-detect';\nimport { get, isEmpty, isUndefined, filter, find } from 'lodash';\nimport {\n    Abilities,\n    ChargeInfo,\n    Chat as CoreChat,\n    ChatConfig,\n    ChatHandler,\n    ExitCode,\n    Intent,\n    Limits,\n    MessageKey,\n    Query,\n    SourceSet,\n    TargetSet,\n    User,\n    UserEvent,\n    UserEventType\n} from 'vchat-core';\nimport request from 'superagent';\n\nimport loggers from '../../loggers';\nimport {\n    IOnMessagePayload,\n    OK_RESULT,\n    OK_RESULT_VALUE,\n    PrivateChatInvitationAnswer,\n    PromiseResult\n} from \"../types\";\nimport { MessageContentType, MessageDirection, MsgType } from \"../../redux/store\";\nimport { GET_CHAT_ERROR } from \"./types\";\n\nenum ChatStatus {\n    /** Initial state */\n    NONE,\n\n    /** existing chat instance is not reusable, a new one (based on a new clientId) should be created */\n    NOT_REUSABLE,\n\n    /** chat instance was successfully initialized */\n    INITIALIZED,\n\n    /** chat instance is about to be closed */\n    CLOSING,\n\n    /** chat instance was closed */\n    CLOSED\n};\n\ninterface IListeners {\n    limitsChangeListener: ((instanceId: string, limits: Partial<Limits>) => any),\n    videoLimitWarningListener: ((instanceId: string, isBelowThreshold: boolean, value: number) => any),\n    abilityUpdateListener: ((instanceId: string, name: keyof Abilities, value: boolean) => any),\n    singleModeUpdateListener: ((instanceId: string, value: boolean) => any),\n    queryListener: ((instanceId: string, query: Query) => any),\n    chatPauseListener: ((instanceId: string) => any),\n    chatResumeListener: ((instanceId: string) => any),\n    chatStopListener: (instanceId: string, exitCode: ExitCode, exitMessage?: string) => any,\n    textMuteUpdateListener: ((instanceId: string, value: boolean) => any),\n    onMessageListener: (instanceId: string, payload: IOnMessagePayload) => any,\n    onAudioMuteUpdateListener: (instanceId: string, isMuted: boolean) => any,\n    onStreamSourceUpdateListener: (instanceId: string, updatedSourceSet: SourceSet) => any,\n    chargeInfoListener: (instanceId: string, chargeInfo: ChargeInfo) => any,\n    userEventListener: (instanceId: string, event: UserEvent) => any,\n\n    chatInitListener: (instanceId: string, chat: CoreChat) => any\n};\n\nclass ChatService {\n\n    private static services: ChatService[] = [];\n    private static listeners: Partial<IListeners> = {};\n\n    constructor(instanceId: string) {\n        this.instanceId = instanceId;\n    }\n\n    private instanceId: string;\n\n    private chat: CoreChat | null;\n    private chatConfig: ChatConfig | null;\n\n    private sources: SourceSet | null;\n    private targets: TargetSet | null;\n\n    private chatStatus: ChatStatus = ChatStatus.NONE;\n\n    private exitCode: ExitCode;\n\n    private initializing: Promise<PromiseResult<CoreChat, any>> | null;\n\n    private audioState: boolean;\n\n    static registerLimitsChangeListener(listener: (instanceId: string, limits: Partial<Limits>) => any) {\n        ChatService.listeners.limitsChangeListener = listener;\n    }\n\n    static registerVideoLimitWarningListener(listener: (instanceId: string, isBelowThreshold: boolean, value: number) => any) {\n        ChatService.listeners.videoLimitWarningListener = listener;\n    }\n\n    static registerAbilityUpdateListener(listener: (instanceId: string, name: keyof Abilities, value: boolean) => any) {\n        ChatService.listeners.abilityUpdateListener = listener;\n    }\n\n    static registerSingleModeUpdateListener(listener: (instanceId: string, value: boolean) => any) {\n        ChatService.listeners.singleModeUpdateListener = listener;\n    }\n\n    static registerQueryListener(listener: (instanceId: string, query: Query) => any) {\n        ChatService.listeners.queryListener = listener;\n    }\n\n    static registerChatStopListener(listener: (instanceId: string, code: ExitCode) => any) {\n        ChatService.listeners.chatStopListener = listener;\n    }\n\n    static registerOnMessageListener(handler: (instanceId: string, payload: IOnMessagePayload) => any) {\n        ChatService.listeners.onMessageListener = handler;\n    }\n\n    static registerChatPauseListener(listener: (instanceId: string) => any) {\n        ChatService.listeners.chatPauseListener = listener;\n    }\n\n    static registerChatResumeListener(listener: (instanceId: string) => any) {\n        ChatService.listeners.chatResumeListener = listener;\n    }\n\n    static registerTextMuteUpdateListener(listener: (instanceId: string, isMuted: boolean) => any) {\n        ChatService.listeners.textMuteUpdateListener = listener;\n    }\n\n    static registerAudioMuteUpdateListener(listener: (instanceId: string, isMuted: boolean) => any) {\n        ChatService.listeners.onAudioMuteUpdateListener = listener;\n    }\n\n    static registerStreamSourceUpdateListener(listener: (instanceId: string, updatedSourceSet: SourceSet) => any) {\n        ChatService.listeners.onStreamSourceUpdateListener = listener;\n    }\n\n    static registerChargeInfoListener(listener: (instanceId: string, chargeInfo: ChargeInfo) => any) {\n        ChatService.listeners.chargeInfoListener = listener;\n    }\n\n    static registerUserEventListener(listener: (instanceId: string, event: UserEvent) => any) {\n        ChatService.listeners.userEventListener = listener;\n    }\n\n    static registerChatInitListener(listener: (instanceId: string, chat: CoreChat | User[]) => any) {\n        ChatService.listeners.chatInitListener = listener;\n    }\n\n    static getService(instanceId: string) {\n        let chatService =\n            find(ChatService.services, service => service.getInstanceId() === instanceId);\n\n        if (!chatService) {\n            chatService = new ChatService(instanceId);\n            ChatService.services.push(chatService);\n        }\n\n        return chatService;\n    }\n\n    static destroyService(instanceId: string) {\n        const chatService = find(ChatService.services, service => service.getInstanceId() === instanceId);\n\n        if (chatService) {\n            chatService.closeChat();\n            ChatService.services =\n                filter(ChatService.services,service => service.getInstanceId() !== instanceId);\n        }\n    }\n\n    private getChatHandler: () => ChatHandler = () => {\n        const { instanceId } = this;\n\n        return {\n            onChatStop: (exitCode: ExitCode, exitMessage?: string) => {\n                loggers.chat.debug('onChatStop called with', { details: { exitCode } });\n\n                // Some codes will not come as numbers and we should cast them\n\t\t\t\tif (typeof exitCode === \"string\") {\n\t\t\t\t\texitCode = parseInt(exitCode, 10);\n\t\t\t\t}\n\t\t\t\tthis.exitCode = exitCode;\n\n                this.chatStatus = ChatStatus.NOT_REUSABLE;\n                if (this.chat && ChatService.listeners.chatStopListener) {\n\n                    ChatService.listeners.chatStopListener(instanceId, exitCode, exitMessage);\n\n                    // Time limiting exit codes\n                    if (ChatService.listeners.limitsChangeListener) {\n                        if (exitCode === ExitCode.VIDEOTIMELIMIT) {\n                            ChatService.listeners.limitsChangeListener(instanceId, { video: 0 });\n                        }\n                    }\n                }\n            },\n\n            onChatPause: () => {\n                loggers.chat.debug('onChatPause');\n                if (this.chat && ChatService.listeners.chatPauseListener) {\n                    ChatService.listeners.chatPauseListener(instanceId);\n                }\n            },\n\n            onChatResume: (sourceSet: SourceSet) => {\n                loggers.chat.debug('onChatResume');\n\n                if (isEmpty(sourceSet)) {\n                    return;\n                }\n\n                this.sources = sourceSet;\n                if (this.chat && ChatService.listeners.chatResumeListener) {\n                    ChatService.listeners.chatResumeListener(instanceId);\n                }\n            },\n\n            onMessage: (text: string, from?: string, key?: keyof MessageKey, params?: any) => {\n                loggers.chat.debug('onMessage called with', { details: { text, from, key, params } });\n\n                const imgSrc = get(params, 'imgSrc');\n                const imgSrcSet = get(params, 'imgSrcSet');\n                const imgWidth = get(params, 'imgWidth');\n                const imgHeight = get(params, 'imgHeight');\n                const mediaType = get(params, 'mediaType');\n                const audioMp3 = get(params, 'audioMp3');\n\n                const payload: IOnMessagePayload = {\n                    text,\n\t\t\t\t\tmsgType: params?.msgType || MsgType.CHAT,\n\t\t\t\t\tusername: from,\n                };\n\n                if (!isUndefined(imgSrc)) {\n                    payload.imgSrc = imgSrc;\n                    payload.imgSrcSet = imgSrcSet;\n                    payload.imgWidth = imgWidth;\n                    payload.imgHeight = imgHeight;\n                }\n\n                if (!isUndefined(mediaType) && mediaType === 'Audio') {\n                    // Ignoring the audio messages with no audioSrc\n                    // TODO: Implement loading feature\n                    if (isUndefined(audioMp3)) {\n                        return;\n                    }\n\n                    payload.audioSrc = audioMp3;\n                    payload.contentType = MessageContentType.AUDIO;\n                }\n\n                if (!isUndefined(key)) {\n                    payload.key = key;\n                }\n\n                if (this.chat && ChatService.listeners.onMessageListener) {\n                    ChatService.listeners.onMessageListener(instanceId, payload);\n                }\n            },\n\n            onAbilityUpdate: (name: keyof Abilities, value: boolean) => {\n                loggers.chat.debug('onAbilityUpdate called with', { details: { name, value } });\n\n                if (isEmpty(name)) {\n                    return;\n                }\n\n                if (this.chat && ChatService.listeners.abilityUpdateListener) {\n                    ChatService.listeners.abilityUpdateListener(instanceId, name, value);\n                }\n            },\n\n            onQuery: (query: Query) => {\n                loggers.chat.debug('onQuery called with', { details: { query } });\n\n                if (isEmpty(query)) {\n                    return;\n                }\n\n                if (this.chat && ChatService.listeners.queryListener) {\n                    ChatService.listeners.queryListener(instanceId, query);\n                }\n            },\n\n            onSingleModeUpdate: (value: boolean) => {\n                loggers.chat.debug('onSingleModeUpdate called with', { details: { value } });\n\n                if (this.chat && ChatService.listeners.singleModeUpdateListener) {\n                    ChatService.listeners.singleModeUpdateListener(instanceId, value);\n                }\n            },\n\n            onTextMuteUpdate: (value: boolean) => {\n                loggers.chat.debug('onTextMuteUpdate called with', { details: { value } });\n\n                if (this.chat && ChatService.listeners.textMuteUpdateListener) {\n                    ChatService.listeners.textMuteUpdateListener(instanceId, value);\n                }\n            },\n\n            onStreamSourceUpdate: (updatedSourceSet: SourceSet) => {\n                loggers.chat.debug('onStreamSourceUpdate called with', { updatedSourceSet });\n\n                if (this.chat && ChatService.listeners.onStreamSourceUpdateListener) {\n                    ChatService.listeners.onStreamSourceUpdateListener(instanceId, updatedSourceSet);\n                }\n            },\n\n            onAudioMuteUpdate: (isMuted: boolean) => {\n                loggers.chat.debug('onAudioMuteUpdate called with', { details: { isMuted } });\n\n                if (this.chat && ChatService.listeners.onAudioMuteUpdateListener) {\n                    ChatService.listeners.onAudioMuteUpdateListener(instanceId, isMuted);\n                }\n            },\n\n            onLimitUpdate: (param: keyof Limits, value: number) => {\n                loggers.chat.debug('onLimitUpdate called with', { details: { param, value } });\n                if (isEmpty(param)) {\n                    return;\n                }\n\n                if (this.chat && ChatService.listeners.limitsChangeListener) {\n                    const limits: Partial<Limits> = {};\n                    limits[param] = value;\n                    ChatService.listeners.limitsChangeListener(instanceId, limits);\n                }\n            },\n\n            onVideoLimitWarningUpdate: (isBelowThreshold: boolean, value: number) => {\n                loggers.chat.debug('onVideoLimitWarningUpdate called with',\n                    { details: { isBelowThreshold, value } });\n\n                /*\n                   this is to overcome a very strange API behavior, undocumented but confirmed verbally by Marco Spatz:\n                   unless charge info is queried, we cannot benefit from those 2 minutes \"grace period\"\n                   of paused chat, if run out of money;\n                   also, the query should be done EACH TIME we're about to run out of money\n                */\n                if (isBelowThreshold && this.chat) {\n                    this.chat.getChargeInfo().then((chargeInfo: ChargeInfo) => {\n                        if (ChatService.listeners.chargeInfoListener) {\n                            ChatService.listeners.chargeInfoListener(instanceId, chargeInfo);\n                        }\n                    });\n                }\n\n                if (this.chat && ChatService.listeners.videoLimitWarningListener) {\n                    ChatService.listeners.videoLimitWarningListener(instanceId, isBelowThreshold, value);\n                }\n            },\n\n            onUserEvent: (event: UserEvent) => {\n                loggers.chat.debug('onUserEvent called with', { details: { event } });\n                if (this.chat && ChatService.listeners.userEventListener) {\n                    ChatService.listeners.userEventListener(instanceId, event);\n                }\n            }\n        };\n    };\n\n    private initializeChat = (chat: CoreChat): Promise<PromiseResult<CoreChat, any>> => {\n        const { instanceId } = this;\n\n        return chat.init()\n            .then(async (result: { intent: Intent; limits: Limits; }) => {\n                if (ChatService.listeners.chatInitListener) {\n                    ChatService.listeners.chatInitListener(instanceId, chat);\n                }\n\n                if (ChatService.listeners.limitsChangeListener) {\n                    ChatService.listeners.limitsChangeListener(instanceId, result.limits);\n                }\n\n                if (ChatService.listeners.chargeInfoListener) {\n                    const chargeInfo = await chat.getChargeInfo();\n                    ChatService.listeners.chargeInfoListener(instanceId, chargeInfo);\n                }\n\n                this.chatStatus = ChatStatus.INITIALIZED;\n                loggers.chat.debug('chat instance initiated successfully');\n                return ({ result: chat });\n            })\n            .catch(error => {\n                this.chatStatus = ChatStatus.NONE;\n                loggers.chat.debug('chat instance failed to initialize', { details: { error } });\n                return ({ error });\n            });\n    }\n\n    private destroyChat = () => {\n        this.sources = null;\n        this.targets = null;\n\n        this.chatStatus = ChatStatus.NONE;\n\n        this.initializing = null;\n\n        this.chat = null;\n        this.chatConfig = null;\n    }\n\n    private isNewChatConfig = (config: ChatConfig): boolean  => {\n        if (isEmpty(config)) {\n            return false;\n        }\n\n        const existingConfig = this.chatConfig;\n        const isNewConfig = (config.clientId !== (existingConfig && existingConfig.clientId));\n        return isNewConfig;\n    }\n\n    private getNewChat = (chatConfig: ChatConfig): Promise<PromiseResult<CoreChat, any>> => {\n        return new Promise<PromiseResult<CoreChat, any>>((resolve) => {\n            this.closeChat().then(() => {\n                this.getExistingOrBuildAChat(chatConfig)\n                    .then((chatOrError: PromiseResult<CoreChat, any>) => {\n                        resolve(chatOrError);\n                    });\n            }).catch(error => {\n                resolve({ error });\n            });\n        });\n    }\n\n    private getExistingOrBuildAChat = (chatConfig: ChatConfig): Promise<PromiseResult<CoreChat, any>> => {\n        return new Promise<PromiseResult<CoreChat, any>>(async (resolve) => {\n            let chat: CoreChat;\n\n            if (!this.chat) {\n                loggers.chat.debug('creating a new chat instance');\n\n                chat = new CoreChat(chatConfig, this.getChatHandler());\n                this.chatConfig = chatConfig;\n                this.chat = chat;\n                this.chatStatus = ChatStatus.NONE;\n                this.initializing = null;\n                this.sources = null;\n                this.targets = null;\n            } else {\n                loggers.chat.debug('using an existing chat instance');\n                chat = this.chat;\n            }\n\n            if (this.chatStatus !== ChatStatus.INITIALIZED) {\n                if (!this.initializing) {\n                    this.initializing = this.initializeChat(chat);\n                }\n                const { result, error } = await this.initializing;\n                resolve(error ? { error } : { result });\n            } else {\n                resolve({ result: chat });\n            }\n        });\n    }\n\n    getInstanceId = () => this.instanceId;\n\n    getChat = (chatConfig: ChatConfig): Promise<PromiseResult<CoreChat, GET_CHAT_ERROR | any>> => {\n        /** If new chat config was provided, then discard the old chat and recreate */\n        const isConfigNew = this.isNewChatConfig(chatConfig);\n\n        /**\n         * If the current chat cannot be reused, but we got the same chat config,\n         * raise an exception signalling that chat config is outdated\n         */\n        const isExistingChatNotReusable = this.chatStatus === ChatStatus.NOT_REUSABLE\n            && !this.isNewChatConfig(chatConfig);\n\n        if (isConfigNew) {\n            return this.getNewChat(chatConfig);\n        } else {\n            return isExistingChatNotReusable\n                ? Promise.resolve({ error: GET_CHAT_ERROR.BAD_CHAT_CONFIG })\n                : this.getExistingOrBuildAChat(chatConfig);\n        }\n    }\n\n    sendQueryResponse = (chat: CoreChat, key: string, response: PrivateChatInvitationAnswer): Promise<PromiseResult<any, any>> =>\n        // TODO remove chat from params list, use the instance one\n        new Promise<PromiseResult<any, any>>(resolve => {\n            chat.sendQueryResponse(key, response)\n                .then((result) => resolve({ result }))\n                .catch(error => resolve({ error }));\n        });\n\n    /**\n     * It starts the message communication between the client and the model through\n     * the chat instance. If the the ability canText is true => enable the text first\n     * and then use the sendMessage function.\n     */\n    startText = (chat: CoreChat): Promise<boolean> => {\n        // TODO remove chat from params list, use the instance one\n\t\tloggers.chat.debug('Starting text ability...');\n        return new Promise<boolean>(resolve => {\n            chat.startText()\n                .then(result => resolve(true))\n                .catch(error => resolve(false));\n        });\n    };\n\n    sendMessage = (text: string): Promise<any> => {\n        return new Promise<any>(resolve => {\n            if (this.chat) {\n\t\t\t\tloggers.chat.debug('Sending a message', { text });\n\n                this.chat.sendMessage(text)\n                    .then(result => {\n                        loggers.chat.debug('Message successfully sent');\n\n                        if (ChatService.listeners.onMessageListener) {\n                            ChatService.listeners.onMessageListener(this.instanceId, {\n\t\t\t\t\t\t\t\ttext,\n\t\t\t\t\t\t\t\tmsgType: MsgType.CHAT,\n                                direction: MessageDirection.out\n                            });\n                        }\n\n                        resolve({ result, isError: false });\n                    })\n                    .catch(error => {\n                        loggers.chat.debug('Message sending has failed', { details: { error } });\n\t                    resolve({ error, isError: true });\n                    });\n            } else {\n                resolve({ error: true });\n            }\n        });\n    };\n\n    sendMediaFile = (file: File, messageKey?: string): Promise<PromiseResult<any, any>> => (\n        new Promise<any>(resolve => {\n            if (this.chat) {\n                loggers.chat.debug('Sending media file', { file });\n                this.chat.sendMediaFile(file, messageKey || '')\n                    .then(result => {\n                            loggers.chat.debug('Media file successfully sent');\n                            resolve({ result });\n                        }\n                    )\n                    .catch(error => {\n                        loggers.chat.debug('Media file sending has failed', { details: { error } });\n                        resolve({ error });\n                    })\n            } else {\n                resolve({ error: true });\n            }\n        })\n    );\n\n    getStream = (chat: CoreChat, previewMode?: boolean): Promise<PromiseResult<SourceSet, any>>  => {\n        // TODO remove chat from params list, use the instance one\n        return new Promise<PromiseResult<SourceSet, any>>(resolve => {\n            const isOurChat = this.chat === chat;\n            const streamConfig: any = { mobile: isMobile };\n\n            if (previewMode) {\n                streamConfig.type = 'preview';\n            }\n\n            if (isOurChat && this.sources) {\n                loggers.chat.debug('using an existing video stream');\n                resolve({ result: this.sources });\n            } else {\n                chat.startStream(streamConfig).then((sources: SourceSet) => {\n                    if (isOurChat) {\n                        this.sources = sources;\n                    }\n\n                    loggers.chat.debug('starting a new video stream');\n                    resolve({ result: sources });\n                }).catch(error => {\n                    loggers.chat.debug(\n                        'starting stream failed with the following reason', { details: { error } }\n                    );\n                    resolve({ error });\n                });\n            }\n        });\n    };\n\n    startPrivateChat = (chat: CoreChat): Promise<PromiseResult<any, any>> => {\n        // TODO remove chat from params list, use the instance one\n        return new Promise<PromiseResult<any, any>>(resolve => {\n            chat.startSingle().then((result) => {\n                loggers.chat.debug('started private chat', { details: { result } });\n                resolve({ result });\n            })\n                .catch(error => {\n                    loggers.chat.debug('failed to start private chat', { details: { error } });\n                    resolve({ error })\n                });\n        });\n    };\n\n    stopUpstream = (): Promise<PromiseResult<OK_RESULT, any>> => {\n        return new Promise<PromiseResult<OK_RESULT, any>>((resolve) => {\n            if (this.chat) {\n                this.chat.stopUpstream()\n                    .then((result) => {\n                        this.targets = null;\n                        loggers.chat.debug('upstream stopped successfully');\n                        resolve({ result: OK_RESULT_VALUE });\n                    })\n                    .catch(error => {\n                        loggers.chat.debug('stopping upstream raised this error:', { details: { error } });\n                        resolve({ error });\n                    });\n            } else {\n                loggers.chat.debug('no chat to stop upstream for');\n                resolve({ result: OK_RESULT_VALUE });\n            }\n        });\n\n    };\n\n    getUpstream = (chat: CoreChat): Promise<PromiseResult<TargetSet, any>> => {\n        // TODO remove chat from params list, use the instance one\n        return new Promise<PromiseResult<TargetSet, any>>((resolve) => {\n            const isOurChat = this.chat === chat;\n\n            if (isOurChat && this.targets) {\n                loggers.chat.debug('using an existing up stream');\n                resolve({ result: this.targets });\n            } else {\n                chat.startUpstream().then((targets: TargetSet) => {\n                    loggers.chat.debug('upstream (re)started successfully');\n                    if (isOurChat) {\n                        this.targets = targets;\n                    }\n                    resolve({ result: targets });\n                }).catch(error => {\n                    loggers.chat.debug('upstream (re)starting failed with the following reason',\n                        { details: { error } });\n                    resolve({ error });\n                });\n            }\n        });\n    };\n\n    closeChat = (isUserIntended?: boolean): Promise<PromiseResult<OK_RESULT, any>> => {\n        const userIntendedExitCode = ExitCode.USER;\n        return new Promise<PromiseResult<OK_RESULT, any>>((resolve) => {\n            if (this.chat) {\n                if (this.chatStatus !== ChatStatus.CLOSING) {\n                    this.chatStatus = ChatStatus.CLOSING;\n\n                    let closeArgs: ExitCode[] = isUserIntended ? [userIntendedExitCode] : [];\n                    if (this.exitCode) {\n\t\t\t\t\t\tcloseArgs = [this.exitCode];\n\t\t\t\t\t}\n\n                    this.chat\n                        .close.apply(this.chat, closeArgs)\n                        .then((result) => {\n                            loggers.\n\t\t\t\t\t\t\tchat.debug(`chat instance closed successfully with arguments ${closeArgs.join()}`);\n                            this.chatStatus = ChatStatus.CLOSED;\n                            this.destroyChat();\n                            resolve({ result: OK_RESULT_VALUE });\n                        })\n                        .catch(error => {\n                            loggers.chat.debug('closing chat raised this error:', { details: { error } });\n                            this.chatStatus = ChatStatus.CLOSED;\n                            if (isUserIntended && ChatService.listeners.chatStopListener) {\n                                ChatService.listeners.chatStopListener(this.instanceId, userIntendedExitCode);\n                            }\n                            this.destroyChat();\n                            resolve({ error });\n                        });\n                }\n            } else {\n                loggers.chat.debug('no chat to close');\n                resolve({ result: OK_RESULT_VALUE });\n            }\n        });\n    };\n\n    sendTip = (chat: CoreChat, amount: number): Promise<PromiseResult<any, any>> => {\n        // TODO remove chat from params list, use the instance one\n        return chat && chat.sendTip(amount, \"\")\n            .then(result => {\n                loggers.chat.debug('tip sent successfully');\n                return { result };\n            })\n            .catch(error => {\n                loggers.chat.debug('sending tip raised this error', { details: { error } });\n                return { error };\n            });\n    };\n\n    sendMetrics = (info) => {\n        if (this.chat) {\n            this.chat.sendMetrics(info);\n        }\n    };\n\n    sendCharge = (chat: CoreChat, amount: number): Promise<PromiseResult<any, any>> => {\n        // TODO remove chat from params list, use the instance one\n        loggers.chat.debug('recharging with...', { details: { amount } });\n\n        return chat && chat.sendCharge(amount)\n            .then(result => {\n                loggers.chat.debug('charge sent successfully');\n                return { result };\n            })\n            .catch(error => {\n                loggers.chat.debug('sending charge raised this error', { details: { error } });\n                return { error };\n            });\n    };\n\n    getChargeInfo = (chat: CoreChat): Promise<PromiseResult<ChargeInfo, any>> => {\n        // TODO remove chat from params list, use the instance one\n        return chat && chat.getChargeInfo()\n            .then(result => {\n                loggers.chat.debug('charge info successfully retrieved', { details: { result } });\n                return { result };\n            })\n            .catch(error => {\n                loggers.chat.debug('getting charge info raised this error', { details: { error } });\n                return { error };\n            });\n    };\n\n    sendAudioState = (enabled: boolean): Promise<any> => {\n        return new Promise<any>(resolve => {\n            if (this.chat) {\n            \tif (this.audioState === enabled) {\n            \t\t// don't call the API with the same value repeatedly\n\t\t\t\t\tresolve({ result: true });\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.chat.sendAudioState(enabled)\n                    .then(result => {\n                        loggers.chat.debug('audio state change successfully sent', { details: { result } })\n\n\t\t\t\t\t\tthis.audioState = enabled;\n                        resolve({ result })\n                    })\n                    .catch(error => {\n                        loggers.chat.debug('audio state change has failed', { details: { error } });\n\n                        resolve({ error })\n                    });\n            } else {\n                resolve({ error: true })\n            }\n        });\n    };\n\n    uploadImage = (chat: CoreChat, data: FormData): Promise<PromiseResult<any, any>> => {\n        return new Promise<PromiseResult<any, any>>((resolve) => {\n            if (chat) {\n                const imageUploadUrl = chat.uploadUrl;\n                request.post(imageUploadUrl)\n                    .send(data)\n                    .set(\"Accept\", \"application/json\")\n                    .end((error, result) => {\n                        if (error) {\n                            resolve({ error });\n                        } else {\n                            resolve({ result });\n                        }\n                    });\n            } else {\n                resolve({ error: true })\n            }\n        });\n    }\n}\n\nexport default ChatService;\n\n// re-export vchat-core things and use them from here, to avoid testing problems\nexport {\n    Abilities, Limits, Query, CoreChat, SourceSet, TargetSet, ChatConfig,\n    ChargeInfo, ExitCode, User, UserEvent, UserEventType };\n\n","import { Action } from \"redux-actions\";\nimport { isMobile } from \"react-device-detect\";\nimport { put, select, spawn, takeEvery } from 'redux-saga/effects';\n\nimport config from '../../../static/config';\nimport { createAction, createActionType } from \"../../../redux/utils\";\nimport { IPayload } from \"../../../redux/interfaces\";\nimport selectors from '../../../redux/selectors';\nimport { VideoChatType } from \"../../../redux/store\";\nimport ChatService from '../../../services/ChatService';\nimport { cam2CamMaximize, cam2CamMinimize } from '../../../redux/modules/videochat';\nimport PlayerService, { CameraConfig, CameraPosition } from '../../../services/PlayerService';\nimport { ActionIds } from \"../../../redux/interfaces\";\nimport utils from \"../../../utils\";\n\nexport enum AdjustCam2CamType {\n    MINIMIZE,\n    MAXIMIZE\n}\n\nconst createCam2CamActionType = createActionType(ActionIds.CAM2CAM, { isSagaAction: true });\n\n// Actions\nconst TOGGLE_CAM2CAM = createCam2CamActionType(\"TOGGLE_CAM2CAM\");\nconst MINIMIZE_CAM2CAM = createCam2CamActionType(\"MINIMIZE_CAM2CAM\");\nconst MAXIMIZE_CAM2CAM = createCam2CamActionType(\"MAXIMIZE_CAM2CAM\");\n\n// Action Creators\nexport const toggleCam2Cam = createAction(TOGGLE_CAM2CAM);\nexport const minimizeCam2Cam = createAction(MINIMIZE_CAM2CAM);\nexport const maximizeCam2Cam = createAction(MAXIMIZE_CAM2CAM);\n\n// Sagas\nexport const startCam2CamSaga = function* (instanceId: string, width?: number) {\n    const { cam2camMobileFrameWidth, cam2camDesktopFrameWidth } = config.viewSizes;\n    const defaultWidth = isMobile ? cam2camMobileFrameWidth : cam2camDesktopFrameWidth;\n    const initialVideoType = yield select(selectors.getInitialVideoChatType, instanceId);\n\n    const cameraCloseButton = utils.getCameraCloseButton();\n\n    const configuration: CameraConfig = {\n        position: initialVideoType === VideoChatType.NO_DOWNSTREAM ? CameraPosition.FullScreen : CameraPosition.TopLeft,\n        width: width || defaultWidth,\n        closeButtonElement: cameraCloseButton\n    };\n\n    PlayerService.getService(instanceId).startCamera(configuration);\n};\n\nexport const stopCam2CamSaga = function* (instanceId: string) {\n    PlayerService.getService(instanceId).stopCamera();\n    ChatService.getService(instanceId).stopUpstream();\n    yield put(cam2CamMaximize(instanceId));\n};\n\nconst adjustCam2Cam = function* ({ payload, type }: Action<IPayload>) {\n    const { instanceId } = payload;\n    const { MINIMIZE, MAXIMIZE } = AdjustCam2CamType;\n    const cam2camType = type === MINIMIZE_CAM2CAM ? MINIMIZE : MAXIMIZE;\n\n    const { cam2camMobileFrameWidth, cam2camDesktopFrameWidth } = config.viewSizes;\n    const initialWidth = isMobile ? cam2camMobileFrameWidth : cam2camDesktopFrameWidth;\n    const width = (cam2camType === AdjustCam2CamType.MINIMIZE) ? initialWidth / 2 : initialWidth;\n\n    PlayerService.getService(instanceId).updateCamera({ width });\n\n    yield put(cam2camType === AdjustCam2CamType.MINIMIZE\n        ? cam2CamMinimize(instanceId)\n        : cam2CamMaximize(instanceId)\n    );\n};\n\nconst toggleCam2CamSaga = function* ({ payload: { instanceId }}: Action<IPayload>) {\n    const isCam2CamActive = yield select(selectors.isCam2CamActive, instanceId);\n\n    yield spawn(isCam2CamActive ? stopCam2CamSaga : startCam2CamSaga, instanceId);\n};\n\nconst watchSagas = function* () {\n    yield takeEvery(TOGGLE_CAM2CAM, toggleCam2CamSaga);\n    yield takeEvery(MINIMIZE_CAM2CAM, adjustCam2Cam);\n    yield takeEvery(MAXIMIZE_CAM2CAM, adjustCam2Cam);\n};\n\nexport default watchSagas;\n","import ChatService from \"./ChatService\";\n\nexport default ChatService;\n","import { Action } from \"redux-actions\";\nimport { IPayload } from \"../redux\";\n\nexport const takePattern = (actionType: string, instanceId: string) =>\n    (action: Action<IPayload>) => action.type === actionType && action.payload.instanceId === instanceId;\n","import { get } from 'lodash';\nimport { RESULT } from \"vxcontrol-client-lib\";\nimport { call, put, race, select, take } from \"redux-saga/effects\";\n\nimport utils from \"../../utils\";\nimport loggers from \"../../loggers\";\nimport types from \"../websockets/types\";\nimport { IChat } from \"../../redux/store\";\nimport { ActionIds } from '../../redux/interfaces';\nimport { createAction, createActionType } from '../../redux/utils';\nimport selectors from \"../../redux/selectors\";\nimport { requestChat } from \"../websockets/chat\";\nimport AppService from \"../../services/AppService\";\nimport { PromiseResult } from \"../../services/types\";\nimport { SET_CHAT } from \"../../redux/modules/session\";\nimport {setExitEvent} from \"../../redux/modules/videochat\";\nimport { closeMessenger } from \"../../redux/modules/messenger\";\nimport ChatService from \"../../services/ChatService\";\nimport { CoreChat, GET_CHAT_ERROR } from \"../../services/ChatService/types\";\nimport { takePattern } from \"../utils\";\nimport { VXControlCodes } from '../../static/constants/errorCodes';\n\nconst createChatActionType = createActionType(ActionIds.CHAT_SAGA_COMMON, { isSagaAction: true });\n\n// Actions\nconst RECEIVE_CHAT_ERROR = createChatActionType(\"RECEIVE_CHAT_ERROR\");\n\n// Action Creators\nexport const onReceiveChatError = createAction<RESULT>(RECEIVE_CHAT_ERROR);\n\n// Sagas\nconst getChatSaga = function* (instanceId: string, type?: types.SubActionType) {\n    yield put(requestChat(instanceId, type));\n\n    const result = yield race({\n        result: take(takePattern(SET_CHAT, instanceId)),\n        error: take(takePattern(RECEIVE_CHAT_ERROR, instanceId))\n    });\n\n    return result;\n};\n\nexport interface IGetChatInstanceSagaResult {\n    chatConf: {\n        /** Chat configuration we're getting from CMDP_QUERYBACKEND */\n        result?: IChat;\n        /** Error got while trying to get a chat configuration */\n        error?: RESULT | true;\n    };\n\n    chatInstance?: {\n        result?: CoreChat;\n        /** Error got while trying to initialize a CoreChat instance (the one of vchat-core) */\n        error?: any;\n    }\n}\n\nexport const getChatInstanceSaga = function* (\n    requestNewConfig: boolean,\n    instanceId: string,\n    type: types.SubActionType = types.SubActionType.STARTVIDEOCHAT\n) {\n        let chatConfError = true;\n\n        const chatService = ChatService.getService(instanceId);\n\n        let chatConf: IChat = yield select(selectors.getChat, instanceId);\n        const isChatExternallyProvided = yield select(selectors.isChatExternallyProvided, instanceId);\n\n        // require chat data only if it was not externally provided\n        if (!isChatExternallyProvided) {\n            if (requestNewConfig) {\n                const { error } = yield call(getChatSaga, instanceId, type);\n                chatConfError = error ? error.payload.value : chatConfError;\n            }\n\n            chatConf = yield select(selectors.getChat, instanceId);\n\n            if (!chatConf) {\n                // if chat conf cannot be achieved because there are not enough money, call the external recharge hook\n                if (get(chatConfError, \"code\") === VXControlCodes.NO_CREDIT_VIDEOCHAT) {\n                    AppService.getService(instanceId).onRecharge();\n                }\n\n                return { chatConf: { error: chatConfError }};\n            }\n        }\n\n        const platformProps = yield select(selectors.getPlatformProps, instanceId);\n\n        let chatInstance: PromiseResult<CoreChat, any> = yield call(chatService.getChat,\n            utils.getChatConfig(chatConf, platformProps)\n        );\n\n        if (chatInstance.error && isChatExternallyProvided) {\n            // let the external platform knows about the failed chat initialization\n            // based on provided chat data\n            loggers.saga.debug(\n                'could not create a chat instance based on externally provided chat config'\n            );\n\n            AppService.getService(instanceId).onFailedChatConfig(chatInstance.error);\n            yield put(setExitEvent(instanceId, { exitCode: chatInstance.error.code }));\n            yield put(closeMessenger(instanceId));\n\n        } else if (chatInstance.error === GET_CHAT_ERROR.BAD_CHAT_CONFIG) {\n            // chat config is outdated; try requesting a new one\n            const { error } = yield call(getChatSaga, instanceId, type);\n            chatConf = yield select(selectors.getChat, instanceId);\n\n            if (!chatConf) {\n                loggers.saga.debug(\n                    'could not get chat (conf); tried to get a new one, but with no success; aborting'\n                );\n\n                return { chatConf: { error: error.payload.value }};\n            }\n\n            chatInstance = yield call(chatService.getChat, utils.getChatConfig(chatConf, platformProps));\n        }\n\n        return { chatConf: { result: chatConf }, chatInstance };\n    };\n","import { Action } from \"redux-actions\";\nimport { call, put, race, select, take, takeEvery } from \"redux-saga/effects\";\n\nimport loggers from \"../../loggers\";\nimport { createAction, createActionType } from '../../redux/utils';\nimport { IPayload } from '../../redux/interfaces';\nimport { getChatInstanceSaga } from \"./chat\";\nimport selectors from \"../../redux/selectors\";\nimport { ActionIds } from \"../../redux/interfaces\";\nimport AppService from \"../../services/AppService\";\nimport ChatService from \"../../services/ChatService\";\nimport { setActionResponse } from \"../../redux/modules/messenger\";\nimport { setInformation } from \"../../redux/modules/videochat\";\nimport { setLastChargedAmount } from \"../../redux/modules/session\";\nimport { ActionResponseType, ICurrency, CurrencyName, VideochatInformationType } from \"../../redux/store\";\nimport {takePattern} from \"../utils\";\n\nconst createRechargeActionType = createActionType(ActionIds.RECHARGE, { isSagaAction: true });\n\n// Actions\nconst RECHARGE_EXTERNAL = createRechargeActionType(\"RECHARGE_EXTERNAL\");\nconst RECHARGE_FROM_CHAT = createRechargeActionType(\"RECHARGE_FROM_CHAT\");\nconst RECHARGE_FROM_CHAT_SUCCESS = createRechargeActionType(\"RECHARGE_FROM_CHAT_SUCCESS\");\nconst RECHARGE_FROM_CHAT_FAIL = createRechargeActionType(\"RECHARGE_FROM_CHAT_FAIL\");\n\n// Action Creators\nexport const rechargeExternal = createAction(RECHARGE_EXTERNAL);\nexport const rechargeFromChat = createAction<number>(RECHARGE_FROM_CHAT);\nexport const rechargeFromChatSuccess = createAction(RECHARGE_FROM_CHAT_SUCCESS);\nexport const rechargeFromChatFail = createAction(RECHARGE_FROM_CHAT_FAIL);\n\n// Sagas\nconst rechargeExternalSaga = function* ({ payload: { instanceId }}: Action<IPayload>) {\n    yield call(AppService.getService(instanceId).onRecharge);\n};\n\n/** We receive the recharge amount from the vchat-core library */\nconst rechargeFromChatSaga = function* ({ payload }: Action<IPayload<number>>) {\n    const { instanceId, value } = payload;\n    const chat = yield call(getChatInstanceSaga, false, instanceId);\n\n    if (chat.chatConf.error) {\n        loggers.saga.debug('RECHARGE - could not get chat(conf); aborting');\n        return;\n    }\n\n    if (chat.chatInstance.error) {\n        loggers.saga.debug(\n            'RECHARGE -trying to get a chat to make a recharge raised this error:',\n            { details: { error: chat.chatInstance.error }}\n        );\n\n        yield put(rechargeFromChatFail(instanceId, chat.chatInstance.error));\n        return;\n    }\n\n    const currency: ICurrency = yield select(selectors.getCurrency, instanceId);\n\n    // credits are sent as they are, but for other currencies, API is working with \"cents\";\n    // so since we are storing the currency values (Dollars, Euros), we should multiply them hundred times\n    const chargingAmount = currency.name === CurrencyName.Credits ? value : value * 100;\n\n    const { error } = yield call(ChatService.getService(instanceId).sendCharge, chat.chatInstance.result, chargingAmount);\n\n    if (error) {\n        yield put(rechargeFromChatFail(instanceId, error));\n    } else {\n        yield put(setLastChargedAmount(instanceId, value));\n        yield put(rechargeFromChatSuccess(instanceId));\n    }\n};\n\nconst rechargeFromChatFailSaga = function* ({ payload }: Action<IPayload>) {\n    const { instanceId, value } = payload;\n\n    yield put(setActionResponse(instanceId, {\n        text: value.reason,\n        type: ActionResponseType.ERROR\n    }));\n\n    const isOneClickRechargeAvailable = yield select(selectors.isOneClickRechargeAvailable, instanceId);\n\n    yield put(setInformation(instanceId,\n        isOneClickRechargeAvailable\n            ? VideochatInformationType.OUT_OF_MONEY_ONE_CLICK_RECHARGE\n            : VideochatInformationType.OUT_OF_MONEY\n    ));\n};\n\n/**\n * this can be used to see whether the recharge from chat succeeded or failed.\n * E.g.\n * const {result, error} = yield call(getResultOfRechargeFromChatSaga);\n */\nexport const getResultOfRechargeFromChatSaga = function* ({ payload }: Action<IPayload>) {\n    const { instanceId } = payload;\n\n    const result = yield race({\n        result: take(takePattern(RECHARGE_FROM_CHAT_SUCCESS, instanceId)),\n        error: take(takePattern(RECHARGE_FROM_CHAT_FAIL, instanceId))\n    });\n\n    return result;\n};\n\nconst watchSagas = function* () {\n    yield takeEvery(RECHARGE_EXTERNAL, rechargeExternalSaga);\n    yield takeEvery(RECHARGE_FROM_CHAT, rechargeFromChatSaga);\n    yield takeEvery(RECHARGE_FROM_CHAT_FAIL, rechargeFromChatFailSaga);\n};\n\nexport default watchSagas;\n","import styled from 'styled-components';\nimport config from '../../../static/config'\nimport withCustomClasses, { DomCustomClass } from \"../../hoc/withCustomClasses/\";\n\ninterface IBaseButtonWrapperProps {\n    isResponsive?: boolean;\n    isFullScreen?: boolean;\n    isForActionSection?: boolean;\n}\n\nexport interface IBaseButtonProps {\n    isSelected?: boolean\n}\n\nexport const BaseButtonWrapper = withCustomClasses<IBaseButtonWrapperProps>(styled.div<IBaseButtonWrapperProps>`\n    font-family: ${(props) => props.theme.typography.fontFamily};\n\tfont-weight: ${(props) => props.theme.typography.weight.medium};\n\t\n    ${(props: IBaseButtonWrapperProps) => props.isFullScreen \n        && `max-width: ${config.viewSizes.maxButtonWidthInFullscreen}px;`}\n    ${(props: IBaseButtonWrapperProps) => props.isForActionSection && 'max-width: 50%;'}\n    \n\tfont-size: 16px;\n\tline-height: 15px;\n    display: inline-block;\n    clear: both;\n    width: 100%;\n    box-sizing: border-box;\n`, [DomCustomClass.ActionSectionBaseButton]);\n\nexport const BaseButton = styled.button<IBaseButtonProps>`\n    font-family: ${(props) => props.theme.typography.fontFamily};\n    font-weight: ${(props) => props.theme.typography.weight.regular};\n    \n    font-size: 12px;\n    height: 44px;\n    border-radius: 3px;\n    cursor: pointer;\n    transition: all .15s linear;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`;\n\nexport const BaseButtonContent = styled.span`\n    text-align: left;\n    display: inline-block;\n    text-transform: uppercase;\n    font-family: \"Roboto Condensed\",sans-serif;\n`;\n\nconst BaseRowText = styled.span`\n    text-align: left;\n    display: block;\n`;\n\nexport const FirstRowText = styled(BaseRowText)`\n    font-size: 16px;\n    white-space: nowrap;\n`;\n\nexport const SingleRowText = styled(BaseRowText)`\n    font-size: 14px;\n`;\n\nexport const SecondRowText = styled(BaseRowText)`\n    font-size: 11px;\n`;\n\nexport const VipSingleRowText = styled(BaseRowText)`\n    font-weight: ${props => props.theme.typography.weight.medium};\n    \n    font-size: 16px;\n    line-height: 15px;\n    width: min-content;\n`;\n","import styled from 'styled-components';\n\nimport config from \"../../../static/config\";\nimport { BaseButton } from '../../common/BaseButton/style';\nimport withCustomClasses, { DomCustomClass } from \"../../hoc/withCustomClasses/\";\n\nexport const LiveChatButtonWrapper = withCustomClasses(styled(BaseButton)`\n    background-color: #43B31C;\n    border: 1px solid #43B31C;\n    color: #FFFFFF;\n    text-align: center;\n    width: 100%;\n    box-sizing: border-box;\n\n    &:hover {\n        background-color: #66E03B;\n        border-color: #66E03B;\n        color: #FFFFFF;\n    }\n\n    i {\n\t\tfont-size: ${config.viewSizes.actionSectionButton}px;\n        position: relative;\n        display: inline-block;\n        padding-right: 5px;\n    }\n`, [DomCustomClass.LiveChatButton]);\n","import * as React from 'react';\nimport { BaseButtonWrapper } from './style';\n\ninterface IProps {\n    isForActionSection?: boolean;\n    isResponsive: boolean;\n    isFullScreen: boolean;\n    onClick?: () => void;\n    children: any;\n}\n\nconst BaseButton = (props: IProps) => (\n    <BaseButtonWrapper\n        isResponsive={props.isResponsive}\n        isFullScreen={props.isFullScreen}\n        isForActionSection={props.isForActionSection}\n        onClick={props.onClick}\n    >\n        {props.children}\n    </BaseButtonWrapper>\n);\n\nexport default BaseButton;\n","import BaseButtonContainer from './BaseButtonContainer';\n\nexport default BaseButtonContainer;\n","import * as React from 'react';\n\nimport BaseButton from './BaseButton';\nimport IStore from '../../../redux/store';\nimport selectors from '../../../redux/selectors';\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\n\ninterface IStoreProps {\n    isResponsive: boolean;\n    isFullScreen: boolean;\n}\n\ninterface IComponentProps {\n    children: any;\n    isForActionSection?: boolean;\n\n    onClick?: () => void;\n}\n\ntype IProps = IStoreProps & IComponentProps & IInstanceProps;\n\nconst BaseButtonContainer = (props: IProps) => (\n    <BaseButton\n        isResponsive={props.isResponsive}\n        isFullScreen={props.isFullScreen}\n        isForActionSection={props.isForActionSection}\n        onClick={props.onClick}\n        children={props.children}\n    />\n);\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    isFullScreen: selectors.isFullScreen(store, instanceId),\n    isResponsive: selectors.isResponsive(store, instanceId)\n});\n\nexport default withRedux<IComponentProps>(BaseButtonContainer, mapStateToProps);","import * as React from 'react';\nimport { ICurrency, ITranslation } from '../../../redux/store';\nimport utils from '../../../utils';\nimport { BaseButtonContent, FirstRowText, SecondRowText } from '../../common/BaseButton/style';\nimport Tooltip from '../../common/Tooltip';\nimport { LiveChatButtonWrapper } from './style';\nimport BaseButtonContainer from '../../common/BaseButton';\n\nexport interface ILiveChatButtonProps {\n    price?: number;\n    currency: ICurrency;\n    translation: ITranslation;\n    shouldDisplayIcon?: boolean;\n    isForActionSection?: boolean;\n    shouldRenderPrice?: boolean;\n\n    onClick: () => void;\n}\n\nconst LiveChatButton = (props: ILiveChatButtonProps) => {\n    const { tooltipVideochat, liveChat } = props.translation.chat;\n\n    const liveChatPrice = utils.translationWithValues(\n        props.translation.common.perMinute, \n        { price: `${props.price} ${props.currency.symbol}` }\n    );\n\n    const liveChatButton = (\n        <LiveChatButtonWrapper>\n            {utils.getShouldDisplayIcon(props.shouldDisplayIcon) &&\n            \t<i className={\"-icon-webcam-single-full\"} />\n\t\t\t}\n\n\t\t\t<BaseButtonContent>\n\t\t\t\t<FirstRowText>{liveChat}</FirstRowText>\n\t\t\t\t{props.shouldRenderPrice && <SecondRowText>{liveChatPrice}</SecondRowText>}\n\t\t\t</BaseButtonContent>\n        </LiveChatButtonWrapper>\n    );\n\n    const liveChatButtonWithTooltip = (\n        <Tooltip text={tooltipVideochat} id=\"live-chat\">\n            {liveChatButton}\n        </Tooltip>\n    );\n\n    return (\n        <BaseButtonContainer\n            onClick={props.onClick}\n            isForActionSection={props.isForActionSection}\n        >\n            {tooltipVideochat\n                ? liveChatButtonWithTooltip\n                : liveChatButton\n            }\n        </BaseButtonContainer>\n    );\n};\n\nexport default LiveChatButton;\n","import { IContainerProps as IProps } from './types';\nimport { VideoChatType } from '../../../redux/store';\n\nexport const onLiveChatButtonClick = (props: IProps) => () => {\n    const { LIVECHAT, FREECHAT } = VideoChatType;\n    const videoChatType = props.hasFreeChatDuration ? FREECHAT : LIVECHAT;\n\n    props.startVideoChatType(props.instanceId, videoChatType);\n};\n","import { Action } from \"redux-actions\";\nimport {put, takeEvery} from \"redux-saga/effects\";\n\nimport { createAction, createActionType } from \"../../redux/utils\";\nimport { IPayload } from \"../../redux/interfaces\";\nimport ApiService from \"../../services/ApiService\";\nimport {resetStore} from \"../../redux/modules/app\";\nimport PlayerService from \"../../services/PlayerService\";\nimport ChatService from \"../../services/ChatService\";\nimport { ActionIds } from \"../../redux/interfaces\";\nimport AppService from \"../../services/AppService\";\n\nconst createCloseActionType = createActionType(ActionIds.CLOSE, { isSagaAction: true });\n\n// Actions\nconst CLOSE_APP = createCloseActionType(\"CLOSE_APP\");\n\n// Action Creators\nexport const closeApp = createAction(CLOSE_APP);\n\n// Saga\nconst closeAppSaga = function*({ payload: { instanceId }}: Action<IPayload>) {\n\t// this should always happen before destroying the AppService instance,\n\t// otherwise a new VXControl connection will start.\n    yield put(resetStore(instanceId));\n\n    // release vchat-core and vchat-player resources\n    ChatService.destroyService(instanceId);\n    PlayerService.destroyService(instanceId);\n\n    // Close the API websocket connection (vxcontrol-lib)\n    ApiService.destroy(instanceId);\n    AppService.destroyService(instanceId);\n};\n\nconst watchSagas = function*() {\n    yield takeEvery(CLOSE_APP, closeAppSaga);\n};\n\nexport default watchSagas;\n","import { isEmpty, some } from 'lodash';\nimport { Action } from 'redux-actions';\nimport { call, put, select, takeEvery, delay } from 'redux-saga/effects';\n\nimport loggers from \"../../loggers\";\nimport config from '../../static/config';\nimport constants from '../../static/constants';\nimport { rechargeFromChat } from \"./recharge\";\nimport selectors from '../../redux/selectors';\nimport AppService from '../../services/AppService';\nimport { ActionIds } from '../../redux/interfaces';\nimport { createAction, createActionType } from '../../redux/utils';\nimport { IPayload } from '../../redux/interfaces';\nimport ChatService from \"../../services/ChatService\";\nimport PlayerService from \"../../services/PlayerService\";\nimport { PrivateChatInvitationAnswer } from '../../services/types';\nimport { getChatInstanceSaga, IGetChatInstanceSagaResult } from \"./chat\";\nimport { startVideoChatType, stopVideoChat, stopVideoChatPlayer } from \"./videochat\";\nimport {\n    ANSWER_USER_PROMPT_SECTION,\n    CLOSE_USER_PROMPT_SECTION,\n    closeMessenger,\n    closeUserPromptSection,\n    openUserPromptSection,\n    resetUserPrompts,\n    setActionResponse,\n    IAnswerUserPromptPayload\n} from \"../../redux/modules/messenger\";\nimport {\n    ActionResponseType,\n    AnswerType,\n    ICameraDevice,\n    IQuestion,\n    KnownAnswerType,\n    QuestionType,\n    VideochatInformationType,\n    VideoChatType,\n    ICountdownWarning\n} from '../../redux/store';\nimport {setInformation, closeVideochat, SET_CAM2CAM_SELECTED_CAMERA} from '../../redux/modules/videochat';\n\nexport interface IOpenLoadAccountPayload {\n    warning?: ICountdownWarning;\n    answer?: AnswerType;\n}\n\nconst createUserPromptActionType = createActionType(ActionIds.USER_PROMPT, { isSagaAction: true });\n\n// Actions\nexport const OPEN_CLOSE_CHAT_PROMPT = createUserPromptActionType(\"OPEN_CLOSE_CHAT_PROMPT\");\nexport const OPEN_PRIVATE_CHAT_PROMPT = createUserPromptActionType(\"OPEN_PRIVATE_CHAT_PROMPT\");\nexport const OPEN_SPY_PRIVATE_CHAT_PROMPT = createUserPromptActionType(\"OPEN_SPY_PRIVATE_CHAT_PROMPT\");\nexport const OPEN_LOAD_ACCOUNT_ONE_CLICK_PROMPT = createUserPromptActionType(\"OPEN_LOAD_ACCOUNT_ONE_CLICK_PROMPT\");\nexport const OPEN_ANONYMOUS_TIP_PROMPT = createUserPromptActionType(\"OPEN_ANONYMOUS_TIP_PROMPT\");\nexport const OPEN_TIP_PROMPT = createUserPromptActionType(\"OPEN_TIP_PROMPT\");\nexport const OPEN_VERIFY_AGE_PROMPT = createUserPromptActionType(\"OPEN_VERIFY_AGE_PROMPT\");\nexport const CLOSE_ALL_USER_PROMPTS = createUserPromptActionType(\"CLOSE_ALL_USER_PROMPTS\");\nexport const OPEN_CHOOSE_CAMERA_PROMPT = createUserPromptActionType(\"OPEN_CHOOSE_CAMERA_PROMPT\");\n\n// Action Creators\nexport const closeAllUserPrompts = createAction(CLOSE_ALL_USER_PROMPTS);\nexport const openCloseChatPrompt = createAction(OPEN_CLOSE_CHAT_PROMPT);\nexport const openPrivateChatPrompt = createAction<string>(OPEN_PRIVATE_CHAT_PROMPT);\nexport const openSpyPrivateChatPrompt = createAction(OPEN_SPY_PRIVATE_CHAT_PROMPT);\nexport const openLoadAccountOneClickPrompt = createAction<IOpenLoadAccountPayload>(OPEN_LOAD_ACCOUNT_ONE_CLICK_PROMPT);\nexport const openAnonymousTipPrompt = createAction<string | undefined>(OPEN_ANONYMOUS_TIP_PROMPT);\nexport const openTipPrompt = createAction(OPEN_TIP_PROMPT);\nexport const openVerifyAgePrompt = createAction(OPEN_VERIFY_AGE_PROMPT);\nexport const openChooseCameraPrompt = createAction(OPEN_CHOOSE_CAMERA_PROMPT);\n\n// Sagas\nexport const openPromptSaga = function* ({ type, payload }: Action<IPayload>) {\n    const { instanceId, value } = payload;\n    const isTipOpen = yield select(selectors.isTipPromptOpen, instanceId);\n\n    switch (type) {\n        case OPEN_CHOOSE_CAMERA_PROMPT: {\n            yield put(openUserPromptSection(instanceId, {\n                type: QuestionType.CHOOSE_CAMERA\n            }));\n            break;\n        }\n\n        case OPEN_CLOSE_CHAT_PROMPT: {\n            const modelName = yield select(selectors.getModelName, instanceId);\n\n            if (isTipOpen) {\n                yield put(closeUserPromptSection(instanceId, QuestionType.SEND_ANONYMOUS_TIP));\n            }\n\n            yield put(openUserPromptSection(instanceId, {\n                type: QuestionType.CLOSE_CHAT,\n                payload: {\n                    modelName\n                }\n            }));\n            break;\n        }\n\n        case OPEN_PRIVATE_CHAT_PROMPT:\n            yield put(openUserPromptSection(instanceId, {\n                type: QuestionType.INVITE_PRIVATE_CHAT,\n                payload: {\n                    privateChatText: value\n                }\n            }));\n            break;\n\n        case OPEN_LOAD_ACCOUNT_ONE_CLICK_PROMPT:\n            const session = yield select(selectors.getSession, instanceId);\n            const isOneClickRechargeAvailable: boolean = session.oneClickRecharge.available;\n\n            if (isTipOpen) {\n                yield put(closeUserPromptSection(instanceId, QuestionType.SEND_ANONYMOUS_TIP));\n            }\n\n            if (!isOneClickRechargeAvailable) {\n                return;\n            }\n\n            const amounts = session.oneClickRecharge.amounts;\n\n            if (!amounts || isEmpty(amounts)) {\n                yield put(setActionResponse(instanceId, {\n                    // FUTURE TODO: Peter will update the translations from the server for this\n                    text: \"Amounts not available\",\n                    type: ActionResponseType.ERROR\n                }));\n                return;\n            }\n\n            yield put(openUserPromptSection(instanceId, {\n                type: QuestionType.LOAD_ACCOUNT_ONE_CLICK,\n                payload: {\n                    amounts: session.oneClickRecharge.available\n                        && session.oneClickRecharge.amounts\n                        || [],\n                    defaultAmount: session.oneClickRecharge.available\n                        && session.oneClickRecharge.defaultAmount\n                }\n            }));\n            break;\n\n        case OPEN_ANONYMOUS_TIP_PROMPT:\n            const initialChatId = value;\n            yield delay(config.videoChatTimeLimits.anonymousTip * 1000);\n            const currentChatId = yield select(selectors.getChatId, instanceId);\n            const isVideoChatInVoyeurMode = yield select(selectors.isVideoChatInVoyeurMode, instanceId);\n\n            /** Display the anonymous tip only if the voyeur type is still active after the delay */\n            if (isVideoChatInVoyeurMode && initialChatId === currentChatId) {\n                yield put(openUserPromptSection(instanceId, {\n                    type: QuestionType.SEND_ANONYMOUS_TIP\n                }));\n            }\n            break;\n\n        case OPEN_TIP_PROMPT:\n            yield put(openUserPromptSection(instanceId, {\n                type: QuestionType.SEND_TIP\n            }));\n            break;\n\n        case OPEN_SPY_PRIVATE_CHAT_PROMPT: {\n            yield put(stopVideoChatPlayer(instanceId));\n\n            const modelName = yield select(selectors.getModelName, instanceId);\n            yield put(openUserPromptSection(instanceId, {\n                type: QuestionType.SPY_PRIVATE_CHAT,\n                payload: { modelName }\n            }));\n            break;\n        }\n\n        case OPEN_VERIFY_AGE_PROMPT: {\n            const modelName = yield select(selectors.getModelName, instanceId);\n            yield put(openUserPromptSection(instanceId, {\n                type: QuestionType.VERIFY_AGE,\n                payload: { modelName }\n            }));\n            break;\n        }\n    }\n};\n\nexport const dealWithAnswerSaga = function* ({ payload }: Action<IPayload<IAnswerUserPromptPayload>>) {\n    const { instanceId, value } = payload;\n    const questionType: QuestionType = value.question.type;\n    const answer: AnswerType = value.answer;\n\n    switch (questionType) {\n        case QuestionType.CLOSE_CHAT:\n            if (answer ===  KnownAnswerType.YES) {\n                yield put(stopVideoChat(instanceId, true));\n                yield put(closeAllUserPrompts(instanceId));\n\n                // check if the exit popups are supposed to be handled externally or not\n                const hasExitPopups = yield select(selectors.hasExitPopups, instanceId);\n\n                yield put(hasExitPopups\n                    ? setInformation(instanceId, VideochatInformationType.LIVECHAT_SESSION_ENDED)\n                    : closeMessenger(instanceId));\n            }\n            break;\n\n        case QuestionType.INVITE_PRIVATE_CHAT: {\n            const chat: IGetChatInstanceSagaResult = yield call(getChatInstanceSaga, false, instanceId);\n\n            if (chat.chatConf.error) {\n                loggers.saga.debug('USER PROMPT - could not get chat; aborting');\n                return;\n            }\n\n            if (chat.chatInstance?.error) {\n                return;\n            }\n\n            if (chat.chatInstance?.result) {\n                const { yes, no } = PrivateChatInvitationAnswer;\n\n                ChatService.getService(instanceId).sendQueryResponse(\n                    chat.chatInstance.result,\n                    constants.QUERYSINGLE,\n                    answer === KnownAnswerType.YES ? yes : no\n                );\n            }\n            break;\n        }\n\n        case QuestionType.SPY_PRIVATE_CHAT:\n            yield put(answer === KnownAnswerType.YES\n                ? startVideoChatType(instanceId, VideoChatType.VOYEUR_PRIVATE_CHAT)\n                : closeVideochat(instanceId)\n            );\n            break;\n\n        case QuestionType.LOAD_ACCOUNT_ONE_CLICK:\n            yield put(rechargeFromChat(instanceId, answer as number));\n            break;\n\n        case QuestionType.VERIFY_AGE:\n            AppService.getService(instanceId).onAgeVerification();\n            break;\n    }\n\n    // close user prompt\n    yield put(closeUserPromptSection(instanceId, questionType));\n};\n\n/**\n * If we close a private chat invitation, we will send \"no\" as answer\n * to the singlechat back-end from the vchat-core library.\n */\nconst closeUserPromptSaga = function* ({ payload }: Action<IPayload<QuestionType>>) {\n    const { instanceId, value } = payload;\n    const chat: IGetChatInstanceSagaResult = yield call(getChatInstanceSaga, false, instanceId);\n\n    if (value === QuestionType.INVITE_PRIVATE_CHAT && chat.chatInstance?.result) {\n        ChatService.getService(instanceId).sendQueryResponse(\n            chat.chatInstance.result,\n            constants.QUERYSINGLE,\n            PrivateChatInvitationAnswer.no\n        );\n    }\n};\n\nconst closeAllUserPromptsSaga = function* ({ payload: { instanceId }}: Action<IPayload>) {\n    const userPrompts = yield select(selectors.getUserPrompts, instanceId);\n    const chat: IGetChatInstanceSagaResult = yield call(getChatInstanceSaga, false, instanceId);\n\n    const isInvitePrivateChatOpen: boolean = some(userPrompts, (userPrompt: IQuestion) =>\n            userPrompt.type === QuestionType.INVITE_PRIVATE_CHAT\n    );\n\n    if (isInvitePrivateChatOpen && chat.chatInstance?.result) {\n        ChatService.getService(instanceId).sendQueryResponse(\n            chat.chatInstance.result,\n            constants.QUERYSINGLE,\n            PrivateChatInvitationAnswer.no\n        );\n    }\n\n    yield put(resetUserPrompts(instanceId));\n};\n\n\nexport const setSelectedCameraSaga = function* ({ payload: { instanceId }}: Action<IPayload>) {\n    const selectedCamera: ICameraDevice = yield select(selectors.getCam2CamSelectedCamera, instanceId);\n\n    yield delay(500);\n    yield put(closeUserPromptSection(instanceId, QuestionType.CHOOSE_CAMERA));\n    PlayerService.getService(instanceId).selectCamera(selectedCamera);\n};\n\n\nconst watchSagas = function* () {\n    yield takeEvery(OPEN_CLOSE_CHAT_PROMPT, openPromptSaga);\n    yield takeEvery(OPEN_CHOOSE_CAMERA_PROMPT, openPromptSaga);\n    yield takeEvery(OPEN_PRIVATE_CHAT_PROMPT, openPromptSaga);\n    yield takeEvery(OPEN_SPY_PRIVATE_CHAT_PROMPT, openPromptSaga);\n    yield takeEvery(OPEN_LOAD_ACCOUNT_ONE_CLICK_PROMPT, openPromptSaga);\n    yield takeEvery(OPEN_ANONYMOUS_TIP_PROMPT, openPromptSaga);\n    yield takeEvery(OPEN_TIP_PROMPT, openPromptSaga);\n    yield takeEvery(OPEN_VERIFY_AGE_PROMPT, openPromptSaga);\n    yield takeEvery(CLOSE_ALL_USER_PROMPTS, closeAllUserPromptsSaga);\n\n    yield takeEvery(ANSWER_USER_PROMPT_SECTION, dealWithAnswerSaga);\n\n    yield takeEvery(CLOSE_USER_PROMPT_SECTION, closeUserPromptSaga);\n\n    // answer to the camera selection prompt\n    yield takeEvery(SET_CAM2CAM_SELECTED_CAMERA, setSelectedCameraSaga);\n};\n\nexport default watchSagas;\n","import {produce} from \"immer\";\nimport {AnyAction} from \"redux\";\nimport { handleActions, Action } from \"redux-actions\";\n\nimport { createAction, createActionType } from \"../utils\";\nimport {RESET_STORE} from \"./app\";\nimport { IHooks, HooksArguments } from \"../store\";\nimport { getInitialInstanceData } from '../initialStore';\nimport { ActionIds } from \"../interfaces\";\n\nexport interface IHookPayload {\n    name: keyof IHooks;\n    args: any[];\n}\n\nconst createHooksActionType = createActionType(ActionIds.HOOKS, { isReduxAction: true });\n\n// Actions\nexport const SET_HOOKS = createHooksActionType(\"SET_HOOKS\");\n\n// Action Creators\nexport const setHooks = createAction<IHookPayload>(SET_HOOKS);\n\n/** Reducers */\nconst hooks = handleActions({\n    [RESET_STORE]: (state: IHooks, action: AnyAction) => getInitialInstanceData().hooks,\n\n    [SET_HOOKS]: produce((draft: HooksArguments, { payload: { args, name }}: Action<IHookPayload>) => {\n        draft[name] = args;\n    })\n}, getInitialInstanceData().hooks);\n\nexport default hooks;\n","import { isEmpty } from  'lodash';\nimport { Action } from \"redux-actions\";\nimport { put, select, takeEvery, delay, take } from 'redux-saga/effects';\n\nimport { closeApp } from \"./close\";\nimport loggers from \"../../loggers\";\nimport config from '../../static/config';\nimport { createAction, createActionType } from '../../redux/utils';\nimport { IPayload } from '../../redux/interfaces';\nimport selectors from '../../redux/selectors';\nimport { ActionIds } from '../../redux/interfaces';\nimport { openCloseChatPrompt } from \"./userPrompt\";\nimport AppService from \"../../services/AppService\";\nimport { ExitCode } from \"../../services/ChatService/types\";\nimport { SET_USER_ONLINE_STATE } from \"../../redux/modules/user\";\nimport { isOutOfMoneyInformationDialog } from \"../../utils/utils\";\nimport {closeAllUserPrompts} from '../../sagas/common/userPrompt';\nimport { setHooks } from '../../redux/modules/hooks';\nimport { resetModelFreeChatDuration } from \"../../redux/modules/model\";\nimport { hasLoadAccountUserPrompts } from \"../../redux/selectors/messenger\";\nimport { resetPlatformFreeChatDuration, SET_CHAT_ID } from \"../../redux/modules/session\";\nimport {\n    CLOSE_MESSENGER,\n    closeLoadAccountUserPrompts,\n    closeMessenger,\n    closeVersion,\n    OPEN_VERSION\n} from '../../redux/modules/messenger';\nimport {\n    CLOSE_VIDEOCHAT,\n    closeVideochat,\n    displayInitiallyMutedHint,\n    hideInitiallyMutedHint,\n    OPEN_VIDEOCHAT,\n    RESET_INFORMATION,\n    resetExitEvent,\n    resetPreChatInformation,\n    SET_INFORMATION,\n    SET_IS_INITIALLY_MUTED,\n    setInformation\n} from \"../../redux/modules/videochat\";\nimport {\n    IChatFeatures,\n    VideochatInformationType, VideoChatType\n} from '../../redux/store';\nimport {\n    startVideoChatType,\n    stopVideoChat,\n    stopVideoChatPlayer\n} from \"./videochat\";\nimport { takePattern } from '../utils';\n\nconst createUIActionType = createActionType(ActionIds.UI, { isSagaAction: true });\n\n// Actions\nexport const CLICK_CLOSE_MESSENGER_BUTTON = createUIActionType(\"CLICK_CLOSE_MESSENGER_BUTTON\");\nexport const DISPLAY_CONTINUE_WITH_LIVECHAT = createUIActionType(\"DISPLAY_CONTINUE_WITH_LIVECHAT\");\nexport const CLOSE_PRECHAT_DIALOG = createUIActionType(\"CLOSE_PRECHAT_DIALOG\");\nexport const ACCEPT_TO_SPY_FROM_PRECHAT_DIALOG = createUIActionType(\"ACCEPT_TO_SPY_FROM_PRECHAT_DIALOG\");\n\n// Action Creators\nexport const displayContinueWithLiveChatDialog = createAction(DISPLAY_CONTINUE_WITH_LIVECHAT);\nexport const clickCloseMessengerButton = createAction(CLICK_CLOSE_MESSENGER_BUTTON);\nexport const closePrechatDialog = createAction(CLOSE_PRECHAT_DIALOG);\nexport const acceptToSpyFromPrechatDialog = createAction(ACCEPT_TO_SPY_FROM_PRECHAT_DIALOG);\n\n// Sagas\nexport const triggerCloseMessengerSaga = function*({ payload: { instanceId }}: Action<IPayload>) {\n    loggers.saga.debug('Closing messenger...');\n\n    const exitEvent = yield select(selectors.getExitEvent, instanceId);\n    const exitCode: ExitCode | undefined = exitEvent && exitEvent.exitCode;\n    const exitMessage: string | undefined = exitEvent && exitEvent.exitMessage;\n\n    // Call the external hooks\n    const appService = AppService.getService(instanceId);\n    appService.onExit(exitCode || ExitCode.USER, exitMessage);\n\tconst isVideoChatOpen = yield select(selectors.isVideoChatOpen, instanceId);\n\tconst chatId = yield select(selectors.getChatId, instanceId);\n\n    if (isVideoChatOpen) {\n        appService.onVideoChatAction(false, chatId);\n    }\n\n    yield put(closeApp(instanceId));\n\n    loggers.saga.debug('Messenger closed');\n};\n\nexport const displayContinueWithLiveChatDialogSaga = function*({ payload: { instanceId }}: Action<IPayload>) {\n    let shouldDisplayContinueWithLiveChat = yield select(selectors.shouldDisplayContinueWithLiveChat, instanceId);\n\n    /**\n     * If preview chat, after preview time passes, the player should\n     * freeze and render an information pop-up for selecting livechat.\n     */\n    if (shouldDisplayContinueWithLiveChat) {\n        const chatFeatures: IChatFeatures = yield select(selectors.getChatFeatures, instanceId);\n        const hasFreeChatDuration: boolean = yield select(selectors.hasFreeChatDuration, instanceId);\n        const freeModelChatDuration: number = yield select(selectors.getFreeModelChatDuration, instanceId);\n        const isVideoChatInPreviewMode = yield select(selectors.isVideoChatInPreviewMode, instanceId);\n\n        const { freeChatDuration, livePreviewDurationVideo } = chatFeatures;\n        const totalFreeChatDuration =  hasFreeChatDuration ? freeChatDuration + freeModelChatDuration : 0;\n        const previewTime = isVideoChatInPreviewMode ? livePreviewDurationVideo : totalFreeChatDuration;\n\n        yield delay(previewTime * 1000);\n\n        /**\n         * After the delay, we check if the videochat type is still PREVIEW.\n         * The customer may switch to livechat before the delay time and this\n         * behavior should not be activated.\n         */\n        shouldDisplayContinueWithLiveChat = yield select(selectors.shouldDisplayContinueWithLiveChat, instanceId);\n\n        if (shouldDisplayContinueWithLiveChat) {\n            const isVideoChatInFreeChatMode = yield select(selectors.isVideoChatInFreeChatMode, instanceId);\n\n            if (isVideoChatInFreeChatMode) {\n                yield put(resetPlatformFreeChatDuration(instanceId));\n                yield put(resetModelFreeChatDuration(instanceId));\n            }\n\n            yield put(stopVideoChatPlayer(instanceId));\n            loggers.saga.debug('Live preview has finished');\n\n            yield put(setInformation(instanceId, VideochatInformationType.PREVIEW_JUST_FINISHED));\n        }\n    }\n};\n\nexport const displayUserOfflineMessageSaga = function*({ payload: { instanceId }}: Action<IPayload>) {\n    const shouldRenderUserOfflineInformation = yield select(selectors.shouldRenderUserOfflineInformation, instanceId);\n\n    if (shouldRenderUserOfflineInformation) {\n        yield put(stopVideoChatPlayer(instanceId));\n        yield put(setInformation(instanceId, VideochatInformationType.OFFLINE_CONNECTION));\n    }\n};\n\nexport const triggerPreChatInformationSaga = function* ({ payload: { instanceId }}: Action<IPayload>) {\n    yield put(closeVideochat(instanceId));\n};\n\nexport const reactToInformationDialogSaga =  function* ({ payload }: Action<IPayload<VideochatInformationType>>) {\n    const { instanceId, value } = payload;\n\n    const isOutOfMoneyInformation = isOutOfMoneyInformationDialog(value);\n    const hasLoadAccountPrompts = yield select(hasLoadAccountUserPrompts, instanceId);\n\n    if (isOutOfMoneyInformation && hasLoadAccountPrompts) {\n        yield put(closeLoadAccountUserPrompts(instanceId));\n    }\n\n    const hasExitPopup = yield select(selectors.hasExitPopups, instanceId);\n\n    if (hasExitPopup) {\n        const isExitingInformation = yield select(selectors.isExitingInformationType, instanceId);\n        const lastCallArguments = yield select(selectors.geHook('onExitPopupAction'), instanceId);\n\n        if (isEmpty(lastCallArguments) || isExitingInformation !== lastCallArguments[0]) {\n\t\t\tAppService.getService(instanceId).onExitPopupAction(isExitingInformation);\n\n            yield put(setHooks(instanceId, {\n                name: 'onExitPopupAction',\n                args: [isExitingInformation]\n            }));\n        }\n    }\n};\n\nexport const triggerClickCloseButtonSaga = function*({ payload: { instanceId }}: Action<IPayload>) {\n    const videoChatType = yield select(selectors.getVideoChatType, instanceId);\n    const isCloseChatUserPromptOpen = yield select(selectors.isCloseChatUserPromptOpen, instanceId);\n    const isFullScreen = yield select(selectors.isFullScreen, instanceId);\n\n    if (videoChatType) {\n        if (isCloseChatUserPromptOpen || isFullScreen) {\n\n            // user prompt already open? => stop video chat voluntarily\n            yield put(stopVideoChat(instanceId, true));\n            yield put(closeAllUserPrompts(instanceId));\n\n            // check if the exit popups are supposed to be handled externally or not\n            const hasExitPopups = yield select(selectors.hasExitPopups, instanceId);\n\n            yield put(hasExitPopups\n                ? setInformation(instanceId, VideochatInformationType.LIVECHAT_SESSION_ENDED)\n                : closeMessenger(instanceId)\n            );\n\n        } else {\n            yield put(openCloseChatPrompt(instanceId));\n        }\n    } else {\n        // no video chat is running => close it directly;\n        yield put(closeMessenger(instanceId));\n    }\n};\n\nexport const triggerOpenCloseVideoChatSaga = function* ({ payload: { instanceId }}: Action<IPayload>) {\n\tconst isVideoChatOpen = yield select(selectors.isVideoChatOpen, instanceId);\n\tconst isChatExternallyProvided = yield select(selectors.isChatExternallyProvided, instanceId);\n\tlet chatId = yield select(selectors.getChatId, instanceId);\n\n\t// When chat is externally provided, we receive only the clientId and server values.\n\t// The chatID value comes from the vchat-core initialization, by which we should wait.\n\tif (isEmpty(chatId) && isChatExternallyProvided) {\n\t\tconst { payload: { value }} = yield take(takePattern(SET_CHAT_ID, instanceId));\n\t\tchatId = value;\n\t}\n\n    AppService.getService(instanceId).onVideoChatAction(isVideoChatOpen, chatId);\n};\n\nexport const openVersionSaga = function*({ payload: { instanceId }}: Action<IPayload>) {\n    yield delay(config.versionDisplayDuration * 1000);\n    yield put(closeVersion(instanceId));\n};\n\n/** We receive a flag, with which we can see if the model is muted  */\nexport const initiallyMutedSaga = function* ({ payload }: Action<IPayload>) {\n    const { instanceId, value } = payload;\n\n    if (value) {\n        yield put(displayInitiallyMutedHint(instanceId));\n        yield delay(10000);\n        yield put(hideInitiallyMutedHint(instanceId));\n    }\n};\n\nexport const closePrechatDialogSaga = function* ({ payload: { instanceId }}: Action<IPayload>) {\n    const initialVideoType: VideoChatType = yield select(selectors.getInitialVideoChatType, instanceId);\n\n    if(initialVideoType) {\n        // exit event has been populated in the store\n        // just before displaying the pre-chat information dialog\n        yield put(closeMessenger(instanceId));\n    } else {\n        yield put(resetExitEvent(instanceId));\n        yield put(closeVideochat(instanceId));\n    }\n\n    // close pre-chat dialog\n    yield put(resetPreChatInformation(instanceId));\n};\n\nexport const acceptToSpyFromPrechatDialogSaga = function* ({ payload: { instanceId }}: Action<IPayload>) {\n    yield put(stopVideoChat(instanceId, true));\n    yield put(startVideoChatType(instanceId, VideoChatType.VOYEUR_PRIVATE_CHAT));\n};\n\nconst watchSagas = function*() {\n    // when the messenger close button is clicked\n    yield takeEvery(CLICK_CLOSE_MESSENGER_BUTTON, triggerClickCloseButtonSaga);\n    yield takeEvery(CLOSE_MESSENGER, triggerCloseMessengerSaga);\n\n    yield takeEvery(DISPLAY_CONTINUE_WITH_LIVECHAT, displayContinueWithLiveChatDialogSaga);\n    yield takeEvery(SET_USER_ONLINE_STATE, displayUserOfflineMessageSaga);\n\n    yield takeEvery(SET_INFORMATION, reactToInformationDialogSaga);\n    yield takeEvery(RESET_INFORMATION, reactToInformationDialogSaga);\n\n    // informing the platform about video mode on or off\n    yield takeEvery(OPEN_VIDEOCHAT, triggerOpenCloseVideoChatSaga);\n    yield takeEvery(CLOSE_VIDEOCHAT, triggerOpenCloseVideoChatSaga);\n\n    // when the version box is open\n    yield takeEvery(OPEN_VERSION, openVersionSaga);\n\n    // deal with initially muted button\n    yield takeEvery(SET_IS_INITIALLY_MUTED, initiallyMutedSaga);\n\n    // when the close button of a pre-chat information dialog is clicked\n    yield takeEvery(CLOSE_PRECHAT_DIALOG, closePrechatDialogSaga);\n\n    // when 'yes' button of a pre-chat information dialog asking to spy as voyeur is clicked\n    yield takeEvery(ACCEPT_TO_SPY_FROM_PRECHAT_DIALOG, acceptToSpyFromPrechatDialogSaga);\n};\n\nexport default watchSagas;\n","import { get, includes } from 'lodash';\nimport { call, put, select} from \"redux-saga/effects\";\n\nimport { ExitCode } from \"../../../services/ChatService/types\";\nimport { getChatInstanceSaga, IGetChatInstanceSagaResult } from \"../chat\";\nimport selectors from \"../../../redux/selectors\";\nimport types from \"../../websockets/types\";\nimport loggers from \"../../../loggers\";\nimport { openSpyPrivateChatPrompt, openVerifyAgePrompt } from \"../userPrompt\";\nimport { setExitEvent, setPreChatInformation } from \"../../../redux/modules/videochat\";\nimport { PreChatInformationType, VideoChatType } from \"../../../redux/store\";\nimport { getPrechatByErrorCode } from \"../../../utils/utils\";\nimport { MessengerSpecificErrorCodes } from \"../../../static/constants/errorCodes\";\nimport { VXControlCodes } from \"../../../static/constants/errorCodes\";\n\nexport interface IPreChecksResult {\n    isSuccessful: boolean;\n    chat?: IGetChatInstanceSagaResult;\n}\n\nconst subActions: {[key: string]: types.SubActionType} = {};\nsubActions[VideoChatType.FREECHAT] = types.SubActionType.STARTFREECHAT;\nsubActions[VideoChatType.LIVECHAT] = types.SubActionType.STARTVIDEOCHAT;\nsubActions[VideoChatType.LIVE_PREVIEW] = types.SubActionType.STARTLIVEPREVIEW;\nsubActions[VideoChatType.NO_DOWNSTREAM] = types.SubActionType.STARTVIDEOCHAT;\nsubActions[VideoChatType.PRIVATE_CHAT] = types.SubActionType.STARTVIDEOCHAT;\nsubActions[VideoChatType.VOYEUR_CHAT] = types.SubActionType.STARTVOYEURCHAT;\nsubActions[VideoChatType.VOYEUR_PRIVATE_CHAT] = types.SubActionType.STARTVOYEUR2SCHAT;\n\nconst typesAllowedToSpyVoyeurs: VideoChatType[] = [\n    VideoChatType.LIVECHAT,\n    VideoChatType.VOYEUR_CHAT\n];\n\n/**\n * Saga doing necessary pre-checks before starting a video chat\n * @param videoChatType\n * @return {IPreChecksResult}\n */\nconst precheckSaga = function* (instanceId: string, videoChatType: VideoChatType, requestNewConfig: boolean) {\n    const commonChecksResult: boolean = yield call(commonChecks, instanceId, videoChatType);\n\n    if (!commonChecksResult) {\n        return { isSuccessful: false };\n    }\n\n    // special checks for live preview, based solely on vxcontrols-client-lib flags\n    if (videoChatType === VideoChatType.LIVE_PREVIEW) {\n        const isNotChargedNorVip = yield select(selectors.isNotChargedNorVip, instanceId);\n        const isChatExternallyProvided = yield select(selectors.isChatExternallyProvided, instanceId);\n\n        if (isNotChargedNorVip && !isChatExternallyProvided) {\n            yield call(displayPrechatInformationDialogSaga, instanceId, ExitCode.PREVIEW_ACCESS_DENIE);\n            return { isSuccessful: false };\n        }\n    }\n\n    // everything seems fine by now; try to initiate a video chat and watch over any error, if any\n    const chat: IGetChatInstanceSagaResult = yield call(\n        getChatInstanceSaga,\n        requestNewConfig,\n        instanceId,\n        subActions[videoChatType]\n    );\n\n    const isSuccessful: boolean = yield call(chatBasedChecksSaga, instanceId, chat, videoChatType);\n\n    return { isSuccessful, chat };\n};\n\n/**\n * Saga performing common checks for all video type sessions\n * @return {boolean} true if everything went well and session can be started, false otherwise\n */\nconst commonChecks = function* (instanceId: string, videoChatType: VideoChatType) {\n    // check for USER being online\n    const isUserOffline = yield select(selectors.isUserOffline, instanceId);\n    if (isUserOffline) {\n        yield call(displayPrechatInformationDialogSaga, instanceId, MessengerSpecificErrorCodes.GUEST_OFFLINE);\n        return false;\n    }\n\n    const isChatExternallyProvided = yield select(selectors.isChatExternallyProvided, instanceId);\n\n    // if we can count on the vxcontrol-client-lib API and therefore can use model status flags\n    if (!isChatExternallyProvided) {\n        // check for MODEL being online\n        const isModelOnline = yield select(selectors.isModelOnline, instanceId);\n        if (!isModelOnline) {\n            yield call(displayPrechatInformationDialogSaga, instanceId, ExitCode.PREVIEW_OFFLINE);\n            return false;\n        }\n\n        // check for model being in private chat, based in the model status flags only\n        const isModelInPrivateChat = yield select(selectors.isModelInPrivateChat, instanceId);\n        if (includes(typesAllowedToSpyVoyeurs,videoChatType) && isModelInPrivateChat) {\n            const isAcceptinVoyeurs = yield call(offerSwitchingToVoyeurSpySaga, instanceId, videoChatType);\n\n            if (!isAcceptinVoyeurs) {\n                loggers.saga.debug('model is in private chat and she does not accept voyeurs either');\n                yield call(displayPrechatInformationDialogSaga, instanceId, ExitCode.HOSTSINGLE);\n            }\n\n            return false;\n        }\n    }\n\n    return true;\n};\n\n/**\n * Saga performing checks and displaying appropriate dialogs  if necessary,\n * based on the error code (if any) receiving while trying to initialize a video session\n * @param chat\n * @return {boolean} true if everything went well and session can be started, false otherwise\n */\nconst chatBasedChecksSaga = function* (instanceId, chat: IGetChatInstanceSagaResult, videoChatType: VideoChatType) {\n    const chatConfErrorCode = get(chat, 'chatConf.error.code');\n\n    if (!chatConfErrorCode) {\n        return true;\n    }\n\n    // check for model being in private chat\n    if (includes(typesAllowedToSpyVoyeurs,videoChatType)\n        && chatConfErrorCode === VXControlCodes.MODEL_IS_IN_PRIVATE_CHAT\n        || chatConfErrorCode === ExitCode.HOSTSINGLE) {\n\n        const isAcceptinVoyeurs = yield call(offerSwitchingToVoyeurSpySaga, instanceId, videoChatType);\n\n        if (!isAcceptinVoyeurs) {\n            loggers.saga.debug('model is in private chat and she does not accept voyeurs either');\n            yield put(setPreChatInformation(instanceId, PreChatInformationType.PRIVATE_CHAT));\n        }\n\n        return false;\n    }\n\n    const isChatExternallyProvided = yield select(selectors.isChatExternallyProvided, instanceId);\n    const initialVideoType: VideoChatType = yield select(selectors.getInitialVideoChatType, instanceId);\n\n    // check for age verification, when should be displayed as user prompt,\n    if (!isChatExternallyProvided && !initialVideoType && chatConfErrorCode === VXControlCodes.SOFT_CHAT) {\n        yield put(openVerifyAgePrompt(instanceId));\n\n        return false;\n    }\n\n    // other checks\n    yield call(displayPrechatInformationDialogSaga, instanceId, chatConfErrorCode);\n\n    return false;\n};\n\n\nconst offerSwitchingToVoyeurSpySaga = function* (instanceId: string, videoChatType: VideoChatType) {\n    // let's see if the model accept voyeurs while in private chat\n    const isModelSupportingVoyeurToPrivateChat = yield select(selectors.isModelSupportingVoyeurToPrivateChat, instanceId);\n\n    if (isModelSupportingVoyeurToPrivateChat) {\n        loggers.saga.debug('offering to start voyeur to private chat');\n\n        const initialVideoType: VideoChatType = yield select(selectors.getInitialVideoChatType, instanceId);\n        if (initialVideoType) {\n            // if started with initial video type, we should display a pre-chat dialog\n            // offering the possibility to spy\n            yield put(setExitEvent(instanceId, { exitCode: ExitCode.HOSTSINGLE }));\n            yield put(setPreChatInformation(instanceId, PreChatInformationType.PRIVATE_CHAT_CAN_SPY));\n        } else {\n            // display the user prompt offering the possibility to spy\n            yield put(openSpyPrivateChatPrompt(instanceId));\n        }\n\n        return true;\n    }\n\n    return false;\n};\n\nconst displayPrechatInformationDialogSaga = function* (instanceId: string, exitCode: number, exitMessage?: string) {\n    yield put(setExitEvent(instanceId, { exitCode, exitMessage }));\n\n\tconst dialogType: PreChatInformationType | undefined = getPrechatByErrorCode(exitCode);\n\tif (dialogType) {\n\t\tyield put(setPreChatInformation(instanceId, dialogType));\n\t}\n};\n\nexport default precheckSaga;\n","import styled from 'styled-components';\nimport { BaseButtonContent } from '../BaseButton/style';\nimport withCustomClasses, { DomCustomClass } from \"../../hoc/withCustomClasses/\";\n\nexport enum DialogButtonColor {\n    GREEN = \"GREEN\",\n    BLUE = \"BLUE\",\n    BLACK = \"BLACK\"\n};\n\nexport interface IDialogButtonWrapperProps {\n    color: DialogButtonColor;\n};\n\nconst getRgbColor = (props: IDialogButtonWrapperProps): string => {\n    switch (props.color) {\n        case DialogButtonColor.GREEN:\n            return '#43B31C';\n        case DialogButtonColor.BLUE:\n            return '#3B8EE8';\n        default:\n            return '#3E3F40';\n    }\n};\n\nconst getRgbHoverColor = (props: IDialogButtonWrapperProps): string => {\n    switch (props.color) {\n        case DialogButtonColor.GREEN:\n            return '#66E03B';\n        case DialogButtonColor.BLUE:\n            return '#3B8EE8';\n        default:\n            return '#626365';\n    }\n};\n\nexport const DialogButtonWrapper = withCustomClasses<IDialogButtonWrapperProps>(styled.button<IDialogButtonWrapperProps>`\n    ${(props) => `\n        background-color: ${getRgbColor(props)};\n        border: 1px solid ${getRgbColor(props)};\n        \n        &:hover {\n            background-color: ${getRgbHoverColor(props)};\n            border-color:${getRgbHoverColor(props)};\n        }\n    `}\n    \n    font-family: ${(props) => props.theme.typography.fontFamily};\n    font-weight: ${(props) => props.theme.typography.weight.regular};\n    font-size: 16px;\n    \n    height: 44px;\n    border-radius: 3px;\n    cursor: pointer;\n    transition: all .15s linear;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: #FFFFFF;\n    padding: 5px 11px;\n    text-align: center;\n\n    i {\n        position: relative;\n        display: inline-block;\n        font-size: 22px;\n        padding: 0 5px;\n    }\n`, [DomCustomClass.DialogButton]);\n\nexport const DialogButtonContent = styled(BaseButtonContent)`    \n    width: auto;\n    text-transform: none;\n`;\n","import cuid from 'cuid';\nimport moment from 'moment';\nimport { isEmpty } from 'lodash';\nimport { Action } from 'redux-actions';\nimport { call, put, select, spawn, take, takeEvery } from \"redux-saga/effects\";\n\nimport loggers from \"../../loggers\";\nimport types from \"../websockets/types\";\nimport { ActionIds, IPayload, IPreferenceActionPayload } from '../../redux/interfaces';\nimport { createAction, createActionType } from '../../redux/utils';\nimport selectors from '../../redux/selectors';\nimport { PromiseResult } from \"../../services/types\";\nimport {\n\tActionResponseType,\n\tCurrencyName,\n\tIActionResponse,\n\tITipOption,\n\tITranslation,\n\tMessageDirection,\n\tMsgType,\n\tQuestionType,\n\tVideoChatType\n} from '../../redux/store';\nimport { displayContinueWithLiveChatDialog } from \"./ui\";\nimport { resetChat } from \"../../redux/modules/session\";\nimport PlayerService from \"../../services/PlayerService\";\nimport { startCam2CamSaga, stopCam2CamSaga } from './videochat/cam2Cam';\nimport { getChatInstanceSaga, IGetChatInstanceSagaResult } from \"./chat\";\nimport precheckSaga, { IPreChecksResult } from \"./videochat/prechecks\";\nimport { openAnonymousTipPrompt } from \"./userPrompt\";\nimport ChatService from \"../../services/ChatService\";\nimport { CoreChat, SourceSet, TargetSet } from \"../../services/ChatService/types\";\nimport {\n\tADD_MESSAGE,\n\taddMessage,\n\tcloseCountdownWarning,\n\tcloseMessenger,\n\tcloseUserPromptSection,\n\tsetActionResponse,\n\tsetIsTextEnabled\n} from \"../../redux/modules/messenger\";\nimport {\n\tCLOSE_VIDEOCHAT,\n\tcloseFullscreen,\n\tcloseVideochat,\n\tresetExitEvent,\n\tresetInformation,\n\tresetPreChatInformation,\n\tresetType,\n\tSET_INFORMATION,\n\tSET_PLAYING_STATUS,\n\tsetCam2CamInactive, setIsMutedByClient,\n\tsetPlayingStatus,\n\tsetType\n} from \"../../redux/modules/videochat\";\nimport { takePattern } from \"../utils\";\nimport { SET_PREFERENCE } from \"../../redux/modules/user\";\nimport { PreferenceName } from \"../../services/AppService/types\";\n\nconst createVideochatActionType = createActionType(ActionIds.VIDEOCHAT_SAGA, { isSagaAction: true });\n\n// Actions\nconst START_VIDEOCHAT_TYPE = createVideochatActionType(\"START_VIDEOCHAT_TYPE\");\nconst RESUME_EXISTING_VIDEOCHAT = createVideochatActionType(\"RESUME_EXISTING_VIDEOCHAT\");\nconst RESUME_PREVIOUS_VIDEOCHAT = createVideochatActionType(\"RESUME_PREVIOUS_VIDEOCHAT\");\nconst RESUME_INITIAL_VIDEOCHAT = createVideochatActionType(\"RESUME_INITIAL_VIDEOCHAT\");\n\nconst CREATE_VIDEOCHAT_PLAYER = createVideochatActionType(\"CREATE_VIDEOCHAT_PLAYER\");\nconst PUBLISH_VIDEOCHAT_PLAYER = createVideochatActionType(\"PUBLISH_VIDEOCHAT_PLAYER\");\nconst STOP_VIDEOCHAT_PLAYER = createVideochatActionType(\"STOP_VIDEOCHAT_PLAYER\");\nconst CLOSE_VIDEOCHAT_PLAYER = createVideochatActionType(\"CLOSE_VIDEOCHAT_PLAYER\");\nconst SWITCH_VOYEUR_PRIVATE_2_VOYEUR = createVideochatActionType(\"SWITCH_VOYEUR_PRIVATE_2_VOYEUR\");\nconst SWITCH_VOYEUR_2_LIVECHAT = createVideochatActionType(\"SWITCH_VOYEUR_2_LIVECHAT\");\nconst STOP_VIDEOCHAT = createVideochatActionType(\"STOP_VIDEOCHAT\");\nconst ON_TEXT_MUTED_UPDATED = createVideochatActionType(\"ON_TEXT_MUTED_UPDATED\");\nconst DISPLAY_TOY_SYSTEM_MESSAGE = createVideochatActionType(\"DISPLAY_TOY_SYSTEM_MESSAGE\");\n\nconst REQUEST_SEND_TIP = createVideochatActionType(\"REQUEST_SEND_TIP\");\nconst REQUEST_SEND_ANONYMOUS_TIP = createVideochatActionType(\"REQUEST_SEND_ANONYMOUS_TIP\");\n\nexport const CANCEL_STARTING_VIDEOCHAT_TYPE = createVideochatActionType(\"CANCEL_STARTING_VIDEOCHAT_TYPE\");\n\n// Action Creators\nexport const onTextMutedUpdated = createAction<boolean>(ON_TEXT_MUTED_UPDATED);\nexport const startVideoChatType = createAction<VideoChatType>(START_VIDEOCHAT_TYPE);\nexport const resumeExistingVideochat = createAction(RESUME_EXISTING_VIDEOCHAT);\nexport const resumePreviousVideochat = createAction(RESUME_PREVIOUS_VIDEOCHAT);\nexport const resumeInitialVideochat = createAction(RESUME_INITIAL_VIDEOCHAT);\nexport const switchVoyeurPrivate2Voyeur = createAction(SWITCH_VOYEUR_PRIVATE_2_VOYEUR);\nexport const switchVoyeur2LiveChat = createAction<string | undefined>(SWITCH_VOYEUR_2_LIVECHAT);\nexport const displaySystemToyMessage = createAction(DISPLAY_TOY_SYSTEM_MESSAGE);\n\nexport const createVideoChatPlayer = createAction<HTMLElement>(CREATE_VIDEOCHAT_PLAYER);\nexport const publishVideoChatPlayer = createAction(PUBLISH_VIDEOCHAT_PLAYER);\nexport const stopVideoChatPlayer = createAction(STOP_VIDEOCHAT_PLAYER);\nexport const closeVideoChatPlayer = createAction(CLOSE_VIDEOCHAT_PLAYER);\n\nexport const requestSendTip = createAction(REQUEST_SEND_TIP);\nexport const requestSendAnonymousTip = createAction(REQUEST_SEND_ANONYMOUS_TIP);\nexport const cancelStartingVideoChatType = createAction<VideoChatType>(CANCEL_STARTING_VIDEOCHAT_TYPE);\n\n/** Action which stop the player and the streams, but don't close the video chat mode */\nexport const stopVideoChat = createAction<boolean | undefined>(STOP_VIDEOCHAT);\n\n// Sagas\nconst startVideoChatTypeSaga = function* ({ payload }: Action<IPayload<VideoChatType>>) {\n    const { instanceId, value } = payload;\n    yield spawn(removeDialogsIfAnySaga, instanceId);\n    yield put(resetExitEvent(instanceId));\n    const newConfig = undefined;\n\n    switch (value) {\n        case VideoChatType.GROUP_CHAT: {\n            yield spawn(startGroupChatSaga, instanceId, newConfig);\n            break;\n        }\n\n        case VideoChatType.LIVECHAT: {\n            yield spawn(startLiveChatSaga, instanceId, newConfig);\n            break;\n        }\n\n        case VideoChatType.FREECHAT: {\n            yield spawn(startFreeChatSaga, instanceId, newConfig);\n            break;\n        }\n\n        case VideoChatType.LIVE_PREVIEW: {\n            yield spawn(startLivePreviewChatSaga, instanceId, newConfig);\n            break;\n        }\n\n        case VideoChatType.PRIVATE_CHAT: {\n            yield spawn(startPrivateChatSaga, instanceId, false);\n            break;\n        }\n\n        case VideoChatType.VOYEUR_CHAT: {\n            yield spawn(startVoyeurChatSaga, instanceId, newConfig);\n            break;\n        }\n\n        case VideoChatType.VOYEUR_PRIVATE_CHAT: {\n            yield spawn(startVoyeurPrivateChatSaga, instanceId, newConfig);\n            break;\n        }\n\n        case VideoChatType.NO_DOWNSTREAM: {\n            yield spawn(startChatWithoutStreamSaga, instanceId, newConfig);\n            break;\n        }\n\n        case VideoChatType.CONTENT_PARTNERS_CHAT: {\n            yield spawn(startContentPartnersChatSaga, instanceId, newConfig);\n            break;\n        }\n    }\n};\n\nconst resumeExistingVideoChatSaga = function* ({ payload: { instanceId }}: Action<IPayload>) {\n    const existingType: VideoChatType = yield select(selectors.getVideoChatType, instanceId);\n    yield spawn(resumeVideoChatSaga, instanceId, existingType);\n};\n\nconst resumePreviousVideoChatSaga = function* ({ payload: { instanceId }}: Action<IPayload>) {\n    const previousType: VideoChatType = yield select(selectors.getLastSuccessfulVideoChatType, instanceId);\n    yield spawn(resumeVideoChatSaga, instanceId, previousType);\n};\n\nconst resumeInitialVideoChatSaga = function* ({ payload: { instanceId }}: Action<IPayload>) {\n    const initialType: VideoChatType = yield select(selectors.getInitialVideoChatType, instanceId);\n    yield spawn(resumeVideoChatSaga, instanceId, initialType);\n};\n\nconst resumeVideoChatSaga = function* (instanceId: string, type: VideoChatType) {\n    yield put(resetExitEvent(instanceId));\n\n    const chatConfig = yield select(selectors.getChat, instanceId);\n    const requestNewConfig: boolean = !chatConfig;\n\n    switch (type) {\n        case VideoChatType.GROUP_CHAT: {\n            yield spawn(startGroupChatSaga, instanceId, requestNewConfig);\n            break;\n        }\n\n        case VideoChatType.LIVECHAT: {\n            yield spawn(startLiveChatSaga, instanceId, requestNewConfig);\n            break;\n        }\n\n        case VideoChatType.FREECHAT: {\n            yield spawn(startFreeChatSaga, instanceId, requestNewConfig);\n            break;\n        }\n\n        case VideoChatType.LIVE_PREVIEW: {\n            yield spawn(startLivePreviewChatSaga, instanceId, requestNewConfig);\n            break;\n        }\n\n        case VideoChatType.PRIVATE_CHAT: {\n            yield spawn(startPrivateChatSaga, instanceId, requestNewConfig);\n            break;\n        }\n\n        case VideoChatType.VOYEUR_CHAT: {\n            yield spawn(startVoyeurChatSaga, instanceId, requestNewConfig);\n            break;\n        }\n\n        case VideoChatType.VOYEUR_PRIVATE_CHAT: {\n            yield spawn(startVoyeurPrivateChatSaga, instanceId, requestNewConfig);\n            break;\n        }\n\n        case VideoChatType.NO_DOWNSTREAM: {\n            yield spawn(startChatWithoutStreamSaga, instanceId, requestNewConfig);\n            break;\n        }\n    }\n\n    // When resume the stream, also add the cam2cam feature if it was active\n    const isCam2CamActive = yield select(selectors.isCam2CamActive, instanceId);\n    if (isCam2CamActive) {\n        yield call(startCam2CamSaga, instanceId);\n    }\n};\n\nconst startChatWithoutStreamSaga = function* (instanceId: string, requestNewConfig: boolean = true) {\n    const chat: IGetChatInstanceSagaResult = yield call(\n        getChatInstanceSaga,\n        requestNewConfig,\n        instanceId\n    );\n\n    if (chat.chatConf.error || chat.chatInstance?.error) {\n        yield put(closeVideochat(instanceId));\n        loggers.saga.debug('trying to start chat without any downstream raised this error:',\n            { details: { error: chat.chatConf.error || chat.chatInstance?.error } });\n        yield put(cancelStartingVideoChatType(instanceId, VideoChatType.NO_DOWNSTREAM));\n        return;\n    }\n\n    if (requestNewConfig && chat.chatInstance?.result) {\n        const isTextEnabled = yield call(ChatService.getService(instanceId).startText, chat.chatInstance?.result);\n        yield put(setIsTextEnabled(instanceId, isTextEnabled));\n    }\n\n    const videoChatType = yield select(selectors.getVideoChatType, instanceId);\n    if (videoChatType !== VideoChatType.NO_DOWNSTREAM) {\n        yield put(setType(instanceId, VideoChatType.NO_DOWNSTREAM));\n    }\n};\n\nconst startLiveChatSaga = function* (instanceId: string, requestNewConfig: boolean = true) {\n    const { chatInstance, error } =\n\t\tyield call (initiateChatSaga, instanceId, VideoChatType.LIVECHAT, requestNewConfig);\n\n    if (error) {\n    \treturn;\n\t}\n\n    if (requestNewConfig) {\n        const isTextEnabled = yield call(ChatService.getService(instanceId).startText, chatInstance);\n        yield put(setIsTextEnabled(instanceId, isTextEnabled));\n    }\n\n    const videoChatType = yield select(selectors.getVideoChatType, instanceId);\n    if (videoChatType !== VideoChatType.LIVECHAT) {\n        yield put(setType(instanceId, VideoChatType.LIVECHAT));\n    }\n\n    // We need to add a toy system message only the first time we start the stream.\n    // In this saga we will also enter if we swap between fullscreen and normal screen and\n    // we don't want to render the system message in this case.\n    if (requestNewConfig) {\n        yield put(displaySystemToyMessage(instanceId));\n    }\n};\n\n\nconst startContentPartnersChatSaga = function* (instanceId: string, requestNewConfig: boolean = true) {\n\tconst { chatInstance, error } =\n\t\tyield call (initiateChatSaga, instanceId, VideoChatType.CONTENT_PARTNERS_CHAT, requestNewConfig);\n\n\tif (error) {\n\t\treturn;\n\t}\n\n\tyield put(setType(instanceId, VideoChatType.CONTENT_PARTNERS_CHAT));\n\n\tif (requestNewConfig) {\n\t\t// do not activate yet the text feature if chat is in voyeur mode;\n\t\t// it will be triggered when sending the first message\n\t\tif (chatInstance && !chatInstance.isInVoyeurMode) {\n\t\t\tconst isTextEnabled = yield call(ChatService.getService(instanceId).startText, chatInstance);\n\t\t\tyield put(setIsTextEnabled(instanceId, isTextEnabled));\n\t\t}\n\t}\n};\n\nconst startGroupChatSaga = function* (instanceId: string, requestNewConfig: boolean = true) {\n\tconst { chatInstance, error } =\n\t\tyield call (initiateChatSaga, instanceId, VideoChatType.GROUP_CHAT, requestNewConfig);\n\n\tif (error) {\n\t\treturn;\n\t}\n\n    if (requestNewConfig) {\n        const isTextEnabled = yield call(ChatService.getService(instanceId).startText, chatInstance);\n        yield put(setIsTextEnabled(instanceId, isTextEnabled));\n    }\n\n    const videoChatType = yield select(selectors.getVideoChatType, instanceId);\n    if (videoChatType !== VideoChatType.GROUP_CHAT) {\n        yield put(setType(instanceId, VideoChatType.GROUP_CHAT));\n    }\n};\n\nconst startLivePreviewChatSaga = function* (instanceId: string, requestNewConfig: boolean = true) {\n\tconst { chatInstance, error } =\n\t\tyield call (initiateChatSaga, instanceId, VideoChatType.LIVE_PREVIEW, requestNewConfig);\n\n\tif (error) {\n\t\treturn;\n\t}\n\n    if (requestNewConfig) {\n        const isTextEnabled = yield call(ChatService.getService(instanceId).startText, chatInstance);\n        yield put(setIsTextEnabled(instanceId, isTextEnabled));\n    }\n\n    const videoChatType = yield select(selectors.getVideoChatType, instanceId);\n    if (videoChatType !== VideoChatType.LIVE_PREVIEW) {\n        yield put(setType(instanceId, VideoChatType.LIVE_PREVIEW));\n        yield put(displayContinueWithLiveChatDialog(instanceId));\n    }\n};\n\nconst startFreeChatSaga = function* (instanceId: string, requestNewConfig: boolean = true) {\n\tconst { chatInstance, error } =\n\t\tyield call (initiateChatSaga, instanceId, VideoChatType.FREECHAT, requestNewConfig);\n\n\tif (error) {\n\t\treturn;\n\t}\n\n    if (requestNewConfig) {\n        const isTextEnabled = yield call(ChatService.getService(instanceId).startText, chatInstance);\n        yield put(setIsTextEnabled(instanceId, isTextEnabled));\n    }\n\n    const videoChatType = yield select(selectors.getVideoChatType, instanceId);\n    if (videoChatType !== VideoChatType.FREECHAT) {\n        yield put(setType(instanceId, VideoChatType.FREECHAT));\n        yield put(displayContinueWithLiveChatDialog(instanceId));\n    }\n};\n\nconst startPrivateChatSaga = function* (instanceId: string, requestNewConfig: boolean = true) {\n    const { isSuccessful, chat}: IPreChecksResult =\n        yield call(precheckSaga, instanceId, VideoChatType.PRIVATE_CHAT, requestNewConfig);\n\n    if (!isSuccessful || !chat) {\n        // pre-checks failed\n        yield put(cancelStartingVideoChatType(instanceId, VideoChatType.PRIVATE_CHAT));\n        return;\n    }\n\n    if (chat.chatInstance?.error) {\n        yield put(cancelStartingVideoChatType(instanceId, VideoChatType.PRIVATE_CHAT));\n        yield put(closeVideochat(instanceId));\n        loggers.saga.debug('trying to start live private chat raised this error:',\n            { details: { error: chat.chatInstance?.error } });\n        return;\n    }\n\n    if (requestNewConfig && chat.chatInstance?.result) {\n        const isTextEnabled = yield call(ChatService.getService(instanceId).startText, chat.chatInstance?.result);\n        yield put(setIsTextEnabled(instanceId, isTextEnabled));\n    }\n\n    if (chat.chatInstance?.result && !chat.chatInstance.result.singleMode) {\n        loggers.saga.debug('Chat instance not in single mode; starting single mode');\n        yield call(ChatService.getService(instanceId).startPrivateChat, chat.chatInstance.result);\n        loggers.saga.debug('Chat instance was not in single mode; single mode successfully initiated');\n    }\n\n    const isPlaying = yield select(selectors.isPlaying, instanceId);\n    if (!isPlaying && chat.chatInstance?.result) {\n        loggers.saga.debug('Stream was paused; re-start the streaming');\n\n        const { error } = yield call(\n            playTheStreamSaga,\n            chat.chatInstance?.result,\n            VideoChatType.PRIVATE_CHAT,\n            instanceId\n        );\n\n        if (error) {\n            yield put(cancelStartingVideoChatType(instanceId, VideoChatType.PRIVATE_CHAT));\n            return;\n        }\n\n        loggers.saga.debug('Stream was paused; streaming successfully re-started');\n    }\n\n    // don't worry: next steps will be triggered by chat events\n};\n\nconst startVoyeurChatSaga = function* (instanceId: string, requestNewConfig: boolean = true) {\n\tconst { error } =\n\t\tyield call (initiateChatSaga, instanceId, VideoChatType.VOYEUR_CHAT, requestNewConfig);\n\n\tif (error) {\n\t\treturn;\n\t}\n\n    const videoChatType = yield select(selectors.getVideoChatType, instanceId);\n    if (videoChatType !== VideoChatType.VOYEUR_CHAT) {\n        yield put(setType(instanceId, VideoChatType.VOYEUR_CHAT));\n\n        // If the messenger is open inside a content partner, all tips will be removed\n        const shouldOpenAnonymousTipPrompt = yield select(selectors.shouldOpenAnonymousTipPrompt, instanceId);\n        if (shouldOpenAnonymousTipPrompt) {\n            const chatId = yield select(selectors.getChatId, instanceId);\n            yield put(openAnonymousTipPrompt(instanceId, chatId));\n        }\n    }\n};\n\nconst startVoyeurPrivateChatSaga = function* (instanceId: string, requestNewConfig: boolean = true) {\n\tconst { error } =\n\t\tyield call (initiateChatSaga, instanceId, VideoChatType.VOYEUR_PRIVATE_CHAT, requestNewConfig);\n\n\tif (error) {\n\t\treturn;\n\t}\n\n    yield put(setIsTextEnabled(instanceId, false));\n\n    const videoChatType = yield select(selectors.getVideoChatType, instanceId);\n    if (videoChatType !== VideoChatType.VOYEUR_PRIVATE_CHAT) {\n        yield put(setType(instanceId, VideoChatType.VOYEUR_PRIVATE_CHAT));\n    }\n};\n\nconst initiateChatSaga = function* (instanceId: string, videoChatType: VideoChatType,\n\t\t\t\t\t\t\t\t\t\t  requestNewConfig: boolean = true) {\n\tconst { isSuccessful, chat}: IPreChecksResult =\n\t\tyield call(precheckSaga, instanceId, videoChatType, requestNewConfig);\n\n\tif (!isSuccessful || !chat) {\n\t\t// pre-checks failed\n\t\tyield put(cancelStartingVideoChatType(instanceId, videoChatType));\n\t\treturn { error: true };\n\t}\n\n\tconst chatError = chat.chatInstance?.error;\n\n\tif (chatError) {\n\t\tyield put(cancelStartingVideoChatType(instanceId, videoChatType));\n\t\tyield put(closeVideochat(instanceId));\n\t\tloggers.saga.debug(`trying to start ${videoChatType} raised this error:'`,\n\t\t\t{ details: { error: chatError }}\n\t\t);\n\n\t\treturn { error: true };\n\t}\n\n\tif (chat.chatInstance?.result) {\n\t\tconst { error } = yield call(\n\t\t\tplayTheStreamSaga,\n\t\t\tchat.chatInstance?.result,\n\t\t\tvideoChatType,\n\t\t\tinstanceId\n\t\t);\n\n\t\tif (error) {\n\t\t\tyield put(cancelStartingVideoChatType(instanceId, videoChatType));\n\t\t\treturn { error: true };\n\t\t}\n\t}\n\n\treturn { chatInstance: chat.chatInstance?.result };\n};\n\nconst playTheStreamSaga = function* (chatInstance: CoreChat, videoChatType: VideoChatType, instanceId: string) {\n    const { LIVE_PREVIEW, FREECHAT } = VideoChatType;\n\n    const sources: PromiseResult<SourceSet, any> = yield call(\n        ChatService.getService(instanceId).getStream,\n        chatInstance,\n        videoChatType === LIVE_PREVIEW || videoChatType === FREECHAT\n    );\n\n    if (sources.error) {\n        yield put(closeVideochat(instanceId));\n        loggers.saga.debug(`trying to start ${videoChatType} raised this error:`,\n            { details: { error: sources.error } });\n        return { error: true };\n    }\n\n    const streamHasStopped = yield call(\n        stopStreamIfVideoChatWasClosedSaga,\n        `${videoChatType} deliberately closed by the user; stream aborted`,\n        instanceId\n    );\n\n    if (streamHasStopped) {\n        return { error: true };\n    }\n\n    PlayerService.getService(instanceId).play(sources.result);\n\n    yield take(takePattern(SET_PLAYING_STATUS, instanceId));\n    const isPlaying = yield select(selectors.isPlaying, instanceId);\n\n    if (isPlaying) {\n        loggers.saga.debug('Stream started to play');\n    }\n\n    return isPlaying ? { ok: true } : { error: true };\n};\n\nconst createVideoChatPlayerSaga = function* ({ payload }: Action<IPayload<HTMLElement>>) {\n    const { instanceId, value } = payload;\n    const playerService = PlayerService.getService(instanceId);\n\n\tconst qualityBoundaries = yield select(selectors.getVideoChatQualityBoundaries, instanceId);\n\tconst initialVideochatVolume = yield select(selectors.getInitialVideochatVolume, instanceId);\n    playerService.createPlayer(value, qualityBoundaries, initialVideochatVolume);\n\n    const isMutedByClient = yield select(selectors.getVideoChatIsMutedByClient, instanceId);\n    const notMutedClientVolume = yield select(selectors.getNotMutedClientVolume, instanceId);\n    if (isMutedByClient) {\n        playerService.mutePlayer();\n    } else {\n    \tplayerService.setVolume(notMutedClientVolume);\n\t}\n\n    yield put(resumeExistingVideochat(instanceId));\n};\n\nconst stopVideoChatPlayerSaga = function* ({ payload: { instanceId }}: Action<IPayload>) {\n    PlayerService.getService(instanceId).stopPlayer();\n};\n\nconst closeVideoChatPlayerSaga = function* ({ payload: { instanceId }}: Action<IPayload>) {\n    PlayerService.getService(instanceId).closePlayer();\n};\n\nconst publishVideoChatPlayerSaga = function* ({ payload: { instanceId }}: Action<IPayload>) {\n    // publish the player on the existing stream\n    const chat: IGetChatInstanceSagaResult = yield call(getChatInstanceSaga, false, instanceId);\n    if (chat.chatConf.error) {\n        loggers.saga.debug('VIDEOCHAT - could not get chat to publish; aborting');\n        return;\n    }\n\n    if (chat.chatInstance?.error) {\n        yield put(setCam2CamInactive(instanceId));\n        loggers.saga.debug('trying to get a chat on which to publish own camera raised this error:',\n            { details: { error: chat.chatInstance.error } });\n        return;\n    }\n\n\tif (chat.chatInstance?.result) {\n\t\tconst targets: PromiseResult<TargetSet, any> =\n\t\t\tyield call(ChatService.getService(instanceId).getUpstream, chat.chatInstance?.result);\n\n\t\tif (targets.error) {\n\t\t\tyield put(setCam2CamInactive(instanceId));\n\t\t\tloggers.saga.debug('trying to get an upstream on which to publish own camera raised this error:',\n\t\t\t\t{ details: { error: targets.error } });\n\t\t\treturn;\n\t\t}\n\n\t\tPlayerService.getService(instanceId).publishCamera(targets.result);\n\t}\n};\n\n/**\n * This is closing the video chat player, stream and the video mode\n */\nconst closeVideoChatSaga = function* ({ payload: { instanceId }}: Action<IPayload>) {\n    yield put(stopVideoChat(instanceId));\n\n    const isExitingInformationType = yield select(selectors.isExitingInformationType, instanceId);\n    const errorType = yield select(selectors.getInformationType, instanceId);\n\n    if (errorType && !isExitingInformationType) {\n        yield put(resetInformation(instanceId));\n    }\n\n    yield put(closeVideoChatPlayer(instanceId));\n\n    const isChatExternallyProvided = yield select(selectors.isChatExternallyProvided, instanceId);\n    const hasExitPopups = yield select(selectors.hasExitPopups, instanceId);\n\n    if (isChatExternallyProvided && !hasExitPopups) {\n        // no reason to have the messenger open\n        yield put(closeMessenger(instanceId));\n    }\n\n    yield put(resetChat(instanceId));\n    yield put(resetType(instanceId));\n};\n\n/**\n * This is stopping the video chat player and stream, but will let the messenger in videochat mode\n */\nconst stopVideoChatSaga = function* ({ payload }: Action<IPayload<boolean>>) {\n    const { instanceId, value } = payload;\n\n    const isCam2CamActive = yield select(selectors.isCam2CamActive, instanceId);\n    if (isCam2CamActive) {\n        yield call(stopCam2CamSaga, instanceId);\n    }\n\n\n    const videoChatType = yield select(selectors.getVideoChatType, instanceId);\n    if (videoChatType) {\n        yield put(stopVideoChatPlayer(instanceId));\n        ChatService.getService(instanceId).closeChat(value);\n    }\n\n    const countdownWarning = yield select(selectors.getCountdownWarning, instanceId);\n    if (countdownWarning) {\n        yield put(closeCountdownWarning(instanceId));\n    }\n\n    const isFullScreen = yield select(selectors.isFullScreen, instanceId);\n    if (isFullScreen) {\n        yield put(closeFullscreen(instanceId));\n\t}\n\n\tconst isPlaying = yield select(selectors.isPlaying, instanceId);\n    if (isPlaying) {\n        yield put(setPlayingStatus(instanceId, false));\n    }\n};\n\nconst sendAnonymousTipFromVoyeurSaga = function* ({ payload: { instanceId }}: Action<IPayload>) {\n    const chat: IGetChatInstanceSagaResult = yield call(getChatInstanceSaga, false, instanceId);\n    if (chat.chatConf.error) {\n        loggers.saga.debug('VIDEOCHAT - could not get chat to send tip; aborting');\n        return;\n    }\n\n    if (chat.chatInstance?.error) {\n        yield put(setCam2CamInactive(instanceId));\n        loggers.saga.debug('trying to get a chat on which to send a tip raised this error:',\n            { details: { error: chat.chatInstance.error } });\n        return;\n    }\n\n    if (chat.chatInstance?.result) {\n\t    /** Send the tip (for sending x tips => the correct amount is x * 100) */\n\t    const { error } = yield call(ChatService.getService(instanceId).sendTip, chat.chatInstance?.result, 100);\n\n\t    /**\n\t     * If the action was successful, our payload will be undefined,\n\t     * so we should hard-code the message.\n\t     */\n\t    const translation: ITranslation = yield select(selectors.getTranslation, instanceId);\n\t    const { voyeurTipFail, voyeurTipOk } = translation.chat;\n\n\t    /** Action response for sending the tip action */\n\t    const actionResponse: IActionResponse = {\n\t\t    text: error ? voyeurTipFail : voyeurTipOk,\n\t\t    type: isEmpty(error) ? ActionResponseType.SUCCESSFUL : ActionResponseType.ERROR\n\t    };\n\n\t    /** Close the anonymous user prompt */\n\t    yield put(closeUserPromptSection(instanceId, QuestionType.SEND_ANONYMOUS_TIP));\n\n\t    /** Render the action response based on promise's answer */\n\t    yield put(setActionResponse(instanceId, actionResponse));\n    }\n};\n\nconst sendTipSaga = function* ({ payload: { instanceId }}: Action<IPayload>) {\n    const chat: IGetChatInstanceSagaResult = yield call(getChatInstanceSaga, false, instanceId);\n    if (chat.chatConf.error) {\n        loggers.saga.debug('VIDEOCHAT - could not get chat to send tip; aborting');\n        return;\n    }\n\n    if (chat.chatInstance?.error) {\n        yield put(setCam2CamInactive(instanceId));\n        loggers.saga.debug('trying to get a chat on which to send a tip raised this error:',\n            { details: { error: chat.chatInstance.error } });\n        return;\n    }\n\n    /** Send the tip */\n    const tipOption: ITipOption = yield select(selectors.getTip, instanceId);\n    const tipValue = (tipOption.currency.name === CurrencyName.Credits ? tipOption.value : tipOption.value * 100);\n\n    if(chat.chatInstance?.result) {\n\t    const { error } = yield call(ChatService.getService(instanceId).sendTip, chat.chatInstance?.result, tipValue);\n\n\t    /**\n\t     * If the action was successful, our payload will be undefined,\n\t     * so we should hard-code the message.\n\t     */\n\t    const translation: ITranslation = yield select(selectors.getTranslation, instanceId);\n\t    const { tipFail, tipOk } = translation.chat;\n\n\t    /** Action response for sending the tip action */\n\t    const actionResponse: IActionResponse = {\n\t\t    text: error ? tipFail : tipOk,\n\t\t    type: isEmpty(error) ? ActionResponseType.SUCCESSFUL : ActionResponseType.ERROR\n\t    };\n\n\t    /** Close the anonymous user prompt */\n\t    yield put(closeUserPromptSection(instanceId, QuestionType.SEND_TIP));\n\n\t    /** Render the action response based on promise's answer */\n\t    yield put(setActionResponse(instanceId, actionResponse));\n    }\n};\n\n\nconst switchVoyeurPrivate2VoyeurSaga = function* ({ payload: { instanceId }}: Action<IPayload>) {\n    const isVideoChatInVoyeurPrivateMode = yield select(\n        selectors.isVideoChatInVoyeurPrivateMode,\n        instanceId\n    );\n\n    if (isVideoChatInVoyeurPrivateMode) {\n        // we can use the same chat data, chat instance and stream; only change to full voyeur\n        yield put(setType(instanceId, VideoChatType.VOYEUR_CHAT));\n    }\n};\n\nconst switchVoyeurToChatSaga = function* ({ payload }: Action<IPayload<string>>) {\n    const { instanceId, value } = payload;\n    const isVideoChatInVoyeurMode = yield select(selectors.isVideoChatInVoyeurMode, instanceId);\n\n    if (isVideoChatInVoyeurMode) {\n        const chat: IGetChatInstanceSagaResult =\n            yield call(getChatInstanceSaga, false, instanceId, types.SubActionType.STARTVOYEURCHAT);\n\n        if (chat.chatConf.error || chat.chatInstance?.error) {\n            yield put(closeVideochat(instanceId));\n            loggers.saga.debug('could not get voyeur chat to reuse for live chat; aborting');\n            return;\n        }\n\n        if (chat.chatInstance?.result) {\n\t        // try to enable texting, thus migrating to a normal chat mode\n\t        const isTextEnabled = yield call(\n\t\t        ChatService.getService(instanceId).startText,\n\t\t        chat.chatInstance?.result\n\t        );\n\n\t        if (isTextEnabled) {\n\t\t        // send the message, which was not previously sent\n\t\t        if (value) {\n\t\t\t        ChatService.getService(instanceId).sendMessage(value);\n\t\t        }\n\n\t\t        // close the send tip user prompt if it's open\n\t\t        const hasSendTipPromptOpen = yield select(selectors.hasSendTipPromptOpen, instanceId);\n\t\t        if (hasSendTipPromptOpen) {\n\t\t\t        yield put(closeUserPromptSection(instanceId, QuestionType.SEND_ANONYMOUS_TIP));\n\t\t        }\n\n\t\t        // we can use the same chat data, chat instance and stream; only change to chat mode\n\t\t        // based on the free chat duration value\n\t\t        const { LIVECHAT, FREECHAT } = VideoChatType;\n\t\t        const hasFreeChatDuration = yield select(selectors.hasFreeChatDuration, instanceId);\n\t\t        const videoChatType = hasFreeChatDuration ? FREECHAT : LIVECHAT;\n\t\t        yield put(setType(instanceId, videoChatType));\n\n\t\t        // We wait to receive the message, which made the switch between voyeur\n\t\t        // and livechat. Afterwards, we will add the default system toy message\n\t\t        yield take(takePattern(ADD_MESSAGE, instanceId))\n\t\t        yield put(displaySystemToyMessage(instanceId));\n\t        }\n        }\n    }\n};\n\n/**\n * If the video chat was closed by the user, close the chat instance to forcefully stop the stream;\n * Useful for the following corner case:\n * 1. User under 18s open the video chat, but the host has to approve it first\n * 2. User close the video chat;\n * 3. Host approves the chat and the stream starts flowing.\n *\n * Unfortunately, it takes a while for the stream to \"figure out\"\n * that no video player is using it so it could close itself, from here this approach\n *\n * @param logEntry\n * @return {boolean} true if video chat was closed\n */\nconst stopStreamIfVideoChatWasClosedSaga = function* (logEntry: string, instanceId: string) {\n    const isVideoChatOpen = yield select(selectors.isVideoChatOpen, instanceId);\n\n    if (!isVideoChatOpen) {\n        yield call(ChatService.getService(instanceId).closeChat, true);\n        loggers.saga.debug(logEntry);\n        return true;\n    }\n\n    return false;\n};\n\nconst removeDialogsIfAnySaga = function* (instanceId: string) {\n    const informationType = yield select(selectors.getInformationType, instanceId);\n    if (informationType) {\n        yield put(resetInformation(instanceId));\n    }\n\n    const preChatInformationType = yield select(selectors.getPreChatInformationType, instanceId);\n    if (preChatInformationType) {\n        yield put(resetPreChatInformation(instanceId));\n    }\n};\n\nconst onExitingInformationTypeSaga = function* ({ payload: { instanceId }}: Action<IPayload>) {\n    const isExitingInformationType = yield select(selectors.isExitingInformationType, instanceId);\n\n    if (isExitingInformationType) {\n        yield put(closeVideochat(instanceId));\n    }\n};\n\nconst onTextMutedUpdatedSaga = function* ({ payload }: Action<IPayload<boolean>>) {\n    const { instanceId, value } = payload;\n    const translation: ITranslation = yield select(selectors.getTranslation, instanceId);\n\n    yield put(setIsTextEnabled(instanceId, value));\n\n    if (!value) {\n        yield put(setActionResponse(instanceId, {\n            text: translation.chat.isMuted,\n            type: ActionResponseType.WARNING\n        }))\n    }\n};\n\nconst displaySystemToyMessageSaga = function*({ payload: { instanceId }}: Action<IPayload>) {\n    const hasToyControl = yield select(selectors.hasToyControl, instanceId);\n    if (!hasToyControl) {\n        return;\n    }\n\n    const chatId = yield select(selectors.getChatId, instanceId);\n    const translation: ITranslation = yield select(selectors.getTranslation, instanceId);\n\n    yield put (addMessage(instanceId, {\n        id: cuid.slug(),\n        messageKey: cuid.slug(),\n        dateCreated: moment().toString(),\n        chatId,\n        content: null,\n        direction: MessageDirection.none,\n        msgType: MsgType.TOY,\n\t\tisSystem: false,\n        isNew: true,\n        toy: {\n            text: translation.chat.toyControl.lovenseAvailable,\n            isDefault: true\n        }\n    }));\n}\n\nconst setIsMutedByClientSaga = function* ({ payload: { instanceId, value } }: Action<IPayload<IPreferenceActionPayload>>) {\n\tconst { preferenceName, value: preferenceValue } = value;\n\n\tif (preferenceName !== PreferenceName.VolumeLevel) {\n\t\treturn;\n\t}\n\n\tif (preferenceValue === 0) {\n\t\tyield put(setIsMutedByClient(instanceId, true));\n\t}\n};\n\nconst watchSagas = function* () {\n    yield takeEvery(REQUEST_SEND_TIP, sendTipSaga);\n    yield takeEvery(REQUEST_SEND_ANONYMOUS_TIP, sendAnonymousTipFromVoyeurSaga);\n\n    yield takeEvery(START_VIDEOCHAT_TYPE, startVideoChatTypeSaga);\n    yield takeEvery(RESUME_EXISTING_VIDEOCHAT, resumeExistingVideoChatSaga);\n    yield takeEvery(RESUME_PREVIOUS_VIDEOCHAT, resumePreviousVideoChatSaga);\n    yield takeEvery(RESUME_INITIAL_VIDEOCHAT, resumeInitialVideoChatSaga);\n\n    yield takeEvery(CREATE_VIDEOCHAT_PLAYER, createVideoChatPlayerSaga);\n    yield takeEvery(STOP_VIDEOCHAT_PLAYER, stopVideoChatPlayerSaga);\n    yield takeEvery(CLOSE_VIDEOCHAT_PLAYER, closeVideoChatPlayerSaga);\n\n    yield takeEvery(CLOSE_VIDEOCHAT, closeVideoChatSaga);\n    yield takeEvery(STOP_VIDEOCHAT, stopVideoChatSaga);\n    yield takeEvery(PUBLISH_VIDEOCHAT_PLAYER, publishVideoChatPlayerSaga);\n    yield takeEvery(SWITCH_VOYEUR_PRIVATE_2_VOYEUR, switchVoyeurPrivate2VoyeurSaga);\n    yield takeEvery(SWITCH_VOYEUR_2_LIVECHAT, switchVoyeurToChatSaga);\n    yield takeEvery(SET_INFORMATION, onExitingInformationTypeSaga);\n    yield takeEvery(ON_TEXT_MUTED_UPDATED, onTextMutedUpdatedSaga);\n    yield takeEvery(DISPLAY_TOY_SYSTEM_MESSAGE, displaySystemToyMessageSaga);\n    yield takeEvery(SET_PREFERENCE, setIsMutedByClientSaga);\n};\n\nexport default watchSagas;\n","import * as React from 'react';\n\nimport LiveChatButton from './LiveChatButton';\nimport { onLiveChatButtonClick } from './utils';\nimport selectors from '../../../redux/selectors';\nimport { startVideoChatType } from \"../../../sagas/common/videochat\";\nimport IStore from '../../../redux/store';\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\nimport {\n\tIContainerProps as IProps,\n\tIContainerComponentProps as IComponentProps\n} from \"./types\";\n\nconst LiveChatButtonContainer = (props: IProps) => (\n    <LiveChatButton\n        currency={props.currency}\n        price={props.price}\n        translation={props.translation}\n        shouldRenderPrice={!props.hasFreeChatDuration}\n        isForActionSection={props.isForActionSection}\n        shouldDisplayIcon={props.shouldDisplayIcon}\n        onClick={onLiveChatButtonClick(props)}\n    />\n);\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    currency: selectors.getCurrency(store, instanceId),\n    hasFreeChatDuration: selectors.hasFreeChatDuration(store, instanceId),\n    price: selectors.getLiveChatPrice(store, instanceId),\n    translation: selectors.getTranslation(store, instanceId)\n});\n\nconst mapDispatchToProps = {\n    startVideoChatType\n};\n\nexport default withRedux<IComponentProps>(LiveChatButtonContainer, mapStateToProps, mapDispatchToProps);\n","import { IContainerProps as IProps } from './types';\n\nexport const onTimeIsOver = (props: IProps) => () => {\n    props.setLivePreviewTextTimeLeft(props.instanceId, 0);\n};\n","import styled from \"styled-components\";\n\ninterface ITimerWrapperProps {\n    leftAngle: number;\n    rightAngle: number;\n}\n\nexport interface ITimerStylingProps {\n    className?: string;\n    size: number;\n    thickness: number;\n    filledColor: string;\n    unfilledColor: string;\n    backgroundColor: string;\n    timerTextColor: string;\n}\n\ntype Props = ITimerWrapperProps & ITimerStylingProps;\n\n/**\n * Styling for a stateless component to display a stopwatch like animated circle\n */\nexport const TimerWrapper = styled.div.attrs({ className: \"timeAnimatedCircle\" })<Props>` \n    ${props => {\n\n        return `\n            width: ${props.size}px;\n            height: ${props.size}px;\n            min-width: ${props.size}px;\n            min-height: ${props.size}px;\n            position: relative;\n            \n            & .counter {\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                z-index: 4;\n                transform: translate(-50%, -50%);\n                color: ${props.timerTextColor};\n                font-family: ${props.theme.typography.fontFamily};\n                font-weight: ${props.theme.typography.weight.regular};\n                font-size: 24px;\n            }\n            \n            & .outer-shadow, .inner-shadow {\n                z-index: 4;\n                position: absolute;\n                width: 100%;\n                height: 100%;\n                border-radius: 100%;\n            }\n            \n            & .inner-shadow {\n                top: 50%;\n                left: 50%;\n                width: ${props.size - 2 * props.thickness}px;\n                height: ${props.size - 2 * props.thickness}px; \n                margin-left: ${-props.size/2 + props.thickness}px;\n                margin-top: ${-props.size/2 + props.thickness}px;\n                background-color: ${props.backgroundColor};\n            }\n            \n            & .hold {\n                position: absolute;\n                width: 100%;\n                height: 100%;\n                clip: rect(0px, ${props.size}px, ${props.size}px,  ${props.size / 2}px);\n                border-radius: 100%;\n                background-color: ${props.unfilledColor};\n            }\n            \n            & .fill {\n                background-color: ${props.filledColor};\n                position: absolute;\n                width: 100%;\n                height: 100%;\n                border-radius: 100%;\n                clip: rect(0px, ${props.size/2}px, ${props.size}px, 0px);\n            }\n            \n            & .left .fill {\n                z-index: 1;\n                transform: rotate(${props.leftAngle}deg);\n            }\n\n            .right {\n                z-index: 3;\n                -webkit-transform: rotate(180deg);\n                -moz-transform: rotate(180deg);\n                transform: rotate(180deg);\n            }\n            \n            .right .fill {  \n                z-index: 3;\n                -webkit-transform: rotate(${props.rightAngle}deg);\n                -moz-transform: rotate(${props.rightAngle}deg);\n                transform: rotate(${props.rightAngle}deg);\n\n            }\n        `\n    }}\n`;\n","import * as React from 'react';\nimport { isNull, isUndefined } from 'lodash';\nimport { TimerWrapper, ITimerStylingProps } from \"./style\";\nimport { defaultTimerStylingProps, getLeftAngle, getRightAngle } from \"./utils\";\nimport {ThemedStyledProps, withTheme} from \"styled-components\";\nimport ITheme from \"../../../themes/interfaces\";\n\nexport interface IProps {\n    /** total time in seconds figured on the timer */\n    totalTime: number;\n\n    /** how much time (in seconds) is figured as already being passed on the timer */\n    currentTime?: number\n\n    timeFormatter?: (remainingTime: number) => any;\n    resets?: number;\n\n    onTimeIsOver?: () => any;\n    onTick?: (remainingTime: number) => any;\n    onUnmount?: (remainingTime: number) => any;\n\n    styling?: ITimerStylingProps;\n    theme: ITheme;\n}\n\nexport interface IState {\n    timeLeft: number;\n}\n\n/**\n * Stateful component to display a stopwatch like timer\n */\nclass Timer extends React.Component<ThemedStyledProps<IProps, ITheme>, IState> {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            timeLeft: this.timeLeftFromProps(props)\n        };\n    }\n\n    private handler: any;\n\n    componentDidMount() {\n        this.setTickHandler();\n    }\n\n    componentDidUpdate(prevProps: IProps) {\n        if (prevProps.currentTime !== this.props.currentTime ||\n            prevProps.resets !== this.props.resets) {\n            this.setState({ timeLeft: this.timeLeftFromProps(this.props) });\n            this.setTickHandler();\n        }\n    }\n\n    componentWillUnmount() {\n        this.clearTickHandler();\n\n        if (this.props.onUnmount) {\n            this.props.onUnmount(this.state.timeLeft);\n        }\n    }\n\n    render() {\n\n        const currentTime = this.props.totalTime - this.state.timeLeft;\n        const leftAngle = getLeftAngle(this.props.totalTime, currentTime);\n        const rightAngle = getRightAngle(this.props.totalTime, currentTime);\n\n        return (\n            <TimerWrapper\n                leftAngle={leftAngle}\n                rightAngle={rightAngle}\n                {...defaultTimerStylingProps(this.props.theme, this.props.styling)}\n            >\n                <div className='outer-shadow' />\n                <div className='inner-shadow' />\n\n                <div className='hold left'>\n                    <div className='fill' />\n                </div>\n                <div className='hold right'>\n                    <div className='fill' />\n                </div>\n                <div className=\"counter\">\n                    { this.props.timeFormatter\n                        ? this.props.timeFormatter(this.state.timeLeft)\n                        : this.state.timeLeft\n                    }\n                </div>\n            </TimerWrapper>\n        );\n    }\n\n    private setTickHandler = () => {\n        this.clearTickHandler();\n        this.handler = setInterval(() => {\n            this.updateCurrentTime(() => {\n                if (this.state.timeLeft <= 0) {\n                    this.clearTickHandler();\n\n                    if (this.props.onTimeIsOver) {\n                        this.props.onTimeIsOver()\n                    }\n                }\n\n                if (this.props.onTick) {\n                    this.props.onTick(this.state.timeLeft);\n                }\n            })\n        }, 1000);\n    };\n\n    private clearTickHandler = () => {\n        if (this.handler) {\n            clearInterval(this.handler);\n        }\n    };\n\n    private updateCurrentTime = (callback: () => any) => {\n        this.setState((prevState) => ({\n            timeLeft: Math.max(0, prevState.timeLeft - 1)\n        }), callback);\n    };\n\n    private timeLeftFromProps = (props: IProps) =>\n        Math.round(\n            !isNull(props.currentTime) && !isUndefined(props.currentTime)\n                ? Math.max(0, props.totalTime - props.currentTime)\n                : props.totalTime\n        );\n}\n\nexport default withTheme<IProps, ITheme>(Timer);\n","import { isNull, isUndefined } from 'lodash';\nimport { ITimerStylingProps } from './style';\nimport Theme from \"../../../themes/interfaces\";\n\nexport const getTimeLeft = (totalTime: number, currentTime?: number): number => {\n    return Math.round(\n        !isNull(currentTime) && !isUndefined(currentTime)\n            ? Math.max(0, totalTime - currentTime)\n            : totalTime);\n};\n\nexport const clearTickHandler = (handler?: any) => {\n    if (handler) {\n        clearInterval(handler);\n    }\n};\n\nexport const getLeftAngle = (totalTime: number, currentTime: number): number =>\n    Math.min(180, Math.round(currentTime * 360 / totalTime));\n\nexport const getRightAngle = (totalTime: number, currentTime: number): number =>\n    Math.max(0, Math.round(180 * (2 * currentTime / totalTime - 1)));\n\nexport const defaultTimerStylingProps = (theme: Theme, props?: ITimerStylingProps) => ({\n    size: 64,\n    thickness: 10,\n    filledColor: theme.colors.timerFillColor,\n    unfilledColor: theme.colors.timerUnfillColor,\n    backgroundColor: theme.colors.timerBgColor,\n    timerTextColor: theme.colors.timerTextColor,\n    ...props\n});","import Timer from './Timer';\n\nexport default Timer;","import styled from 'styled-components';\n\nexport const NumberTimeFormatter = styled.div`\n    font-weight: ${(props) => props.theme.typography.weight.medium};\n    font-size: smaller;\n`;\n\nexport const TextTimeFormatter = styled.div`\n    font-weight: ${(props) => props.theme.typography.weight.light};\n    font-size: small;\n    text-transform: capitalize;\n`;\n\nexport const TimeFormatter = styled.div`\n    text-align: center;\n`;","import * as React from 'react';\nimport { ThemedStyledProps, withTheme } from \"styled-components\";\nimport ITheme from \"../../../themes/interfaces\";\nimport Timer from \"../../common/Timer\";\nimport { ITranslation } from \"../../../redux/store\";\n\nimport { TimeFormatter, TextTimeFormatter, NumberTimeFormatter} from './style';\n\ninterface IProps {\n    totalTime: number;\n    currentTime: number;\n\n    theme: ITheme;\n    translation: ITranslation;\n\n    onUnmount?: (remainingTime: number) => any;\n    onTimeIsOver?: () => any;\n};\n\nconst timeFormatter = (translation: ITranslation) => (remainingTime: number) => (\n    <TimeFormatter>\n        <NumberTimeFormatter>{remainingTime}</NumberTimeFormatter>\n        <TextTimeFormatter>{translation.common.seconds}</TextTimeFormatter>\n    </TimeFormatter>\n);\n\nconst LivePreviewTextTimer = (props: ThemedStyledProps<IProps, ITheme>) => (\n    <Timer\n        totalTime={props.totalTime}\n        currentTime={props.currentTime}\n        styling={{\n            size: 108,\n            thickness: 3,\n            filledColor: props.theme.colors.livePreviewTimer.fillColor,\n            unfilledColor: props.theme.colors.livePreviewTimer.unfillColor,\n            timerTextColor: props.theme.colors.livePreviewTimer.textColor,\n            backgroundColor: props.theme.colors.livePreviewTimer.bgColor\n        }}\n        timeFormatter={timeFormatter(props.translation)}\n        onTimeIsOver={props.onTimeIsOver}\n        onUnmount={props.onUnmount}\n    />\n);\n\nexport default withTheme<IProps, ITheme>(LivePreviewTextTimer);","import * as React from 'react';\n\nimport { onTimeIsOver } from './utils';\nimport selectors from '../../../redux/selectors';\nimport LivePreviewTextTimer from \"./LivePreviewTextTimer\";\nimport Store from '../../../redux/store';\nimport { setLivePreviewTextTimeLeft } from \"../../../redux/modules/videochat\";\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\nimport { IContainerProps as IProps } from \"./types\";\n\nconst onUnmount = (props: IProps) => (time?: number) => {\n    props.setLivePreviewTextTimeLeft(props.instanceId, time);\n}\n\nconst LivePreviewTextTimerContainer = (props: IProps) => {\n    const currentTime = props.timeLimit - props.timeLeft;\n\n    return (\n        <LivePreviewTextTimer\n            translation={props.translation}\n            totalTime={props.timeLimit}\n            currentTime={currentTime}\n            onUnmount={onUnmount(props)}\n            onTimeIsOver={onTimeIsOver(props)}\n        />\n    );\n};\n\nconst mapStateToProps = (store: Store, { instanceId }: IInstanceProps) => ({\n    translation: selectors.getTranslation(store, instanceId),\n    timeLimit: selectors.getLivePreviewTextTimeLimit(store, instanceId),\n    timeLeft: selectors.getLivePreviewTextTimeLeft(store, instanceId)\n});\n\n\nconst mapDispatchToProps = {\n    setLivePreviewTextTimeLeft\n};\n\nexport default withRedux(LivePreviewTextTimerContainer, mapStateToProps, mapDispatchToProps);\n","import * as React from 'react';\nimport { upperFirst } from 'lodash';\nimport { withOrientationChange } from \"react-device-detect\";\n\nimport utils from '../../../utils';\nimport selectors from '../../../redux/selectors';\nimport { ActionDispatcher } from '../../../redux';\nimport InformationDialog from './InformationDialog';\nimport AppService from '../../../services/AppService';\nimport { closeMessenger } from \"../../../redux/modules/messenger\";\nimport { resetInformation } from '../../../redux/modules/videochat';\nimport RechargeSelectionButtons from \"../RechargeSelectionButtons\";\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\nimport { Content, LivePreviewTextElement, TimerWrapper } from './style';\nimport { rechargeExternal, rechargeFromChat } from \"../../../sagas/common/recharge\";\nimport LiveChatButtonContainer from '../../specific/LiveChatButton/LiveChatButtonContainer';\nimport IStore, { ICurrency, ITranslation, VideochatInformationType, VideoChatType } from '../../../redux/store';\nimport { resumeExistingVideochat, resumePreviousVideochat, startVideoChatType } from \"../../../sagas/common/videochat\";\nimport LivePreviewTextTimerContainer from \"../../specific/LivePreviewTextTimer/LivePreviewTextTimerContainer\";\n\n/*\n **\tThese flags are only applicable for mobile devices\n */\ninterface IOrientationProps {\n\tisLandscape: boolean;\n\tisPortrait: boolean;\n}\n\ninterface IInformationDialog {\n\ttitle: string;\n\ttext?: string;\n\tbutton?: any;\n\tbuttonText?: string;\n\tcloseTooltip?: string;\n\tcancelText?: string;\n\thasModelProfilePicture: boolean;\n\thasCloseButton: boolean;\n\tchildren?: JSX.Element;\n\n\tonButtonClick?: () => void;\n}\n\ninterface IStoreProps {\n\tmodelName: string;\n\tcurrency: ICurrency;\n\ttranslation: ITranslation;\n\tinformationType: VideochatInformationType;\n\tlastRechargedAmount: number;\n\toneClickRechargeAmounts: number[];\n\toneClickRechargeDefaultAmount?: number;\n\tisUserOnline: boolean;\n\tcanRenderInformationDialog: boolean;\n\tisModelSupportingVoyeurToPrivateChat: boolean;\n\tisVideoChatOpen: boolean;\n\thasModelProfilePicture: boolean;\n\n\tcloseMessenger: ActionDispatcher;\n\tresetInformation: ActionDispatcher;\n\trechargeExternal: ActionDispatcher;\n\tresumeExistingVideochat: ActionDispatcher;\n\tresumePreviousVideochat: ActionDispatcher;\n\trechargeFromChat: ActionDispatcher<number>;\n\tstartVideoChatType: ActionDispatcher<VideoChatType>;\n}\n\ntype IProps = IStoreProps & IInstanceProps & IOrientationProps;\n\ninterface IState {\n\tselectedAmount?: number;\n}\n\nclass InformationDialogContainer extends React.Component<IProps, IState> {\n\tconstructor(props: IProps) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tselectedAmount: props.oneClickRechargeDefaultAmount\n\t\t}\n\t}\n\n\trender() {\n\t\tconst infoDictionary = this.getInformations();\n\t\tconst { informationType, isLandscape: isMobileLandscape } = this.props;\n\t\tconst information = informationType && infoDictionary[informationType];\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{information && this.props.canRenderInformationDialog &&\n\t\t\t\t\t<InformationDialog\n\t\t\t\t\t\t{...information}\n\t\t\t\t\t\tisVideoChatOpen={this.props.isVideoChatOpen}\n\t\t\t\t\t\tonCloseClick={this.onCloseClick}\n\t\t\t\t\t\tisMobileLandscape={isMobileLandscape}\n\t\t\t\t\t\tinformationType={this.props.informationType}\n\t\t\t\t\t/>\n\t\t\t\t}\n\t\t\t</>\n\t\t);\n\t}\n\n\tprivate onCloseClick = () => {\n\t\tconst { instanceId } = this.props;\n\t\tthis.props.resetInformation(instanceId);\n\t\tthis.props.closeMessenger(instanceId);\n\t};\n\n\tprivate onVerifyAgeClick = () => {\n\t\tAppService.getService(this.props.instanceId).onAgeVerification();\n\t};\n\n\tprivate outOfMoneyButtonClick = () => {\n\t\tconst { instanceId } = this.props;\n\t\tthis.props.rechargeExternal(instanceId);\n\t\tthis.props.resetInformation(instanceId);\n\t};\n\n\tprivate outOfMoneyOneClickButtonClick = (selectedAmount?: number) => () => {\n\t\tconst { instanceId } = this.props;\n\n\t\tif (selectedAmount) {\n\t\t\tthis.props.rechargeFromChat(instanceId, selectedAmount);\n\t\t\tthis.props.resetInformation(instanceId);\n\t\t}\n\t};\n\n\tprivate thankYouButtonClick = () => {\n\t\tconst { instanceId } = this.props;\n\t\tthis.props.resetInformation(instanceId);\n\t\tthis.props.resumeExistingVideochat(instanceId);\n\t};\n\n\tprivate continueChatButtonClick = () => {\n\t\tconst { instanceId } = this.props;\n\n\t\tif (this.props.isUserOnline) {\n\t\t\tthis.props.resetInformation(instanceId);\n\t\t\tthis.props.resumePreviousVideochat(instanceId);\n\t\t}\n\t};\n\n\tprivate startVoyeurButtonClick = () => {\n\t\tconst { instanceId } = this.props;\n\t\tthis.props.resetInformation(instanceId);\n\t\tthis.props.startVideoChatType(instanceId, VideoChatType.VOYEUR_PRIVATE_CHAT);\n\t};\n\n\n\t/**\n\t * Create the mapping between the information type and the information object.\n\t * This mapping is implemented in render for having a clean access to translations.\n\t */\n\tprivate getInformations = () => {\n\t\tconst modelname = this.props.modelName;\n\t\tconst {\n\t\t\toneClickRechargeAmounts,\n\t\t\toneClickRechargeDefaultAmount,\n\t\t\tisModelSupportingVoyeurToPrivateChat\n\t\t} = this.props;\n\t\tconst { chat, common: { close, cancel, thankYou, paymentSuccess }, error, user } = this.props.translation;\n\t\tconst cancelText = upperFirst(cancel);\n\n\t\tconst informations: { [informationType: string]: IInformationDialog } = {};\n\t\tinformations[VideochatInformationType.OFFLINE_CONNECTION] = {\n\t\t\thasModelProfilePicture: this.props.hasModelProfilePicture,\n\t\t\thasCloseButton: true,\n\t\t\tcloseTooltip: close,\n\t\t\ttitle: user.youAreOffline,\n\t\t\ttext: utils.translationWithValues(chat.checkConnection, { modelname }),\n\t\t\tbuttonText: chat.continue,\n\t\t\tonButtonClick: this.continueChatButtonClick,\n\t\t\tcancelText\n\t\t};\n\n\t\tinformations[VideochatInformationType.ERROR_OCCURRED] = {\n\t\t\thasModelProfilePicture: this.props.hasModelProfilePicture,\n\t\t\thasCloseButton: true,\n\t\t\tcloseTooltip: close,\n\t\t\ttitle: error.error,\n\t\t\ttext: utils.translationWithValues(chat.actorWaiting, { modelname }),\n\t\t\tbuttonText: chat.continue,\n\t\t\tonButtonClick: this.continueChatButtonClick,\n\t\t\tcancelText\n\t\t};\n\n\t\tinformations[VideochatInformationType.OUT_OF_MONEY] = {\n\t\t\thasModelProfilePicture: this.props.hasModelProfilePicture,\n\t\t\thasCloseButton: true,\n\t\t\tcloseTooltip: close,\n\t\t\ttitle: chat.noMoney,\n\t\t\ttext: chat.exitLoadAgain,\n\t\t\tbuttonText: chat.charge,\n\t\t\tonButtonClick: this.outOfMoneyButtonClick,\n\t\t\tcancelText\n\t\t};\n\n\t\tinformations[VideochatInformationType.OUT_OF_MONEY_ONE_CLICK_RECHARGE] = {\n\t\t\thasModelProfilePicture: this.props.hasModelProfilePicture,\n\t\t\thasCloseButton: true,\n\t\t\tcloseTooltip: close,\n\t\t\ttitle: chat.noMoney,\n\t\t\ttext: chat.exitLoadAgain,\n\t\t\tchildren: (\n\t\t\t\t<RechargeSelectionButtons\n\t\t\t\t\tamounts={oneClickRechargeAmounts}\n\t\t\t\t\tcurrency={this.props.currency}\n\t\t\t\t\tdefaultAmount={oneClickRechargeDefaultAmount}\n\t\t\t\t\tonSelect={(selectedAmount: number) => {\n\t\t\t\t\t\tthis.setState({ selectedAmount })\n\t\t\t\t\t}}\n\t\t\t\t\thasSubmit={false}\n\t\t\t\t/>\n\t\t\t),\n\t\t\tbuttonText: chat.charge,\n\t\t\tonButtonClick: this.outOfMoneyOneClickButtonClick(this.state.selectedAmount),\n\t\t\tcancelText\n\t\t};\n\n\t\tinformations[VideochatInformationType.VERIFY_AGE] = {\n\t\t\thasModelProfilePicture: this.props.hasModelProfilePicture,\n\t\t\thasCloseButton: false,\n\t\t\ttitle: chat.verifyAge,\n\t\t\ttext: utils.translationWithValues(chat.avsNeeded, { modelname }),\n\t\t\tbuttonText: chat.verifyAge,\n\t\t\tonButtonClick: this.onVerifyAgeClick,\n\t\t\tcancelText\n\t\t};\n\n\t\tinformations[VideochatInformationType.PREVIEW_JUST_FINISHED] = {\n\t\t\thasModelProfilePicture: false,\n\t\t\thasCloseButton: false,\n\t\t\ttitle: chat.previewEndHeadline,\n\t\t\tchildren: (\n\t\t\t\t<>\n\t\t\t\t\t<TimerWrapper>\n\t\t\t\t\t\t<LivePreviewTextTimerContainer/>\n\t\t\t\t\t</TimerWrapper>\n\n\t\t\t\t\t<LivePreviewTextElement>\n\t\t\t\t\t\t{utils.translationWithValues(chat.previewEndCountdown, { modelname })}\n\t\t\t\t\t</LivePreviewTextElement>\n\t\t\t\t</>\n\t\t\t),\n\t\t\tbutton: (\n\t\t\t\t<Content>\n\t\t\t\t\t<LiveChatButtonContainer/>\n\t\t\t\t</Content>\n\t\t\t),\n\t\t};\n\n\t\tinformations[VideochatInformationType.THANK_YOU_ONE_CLICK_RECHARGE] = {\n\t\t\thasModelProfilePicture: this.props.hasModelProfilePicture,\n\t\t\thasCloseButton: true,\n\t\t\tcloseTooltip: close,\n\t\t\ttitle: thankYou,\n\t\t\ttext: utils.translationWithValues(chat.chargeSuccess, {\n\t\t\t\tamount: `${this.props.lastRechargedAmount} ${this.props.currency.name}`\n\t\t\t}),\n\t\t\tbuttonText: chat.continue,\n\t\t\tonButtonClick: this.thankYouButtonClick,\n\t\t\tcancelText\n\t\t};\n\n\t\tinformations[VideochatInformationType.THANK_YOU] = {\n\t\t\thasModelProfilePicture: this.props.hasModelProfilePicture,\n\t\t\thasCloseButton: true,\n\t\t\tcloseTooltip: close,\n\t\t\ttitle: thankYou,\n\t\t\ttext: paymentSuccess,\n\t\t\tbuttonText: chat.continue,\n\t\t\tonButtonClick: this.thankYouButtonClick,\n\t\t\tcancelText\n\t\t};\n\n\t\tinformations[VideochatInformationType.LIVECHAT_SESSION_ENDED] = {\n\t\t\thasModelProfilePicture: this.props.hasModelProfilePicture,\n\t\t\thasCloseButton: true,\n\t\t\tcloseTooltip: close,\n\t\t\ttitle: chat.popup.ended,\n\t\t\ttext: chat.popup.ended\n\t\t};\n\n\t\tinformations[VideochatInformationType.EJECTED] = {\n\t\t\thasModelProfilePicture: this.props.hasModelProfilePicture,\n\t\t\thasCloseButton: true,\n\t\t\tcloseTooltip: close,\n\t\t\ttitle: chat.interrupted,\n\t\t\ttext: utils.translationWithValues(chat.popup.kicked, { modelname })\n\t\t};\n\n\t\tinformations[VideochatInformationType.HOST_OFFLINE] = {\n\t\t\thasModelProfilePicture: this.props.hasModelProfilePicture,\n\t\t\thasCloseButton: true,\n\t\t\tcloseTooltip: close,\n\t\t\ttitle: chat.popup.ended,\n\t\t\ttext: utils.translationWithValues(chat.popup.offline3, { modelname })\n\t\t};\n\n\t\tinformations[VideochatInformationType.PRIVATE_CHAT] = {\n\t\t\thasModelProfilePicture: this.props.hasModelProfilePicture,\n\t\t\thasCloseButton: true,\n\t\t\tcloseTooltip: close,\n\t\t\ttitle: chat.interrupted,\n\t\t\tbuttonText: isModelSupportingVoyeurToPrivateChat ? chat.startVoyeur : undefined,\n\t\t\tonButtonClick: this.startVoyeurButtonClick,\n\t\t\ttext: utils.translationWithValues(isModelSupportingVoyeurToPrivateChat\n\t\t\t\t? chat.popup.privateChat2\n\t\t\t\t: chat.popup.privateChat1, { modelname }\n\t\t\t)\n\t\t};\n\n\t\treturn informations;\n\t};\n}\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n\tinformationType: selectors.getInformationType(store, instanceId),\n\tmodelName: selectors.getModelName(store, instanceId),\n\tcurrency: selectors.getCurrency(store, instanceId),\n\ttranslation: selectors.getTranslation(store, instanceId),\n\tlastRechargedAmount: selectors.getLastRechargedAmount(store, instanceId),\n\toneClickRechargeAmounts: selectors.getOneClickRechargeAmounts(store, instanceId),\n\toneClickRechargeDefaultAmount: selectors.getOneClickRechargeDefaultAmount(store, instanceId),\n\tisUserOnline: selectors.isUserOnline(store, instanceId),\n\tcanRenderInformationDialog: selectors.canRenderInformationDialog(store, instanceId),\n\tisModelSupportingVoyeurToPrivateChat: selectors.isModelSupportingVoyeurToPrivateChat(store, instanceId),\n\tisVideoChatOpen: selectors.isVideoChatOpen(store, instanceId),\n\thasModelProfilePicture: selectors.hasModelProfilePicture(store, instanceId)\n});\n\nconst mapDispatchToProps = {\n\tresetInformation,\n\trechargeFromChat,\n\trechargeExternal,\n\tcloseMessenger,\n\tresumeExistingVideochat,\n\tresumePreviousVideochat,\n\tstartVideoChatType\n};\n\nexport default withRedux(InformationDialogContainer, mapStateToProps, mapDispatchToProps, { withOrientationChange });\n","import styled from \"styled-components\";\nimport withCustomClasses, { DomCustomClass } from \"../../hoc/withCustomClasses/\";\n\nexport const ButtonSection = styled.div`\n    margin: 20px 0;\n    display: flex;\n    justify-content: center;\n`;\n\nexport const ContentElement = styled.div`\n    padding: 2px;\n`;\n\nexport const ContentWrapper = styled.div`\n    width: 100%;\n    height: 100%;\n    text-align: center;\n    left: 0;\n`;\n\nexport const PreChatInformationDialogWrapper = withCustomClasses(styled.div`\n    background-color: ${(props) => props.theme.colors.preChatPopup.backgroundColor};\n    border: 0.5px solid ${(props) => props.theme.colors.preChatPopup.backgroundColor};\n    font-family: ${(props) => props.theme.typography.fontFamily};\n    font-weight: ${(props) => props.theme.typography.weight.regular};\n    \n    z-index: 1;\n    width: 50%;\n    padding: 20px;\n    padding-top: 40px;\n    display: inline-block;\n    display: flex;\n    position: relative;\n    flex-direction: column;\n    justify-content: space-between;\n    border-radius: 5px;\n\n    @media(max-width: 660px) {\n        width: 100%;\n\t\tpadding: 40px 0 20px 0;\n    }\n`, [DomCustomClass.PreChatInformationDialog]);\n\nexport const ProfilePictureWrapper = styled.div`\n    margin-bottom: 15px;\n`;\n\nexport const TextElement = styled(ContentElement)`\n    font-size: 24px;\n    font-weight: 400;\n    font-style: normal;\n    line-height: 30px;\n    color: ${(props) => props.theme.colors.preChatPopup.textColor};\n`;\n\nexport const LinkElement = styled('div')`\n    margin: 20px 0;\n    line-height: 30px;\n    text-decoration: underline;\n    cursor: pointer;\n    color: ${(props) => props.theme.colors.preChatPopup.textColor};\n`;\n","import { ACTION, EnumMessageType } from 'vxcontrol-client-lib';\n\nimport { IAutoRecharge, IChatFeatures, IOneClickRecharge, MsgType } from \"../../../redux/store\";\n\nexport interface ISuploadPicRequest {\n    action: ACTION.CMDP_SUPLOADPIC;\n    sessionID: string;\n    channelId: string;\n    messageKey: string;\n    webtoken: string;\n    format: \"json\";\n}\n\nexport interface ILoginGuestResponse {\n    boughtMessengerGifts: IInventoryGift[];\n    autoRecharge: IAutoRecharge;\n    oneClickRecharge: IOneClickRecharge;\n    chatFeatures: IChatFeatures;\n    vip: boolean;\n    freeMessagesCount?: number;\n    messagePrice: number;\n    messages: {\n        freeCount: number;\n    };\n}\n\nexport interface IChatResponse {\n    chatId: string;\n    clientId: string;\n    server: string;\n    width: number;\n    height: number;\n}\n\nexport interface IInventoryGift {\n    quantity: number;\n    gift: {\n        id: number;\n    }\n}\n\nexport interface IErrorResponse {\n    result: {\n        code: number;\n        reason: string;\n    }\n}\n\nexport interface IAnonymousTip {\n    amount: number;\n    giftId: number;\n}\n\nexport interface ISetChannelInfo {\n    note?: string;\n    isFavorite?: boolean;\n}\n\n/** Enums */\nexport enum ONLINE_STATE_VALUES {\n    ON = \"true\",\n    OFF = \"false\"\n}\n\n/** Helper enum */\nexport const enum SubActionType {\n    STARTVIDEOCHAT = \"STARTVIDEOCHAT\",\n    STARTFREECHAT = \"STARTFREECHAT\",\n    STARTLIVEPREVIEW = \"STARTLIVEPREVIEW\",\n    STARTVOYEURCHAT = \"STARTVOYEURCHAT\",\n    STARTVOYEUR2SCHAT = \"STARTVOYEUR2SCHAT\"\n}\n\nexport const messageTypes: {[key: string]: MsgType} ={};\nmessageTypes[EnumMessageType.CHAT] = MsgType.CHAT;\nmessageTypes[EnumMessageType.MESSENGER] = MsgType.MESSENGER;\nmessageTypes[EnumMessageType.SYSTEM] = MsgType.SYSTEM;\n","import * as React from 'react';\nimport { DialogButtonColor, DialogButtonContent, DialogButtonWrapper } from './style';\n\ninterface IProps {\n    color: DialogButtonColor;\n    text?: string;\n    onClick?: () => any;\n}\nconst DialogButton = (props: IProps) => (\n    <DialogButtonWrapper\n        color={props.color}\n        onClick={props.onClick}\n    >\n        <DialogButtonContent>\n            {props.text}\n        </DialogButtonContent>\n    </DialogButtonWrapper>\n);\n\nexport default DialogButton;","import * as React from 'react';\nimport ProfilePictureContainer from '../../specific/ProfilePicture/ProfilePictureContainer';\nimport DialogButton from \"../DialogButton/DialogButton\";\nimport { DialogButtonColor } from \"../DialogButton/style\";\nimport {\n    ButtonSection,\n    ContentWrapper,\n    PreChatInformationDialogWrapper,\n    ProfilePictureWrapper,\n    TextElement\n} from './style';\nimport CloseButtonContainer, { CloseButtonType } from '../CloseButton/CloseButtonContainer';\n\nexport interface IPreChatInformationDialogProps {\n    text: string;\n    closeButtonText?: string;\n    hasCloseButton: boolean;\n    onCloseClick?: () => any;\n    buttons?: JSX.Element;\n    otherContent?: JSX.Element;\n    hasModelProfilePicture?: boolean;\n}\n\nconst PreChatInformationDialog = (props: IPreChatInformationDialogProps) => (\n    <PreChatInformationDialogWrapper>\n        <CloseButtonContainer\n            onClick={props.onCloseClick}\n            hoverText={props.closeButtonText}\n            closeButtonType={CloseButtonType.PRECHAT_INFORMATION_DIALOG}\n            iconClassName={'-icon-close-full'}\n        />\n\n        <ContentWrapper>\n            {props.hasModelProfilePicture &&\n                <ProfilePictureWrapper>\n                    <ProfilePictureContainer />\n                </ProfilePictureWrapper>\n            }\n\n            <TextElement>{props.text}</TextElement>\n\n            <ButtonSection>\n                {props.buttons}\n                {props.hasCloseButton &&\n                    <DialogButton\n                        text={props.closeButtonText}\n                        color={DialogButtonColor.BLACK}\n                        onClick={props.onCloseClick}\n                    />\n                }\n            </ButtonSection>\n\n            {props.otherContent}\n        </ContentWrapper>\n    </PreChatInformationDialogWrapper>\n);\n\nexport default PreChatInformationDialog;\n","import styled from 'styled-components';\n\nimport config from \"../../../static/config\";\nimport { BaseButton } from '../../common/BaseButton/style';\nimport withCustomClasses, { DomCustomClass } from \"../../hoc/withCustomClasses/\";\n\ninterface ICam2CamButtonWrapper {\n    isSelected?: boolean;\n}\n\nexport const Cam2CamButtonWrapper = withCustomClasses<ICam2CamButtonWrapper>(styled(BaseButton)<ICam2CamButtonWrapper>`\n    ${props =>`\n        background-color: ${props.theme.colors.cam2CamBackgroundColor};\n        border: ${props.theme.colors.cam2CamBackgroundColor};\n        color: ${props.theme.colors.videoChatControlsText};\n    `}\n    \n    &:hover {\n        ${props => `\n            background-color: ${props.theme.colors.cam2CamHoverColor};\n            border-color: ${props.theme.colors.cam2CamHoverColor};\n        `}\n    }\n    \n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n    text-align: center;\n    padding: 5px 5px;\n    position: relative;\n\n    i {\n        font-size: ${config.viewSizes.actionSectionButton}px;\n        position: relative;\n        display: inline-block;\n        padding-right: 12px;\n    }\n`, [DomCustomClass.Cam2CamButton]);\n\nexport const Cam2CamDisabledButtonWrapper = withCustomClasses(styled(BaseButton).attrs({ disabled: true })`\n    background-color: ${(props) => props.theme.colors.cam2CamDisabledColor};\n    border: 1px solid ${(props) => props.theme.colors.cam2CamDisabledColor};\n    color: ${(props) => props.theme.colors.primaryColor};\n    text-align: center;\n    width: 98%;\n\n    &:hover {\n        background-color: ${(props) => props.theme.colors.cam2CamDisabledColor};\n        border-color: ${(props) => props.theme.colors.cam2CamDisabledColor};\n        color: #fff;\n    }   \n\n    i {\n        font-size: ${config.viewSizes.actionSectionButton}px;\n        position: relative;\n        display: inline-block;\n        padding-right: 12px;\n    }\n`, [DomCustomClass.Cam2CamButton, DomCustomClass.Disabled]);\n\nexport const Cam2CamEnabledIndicator = styled.div`\n    background-color: #43B31C;\n    border-radius: 50%;\n    \n    width: 10px;\n    height: 10px;\n    \n    position: absolute;\n    top: 5px;\n    right: 5px;\n`;\n","import * as React from 'react';\nimport { isIE } from 'react-device-detect';\nimport { isEmpty } from 'lodash';\n\nimport { ITranslation } from '../../../redux/store';\nimport { BaseButtonContent, FirstRowText } from '../../common/BaseButton/style';\nimport { Cam2CamButtonWrapper, Cam2CamDisabledButtonWrapper, Cam2CamEnabledIndicator } from './style';\nimport Tooltip from '../../common/Tooltip/Tooltip';\nimport utils from '../../../utils'\nimport BaseButtonContainer from '../../common/BaseButton';\n\nexport interface IProps {\n    translation: ITranslation;\n    isSelected: boolean;\n    shouldDisplayIcon?: boolean;\n    updateBrowserLink?: string;\n    isForActionSection?: boolean;\n\n    onClick: () => any;\n}\n\nconst Cam2CamButton = (props: IProps) => {\n    const {\n        camToCam,\n        browserOutdatedTagLine: updateBrowserTagLine,\n        browserOutdated: updateBrowser,\n        browserOutdatedHrefText: updateBrowserLinkText\n    } = props.translation.chat;\n\n\n    const cam2camButton = (\n        <>\n            {props.isSelected && <Cam2CamEnabledIndicator />}\n\n\t\t\t{utils.getShouldDisplayIcon(props.shouldDisplayIcon) &&\n            \t<i className={\"-icon-webcam-c2c-full\"} />\n            }\n            \n\t\t\t<BaseButtonContent>\n\t\t\t\t<FirstRowText>{camToCam}</FirstRowText>\n\t\t\t</BaseButtonContent>\n        </>\n    );\n\n    const text = (`\n        <p class=\"update-browser\">${updateBrowser}</p>\n        <p>${updateBrowserTagLine}</p>\n        \n        ${!isEmpty(props.updateBrowserLink)\n            ? `<a href=\"${props.updateBrowserLink}\">${updateBrowserLinkText}</a>`\n            : ''\n        }\n    `);\n\n    const tooltipProps = {\n        id: \"cam2cam-disabled-button\",\n        text,\n        isHtml: true,\n        isClickable: true,\n        isSolid: true,\n        isLight: true,\n        delayHide: 500\n    };\n\n    const disabledCam2CamButton = (\n        <BaseButtonContainer isForActionSection={props.isForActionSection}>\n            <Tooltip {...tooltipProps} >\n                <Cam2CamDisabledButtonWrapper>\n                    {cam2camButton}\n                </Cam2CamDisabledButtonWrapper>\n            </Tooltip>\n        </BaseButtonContainer>\n    );\n\n    const enabledCam2CamButton = (\n        <BaseButtonContainer\n            onClick={props.onClick}\n            isForActionSection={props.isForActionSection}\n        >\n            <Cam2CamButtonWrapper isSelected={props.isSelected}>\n                {cam2camButton}\n            </Cam2CamButtonWrapper>\n        </BaseButtonContainer>\n    );\n\n\t// IE-SPECIFIC: The cam2cam button is disabled on any IE browser.\n    return (\n        <>\n            {isIE ? disabledCam2CamButton : enabledCam2CamButton}\n        </>\n    )\n};\n\nexport default Cam2CamButton;\n","import * as React from 'react';\n\nimport Cam2CamButton from './Cam2CamButton';\nimport selectors from '../../../redux/selectors';\nimport { ActionDispatcher} from '../../../redux';\nimport IStore, { ITranslation } from '../../../redux/store';\nimport { toggleCam2Cam } from \"../../../sagas/common/videochat/cam2Cam\";\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\n\ninterface IComponentProps {\n    isResponsive?: boolean;\n    shouldDisplayIcon?: boolean;\n    isForActionSection?: boolean;\n}\n\ninterface IStoreProps {\n    translation: ITranslation;\n    isCam2CamActive: boolean;\n\tupdateBrowserLink?: string;\n\n    toggleCam2Cam: ActionDispatcher;\n}\n\ntype IProps = IComponentProps & IStoreProps & IInstanceProps;\n\nconst onCam2CamButtonClick = (props: IProps) => () => {\n    props.toggleCam2Cam(props.instanceId);\n};\n\nconst Cam2CamButtonContainer = (props: IProps) => (\n    <Cam2CamButton\n        translation={props.translation}\n        isSelected={props.isCam2CamActive}\n        isForActionSection={props.isForActionSection}\n        shouldDisplayIcon={props.shouldDisplayIcon}\n        updateBrowserLink={props.updateBrowserLink}\n        onClick={onCam2CamButtonClick(props)}\n    />\n);\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    translation: selectors.getTranslation(store, instanceId),\n    isCam2CamActive: selectors.isCam2CamActive(store, instanceId),\n\tupdateBrowserLink: selectors.getUpdateBrowserLink(store, instanceId)\n});\n\nconst mapDispatchToProps = {\n    toggleCam2Cam\n};\n\nexport default withRedux<IComponentProps>(Cam2CamButtonContainer, mapStateToProps, mapDispatchToProps);\n","import { IContainerProps as IProps } from \"./types\";\nimport { VideoChatType } from '../../../redux/store';\n\nexport const onActionButtonClick = (props: IProps) => () => {\n    props.startVideoChatType(props.instanceId, VideoChatType.LIVE_PREVIEW);\n};\n","import styled from 'styled-components';\n\nimport config from '../../../static/config';\nimport { BaseButton, BaseButtonContent } from '../../common/BaseButton/style';\nimport withCustomClasses, { DomCustomClass } from \"../../hoc/withCustomClasses/\";\n\ninterface IButtonContentProps {\n\tshouldDisplayIcon?: boolean;\n}\n\nexport const LiveChatPreviewButtonWrapper = withCustomClasses(styled(BaseButton)`\n    background-color: #3C3D3E;\n    border: 1px solid #3C3D3E;\n    color: #FFF;\n    padding: 5px 7px;\n    text-align: center;\n    font-size: 13px;\n    margin-left: 4px;\n    width: 98%;\n    box-sizing: border-box;\n\n    &:hover {\n        background-color: #626365;\n        border-color: #626365;\n        color: #fff;\n    }\n    \n    i {\n\t\tfont-size: ${config.viewSizes.actionSectionButton}px;\n        position: relative;\n        display: inline-block;\n        padding: 0 5px;\n    }\n`, [DomCustomClass.LiveChatPreviewButton]);\n\nexport const LiveChatPreviewButtonContent = styled(BaseButtonContent)<IButtonContentProps>`\n\t${({shouldDisplayIcon}) => shouldDisplayIcon && `width : ${config.viewSizes.defaultButtonWidth}px;`}\n`;\n","import * as React from 'react';\nimport Tooltip from '../../../features/common/Tooltip';\nimport { ITranslation } from '../../../redux/store';\nimport utils from '../../../utils';\nimport { SingleRowText } from '../../common/BaseButton/style';\nimport { LiveChatPreviewButtonContent, LiveChatPreviewButtonWrapper } from './style';\nimport BaseButtonContainer from '../../common/BaseButton';\n\ninterface IProps {\n    seconds: number;\n    shouldDisplayIcon?: boolean;\n    isForActionSection?: boolean;\n    translation: ITranslation;\n\n    onClick: () => void;\n}\n\nconst LiveChatPreviewButton = (props: IProps) => {\n    const { livePreview, tooltipPreview } = props.translation.chat;\n    const seconds = {\n        seconds: props.seconds\n    };\n\n    const previewButton = (\n        <LiveChatPreviewButtonWrapper >\n\t\t\t{utils.getShouldDisplayIcon(props.shouldDisplayIcon) &&\n\t\t\t\t<i className={\"-icon-eyes-line\"} />\n\t\t\t}\n\n\t\t\t<LiveChatPreviewButtonContent shouldDisplayIcon={props.shouldDisplayIcon}>\n\t\t\t\t<SingleRowText>{livePreview}</SingleRowText>\n\t\t\t</LiveChatPreviewButtonContent>\n        </LiveChatPreviewButtonWrapper>\n    );\n\n    const previewButtonWithTooltip = (\n        <Tooltip\n            id={\"live-chat-preview\"}\n            text={utils.translationWithValues(tooltipPreview, seconds)}\n        >\n            {previewButton}\n        </Tooltip>\n    );\n\n    return (\n        <BaseButtonContainer\n            onClick={props.onClick}\n            isForActionSection={props.isForActionSection}\n        >\n            {tooltipPreview\n                ? previewButtonWithTooltip\n                : previewButton\n            }\n        </BaseButtonContainer>\n    );\n};\n\nexport default LiveChatPreviewButton;\n","import * as React from 'react';\n\nimport { onActionButtonClick } from './utils';\nimport selectors from '../../../redux/selectors';\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\nimport LiveChatPreviewButton from './LiveChatPreviewButton';\nimport { startVideoChatType } from \"../../../sagas/common/videochat\";\nimport IStore from '../../../redux/store';\nimport { IContainerProps as IProps, IContainerComponentProps as IComponentProps } from \"./types\";\n\nconst LiveChatPreviewButtonContainer = (props: IProps) => (\n    <LiveChatPreviewButton\n        translation={props.translation}\n        seconds={props.chatFeatures.livePreviewDurationVideo}\n        isForActionSection={props.isForActionSection}\n        onClick={onActionButtonClick(props)}\n        shouldDisplayIcon={props.shouldDisplayIcon}\n    />\n);\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    translation: selectors.getTranslation(store, instanceId),\n    chatFeatures: selectors.getChatFeatures(store, instanceId)\n});\n\nconst mapDispatchToProps = {\n    startVideoChatType\n};\n\nexport default withRedux<IComponentProps>(LiveChatPreviewButtonContainer, mapStateToProps, mapDispatchToProps);\n","import { VideoChatType } from '../../../redux/store';\nimport { IContainerProps as IProps } from \"./types\";\n\nexport const onActionButtonClick = (props: IProps) => () => {\n    props.startVideoChatType(props.instanceId, VideoChatType.PRIVATE_CHAT);\n};\n","import styled from 'styled-components';\n\nimport config from \"../../../static/config\";\nimport { BaseButton } from '../../common/BaseButton/style';\nimport withIdentifier, { DomIdentifier } from \"../../hoc/withIdentifier\";\n\nexport const PrivateChatButtonWrapper = withIdentifier(styled(BaseButton)`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: #43B31C;\n    border: 1px solid #43B31C;\n    color: #FFFFFF;\n    text-align: center;\n    width: 98%;\n\n    &:hover {\n        background-color: #66E03B;\n        border-color: #66E03B;\n        color: #FFFFFF;\n    }\n\n    i {\n\t\tfont-size: ${config.viewSizes.actionSectionButton}px;\n        position: relative;\n        display: inline-block;\n        padding-right: 10px;\n    }\n`, DomIdentifier.PrivateChatButton);\n","import * as React from 'react';\nimport { ITranslation } from '../../../redux/store';\nimport { BaseButtonContent, FirstRowText } from '../../common/BaseButton/style';\nimport { PrivateChatButtonWrapper } from './style';\nimport utils from '../../../utils';\nimport BaseButtonContainer from '../../common/BaseButton';\n\ninterface IProps {\n    shouldDisplayIcon?: boolean;\n    isForActionSection?: boolean;\n    translation: ITranslation;\n\n    onClick: () => void;\n}\n\nconst PrivateChatButton = (props: IProps) => (\n    <BaseButtonContainer\n        onClick={props.onClick}\n        isForActionSection={props.isForActionSection}\n    >\n        <PrivateChatButtonWrapper>\n\t\t\t{utils.getShouldDisplayIcon(props.shouldDisplayIcon) &&\n            \t<i className={\"-icon-webcam-private-full\"} />\n\t\t\t}\n\n\t\t\t<BaseButtonContent>\n\t\t\t\t<FirstRowText>{props.translation.chat.privateChat}</FirstRowText>\n\t\t\t</BaseButtonContent>\n        </PrivateChatButtonWrapper>\n    </BaseButtonContainer>\n);\n\nexport default PrivateChatButton;\n","import * as React from 'react';\n\nimport { onActionButtonClick } from './utils';\nimport selectors from '../../../redux/selectors';\nimport PrivateChatButton from './PrivateChatButton';\nimport { startVideoChatType } from \"../../../sagas/common/videochat\";\nimport IStore from '../../../redux/store';\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\nimport { IContainerProps as IProps, IContainerComponentProps as IComponentProps } from \"./types\";\n\nconst PrivateChatButtonContainer = (props: IProps) => (\n    <PrivateChatButton\n        translation={props.translation}\n        onClick={onActionButtonClick(props)}\n        shouldDisplayIcon={props.shouldDisplayIcon}\n        isForActionSection={props.isForActionSection}\n    />\n);\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    translation: selectors.getTranslation(store, instanceId)\n});\n\nconst mapDispatchToProps = {\n    startVideoChatType\n};\n\nexport default withRedux<IComponentProps>(PrivateChatButtonContainer, mapStateToProps, mapDispatchToProps);\n","import { VideoChatType } from '../../../redux/store';\nimport { IContainerProps as IProps } from \"./types\";\n\nexport const onActionButtonClick = (props: IProps) => () => {\n    props.startVideoChatType(props.instanceId, VideoChatType.LIVE_PREVIEW);\n};\n","import styled from 'styled-components';\n\nimport config from '../../../static/config';\nimport { BaseButton } from '../../common/BaseButton/style';\nimport withCustomClasses, { DomCustomClass } from \"../../hoc/withCustomClasses/\";\n\nexport const VipLivePreviewButtonWrapper = withCustomClasses(styled(BaseButton)`\n    background-color: #EBD730;\n    border: 1px solid #EBD730;\n    color: #3C3D3E;\n    text-align: center;\n    margin-left: 5px;\n    width: 97%;\n    box-sizing: border-box;\n\n    &:hover {\n        background-color: #F2E476;\n        border-color: #F2E476;\n        color: #626365;\n    }\n    \n    i {\n\t\tfont-size: ${config.viewSizes.actionSectionButton}px;\n        position: relative;\n        display: inline-block;\n        padding: 0 5px;\n    }\n`, [DomCustomClass.VipLiveChatPreviewButton]);\n","import * as React from 'react';\nimport { ITranslation } from '../../../redux/store';\nimport utils from '../../../utils';\nimport { VipSingleRowText } from '../../common/BaseButton/style';\nimport Tooltip from '../../common/Tooltip';\nimport { VipLivePreviewButtonWrapper } from './style';\nimport { BaseButtonContent } from '../../common/BaseButton/style';\nimport BaseButtonContainer from '../../common/BaseButton';\n\ninterface IProps {\n    seconds: number;\n    translation: ITranslation;\n    shouldDisplayIcon?: boolean;\n    isForActionSection?: boolean;\n\n    onClick: () => void;\n}\n\nconst VipLivePreviewButton = (props: IProps) => {\n    const { tooltipPreview, livePreview } = props.translation.chat;\n    const seconds = { seconds: props.seconds };\n    const name = `${props.translation.user.vip} ${livePreview}`;\n\n    const vipPreviewButton = (\n        <VipLivePreviewButtonWrapper>\n\t\t\t{utils.getShouldDisplayIcon(props.shouldDisplayIcon) &&\n            \t<i className={\"-icon-person-vip\"} />\n\t\t\t}\n\t\t\t\n\t\t\t<BaseButtonContent>\n\t\t\t\t<VipSingleRowText>{name}</VipSingleRowText>\n\t\t\t</BaseButtonContent>\n        </VipLivePreviewButtonWrapper>\n    );\n\n    const vipPreviewButtonWithTooltip = (\n        <Tooltip\n            id={\"vip-live-preview\"}\n            text={utils.translationWithValues(tooltipPreview, seconds)} \n        >\n            {vipPreviewButton}\n        </Tooltip>\n    );\n\n    return (\n        <BaseButtonContainer\n            onClick={props.onClick}\n            isForActionSection={props.isForActionSection}\n        >\n            {tooltipPreview\n                ? vipPreviewButtonWithTooltip\n                : vipPreviewButton\n            }\n        </BaseButtonContainer>\n    );\n};\n\nexport default VipLivePreviewButton;\n","import * as React from 'react';\n\nimport {onActionButtonClick} from './utils'\nimport selectors from '../../../redux/selectors';\nimport VipLivePreviewButton from './VipLivePreviewButton';\nimport { startVideoChatType } from '../../../sagas/common/videochat';\nimport IStore from '../../../redux/store';\nimport {IInstanceProps} from \"../../hoc/withInstanceInfo\";\nimport withRedux from \"../../hoc/withRedux\";\nimport { IContainerProps as IProps, IContainerComponentProps as IComponentProps } from \"./types\";\n\nconst VipLivePreviewButtonContainer = (props: IProps) => (\n    <VipLivePreviewButton\n        translation={props.translation}\n        seconds={props.chatFeatures.livePreviewDurationVideo}\n        isForActionSection={props.isForActionSection}\n        onClick={onActionButtonClick(props)}\n        shouldDisplayIcon={props.shouldDisplayIcon}\n    />\n);\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    translation: selectors.getTranslation(store, instanceId),\n    chatFeatures: selectors.getChatFeatures(store, instanceId)\n});\n\nconst mapDispatchToProps = {\n    startVideoChatType\n};\n\nexport default withRedux<IComponentProps>(VipLivePreviewButtonContainer, mapStateToProps, mapDispatchToProps);\n","import { VideoChatType } from '../../../redux/store';\nimport { IContainerProps as IProps } from \"./types\";\n\nexport const onActionButtonClick = (props: IProps) => () => {\n    props.startVideoChatType(props.instanceId, VideoChatType.VOYEUR_CHAT)\n};\n","import styled from 'styled-components';\n\nimport config from \"../../../static/config\";\nimport { BaseButton } from '../../common/BaseButton/style';\nimport withCustomClasses, { DomCustomClass } from \"../../hoc/withCustomClasses/\";\n\nexport const VoyeurCamButtonWrapper = withCustomClasses(styled(BaseButton)`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: #3C3D3E;\n    border: 1px solid #3C3D3E;\n    color: #FFFFFF;\n    text-align: center;\n    width: 95%;\n    margin-left: 5px;\n    box-sizing: border-box;\n\n    &:hover {\n        background-color: #626365;\n        border-color: #626365;\n        color: #fff;\n    }\n\n    i {\n\t\tfont-size: ${config.viewSizes.actionSectionButton}px;\n        position: relative;\n        display: inline-block;\n        padding-right: 5px;\n    }\n`, [DomCustomClass.VoyeurCamButton]);\n","import * as React from 'react';\nimport Tooltip from '../../../features/common/Tooltip';\nimport { ICurrency, ITranslation } from '../../../redux/store';\nimport utils from '../../../utils';\nimport { BaseButtonContent, FirstRowText, SecondRowText } from '../../common/BaseButton/style';\nimport { VoyeurCamButtonWrapper } from './style';\nimport BaseButtonContainer from '../../common/BaseButton';\n\ninterface IProps {\n    price: number;\n    currency: ICurrency;\n    translation: ITranslation;\n    shouldDisplayIcon?: boolean;\n    isForActionSection?: boolean;\n\n    onClick: () => void;\n}\n\nconst VoyeurCamButton = (props: IProps) => {\n    const { tooltipVoyeur, voyeurCam } = props.translation.chat;\n\n    const voyeurCamPrice = utils.translationWithValues(\n        props.translation.common.perMinute, \n        { price: `${props.price} ${props.currency.symbol}` }\n    );\n\n    const voyeurCamButton = (\n        <VoyeurCamButtonWrapper>\n\t\t\t{utils.getShouldDisplayIcon(props.shouldDisplayIcon) &&\n            \t<i className={\"-icon-voyeur-full\"} />\n\t\t\t}\n\t\t\t\n\t\t\t<BaseButtonContent>\n\t\t\t\t<FirstRowText>{voyeurCam}</FirstRowText>\n\t\t\t\t<SecondRowText>{voyeurCamPrice}</SecondRowText>\n\t\t\t</BaseButtonContent>\n        </VoyeurCamButtonWrapper>\n    );\n\n    const voyeurCamButtonWithTooltip = (\n        <Tooltip id={\"voyeur-cam\"} text={tooltipVoyeur}>\n            {voyeurCamButton}         \n        </Tooltip>\n    );\n\n    return (\n        <BaseButtonContainer\n            isForActionSection={props.isForActionSection}\n            onClick={props.onClick}\n        >\n            {tooltipVoyeur\n                ? voyeurCamButtonWithTooltip\n                : voyeurCamButton\n            }\n        </BaseButtonContainer>\n    );\n};\n\nexport default VoyeurCamButton;\n","import * as React from 'react';\n\nimport { onActionButtonClick } from './utils';\nimport VoyeurCamButton from './VoyeurCamButton';\nimport selectors from '../../../redux/selectors';\nimport IStore from '../../../redux/store';\nimport { startVideoChatType } from '../../../sagas/common/videochat';\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\nimport { IContainerProps as IProps, IContainerComponentProps as IComponentProps } from \"./types\";\n\nconst VoyeurCamButtonContainer = (props: IProps) => (\n    <VoyeurCamButton\n        price={props.price}\n        currency={props.currency}\n        translation={props.translation}\n        onClick={onActionButtonClick(props)}\n        shouldDisplayIcon={props.shouldDisplayIcon}\n        isForActionSection={props.isForActionSection}\n    />\n);\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    currency: selectors.getCurrency(store, instanceId),\n    price: selectors.getVoyeurCamPrice(store, instanceId),\n    translation: selectors.getTranslation(store, instanceId)\n});\n\nconst mapDispatchToProps = {\n    startVideoChatType\n};\n\nexport default withRedux<IComponentProps>(VoyeurCamButtonContainer, mapStateToProps, mapDispatchToProps);\n","import styled from \"styled-components\";\n\ninterface IWrapperProps {\n    isFullscreen: boolean;\n\tisForInformationDialog?: boolean;\n}\n\nexport const ActionSectionWrapper = styled.div.attrs({ className: 'action-section' })<IWrapperProps>`\n    margin: ${props => props.isFullscreen ? `5px 5px 5px 10px` : `5px 5px 10px 10px`};\n    \n    ${props => props.isForInformationDialog && `\n        width: 100%;\n        max-width: 500px;\n    ` };\n    \n    height: 45px;\n    background-color: transparent;\n    display: flex;\n    align-content: center;\n    justify-content: center;\n    overflow: hidden;    \n`;\n","import * as React from 'react';\nimport { isEmpty } from 'lodash';\n\nimport { VideoChatType } from '../../../redux/store';\nimport Cam2CamButtonContainer from '../Cam2CamButton/Cam2CamButtonContainer';\nimport LiveChatButtonContainer from '../LiveChatButton/LiveChatButtonContainer';\nimport LiveChatPreviewButtonContainer from '../LiveChatPreviewButton/LiveChatPreviewButtonContainer';\nimport PrivateChatButtonContainer from '../PrivateChatButton/PrivateChatButtonContainer';\nimport VipLivePreviewButtonContainer from '../VipLivePreviewButton/VipLivePreviewButtonContainer';\nimport VoyeurCamButtonContainer from '../VoyeurCamButton/VoyeurCamButtonContainer';\nimport { ActionSectionWrapper } from './style';\nimport withCustomClasses, { DomCustomClass } from \"../../hoc/withCustomClasses/\";\n\nexport interface IProps {\n\tisVip: boolean;\n\tisFullscreen: boolean;\n\tshouldDisplayIcon: boolean;\n\tisForInformationDialog?: boolean;\n\n\tbuttonsVisibility: {\n\t\tliveChat: boolean;\n\t\tlivePreview: boolean;\n\t\tprivateChat: boolean;\n\t\tvoyeurChat: boolean;\n\t\tcam2Cam: boolean;\n\t}\n}\n\nconst ActionSection = (props: IProps) => {\n\t/**\n\t * Create a dictionary for keeping the buttons:\n\t * the key is the button type or videochat type (they cover the same concept)\n\t * and the value is the JSX for rendering the element\n\t */\n\tconst buttons: JSX.Element[] = [];\n\tconst { buttonsVisibility } = props;\n\n\t/** Create the livechat button */\n\tif (buttonsVisibility.liveChat) {\n\t\tbuttons.push(\n\t\t\t<LiveChatButtonContainer\n\t\t\t\tkey={VideoChatType.LIVECHAT}\n\t\t\t\tisForActionSection={true}\n\t\t\t\tshouldDisplayIcon={props.shouldDisplayIcon}\n\t\t\t/>\n\t\t);\n\t}\n\n\t/** Based on the VIP feature of the client, we create the desired live preview button */\n\tif (buttonsVisibility.livePreview) {\n\t\tbuttons.push(\n\t\t\tprops.isVip\n\t\t\t\t? <VipLivePreviewButtonContainer\n\t\t\t\t\tkey={VideoChatType.LIVE_PREVIEW}\n\t\t\t\t\tshouldDisplayIcon={props.shouldDisplayIcon}\n\t\t\t\t\tisForActionSection={true}\n\t\t\t\t/>\n\t\t\t\t: <LiveChatPreviewButtonContainer\n\t\t\t\t\tisForActionSection={true}\n\t\t\t\t\tkey={VideoChatType.LIVE_PREVIEW}\n\t\t\t\t\tshouldDisplayIcon={props.shouldDisplayIcon}\n\t\t\t\t/>\n\t\t);\n\t}\n\n\t/** Create the voyeur/voyeurToPrivateChat cam button */\n\tif (buttonsVisibility.voyeurChat) {\n\t\tbuttons.push(\n\t\t\t<VoyeurCamButtonContainer\n\t\t\t\tkey={VideoChatType.VOYEUR_CHAT}\n\t\t\t\tshouldDisplayIcon={props.shouldDisplayIcon}\n\t\t\t\tisForActionSection={true}\n\t\t\t/>\n\t\t);\n\t}\n\n\t/** Create the private chat button */\n\tif (buttonsVisibility.privateChat) {\n\t\tbuttons.push(\n\t\t\t<PrivateChatButtonContainer\n\t\t\t\tkey={VideoChatType.PRIVATE_CHAT}\n\t\t\t\tshouldDisplayIcon={props.shouldDisplayIcon}\n\t\t\t\tisForActionSection={true}\n\t\t\t/>\n\t\t);\n\t}\n\n\t/** Create the cam2cam button */\n\tif (buttonsVisibility.cam2Cam) {\n\t\tbuttons.push(\n\t\t\t<Cam2CamButtonContainer\n\t\t\t\tkey={VideoChatType.CAM2CAM}\n\t\t\t\tshouldDisplayIcon={props.shouldDisplayIcon}\n\t\t\t\tisForActionSection={true}\n\t\t\t/>\n\t\t);\n\t}\n\treturn (\n\t\t<>\n\t\t\t{!isEmpty(buttons) && <ActionSectionWrapper {...props}> {buttons} </ActionSectionWrapper>}\n\t\t</>\n\t);\n};\n\nexport default withCustomClasses<IProps>(ActionSection, [DomCustomClass.ActionSection]);\n\n","import * as React from 'react';\nimport { reduce, values } from 'lodash';\nimport { withResizeDetector } from 'react-resize-detector';\n\nimport selectors from '../../../redux/selectors';\nimport IStore from '../../../redux/store';\nimport ActionSection from './ActionSection';\nimport { viewSizes } from '../../../static/config/config';\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\n\ninterface IResizeDetector {\n    height: number;\n    width: number;\n}\n\ninterface IState {\n    shouldDisplayIcon: boolean;\n}\n\ninterface IComponentProps {\n\tisForInformationDialog?: boolean;\n}\n\ntype IStoreProps = ReturnType<typeof mapStateToProps>;\ntype IProps = IStoreProps & IInstanceProps & IResizeDetector & IComponentProps;\n\nclass ActionSectionContainer extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            shouldDisplayIcon: true\n        }\n    }\n\n    componentDidUpdate(prevProps: IProps) {\n        if (prevProps.width === this.props.width) { return; }\n\n        const buttonCount = reduce(\n            values(this.props.buttonsVisibility),\n            (count, isVisibile) => isVisibile ? count + 1 : count,\n            0\n        );\n\n        const buttonWidth = this.props.width / buttonCount;\n\n        this.setState({\n            shouldDisplayIcon: buttonWidth >= viewSizes.maxButtonWithoutIconWidth\n        });\n    }\n\n    render() {\n        return (\n            <ActionSection\n                isVip={this.props.isVip}\n                isFullscreen={this.props.isFullscreen}\n                buttonsVisibility={this.props.buttonsVisibility}\n                shouldDisplayIcon={this.state.shouldDisplayIcon}\n                isForInformationDialog={this.props.isForInformationDialog}\n            />\n        );\n    }\n}\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    isVip: selectors.isVip(store, instanceId),\n    isFullscreen: selectors.isFullScreen(store, instanceId),\n    isResponsive: selectors.isResponsive(store, instanceId),\n\n    buttonsVisibility: {\n        liveChat: selectors.canInitiateLiveChat(store, instanceId),\n        livePreview: selectors.canInitiateLivePreview(store, instanceId),\n        privateChat: selectors.canInitiatePrivateChat(store, instanceId),\n        voyeurChat: selectors.canInitiateVoyeurChat(store, instanceId),\n        cam2Cam: selectors.canInitiateCam2Cam(store, instanceId)\n    }\n});\n\nexport default withRedux(ActionSectionContainer, mapStateToProps, null, { withResizeDetector });\n","import { IContainerProps as IProps } from \"./types\";\nimport AppService from '../../../services/AppService';\nimport { AnswerType, KnownAnswerType, PreChatInformationType } from \"../../../redux/store\";\n\nexport const onCloseClick = (props: IProps) => () => {\n    props.closePrechatDialog(props.instanceId, props.informationType);\n};\n\nexport const onVerifyAgeClick = (props: IProps) => () => {\n    AppService.getService(props.instanceId).onAgeVerification();\n    props.resetPreChatInformation(props.instanceId);\n    props.closeMessenger(props.instanceId);\n};\n\nexport const onChargeNowClick = (props: IProps) => () => {\n    props.rechargeExternal(props.instanceId);\n    props.resetPreChatInformation(props.instanceId);\n};\n\nexport const onVipClick = (props: IProps) => () => {\n    AppService.getService(props.instanceId).onBecomeVIP();\n    props.resetPreChatInformation(props.instanceId);\n};\n\nexport const onAnswerToSpyingPrivateChat = (props: IProps) => (answer: AnswerType) => {\n    const { instanceId } = props;\n\n    if (answer === KnownAnswerType.YES) {\n        props.acceptToSpy(instanceId);\n    } else {\n        props.closePrechatDialog(instanceId, PreChatInformationType.PRIVATE_CHAT_CAN_SPY);\n    }\n};\n","import SelectionButtons from './SelectionButtons';\nimport { SelectedButtonColor } from './types';\n\nexport { SelectedButtonColor };\nexport default SelectionButtons;\n","import * as React from 'react';\n\nimport utils from '../../../utils';\nimport { LinkElement } from './style';\nimport selectors from '../../../redux/selectors';\nimport AppService from \"../../../services/AppService\";\nimport DialogButton from \"../DialogButton/DialogButton\";\nimport { DialogButtonColor } from \"../DialogButton/style\";\nimport { rechargeExternal } from \"../../../sagas/common/recharge\";\nimport { closeMessenger } from \"../../../redux/modules/messenger\";\nimport PreChatInformationDialog from './PreChatInformationDialog';\nimport { resetPreChatInformation } from '../../../redux/modules/videochat';\nimport IStore, {\n    AnswerType,\n    KnownAnswerType,\n    PreChatInformationType,\n    QuestionType\n} from '../../../redux/store';\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\nimport ActionSectionContainer from \"../../specific/ActionSection/ActionSectionContainer\";\nimport { onAnswerToSpyingPrivateChat, onChargeNowClick, onCloseClick, onVerifyAgeClick, onVipClick } from './utils';\nimport {acceptToSpyFromPrechatDialog, closePrechatDialog } from \"../../../sagas/common/ui\";\nimport SelectionButtons, { SelectedButtonColor } from \"../SelectionButtons\";\nimport { IContainerProps as IProps } from \"./types\";\n\ninterface IPreChatInformationDialog {\n    text: string;\n    closeButtonText?: string;\n    hasCloseButton: boolean;\n    buttons?: JSX.Element;\n    otherContent?: JSX.Element;\n    onCloseClick?: () => void;\n}\n\nconst PreChatInformationDialogContainer = (props: IProps) => {\n    /**\n     * Create the mapping between the information type and the information object.\n     * This mapping is implemented in render for having a clean access to translations.\n     */\n    const getInformations = () => {\n        const modelname = props.modelName;\n\n        const {\n            user: { becomeVIP },\n            common: { close, yes, no, perMinute },\n            chat: {\n                verifyAge,\n                livePreview,\n                vipLivePreview,\n                btnChargeNow,\n                popup,\n                voyeurToSingleInfo\n            }\n        } = props.translation;\n\n        const livePreviewType = props.isVip ? vipLivePreview : livePreview;\n\n        const yesNoOptions = [{\n            label: yes,\n            value: KnownAnswerType.YES,\n            selected: true\n        }, {\n            label: no,\n            value: KnownAnswerType.NO\n        }];\n\n        const privateChatCanSpyText = utils.translationWithValues(voyeurToSingleInfo, { modelname }) +\n            ` (${utils.translationWithValues(perMinute.toLowerCase(), { price: `${props.voyeurPrice} ${props.currency.symbol}`})})`;\n\n        const informations: { [informationType: string]: IPreChatInformationDialog } = {};\n        informations[PreChatInformationType.LIMIT_REACHED] = {\n            text: utils.translationWithValues(popup.previewLimit, { live_preview_type: livePreviewType }),\n            hasCloseButton: false,\n            buttons: <ActionSectionContainer isForInformationDialog={true}/>\n        };\n\n        informations[PreChatInformationType.PRIVATE_CHAT] = {\n            text: utils.translationWithValues(popup.privateCam, { modelname }),\n            hasCloseButton: false\n        };\n\n        informations[PreChatInformationType.PRIVATE_CHAT_CAN_SPY] = {\n            text: privateChatCanSpyText,\n            hasCloseButton: false,\n            buttons: (\n                <SelectionButtons<AnswerType>\n                    key={QuestionType.SPY_PRIVATE_CHAT}\n                    options={yesNoOptions}\n                    selectedButtonColor={SelectedButtonColor.DEFAULT}\n                    onSelect={onAnswerToSpyingPrivateChat(props)}\n                />\n            )\n        };\n\n        informations[PreChatInformationType.VERIFY_AGE] = {\n            text: utils.translationWithValues(popup.avs, { modelname }),\n            hasCloseButton: false,\n            buttons: (<DialogButton\n                text={verifyAge}\n                onClick={onVerifyAgeClick(props)}\n                color={DialogButtonColor.GREEN}\n            />)\n        };\n\n        const hasVIPFeature = utils.hasHookConfigured(AppService.getService(props.instanceId).onBecomeVIP);\n\n        informations[PreChatInformationType.CHARGE_ACCOUNT_OR_VIP] = {\n            text: hasVIPFeature ? popup.vip : popup.recharge,\n            hasCloseButton: false,\n            buttons: (\n                <DialogButton\n                    text={btnChargeNow}\n                    onClick={onChargeNowClick(props)}\n                    color={DialogButtonColor.BLUE}\n                />\n            )\n        };\n\n        if (hasVIPFeature) {\n            informations[PreChatInformationType.CHARGE_ACCOUNT_OR_VIP].otherContent = (\n                <LinkElement onClick={onVipClick(props)}>\n                    {becomeVIP}\n                </LinkElement>\n            );\n        }\n\n        informations[PreChatInformationType.NOT_AVAILABLE] = {\n            text: utils.translationWithValues(popup.previewDisabled,\n                { modelname, live_review_type: livePreviewType }),\n            hasCloseButton: false,\n\t        buttons: <ActionSectionContainer isForInformationDialog={true} />\n        };\n\n        informations[PreChatInformationType.HOST_OFFLINE] = {\n            text: utils.translationWithValues(popup.offline1, { modelname }),\n            closeButtonText: close,\n            hasCloseButton: true\n        };\n\n        informations[PreChatInformationType.GUEST_OFFLINE] = {\n            text: popup.offline2,\n            closeButtonText: close,\n            hasCloseButton: true\n        };\n\n        informations[PreChatInformationType.CONNECTION_ERROR] = {\n            text: popup.videoConnection,\n            closeButtonText: close,\n            hasCloseButton: true\n        };\n\n        return informations;\n    };\n\n    const informationDialogs = getInformations();\n    const informationDialog = informationDialogs[props.informationType];\n\n    return (\n        <>\n            {informationDialog && props.shouldRenderPreChatInformationDialog &&\n                <PreChatInformationDialog\n                    {...informationDialog}\n                    onCloseClick={onCloseClick(props)}\n                    hasModelProfilePicture={props.hasModelProfilePicture}\n                />\n            }\n        </>\n    );\n};\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    isVip: selectors.isVip(store, instanceId),\n    modelName: selectors.getModelName(store, instanceId),\n    translation: selectors.getTranslation(store, instanceId),\n    informationType: selectors.getPreChatInformationType(store, instanceId),\n    shouldRenderPreChatInformationDialog: selectors.shouldRenderPreChatInformationDialog(store, instanceId),\n    hasModelProfilePicture: selectors.hasModelProfilePicture(store, instanceId),\n    voyeurPrice: selectors.getVoyeurCamPrice(store, instanceId),\n    currency: selectors.getCurrency(store, instanceId)\n\n});\n\nconst mapDispatchToProps = {\n    resetPreChatInformation,\n    rechargeExternal,\n    closeMessenger,\n    closePrechatDialog,\n    acceptToSpy: acceptToSpyFromPrechatDialog\n};\n\nexport default withRedux(PreChatInformationDialogContainer, mapStateToProps, mapDispatchToProps);\n","import * as React from 'react';\nimport {ModalInformationDialogWrapper} from \"./style\";\nimport InformationDialogContainer from \"../../common/InformationDialog/InformationDialogContainer\";\nimport PreChatInformationDialogContainer from \"../../common/PreChatInformationDialog/PreChatInformationDialogContainer\";\n\nexport interface IModalInformationDialogProps {\n    shouldRenderExitingInformationDialog: boolean;\n    shouldRenderPreChatInformationDialog: boolean;\n}\n\nconst ModalInformationDialog = (props: IModalInformationDialogProps) => (\n    <>\n        {props.shouldRenderExitingInformationDialog && (\n            <ModalInformationDialogWrapper>\n                <InformationDialogContainer />\n            </ModalInformationDialogWrapper>\n        )}\n\n        {props.shouldRenderPreChatInformationDialog && (\n            <ModalInformationDialogWrapper>\n                <PreChatInformationDialogContainer />\n            </ModalInformationDialogWrapper>\n        )}\n    </>\n);\n\n\nexport default ModalInformationDialog;","import ModalInformationDialogContainer from './ModalInformationDialogContainer';\n\nexport default ModalInformationDialogContainer;\n","import * as React from 'react';\n\nimport IStore from '../../../redux/store';\nimport selectors from '../../../redux/selectors';\nimport ModalInformationDialog from \"./ModalInformationDialog\";\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\n\ninterface IStoreProps {\n    shouldRenderExitingInformationDialog: boolean;\n    shouldRenderPreChatInformationDialog: boolean;\n}\n\ntype IProps = IStoreProps & IInstanceProps;\n\nconst ModalInformationDialogContainer = (props: IProps) => (\n    <ModalInformationDialog\n        shouldRenderExitingInformationDialog={props.shouldRenderExitingInformationDialog}\n        shouldRenderPreChatInformationDialog={props.shouldRenderPreChatInformationDialog}\n    />\n);\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    shouldRenderExitingInformationDialog: selectors.shouldRenderExitingInformationDialog(store, instanceId),\n    shouldRenderPreChatInformationDialog: selectors.shouldRenderPreChatInformationDialog(store, instanceId)\n});\n\nexport default withRedux(ModalInformationDialogContainer, mapStateToProps);\n","import styled from \"styled-components\";\n\nexport const ImageUploaderWrapper = styled.div`\n    display: none;\n`;\n","import * as React from 'react';\nimport { ImageUploaderWrapper } from './style';\n\ninterface IProps {\n    onFileSelect: (event: any) => void;\n    inputRefCallback?: (ref: HTMLInputElement | null) => void;\n}\n\nconst ImageUploader = (props: IProps) => (\n    <ImageUploaderWrapper>\n        <input\n            ref={props.inputRefCallback}\n            id=\"file\"\n            type=\"file\"\n            onChange={props.onFileSelect}\n        />\n    </ImageUploaderWrapper>\n);\n\nexport default ImageUploader;","import { Action } from 'redux-actions';\nimport {get, includes, isEmpty} from 'lodash';\nimport {put, select, takeEvery} from \"redux-saga/effects\";\nimport {ACTION, IRESPONSE, ResultCode} from 'vxcontrol-client-lib';\n\nimport types from './types';\nimport { createAction, createActionType } from '../../redux/utils';\nimport { IPayload } from '../../redux/interfaces';\nimport selectors from '../../redux/selectors';\nimport {onReceiveChatError} from \"../common/chat\";\nimport AppService from '../../services/AppService';\nimport { resetChat } from \"../../redux/modules/session\";\nimport { translationWithValues } from \"../../utils/utils\";\nimport { ActionResponseType, LoadingStatus } from '../../redux/store';\nimport { addFailedMessage, setActionResponse, setMessengerLoadingStatus } from '../../redux/modules/messenger';\nimport { ActionIds } from '../../redux/interfaces';\n\nconst createHandleErrorActionType = createActionType(ActionIds.HANDLE_ERROR, { isSagaAction: true });\n\n/** Actions */\nexport const RECEIVE_ERROR = createHandleErrorActionType(\"RECEIVE_ERROR\");\n\n/** Action Creators */\nexport const onReceiveError = createAction<IRESPONSE>(RECEIVE_ERROR);\n\nconst initActions = [\n    ACTION.CMDP_LOGIN,\n    ACTION.CMDP_INIT,\n    ACTION.CMDP_GETCHANNELS,\n    ACTION.CMDP_GETCHANNELINFO,\n    ACTION.CMDP_GETONLINESTATE\n];\n\nconst subactionsForGetChat = [\n    types.SubActionType.STARTVIDEOCHAT,\n    types.SubActionType.STARTFREECHAT,\n    types.SubActionType.STARTLIVEPREVIEW,\n    types.SubActionType.STARTVOYEURCHAT,\n    types.SubActionType.STARTVOYEUR2SCHAT\n];\n\nconst actionsNeedingWebToken = [\n    ACTION.CMDP_INIT,\n    ACTION.CMDP_LOGIN,\n    ACTION.CMDP_QUERYBACKEND,\n    ACTION.CMDP_MSG,\n    ACTION.CMDP_SETCHANNELINFO,\n    ACTION.CMDP_GETCHANNELINFO,\n    ACTION.CMDP_SUPLOADPIC\n];\n\n/** codes of the errors that won't be displayed in an error action response */\nconst hiddenErrorCodes = [\n    ResultCode.MODEL_IS_IN_PRIVATE_CHAT,\n    ResultCode.SOFT_CHAT,\n    ResultCode.UNKNOWN_ERROR\n];\n\nconst receiveErrorSaga = function* ({ payload }: Action<IPayload<IRESPONSE>>) {\n    const { instanceId, value: command } = payload;\n\n    /** Retrieve the error message from the server */\n    if (isEmpty(command) || isEmpty(command.result)) {\n        return;\n    }\n\n    /** Additional error handling when it's a CMDP_QUERYBACKEND error (chat related) */\n    if (command.action === ACTION.CMDP_QUERYBACKEND &&\n        includes(subactionsForGetChat, command.params.subaction)\n    ) {\n        yield put(resetChat(instanceId));\n        yield put(onReceiveChatError(instanceId, command.result));\n    }\n\n    const { code } = command.result;\n\tconst {\n\t\tNO_CREDIT_VIDEOCHAT, NOT_ENOUGH_MONEY, INVALID_PARAMETER, INVALID_WEB_TOKEN\n\t} = ResultCode;\n\n    /**\n     * If we receive any NO_CREDIT error, we call the parent platform's onRecharge hook,\n     * render the error and close the gift section if it's the case.\n     */\n    if (code === NOT_ENOUGH_MONEY || code === NO_CREDIT_VIDEOCHAT ) {\n        AppService.getService(instanceId).onRecharge();\n    }\n\n    /** If the messenger is not initiated correctly, set the proper loading status */\n    if (includes(initActions, command.action)) {\n        yield put(setMessengerLoadingStatus(instanceId, LoadingStatus.ERROR));\n    }\n\n    /** we can assume (because there is no better detection mechanism) that the webtoken was the invalid parameter */\n    const isWebTokenInvalid = (code === INVALID_PARAMETER || code === INVALID_WEB_TOKEN)\n        && includes(actionsNeedingWebToken, command.action);\n\n    if (isWebTokenInvalid) {\n        if (command.action === ACTION.CMDP_MSG) {\n            const text =  get(command, \"params.text\");\n\n            if (text) {\n                yield put(addFailedMessage(instanceId, text));\n            }\n        }\n\n        AppService.getService(instanceId).onFailedWebToken(command.result);\n\n        return;\n    }\n\n    // filter out the errors not meant to be displayed in the red ribbon\n    if (includes(hiddenErrorCodes, command.result.code)) {\n        return;\n    }\n\n    const modelName = yield select(selectors.getModelName, instanceId);\n\n    yield put(setActionResponse(instanceId, {\n        text: translationWithValues(command.result.reason, {\n            modelname: modelName\n        }),\n        type: ActionResponseType.ERROR\n    }));\n};\n\nconst watchSagas = function* () {\n    yield takeEvery(RECEIVE_ERROR, receiveErrorSaga);\n};\n\nexport default watchSagas;\n","import * as cuid from 'cuid';\nimport * as moment from 'moment';\nimport { Action } from 'redux-actions';\nimport { includes, isEmpty } from 'lodash';\nimport request from 'superagent';\nimport { ACTION, IRESPONSE, ResultCode } from \"vxcontrol-client-lib\";\nimport { call, put, select, takeEvery } from \"redux-saga/effects\";\n\nimport types from './types';\nimport loggers from \"../../loggers\";\nimport config from '../../static/config';\nimport { createAction, createActionType } from '../../redux/utils';\nimport { IPayload } from '../../redux/interfaces';\nimport { onReceiveError } from './handleError';\nimport selectors from '../../redux/selectors';\nimport ChatService from \"../../services/ChatService\";\nimport { PromiseResult } from \"../../services/types\";\nimport { switchVoyeur2LiveChat } from '../common/videochat';\nimport { ActionIds } from '../../redux/interfaces';\nimport { getChatInstanceSaga, IGetChatInstanceSagaResult } from \"../common/chat\";\nimport { addMessage, closeDropDown, removeMessage, setActionResponse } from '../../redux/modules/messenger';\nimport {\n    ActionResponseType,\n\tIErrorTranslation,\n    IMessage,\n    ISession,\n    ITranslation,\n    MessageContentType,\n    MessageDirection\n} from '../../redux/store';\nimport { VXControlCodes } from '../../static/constants/errorCodes';\n\ninterface IErrorData {\n\tresponse: IRESPONSE;\n\tmessageKey: string;\n}\n\nconst createImageActionType = createActionType(ActionIds.IMAGE, { isSagaAction: true });\n\n// Actions\nconst REQUEST_SEND_IMAGE = createImageActionType(\"REQUEST_SEND_IMAGE\");\nconst RECEIVE_SEND_IMAGE_ERROR = createImageActionType(\"RECEIVE_SEND_IMAGE_ERROR\");\n\n// Action Creators\nexport const requestSendImage = createAction<File>(REQUEST_SEND_IMAGE);\nexport const receiveSendImageError = createAction<IErrorData>(RECEIVE_SEND_IMAGE_ERROR);\n\n/** Saga for sending an image */\nconst requestSendImageSaga = function* ({ payload }: Action<IPayload<File>>) {\n    const { instanceId, value: file } = payload;\n\n    const session: ISession = yield select(selectors.getSession, instanceId);\n    const translation: ITranslation = yield select(selectors.getTranslation, instanceId);\n    const webtoken: string = yield select(selectors.getWebtoken, instanceId);\n    const chat = yield select(selectors.getChat, instanceId);\n\n    /** The first step of this process is validating the file upload */\n    if (!includes(config.limitations.fileUpload.acceptedFileFormats, file.type)) {\n        yield put(setActionResponse(instanceId, {\n            text: translation.common.imageUploadFail,\n            type: ActionResponseType.ERROR\n        }));\n\n        return;\n    }\n\n    /** If file upload is validated we are closing the dropDown menu */\n    yield put(closeDropDown(instanceId));\n\n    /** The data should be a FormData with file's binary value and file's name */\n    const data = new FormData();\n    data.append(\"file\", file, file.name);\n\n    const messageKey = cuid.slug();\n\n    const message: IMessage = {\n        id: cuid.slug(),\n        content: URL.createObjectURL(file),\n        dateCreated: moment().toString(),\n        direction: MessageDirection.out,\n        contentType: MessageContentType.IMAGE,\n        messageKey,\n        isNew: true,\n        isOnLoading: true,\n        isSystem: false\n    };\n\n    if (chat) {\n        message.chatId = chat.chatId;\n    }\n\n    const isPlaying = yield select(selectors.isPlaying, instanceId);\n    const isChatExternallyProvided = yield select(selectors.isChatExternallyProvided, instanceId);\n\n    if (isPlaying || isChatExternallyProvided) {\n        // send through vchat-core\n        const chatResult: IGetChatInstanceSagaResult = yield call(getChatInstanceSaga, false, instanceId);\n\n        if (chatResult.chatConf.error || chatResult.chatInstance?.error) {\n            loggers.saga.debug('IMAGE - could not get chat to upload an image; aborting');\n            return;\n        }\n\n        yield put(addMessage(instanceId, message));\n\n\t    const isVideoChatInVoyeurMode: boolean = yield select(selectors.isVideoChatInVoyeurMode, instanceId);\n\t    if (isVideoChatInVoyeurMode) {\n\t\t    yield put(switchVoyeur2LiveChat(instanceId));\n\t    }\n\t    \n        /** Send the request */\n        const sendImageResult: PromiseResult<any, any> =\n            yield call(ChatService.getService(instanceId).sendMediaFile, file, messageKey);\n\n        if (!sendImageResult.error) {\n            const imageMessage: IMessage = yield select(selectors.findMessage(\n                (messageItem: IMessage) => messageItem.messageKey === messageKey\n            ), instanceId);\n\n            if (imageMessage) {\n                /** Add the successful image upload message in the Redux store */\n                yield put(setActionResponse(instanceId, {\n                    text: translation.common.imageUploadOk,\n                    type: ActionResponseType.SUCCESSFUL\n                }));\n            }\n        }\n    } else {\n        // send it through VXControls API\n        const queryParams: types.ISuploadPicRequest = {\n            action: ACTION.CMDP_SUPLOADPIC,\n            sessionID: session.sessionID,\n            channelId: session.channelId,\n            messageKey,\n            format: \"json\",\n            webtoken\n        } as types.ISuploadPicRequest;\n\n        /** Send the request */\n        const imageRequest = request\n            .post(config.endpoints.imageUpload)\n            .query(queryParams)\n            .send(data)\n\t\t\t.set(\"Accept\", \"application/json\");\n\t\t\t\n        /**\n         * Add the message with the loading animation and when the data will come from the server in the NOOP request,\n         * we will remove the animation and render the image\n         */\n        yield put(addMessage(instanceId, message));\n\n        /**\n         * Async waiting for request's response and based on its content,\n         * we may apply an error handling on image upload.\n         */\n\t\tlet requestResponse: any;\n\n\t\ttry {\n\t\t\trequestResponse = yield imageRequest;\n\t\t\n\t\t// TODO: we should have an improved approach when dealing with various errors from back-end.\n\t\t} catch(error) {\n\t\t\tconst translations: IErrorTranslation = yield select(selectors.getTranslationForErrors, instanceId);\n\n\t\t\tyield put(receiveSendImageError(instanceId, {\n\t\t\t\tmessageKey,\n\t\t\t\tresponse: {\n\t\t\t\t\taction: ACTION.CMDP_SUPLOADPIC,\n\t\t\t\t\tcommands: [],\n\t\t\t\t\tvalues: {},\n\t\t\t\t\tparams: {},\n\t\t\t\t\tresult: {\n\t\t\t\t\t\tcode: ResultCode.NOT_ENOUGH_MONEY,\n\t\t\t\t\t\treason: translations.error\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\n        if (!isEmpty(requestResponse)) {\n            const { text } = requestResponse;\n\n            try {\n                const response = JSON.parse(text);\n                const { result: { code }} = response;\n\n                if (code !== VXControlCodes.SUCCESS_EXIT_CODE) {\n                    yield put(receiveSendImageError(instanceId, { response, messageKey }));\n                }\n            } catch(error) {}\n        }\n    }\n};\n\nconst receiveSendImageErrorSaga = function* ({ payload }: Action<IPayload<IErrorData>>) {\n\tconst { instanceId, value: { messageKey, response }} = payload;\n\tyield put(onReceiveError(instanceId, response));\n\tyield put(removeMessage(instanceId, messageKey));\n}\n\nconst watchSagas = function* () {\n\tyield takeEvery(REQUEST_SEND_IMAGE, requestSendImageSaga);\n    yield takeEvery(RECEIVE_SEND_IMAGE_ERROR, receiveSendImageErrorSaga);\n};\n\nexport default watchSagas;\n","import ImageUploaderContainer from './ImageUploaderContainer';\n\nexport default ImageUploaderContainer;","import * as React from 'react';\n\nimport IStore from '../../../redux/store';\nimport ImageUploader from './ImageUploader';\nimport selectors from '../../../redux/selectors';\nimport { ActionDispatcher } from '../../../redux';\nimport { setIsMobileMenuOpen } from '../../../redux/modules/videochat';\nimport { requestSendImage } from '../../../sagas/websockets/image';\nimport { resetImageUploadStatus } from \"../../../redux/modules/messenger\";\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc//withRedux';\n\ninterface IStoreProps {\n    wasRequestedAnImageUpload: boolean;\n\n    requestSendImage: ActionDispatcher<any>;\n    setIsMobileMenuOpen: ActionDispatcher<boolean>;\n    resetImageUploadStatus: ActionDispatcher;\n}\n\ntype IProps = IInstanceProps & IStoreProps;\n\nclass ImageUploaderContainer extends React.Component<IProps> {\n    private ref: HTMLInputElement | null;\n\n    componentDidUpdate(prevProps: IProps) {\n        if (this.props.wasRequestedAnImageUpload &&\n            !prevProps.wasRequestedAnImageUpload &&\n            this.ref\n        ) {\n            this.ref.click();\n            this.props.resetImageUploadStatus(this.props.instanceId);\n        }\n    }\n\n    render() {\n        return (\n            <ImageUploader\n                inputRefCallback={this.inputRefCallback}\n                onFileSelect={this.onFileSelect}\n            />\n        )\n    }\n\n    private onFileSelect = (event: any): void => {\n        /** The user may select CANCEL, so no message should be sent in this context */\n        if (event.target.files.length > 0) {\n            /** Send the image to the saga middleware in order to send it to the server */\n            this.props.requestSendImage(this.props.instanceId, event.target.files[0]);\n\n            /** Reset file upload in order to send the same file consecutively */\n            event.target.value = null;\n        }\n\n        this.props.setIsMobileMenuOpen(this.props.instanceId, false);\n    };\n\n    private inputRefCallback = (ref: HTMLInputElement) => {\n        if (ref) {\n            this.ref = ref;\n        }\n    }\n}\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    wasRequestedAnImageUpload: selectors.wasRequestedAnImageUpload(store, instanceId)\n});\n\nconst mapDispatchToProps = {\n    setIsMobileMenuOpen,\n    requestSendImage,\n    resetImageUploadStatus\n};\n\nexport default withRedux(ImageUploaderContainer, mapStateToProps, mapDispatchToProps);","import * as types from './types';\n\nexport default types;","import * as React from 'react';\nimport * as base64 from 'base-64';\nimport { findIndex, forEach, includes, isEmpty, isEqual, isUndefined, last, map, throttle } from 'lodash';\nimport {\n\tCharacterMetadata,\n\tCompositeDecorator,\n\tContentBlock,\n\tDraftHandleValue,\n\tEditorState,\n\tEntityInstance,\n\tModifier,\n\tSelectionState,\n} from 'draft-js';\n\nimport Editor from './Editor';\nimport utils from '../../../utils';\nimport GiftDecorator from '../GiftDecorator';\nimport EmoticonDecorator from '../EmoticonDecorator';\nimport selectors from '../../../redux/selectors';\nimport constants from '../../../static/constants';\nimport { ActionDispatcher } from '../../../redux';\nimport { decreaseCurrentGiftQuantity, IHandleQuantitiesPayload } from '../../../redux/modules/session';\nimport IStore, {\n\tActionResponseType,\n\tIActionResponse,\n\tIEmoticon,\n\tIGift,\n\tIStoredEditorState,\n\tITranslation\n} from '../../../redux/store';\nimport {\n\tcloseMentionSection,\n\topenMentionSection,\n\tresetSymbols,\n\tsetActionResponse,\n\tsetMentionQuery,\n\tsetStoredEditorState\n} from \"../../../redux/modules/messenger\";\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\nimport MentionDecorator from '../MentionDecorator';\n\nenum EntityType {\n\tEMOTICON = \"EMOTICON\",\n\tGIFT = \"GIFT\",\n\tTEXT = \"TEXT\",\n\tMENTION = \"MENTION\"\n}\n\ninterface IState {\n\teditorState: EditorState;\n\tdropDownOpen: boolean;\n\temoticonRegexp: string;\n\tmentionPosition?: number;\n}\n\ninterface IComponentProps {\n\temoticon?: string;\n\tgift?: string;\n\tmention?: string;\n\tplaceholder: string;\n\tshouldResetEditorState: boolean;\n\n\tsendMessage: () => void;\n\tonTextChanged: (text: string) => void;\n}\n\ninterface IStoreProps {\n\tgifts: IGift[];\n\thasEditor: boolean;\n\tisInteractive: boolean;\n\tisVideoChatInGroupMode: boolean;\n\tshouldCloseMobileKeyboard: boolean;\n\tisMentionSectionOpen: boolean;\n\tshouldDisplayCustomMentionSection: boolean;\n\tshouldIncreaseMessageFontSize: boolean;\n\tmessagePrice: number;\n\ttranslation: ITranslation;\n\temoticons: IEmoticon[];\n\tstoredEditorState: IStoredEditorState;\n\tmentionOptions: string[];\n\tmentionQuery: string;\n\n\tsetActionResponse: ActionDispatcher<IActionResponse>;\n\tsetStoredEditorState: ActionDispatcher<IStoredEditorState>;\n\topenMentionSection: ActionDispatcher;\n\tcloseMentionSection: ActionDispatcher;\n\tresetSymbols: ActionDispatcher;\n\tdecreaseCurrentGiftQuantity: ActionDispatcher<IHandleQuantitiesPayload>;\n\tsetMentionQuery: ActionDispatcher<string>;\n}\n\ntype IProps = IComponentProps & IStoreProps & IInstanceProps;\n\nclass EditorContainer extends React.Component<IProps, IState> {\n\tconstructor(props: IProps) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\teditorState: EditorState.createEmpty(this.getCompositeDecorator(props.emoticons)),\n\t\t\temoticonRegexp: this.getEmoticonsRegexp(props.emoticons),\n\t\t\tdropDownOpen: false\n\t\t};\n\n\t\tthis.throttledStoreUpdate = throttle(this.updateStore, 1000);\n\t}\n\n\tprivate throttledStoreUpdate: (editorState: EditorState) => void;\n\n\tprivate editorRef: any;\n\n\t/**\n\t * When pasting a text, especially from a message already sent,\n\t * we can get useful data about the gifts from the associated pasted html;\n\t * here we get gifts id, encoded base64\n\t * @param gifts - gifts we are currently dealing with\n\t * @param html - pasted html (if any)\n\t */\n\tprivate static getGiftEntitiesDataFromPastedHTML = (gifts: IGift[], html?: string): string[] => {\n\t\tconst giftsEntitiesData: string[] = [];\n\t\tif (html) {\n\t\t\tconst wrappingElement = document.createElement('div');\n\t\t\twrappingElement.innerHTML = html.trim();\n\t\t\tconst giftEncodedIds = gifts.map(gift => base64.encode(gift.id.toString()));\n\t\t\twrappingElement.querySelectorAll('span[data-entity]')\n\t\t\t\t.forEach((element: Element) => {\n\t\t\t\t\tconst entityData = element.getAttribute('data-entity');\n\t\t\t\t\tif (entityData && includes(giftEncodedIds, entityData)) {\n\t\t\t\t\t\tgiftsEntitiesData.push(entityData);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t}\n\t\treturn giftsEntitiesData;\n\t};\n\n\tcomponentDidMount() {\n\t\tconst storedEditorState: IStoredEditorState = this.props.storedEditorState;\n\n\t\tif (!isEmpty(storedEditorState.text) || !isEmpty(storedEditorState.gifts)) {\n\t\t\t// reconstitute the editor store from the stored text and gifts\n\t\t\tthis.setContentFromTextAndGiftIds(\n\t\t\t\tstoredEditorState.text,\n\t\t\t\tstoredEditorState.gifts.map((gift: IGift) => base64.encode(gift.id.toString()))\n\t\t\t);\n\t\t}\n\n\t\tthis.editorRef = React.createRef<HTMLElement>();\n\t}\n\n\tcomponentDidUpdate(prevProps: IProps, prevState: IState): void {\n\t\tif (this.props.isVideoChatInGroupMode) {\n\t\t\tconst editorState = this.getStoringEditorState(this.state.editorState);\n\n\t\t\tconst cursorPosition = this.state.editorState.getSelection().getFocusOffset();\n\t\t\tconst slicedText = editorState.text.slice(0, cursorPosition);\n\t\t\tconst mentionPosition = slicedText.lastIndexOf(constants.mentionSpecialCharacter);\n\n\t\t\tconst mentionQuery = slicedText.slice(mentionPosition + 1, cursorPosition);\n\n\t\t\tif (this.props.shouldDisplayCustomMentionSection\n\t\t\t\t&& utils.hasActiveMentions(this.props.mentionOptions, mentionQuery)\n\t\t\t\t&& editorState.text !== '') {\n\t\t\t\tthis.props.openMentionSection(this.props.instanceId);\n\t\t\t}\n\n\t\t\tif (!this.props.shouldDisplayCustomMentionSection) {\n\t\t\t\tif (!isEqual(this.props.mentionQuery, mentionQuery)) {\n\t\t\t\t\tthis.props.setMentionQuery(this.props.instanceId, mentionQuery);\n\t\t\t\t}\n\n\t\t\t\tif (prevState.mentionPosition !== mentionPosition) {\n\t\t\t\t\tthis.setState({ mentionPosition });\n\t\t\t\t}\n\n\t\t\t\tif (mentionPosition === -1) {\n\t\t\t\t\tif (this.props.isMentionSectionOpen) {\n\t\t\t\t\t\tthis.props.closeMentionSection(this.props.instanceId);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst shouldOpenMentionSection = this.props.isVideoChatInGroupMode &&\n\t\t\t\t\t\tutils.shouldOpenMentionSection(this.props.mentionOptions, mentionQuery, this.props.isMentionSectionOpen);\n\n\t\t\t\t\tif (shouldOpenMentionSection) {\n\t\t\t\t\t\tif (!this.props.isMentionSectionOpen) {\n\t\t\t\t\t\t\tthis.props.openMentionSection(this.props.instanceId);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (this.props.isMentionSectionOpen) {\n\t\t\t\t\t\t\tthis.props.closeMentionSection(this.props.instanceId);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\t/** consider updated emoticons, being them default or backend provided */\n\t\tif (!isEqual(prevProps.emoticons, this.props.emoticons)) {\n\t\t\tthis.updateEditorState(EditorState.createEmpty(this.getCompositeDecorator(this.props.emoticons)));\n\n\t\t\tthis.setState({\n\t\t\t\temoticonRegexp: this.getEmoticonsRegexp(this.props.emoticons)\n\t\t\t})\n\t\t}\n\n\t\t/** Gift is always reset to undefined after it has been added */\n\t\tif (!prevProps.gift && this.props.gift) {\n\t\t\tthis.addGift(this.props.gift);\n\t\t\tthis.props.resetSymbols(this.props.instanceId);\n\t\t}\n\n\t\t/** Emoticon is always reset to undefined after it has been added */\n\t\tif (!prevProps.emoticon && this.props.emoticon) {\n\t\t\tthis.addEmoticon(this.props.emoticon);\n\t\t\tthis.props.resetSymbols(this.props.instanceId);\n\t\t}\n\n\t\tif (!prevProps.mention && this.props.mention) {\n\t\t\tthis.addMention(this.props.mention);\n\t\t\tthis.props.resetSymbols(this.props.instanceId);\n\t\t}\n\n\t\t/** If the message was sent by the parent component, reset editor's store */\n\t\tif (this.props.shouldResetEditorState && !prevProps.shouldResetEditorState) {\n\t\t\tthis.resetEditorState();\n\t\t}\n\n\t\t/**\n\t\t * We update the current quantities based on the inserted gifts in the editor.\n\t\t * If the message has been sent, we keep the current values without adding them\n\t\t * back and make the app look buggy\n\t\t */\n\t\tif (this.state.editorState !== prevState.editorState) {\n\t\t\tconst plainText = this.getPlainText();\n\n\t\t\t/** We handle changes only for inventory gifts (the ones with initialQuantity) */\n\t\t\tforEach(this.props.gifts, (gift: IGift) => {\n\t\t\t\tif (gift.initialQuantity) {\n\t\t\t\t\t/** We get the number of occurrences for this inventory gift */\n\t\t\t\t\tconst encodedGiftId: string = base64.encode(gift.id.toString());\n\t\t\t\t\tconst matches = plainText.match(new RegExp(encodedGiftId, \"gim\"));\n\t\t\t\t\tconst quantityToHandle = matches ? matches.length : 0;\n\n\t\t\t\t\t/** Handle our gift with its updated quantity in our editor */\n\t\t\t\t\tthis.props.decreaseCurrentGiftQuantity(this.props.instanceId, {\n\t\t\t\t\t\tgiftId: gift.id,\n\t\t\t\t\t\tquantityToHandle\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Editor\n\t\t\t\teditorState={this.state.editorState}\n\t\t\t\tisInteractive={this.props.isInteractive}\n\t\t\t\tplaceholder={this.props.placeholder}\n\t\t\t\teditorRef={this.editorRef}\n\t\t\t\tshouldIncreaseMessageFontSize={this.props.shouldIncreaseMessageFontSize}\n\n\t\t\t\tonChange={this.onChange}\n\t\t\t\thandleReturn={this.handleReturn}\n\t\t\t\thandlePastedText={this.handlePastedText}\n\t\t\t\thandleBeforeInput={this.handleBeforeInput}\n\t\t\t\tonUpArrow={this.onUpArrow}\n\t\t\t\tonDownArrow={this.onDownArrow}\n\t\t\t/>\n\t\t);\n\t}\n\n\n\tprivate static handleEmoticon = (contentBlock: any, callback: any, contentState: any) => {\n\t\tEditorContainer.findEntityRange(contentBlock, callback, contentState, EntityType.EMOTICON);\n\t};\n\n\tprivate static handleGift = (contentBlock: any, callback: any, contentState: any) => {\n\t\tEditorContainer.findEntityRange(contentBlock, callback, contentState, EntityType.GIFT);\n\t};\n\n\tprivate static handleMention = (contentBlock: any, callback: any, contentState: any) => {\n\t\tEditorContainer.findEntityRange(contentBlock, callback, contentState, EntityType.MENTION);\n\t};\n\n\tprivate static findEntityRange = (contentBlock: any, callback: any, contentState: any, type: any) => {\n\t\tcontentBlock.findEntityRanges(\n\t\t\t(character: CharacterMetadata) => {\n\t\t\t\tconst entityKey = character.getEntity();\n\t\t\t\tif (entityKey === null) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn contentState.getEntity(entityKey).getType() === type;\n\t\t\t},\n\t\t\tcallback\n\t\t);\n\t};\n\n\tprivate closeMobileKeboardForSmallResolutions = () => {\n\t\tif (this.editorRef.current && this.props.shouldCloseMobileKeyboard) {\n\t\t\tthis.editorRef.current.blur();\n\t\t}\n\t};\n\n\tprivate getCompositeDecorator = (emoticons: IEmoticon[]) => new CompositeDecorator([{\n\t\tstrategy: EditorContainer.handleEmoticon,\n\t\tcomponent: EmoticonDecorator,\n\t\tprops: { emoticons }\n\t}, {\n\t\tstrategy: EditorContainer.handleGift,\n\t\tcomponent: GiftDecorator,\n\t\tprops: {\n\t\t\tgifts: this.props.gifts\n\t\t}\n\t}, {\n\t\tstrategy: EditorContainer.handleMention,\n\t\tcomponent: MentionDecorator\n\t}]);\n\n\tprivate getEmoticonsRegexp = (emoticons: IEmoticon[]) => utils.getEmoticonsRegexp(emoticons);\n\n\tprivate onChange = (editorState: EditorState) => {\n\t\tthis.updateEditorState(editorState);\n\t};\n\n\tprivate getStoringEditorState = (editorState: EditorState): IStoredEditorState => {\n\t\treturn {\n\t\t\ttext: this.getPlainText(editorState),\n\t\t\tgifts: this.getGiftsFromEditorState(editorState)\n\t\t}\n\t};\n\n\tprivate updateStore = (editorState: EditorState) => {\n\t\tthis.props.setStoredEditorState(this.props.instanceId, this.getStoringEditorState(editorState));\n\t};\n\n\tprivate updateEditorState = (editorState: EditorState, callback?: () => void) => {\n\t\tconst oldText = this.getPlainText(this.state.editorState);\n\t\tconst text = this.getPlainText(editorState);\n\n\t\tconst { instanceId } = this.props;\n\n\t\tif (utils.hasExceededTextLimit(text)) {\n\t\t\tthis.props.setActionResponse(instanceId, {\n\t\t\t\ttext: this.props.translation.error.textLimit,\n\t\t\t\ttype: ActionResponseType.WARNING\n\t\t\t});\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (!isEqual(text, oldText)) {\n\t\t\tthis.props.onTextChanged(text);\n\t\t\tthis.throttledStoreUpdate(editorState);\n\t\t}\n\n\t\tthis.setState({ editorState }, callback);\n\t};\n\n\tprivate getCursorPosition = () => this.state.editorState.getSelection().getFocusOffset();\n\n\tprivate onUpArrow = (event) => {\n\t\tif (this.props.isMentionSectionOpen) {\n\t\t\tevent.preventDefault();\n\t\t}\n\t};\n\n\tprivate onDownArrow = (event) => {\n\t\tif (this.props.isMentionSectionOpen) {\n\t\t\tevent.preventDefault();\n\t\t}\n\t};\n\n\tprivate handleBeforeInput = (char: string): DraftHandleValue => {\n\t\tlet handled = false;\n\t\tlet { editorState } = this.state;\n\n\t\tconst blockKey = editorState.getSelection().getStartKey();\n\t\tconst existingText = editorState.getCurrentContent().getBlockForKey(blockKey).getText();\n\t\tconst position = this.getCursorPosition();\n\t\tconst newText = existingText.substr(0, position) + char + existingText.substr(position);\n\n\t\tif (utils.hasExceededTextLimit(newText)) {\n\t\t\tthis.props.setActionResponse(this.props.instanceId, {\n\t\t\t\ttext: this.props.translation.error.textLimit,\n\t\t\t\ttype: ActionResponseType.WARNING\n\t\t\t});\n\n\t\t\treturn \"handled\";\n\t\t}\n\n\t\tconst findEmoticonCallback = (start: number, end: number) => {\n\t\t\tconst emoticon = newText.substr(start, end - start);\n\t\t\teditorState = this.getEditorStateWithEntity(emoticon, char, start, end, EntityType.EMOTICON);\n\n\t\t\tthis.updateEditorState(\n\t\t\t\tEditorState.forceSelection(\n\t\t\t\t\teditorState,\n\t\t\t\t\teditorState.getCurrentContent().getSelectionAfter()\n\t\t\t\t)\n\t\t\t);\n\n\t\t\thandled = true;\n\t\t};\n\n\t\tutils.findEmoticonWithRegex(newText, this.state.emoticonRegexp, findEmoticonCallback);\n\n\t\tif (char === constants.mentionSpecialCharacter && this.props.isVideoChatInGroupMode) {\n\t\t\tconst selectionState = this.state.editorState.getSelection();\n\t\t\tconst focusOffset = selectionState.getFocusOffset();\n\n\t\t\tthis.props.openMentionSection(this.props.instanceId, false);\n\t\t\tthis.setState({\n\t\t\t\tmentionPosition: focusOffset\n\t\t\t});\n\t\t}\n\n\t\treturn handled ? \"handled\" : \"not-handled\";\n\t};\n\n\tprivate getCharBehindIcon = (emoticonShortcut: string) => {\n\t\tconst { emoticons } = this.props;\n\t\tconst emoticon =\n\t\t\temoticons.find((emoticonItem: IEmoticon) => emoticonItem.text === emoticonShortcut) || emoticons[0];\n\n\t\treturn utils.emoticonCodeToPrintableChar(emoticon.code);\n\t};\n\n\tprivate getEditorStateWithEntity = (\n\t\tentity: string,\n\t\tinsertedChars: string,\n\t\tstart: number,\n\t\tend: number,\n\t\tentityType: EntityType = EntityType.EMOTICON,\n\t\tcurrentEditorState?: EditorState\n\t): EditorState => {\n\t\t/** Get editor's content store */\n\t\tconst editorState = currentEditorState || this.state.editorState;\n\t\tconst contentState = editorState.getCurrentContent();\n\n\t\t/** We create a new entity. Text words should be kept mutable for future changes */\n\t\tconst mutabilityType = entityType === EntityType.TEXT\n\t\t\t? \"MUTABLE\"\n\t\t\t: \"IMMUTABLE\";\n\n\t\tconst contentStateWithEntity = contentState.createEntity(entityType, mutabilityType, {\n\t\t\tentity\n\t\t});\n\n\t\tconst entityKey = contentStateWithEntity.getLastCreatedEntityKey();\n\t\tconst blockKey = editorState.getSelection().getStartKey();\n\n\t\tconst selection = new SelectionState({\n\t\t\tanchorKey: blockKey,\n\t\t\tanchorOffset: start,\n\t\t\tfocusOffset: end,\n\t\t\tfocusKey: blockKey\n\t\t});\n\n\t\tconst hiddenTextUnderEntity: { [entityType: string]: string } = {};\n\t\thiddenTextUnderEntity[EntityType.EMOTICON] = this.getCharBehindIcon(entity);\n\t\thiddenTextUnderEntity[EntityType.GIFT] = utils.CHAR_BEHIND_GIFTS;\n\t\thiddenTextUnderEntity[EntityType.TEXT] = entity;\n\t\thiddenTextUnderEntity[EntityType.MENTION] = `@${entity}`;\n\n\t\tlet newContentState = Modifier.replaceText(\n\t\t\tcontentState,\n\t\t\tselection,\n\t\t\thiddenTextUnderEntity[entityType],\n\t\t\tundefined,\n\t\t\tentityKey\n\t\t);\n\n\t\tif (entityType === EntityType.MENTION) {\n\t\t\tconst newSelectionState = newContentState.getSelectionAfter();\n\n\t\t\tnewContentState = Modifier.insertText(\n\t\t\t\tnewContentState,\n\t\t\t\tnewSelectionState,\n\t\t\t\t' '\n\t\t\t);\n\t\t}\n\n\t\tconst newEditorState = EditorState.push(\n\t\t\teditorState,\n\t\t\tnewContentState,\n\t\t\t'insert-characters'\n\t\t);\n\n\t\treturn EditorState.forceSelection(\n\t\t\tnewEditorState,\n\t\t\tnewEditorState.getCurrentContent().getSelectionAfter()\n\t\t);\n\t};\n\n\tprivate getPlainText = (editorState: EditorState = this.state.editorState) => {\n\t\tlet result = \"\";\n\t\tlet selectedEntity: any;\n\n\t\tconst content = editorState.getCurrentContent();\n\t\tconst blocks: ContentBlock[] = content.getBlocksAsArray();\n\t\tconst lastBlock = last(blocks);\n\n\t\tblocks.forEach((block: ContentBlock) => {\n\t\t\tlet previousPosition = 0;\n\t\t\tconst plainText = block.getText();\n\n\t\t\tblock.findEntityRanges(\n\t\t\t\t(character: CharacterMetadata) => {\n\t\t\t\t\tconst entityKey = character.getEntity();\n\n\t\t\t\t\tif (entityKey !== null) {\n\t\t\t\t\t\tselectedEntity = content.getEntity(entityKey);\n\t\t\t\t\t\tconst entityType = selectedEntity.getType();\n\n\t\t\t\t\t\treturn entityType === EntityType.EMOTICON || entityType === EntityType.GIFT;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\t\t(start, end) => {\n\t\t\t\t\tresult += plainText.substr(previousPosition, start - previousPosition) +\n\t\t\t\t\t\tselectedEntity.getData().entity;\n\t\t\t\t\tpreviousPosition = end;\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tresult += plainText.substring(previousPosition);\n\n\t\t\tif (block !== lastBlock) {\n\t\t\t\tresult += constants.MESSAGE_LINE_SEPARATOR;\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t};\n\n\tprivate getGiftsFromEditorState = (editorState: EditorState = this.state.editorState) => {\n\t\tconst gifts: IGift[] = [];\n\t\tconst content = editorState.getCurrentContent();\n\t\tlet entity: EntityInstance;\n\n\t\tcontent.getBlocksAsArray().forEach((block) => {\n\t\t\tblock.findEntityRanges(\n\t\t\t\t(character) => {\n\t\t\t\t\tif (character.getEntity() !== null) {\n\t\t\t\t\t\tentity = content.getEntity(character.getEntity());\n\t\t\t\t\t\treturn entity.getType() === EntityType.GIFT;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\t\t() => {\n\t\t\t\t\tconst foundGift: IGift | undefined = this.props.gifts\n\t\t\t\t\t\t.find((gift: IGift) => base64.encode(gift.id.toString()) === entity.getData().entity\n\t\t\t\t\t\t);\n\n\t\t\t\t\tif (foundGift) {\n\t\t\t\t\t\tgifts.push(foundGift);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\n\t\treturn gifts;\n\t};\n\n\tprivate onTextMessageAdd = () => {\n\t\tif (this.getPlainText()) {\n\t\t\t/** Send the message to the API Endpoint */\n\t\t\tthis.props.sendMessage();\n\n\t\t\t/** Reset our editor store */\n\t\t\tthis.resetEditorState();\n\t\t}\n\t};\n\n\tprivate handleReturn = (event: KeyboardEvent): DraftHandleValue => {\n\t\tif (this.props.isMentionSectionOpen) {\n\t\t\treturn \"handled\";\n\t\t}\n\n\t\tif (!event.shiftKey) {\n\t\t\tthis.onTextMessageAdd();\n\n\t\t\treturn \"handled\";\n\t\t}\n\n\t\treturn \"not-handled\";\n\t};\n\n\tprivate addEmoticon = (emoticon: string): void => {\n\t\tconst newEditorState = this.getEditorStateAfterAddingEntity(\n\t\t\tthis.state.editorState,\n\t\t\temoticon,\n\t\t\tEntityType.EMOTICON\n\t\t);\n\n\t\tthis.updateEditorState(newEditorState);\n\t};\n\n\tprivate addGift = (gift: string): void => {\n\t\tconst newEditorState = this.getEditorStateAfterAddingEntity(\n\t\t\tthis.state.editorState,\n\t\t\tgift,\n\t\t\tEntityType.GIFT\n\t\t);\n\n\t\tthis.updateEditorState(newEditorState);\n\t};\n\n\tprivate addMention = (mention: string): void => {\n\t\tconst newEditorState = this.getEditorStateAfterAddingEntity(\n\t\t\tthis.state.editorState,\n\t\t\tmention,\n\t\t\tEntityType.MENTION\n\t\t);\n\n\t\tthis.updateEditorState(newEditorState);\n\t};\n\n\t/** Adds an entity at the current cursor's position */\n\tprivate getEditorStateAfterAddingEntity = (\n\t\teditorState: EditorState,\n\t\tentity: string,\n\t\tentityType: EntityType\n\t): EditorState => {\n\n\t\t/** Get current text and cursor's position */\n\t\tconst selection = editorState.getSelection();\n\t\tconst focusOffset = selection.getFocusOffset();\n\t\tlet startPosition = selection.getAnchorOffset();\n\n\t\tif (entityType === EntityType.MENTION) {\n\t\t\tconst startPositionForMention = !isUndefined(this.state.mentionPosition)\n\t\t\t\t? this.state.mentionPosition\n\t\t\t\t: selection.getAnchorOffset();\n\t\t\tconst startPositionForCustomMention = focusOffset;\n\n\t\t\tstartPosition = this.props.shouldDisplayCustomMentionSection\n\t\t\t\t? startPositionForCustomMention\n\t\t\t\t: startPositionForMention;\n\t\t}\n\n\t\tconst endPosition = entityType === EntityType.MENTION\n\t\t\t? focusOffset\n\t\t\t: focusOffset + entity.length;\n\n\t\t/** Create new current text store with the inserted entity */\n\t\tconst newEditorState = this.getEditorStateWithEntity(\n\t\t\tentity,\n\t\t\tentity,\n\t\t\tstartPosition,\n\t\t\tendPosition,\n\t\t\tentityType,\n\t\t\teditorState\n\t\t);\n\n\t\treturn newEditorState;\n\t};\n\n\t/** Apply editor's emoticons & gifts decorations on copy-pasted texts */\n\tprivate handlePastedText = (pastedText: string, html: string | undefined): DraftHandleValue => {\n\t\t/** Process the copy-paste event only if our text is not empty */\n\t\tif (!pastedText) {\n\t\t\treturn \"not-handled\";\n\t\t}\n\n\t\tconst { gifts } = this.props;\n\t\tconst pastedGiftEntitiesData: string[] = EditorContainer.getGiftEntitiesDataFromPastedHTML(gifts, html);\n\n\t\t// remove new lines characters, introduced by draft-js\n\t\tconst text = pastedText.replace(/\\n/g, '');\n\n\t\tthis.setContentFromTextAndGiftIds(text, pastedGiftEntitiesData);\n\n\t\treturn \"handled\";\n\t};\n\n\t/**\n\t * @param {string} plainText returned by content store (the one with special chars for emoticons and gifts\n\t * @param {string[]} contentGiftsEncodedIds - array of encoded ids for the gifts presumed to be in the plain text\n\t */\n\tprivate setContentFromTextAndGiftIds = (plainText: string, contentGiftsEncodedIds: string[]) => {\n\t\tconst { emoticons, gifts } = this.props;\n\t\tconst emoticonsChars = emoticons.map((emoticon: IEmoticon) => ({\n\t\t\t\ttext: emoticon.text,\n\t\t\t\tchar: utils.emoticonCodeToPrintableChar(emoticon.code)\n\t\t\t})\n\t\t);\n\n\t\tconst giftSplittingDelimiter = utils.CHAR_BEHIND_GIFTS;\n\t\tconst emoticonSplittingDelimiters = emoticonsChars.map(item => item.char).join('|');\n\n\t\tconst emoticonsAndGiftSplittingDelimiters = new RegExp(\n\t\t\t`(${emoticonSplittingDelimiters}|${giftSplittingDelimiter})`, 'gim'\n\t\t);\n\n\t\t// In some context, the emoticons and gifts do not come as special chars,\n\t\t// but as their plain text shortcut, therefore, we need to map to their chars\n\t\tlet text = plainText;\n\t\temoticonsChars.forEach(emoticonChar => {\n\t\t\ttext = text.replace(utils.itemToRegex(emoticonChar.text), emoticonChar.char);\n\t\t});\n\n\t\tgifts.forEach(gift => {\n\t\t\tconst giftId = utils.itemToRegex(utils.getGiftEncoding(gift));\n\t\t\ttext = text.replace(giftId, giftSplittingDelimiter);\n\t\t});\n\n\t\tconst textSplitByEmoticonsAndGifts = text.split(emoticonsAndGiftSplittingDelimiters);\n\n\t\t// replace emoticons with shortcuts ( :) ;) :D :P ....) and gifts with their encoded ids\n\t\tlet giftIndex = 0;\n\t\tconst textSplitAndDecoded: string[] = textSplitByEmoticonsAndGifts\n\t\t\t.map((textEmoticonOrGiftId: string) => {\n\t\t\t\tconst emoticonCharIndex = findIndex(emoticonsChars,\n\t\t\t\t\temoticonChar => textEmoticonOrGiftId === emoticonChar.char\n\t\t\t\t);\n\n\t\t\t\t// found an emoticon in the text; replace it with its shortcut\n\t\t\t\tif (emoticonCharIndex !== -1) {\n\t\t\t\t\treturn emoticonsChars[emoticonCharIndex].text;\n\t\t\t\t}\n\n\t\t\t\t// it is a gift in the provided text; replace it with its encoded id\n\t\t\t\tif (textEmoticonOrGiftId === utils.CHAR_BEHIND_GIFTS) {\n\t\t\t\t\treturn contentGiftsEncodedIds[giftIndex++];\n\t\t\t\t}\n\n\t\t\t\t// it is a text; leave it as it was\n\t\t\t\treturn textEmoticonOrGiftId;\n\t\t\t});\n\n\t\t/** Obtain the emoticons and gifts values for comparing our entities */\n\t\tconst emoticonIcons: string[] = utils.getEmoticonsShortcuts(this.props.emoticons);\n\t\tconst giftsEncodedIds: string[] = map(this.props.gifts, (gift: IGift) => utils.getGiftEncoding(gift));\n\n\t\t/** For each entity, update editor's content based on the correct entity type */\n\t\tlet currentEditorState = this.state.editorState;\n\n\t\tforEach(textSplitAndDecoded, (splitEntity: string) => {\n\t\t\tif (!splitEntity) {\n\t\t\t\t// this happens when we get no clue about the pasted entity from the associated html\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet entityType = EntityType.TEXT;\n\n\t\t\tif (includes(emoticonIcons, splitEntity)) {\n\t\t\t\tentityType = EntityType.EMOTICON;\n\t\t\t}\n\t\t\tif (includes(giftsEncodedIds, splitEntity)) {\n\t\t\t\tentityType = EntityType.GIFT;\n\t\t\t}\n\n\t\t\t/** Get the new editor store */\n\t\t\tcurrentEditorState = this.getEditorStateAfterAddingEntity(\n\t\t\t\tcurrentEditorState,\n\t\t\t\tsplitEntity,\n\t\t\t\tentityType\n\t\t\t);\n\t\t});\n\n\t\t/** Update editor's store */\n\t\tthis.updateEditorState(currentEditorState);\n\t};\n\n\tprivate resetEditorState = () => {\n\t\tthis.updateEditorState(EditorState.moveFocusToEnd(\n\t\t\tEditorState.createEmpty(this.getCompositeDecorator(this.props.emoticons))),\n\t\t\tthis.closeMobileKeboardForSmallResolutions\n\t\t);\n\t};\n}\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n\thasEditor: selectors.hasEditor(store, instanceId),\n\tgifts: selectors.getTranslatedGifts(store, instanceId),\n\ttranslation: selectors.getTranslation(store, instanceId),\n\tisInteractive: selectors.isInteractive(store, instanceId),\n\tmessagePrice: selectors.getMessagePrice(store, instanceId),\n\temoticons: selectors.getEmoticons(store, instanceId),\n\tstoredEditorState: selectors.getEditorState(store, instanceId),\n\tshouldCloseMobileKeyboard: selectors.shouldCloseMobileKeyboard(store, instanceId),\n\tisMentionSectionOpen: selectors.isMentionSectionOpen(store, instanceId),\n\tmentionOptions: selectors.getMentionOptions(store, instanceId),\n\tisVideoChatInGroupMode: selectors.isVideoChatInGroupMode(store, instanceId),\n\tshouldDisplayCustomMentionSection: selectors.shouldDisplayCustomMentionSection(store, instanceId),\n\tmentionQuery: selectors.getMentionQuery(store, instanceId),\n\tshouldIncreaseMessageFontSize: selectors.getShouldIncreaseMessageFontSize(store, instanceId)\n});\n\nconst mapDispatchToProps = {\n\tdecreaseCurrentGiftQuantity,\n\tsetStoredEditorState,\n\tsetActionResponse,\n\topenMentionSection,\n\tcloseMentionSection,\n\tresetSymbols,\n\tsetMentionQuery\n};\n\nexport default withRedux<IComponentProps>(EditorContainer, mapStateToProps, mapDispatchToProps);\n","import * as cuid from 'cuid';\nimport request from 'superagent';\nimport * as moment from 'moment';\nimport { Action } from 'redux-actions';\nimport { call, put, select, takeEvery } from \"redux-saga/effects\";\nimport { find, includes, isEmpty, isUndefined, some, upperFirst } from 'lodash';\nimport { ACTION, CMDC_CMSG, CMDP_MSG, SystemMessageKey, EnumMessageType, EnumMessageDirection, SupportedLanguage } from 'vxcontrol-client-lib';\n\nimport loggers from \"../../loggers\";\nimport { ActionIds } from '../../redux/interfaces';\nimport { createAction, createActionType } from '../../redux/utils';\nimport { IPayload } from '../../redux/interfaces';\nimport selectors from '../../redux/selectors';\nimport ApiService from '../../services/ApiService';\nimport ChatService from '../../services/ChatService';\nimport {IOnMessagePayload} from '../../services/types';\nimport {switchVoyeur2LiveChat} from \"../common/videochat\";\nimport {\n    activateToyOption,\n    addMessage,\n    clearFailedMessages,\n    closeSections,\n    inactivateToyMessage,\n    inactivateToyOption,\n    removeMessage,\n    setActionResponse,\n    updateImageMessageWhenLoaded\n} from '../../redux/modules/messenger';\nimport {\n    ActionResponseType,\n    ICurrency,\n    IGift,\n    IMessage,\n    ISession,\n    IToyOption,\n    ITranslation,\n    MessageContentType,\n    MessageDirection,\n\tMsgType\n} from '../../redux/store';\nimport types from './types';\nimport utils from '../../utils';\n\ninterface IReceiveToyMessagePayload {\n    option: IToyOption;\n    message: IMessage;\n}\n\nconst createMessageActionType = createActionType(ActionIds.MESSAGE, { isSagaAction: true });\n\n// Actions\nconst REQUEST_SEND_MESSAGE = createMessageActionType(\"REQUEST_SEND_MESSAGE\");\nconst REQUEST_SEND_VIBRATION_MESSAGE = createMessageActionType(\"REQUEST_SEND_VIBRATION_MESSAGE\");\nconst RECEIVE_TOY_MESSAGE = createMessageActionType(\"RECEIVE_TOY_MESSAGE\");\nconst REQUEST_SEND_AUDIO_MESSAGE = createMessageActionType(\"REQUEST_SEND_AUDIO_MESSAGE\");\n\nconst RECEIVE_SEND_MESSAGE = createMessageActionType(\"RECEIVE_SEND_MESSAGE\");\nconst RECEIVE_MESSAGE_FROM_NOOP = createMessageActionType(\"RECEIVE_MESSAGE_FROM_NOOP\");\nconst RECEIVE_MESSAGE_FROM_CHAT = createMessageActionType(\"RECEIVE_MESSAGE_FROM_CHAT\");\nconst RESEND_FAILED_MESSAGES = createMessageActionType(\"RESEND_FAILED_MESSAGES\");\n\n// Action Creators\nexport const requestSendMessage = createAction<string | IToyOption>(REQUEST_SEND_MESSAGE);\nexport const requestSendVibrationMessage = createAction<IToyOption>(REQUEST_SEND_VIBRATION_MESSAGE);\nexport const requestSendAudioMessage = createAction<Blob>(REQUEST_SEND_AUDIO_MESSAGE);\nexport const receiveMessageFromChat = createAction<IOnMessagePayload>(RECEIVE_MESSAGE_FROM_CHAT);\nexport const receiveMessageFromNoop = createAction<CMDC_CMSG>(RECEIVE_MESSAGE_FROM_NOOP);\nexport const receiveToyMessage = createAction<IReceiveToyMessagePayload>(RECEIVE_TOY_MESSAGE);\nexport const receiveSendMessage = createAction<CMDC_CMSG>(RECEIVE_SEND_MESSAGE);\nexport const resendFailedMessages = createAction(RESEND_FAILED_MESSAGES);\n\n// Sagas\n/** Sends through websocket the data for sending a new message on a specific channel */\nconst requestSendMessageSaga = function* ({ payload, type }: Action<IPayload<string | IToyOption | Blob>>) {\n    const { instanceId, value } = payload;\n\n    const isTextEnabled: boolean = yield select(selectors.isTextEnabled, instanceId);\n    const gifts: IGift[] = yield select(selectors.getGifts, instanceId);\n    const session: ISession = yield select(selectors.getSession, instanceId);\n\n    const { channelId, sessionID, chat } = session;\n    const useChat = isTextEnabled && !isEmpty(chat);\n\n    const isVibrationMessage = type === REQUEST_SEND_VIBRATION_MESSAGE;\n    const isAudioMessage = type === REQUEST_SEND_AUDIO_MESSAGE;\n    const messageKey = cuid.slug();\n\n    let messageText: string = \"\";\n    let giftIdsFromMessage: number[] = [];\n    let audioFile: any;\n\n    if (isVibrationMessage) {\n        const toyContent = value as IToyOption;\n\n        /** The vibration will have the same codification with a gift sent through a chat session */\n        messageText = utils.encodeForChatCommunication(toyContent);\n\n        /** The vibration will be sent a sole gift to the model */\n        giftIdsFromMessage = [toyContent.id];\n    } else if (isAudioMessage) {\n        const audioBlob: Blob = value as Blob;\n\n        audioFile = new File([audioBlob],\n            `audio_message_${messageKey}.mp3`,\n            { type: \"audio/mp3\" });\n    } else {\n        const textContent = value as string;\n\n        messageText = utils.getTextMessageToSend(gifts, textContent, useChat);\n        giftIdsFromMessage = utils.getGiftsFromMessage(gifts, textContent);\n    }\n\n    /** It returns an array of gift ids from a message */\n    const hasGifts = !isEmpty(giftIdsFromMessage) && isTextEnabled;\n\n    /**\n     * We will send the message through the vxcontrol-client-lib api\n     * if we are in the minified messenger or message has gifts\n     */\n    const shouldSendThroughVXControl = !useChat || hasGifts;\n\n\t/**\n\t * Since there is not implementation in backend of switching to livechat\n\t * (for messages send through vx-control) if we send a gift in voyeur\n\t * we are forcing it here\n\t */\n\tconst isVideoChatInVoyeurMode: boolean = yield select(selectors.isVideoChatInVoyeurMode, instanceId);\n\n\tif (!isEmpty(chat) && isVideoChatInVoyeurMode) {\n\t\tyield put(switchVoyeur2LiveChat(instanceId));\n\t}\n\n    if (shouldSendThroughVXControl) {\n        if (isAudioMessage) {\n            const uploadMediaUrl = yield select(selectors.getUploadMediaUrl, instanceId);\n            const webtoken = yield select(selectors.getWebtoken, instanceId);\n\n            const queryStringParams = {\n                action: ACTION.CMDP_SUPLOADMEDIA,\n                messageKey: encodeURIComponent(messageKey),\n                format: 'json',\n                strip: 'true',\n                sessionID,\n                webtoken,\n                channelId\n            };\n\n            const url = `${uploadMediaUrl}${utils.queryString(queryStringParams)}`;\n\n            const formData = new FormData();\n            formData.append(audioFile.name, audioFile, audioFile.name);\n\n            yield call(async () => {\n                await request.post(url).send(formData);\n            });\n\n            return;\n        }\n\n        // Create the standard command for sending a message\n        const command: CMDP_MSG = {\n            action: ACTION.CMDP_MSG,\n            params: {\n                sessionID,\n                channelId,\n                messageKey,\n                text: messageText\n            }\n        };\n\n        if (hasGifts) {\n            command.params.gift = giftIdsFromMessage.join(\",\");\n\n            if (chat) {\n                command.params.chatID = chat.chatId;\n            }\n        }\n\n        ApiService.getService(instanceId).sendCommand(command);\n    }\n\n    if (!isEmpty(chat) && !isEmpty(messageText) && !hasGifts) {\n        const response = yield call(ChatService.getService(instanceId).sendMessage, messageText);\n\n\t    const message: IMessage = {\n\t\t    id: cuid.slug(),\n\t\t    messageKey: cuid.slug(),\n\t\t    dateCreated: moment().toString(),\n\t\t    content: messageText,\n\t\t    direction: MessageDirection.out,\n\t\t    isSystem: false,\n\t\t    isNew: true,\n\t    };\n\n\t    if (chat) {\n\t\t    message.chatId = chat.chatId;\n\t    }\n\n\t    // We are adding the user message if there was no error after sendMessage\n        if (!response.isError) {\n\t        yield put(addMessage(instanceId, message));\n\t    }\n    } else if (!isEmpty(chat) && isAudioMessage) {\n        yield call(ChatService.getService(instanceId).sendMediaFile, audioFile, messageKey);\n    }\n\n    /**\n     * After sending the message, it does not matter the communication channel,\n     * we should close the gift section and emoticon section. It does\n     * not matter if it's successful or not our send message request.\n     */\n    yield put(closeSections(instanceId));\n};\n\nexport const receiveMessageFromChatSaga = function* ({ payload }: Action<IPayload<IOnMessagePayload>>) {\n    const { instanceId, value: messagePayload } = payload;\n\tconst { contentType } = messagePayload;\n\n    if (isEmpty(messagePayload)) {\n        return;\n\t}\n\n    /**\n     * Image message behavior\n     */\n    if (!isUndefined(messagePayload.imgSrc) && !isUndefined(messagePayload.key)) {\n        yield put(updateImageMessageWhenLoaded(instanceId, {\n\t        messageKey: messagePayload.key,\n            imgSrc: messagePayload.imgSrc,\n            imgSrcSet: messagePayload.imgSrcSet,\n            imgWidth: messagePayload.imgWidth,\n            imgHeight: messagePayload.imgHeight\n        }));\n\n        return;\n    }\n\n    const { text, direction, username, msgType } = messagePayload;\n    const chat = yield select(selectors.getChat, instanceId);\n\n    if (direction === MessageDirection.out) {\n        return;\n    }\n\n    const isGroupChatMode = yield select(selectors.isVideoChatInGroupMode, instanceId);\n    const groupChatColors = yield select(selectors.getGroupChatColors, instanceId);\n    const shouldHaveUsernameColor = isGroupChatMode && !isEmpty(username);\n\n    const message: IMessage = {\n        id: cuid.slug(),\n        messageKey: cuid.slug(),\n        dateCreated: moment().toString(),\n        content: text || \"\",\n        direction: direction || MessageDirection.in,\n\t\tisSystem: msgType === MsgType.SYSTEM,\n\t\tmsgType,\n        isNew: true,\n        username,\n        usernameColor: shouldHaveUsernameColor\n            ? utils.getColorForUsername(groupChatColors, username)\n            : undefined\n    };\n\n    if (chat) {\n        message.chatId = chat.chatId;\n\t}\n\n    // audio messages\n    if (!isUndefined(contentType) && contentType === MessageContentType.AUDIO) {\n\t\tmessage.contentType = MessageContentType.AUDIO;\n\t\tmessage.direction = MessageDirection.out;\n\t\tmessage.content = {\n\t\t\taudioMp3: messagePayload.audioSrc\n\t\t}\n    }\n\n    loggers.saga.debug('Received message from chat:', { details: messagePayload });\n\n    yield put(addMessage(instanceId, message));\n};\n\n/**\n * Receives the response after sending a message and,\n * if it is successful, the message is saved in the Redux store.\n */\nexport const receiveSendMessageSaga = function* ({ payload }: Action<IPayload<CMDC_CMSG>>) {\n    const { instanceId, value: response } = payload;\n\n    if (isEmpty(response) || isEmpty(response.params)) {\n        return;\n    }\n\n    const chat = yield select(selectors.getChat, instanceId);\n    const session: ISession = yield select(selectors.getSession, instanceId);\n    const translation: ITranslation = yield select(selectors.getTranslation, instanceId);\n    const isChatExternallyProvided: boolean = yield select(selectors.isChatExternallyProvided, instanceId);\n    const isAudio = !isEmpty(response.params.mediaType) && response.params.mediaType === \"Audio\";\n\n    /** Defensive programming -\n     * if the message is not for our current channel, do nothing\n     * if chat isChatExternallyProvided let onMessage handle message addition\n     */\n    if ((session.channelId !== response.params.channelId) || isChatExternallyProvided) {\n        return;\n    }\n\n\tconst { messageId, direction, messageKey, msgType, text, isDeleted } = response.params;\n\n    const partialMessage: IMessage = {\n        id: messageId || cuid.slug(),\n\t\tmessageKey: messageKey || cuid.slug(),\n\t\tdateCreated: moment().toString(),\n\t\tdirection: direction  === EnumMessageDirection.IN\n\t\t\t? MessageDirection.in\n\t\t\t: MessageDirection.out,\n        isSystem: msgType === EnumMessageType.SYSTEM,\n        isDeleted: isDeleted === \"1\",\n        chatId: undefined,\n        isNew: true,\n        content: null\n\t};\n\n\tif (msgType) {\n\t\tpartialMessage.msgType = types.messageTypes[msgType];\n\t}\n    if (chat) {\n        partialMessage.chatId = chat.chatId;\n    }\n\n    // We will handle different a received toy message\n    const toyOptions = yield select(selectors.getToyOptions, instanceId);\n    const toyOption = find(toyOptions, option => includes(text, option.name));\n\n    if (toyOption) {\n        yield put(receiveToyMessage(instanceId, {\n            option:toyOption,\n            message: partialMessage\n        }));\n\n        return;\n    }\n\n    /** If the message is an image */\n    if (!isUndefined(response.params.imgSrc)) {\n\n        /** If the client is the one sending the image just stop the loading animation and update message's id */\n        if (response.params.direction === EnumMessageDirection.OUT) {\n            const messages: IMessage = yield select(selectors.getMessages, instanceId);\n            const imageMessage = find(messages,\n                (message: IMessage) => message.messageKey === partialMessage.messageKey\n            );\n\n            if (imageMessage) {\n                yield put(updateImageMessageWhenLoaded(instanceId, {\n                    messageKey: partialMessage.messageKey,\n                    imgSrc: response.params.imgSrc,\n                    imgSrcSet: response.params.imgSrcSet,\n                    imgWidth: response.params.imgWidth,\n                    imgHeight: response.params.imgHeight\n                }));\n\n                /** Add the successful image upload message in the Redux store */\n                yield put(setActionResponse(instanceId, {\n                    text: translation.common.imageUploadOk,\n                    type: ActionResponseType.SUCCESSFUL\n                }));\n            }\n        } else {\n            /** If the model is the one sending the image, add the message in the Redux store */\n            yield put(addMessage(instanceId, {\n                ...partialMessage,\n                content: response.params.imgSrc,\n                modalContent: {\n                    imgSrc: response.params.imgSrc,\n                    imgSrcSet: response.params.imgSrcSet,\n                    imgWidth: response.params.imgWidth,\n\t\t\t\t\timgHeight: response.params.imgHeight\n                },\n                contentType: MessageContentType.IMAGE,\n                isNew: true\n            }));\n        }\n    } else if (isAudio) {\n        // If we received an audio message\n        if (response.params.audioMp3) {\n            yield put(addMessage(instanceId,{\n                ...partialMessage,\n                content: {\n                    audioM4a: response.params.audioM4a,\n                    audioMp3: response.params.audioMp3,\n                    audioOgg: response.params.audioOgg\n                },\n                contentType: MessageContentType.AUDIO,\n                isNew: true\n            }));\n        }\n    } else {\n        // If we received a text message, encode gifts in our format and add it in the Redux store.\n        const gifts = yield select(selectors.getGifts, instanceId);\n\n        const content = utils.getReceivedTextMessage(\n            gifts,\n            text || \"\",\n            utils.isMessageFromChat(response.params)\n        );\n\n        yield put(addMessage(instanceId, {\n            ...partialMessage,\n            content,\n            contentType: MessageContentType.TEXT\n        }));\n    }\n};\n\n/**\n * We should call the received message saga if we received a new message.\n * NOOP may contain an already existing message when any action is executed on that message:\n * For instance, when the model reads the message => it comes again on the NOOP.\n */\nconst receiveMessageFromNoopSaga = function* ({ payload }: Action<IPayload<CMDC_CMSG>>) {\n\tconst { instanceId, value: receivedMessageCommand } = payload;\n\t\n    if (isEmpty(receivedMessageCommand) || isEmpty(receivedMessageCommand.params)) {\n        return;\n\t}\n\t\n    const { msgType, messageKey, gift } = receivedMessageCommand.params;\n\tconst hasGifts = !isEmpty(gift);\n\n    /**\n     * We ignore all the messages from vchat-core instance from the model.\n     * (There are handled by the onMessage function from the vchat-core\n     * instance and when these communication channels will be unified, we\n     * will change this)\n     * We also ignore all messages from client except the ones which contain gifts\n     * (those are being send through vxcontrol and handled by NOOP command), handling mechanism\n     * for user messages is in requestSendMessageSaga in message.ts\n     */\n    if (msgType === EnumMessageType.CHAT && !hasGifts) {\n        return;\n    }\n\n    /** Always add the system messages */\n    if (msgType === EnumMessageType.SYSTEM) {\n        const isChatActive = yield select(selectors.getChat,instanceId);\n\n        /** When the toy option has finished its active duration, we receive a special message */\n        if (messageKey === SystemMessageKey.h_session_toy_stop) {\n            const translation: ITranslation = yield select(selectors.getTranslation, instanceId);\n            const { lovenseFinished } = translation.chat.toyControl;\n\n            yield put(inactivateToyOption(instanceId));\n            yield put(inactivateToyMessage(instanceId, lovenseFinished));\n\n            const chatId = yield select(selectors.getChatId, instanceId);\n\n            yield put(addMessage(instanceId, {\n                id: cuid.slug(),\n                messageKey: cuid.slug(),\n\t\t\t\tdateCreated: moment().toString(),\n\t\t\t\tmsgType: MsgType.SYSTEM,\n                chatId,\n                content: lovenseFinished,\n                direction: MessageDirection.none,\n                isSystem: true,\n            }));\n        }\n\n        /** If chat is active we let receiveMessageFromChatSaga to handle system message */\n        if (!isChatActive) {\n            yield put(receiveSendMessage(instanceId, receivedMessageCommand));\n        }\n    } else {\n        const messages: IMessage[] = yield select(selectors.getMessages, instanceId);\n\n        /** Non-system messages should be added only if they are new to the customer */\n        const isNew = !some(messages,\n            (message: IMessage) => message.id === receivedMessageCommand.params.messageId\n        );\n\n        if (isNew) {\n            yield put(receiveSendMessage(instanceId, receivedMessageCommand));\n        }\n    }\n};\n\nconst receiveToyMessageSaga = function*({ payload }: Action<IPayload<IReceiveToyMessagePayload>>) {\n\tconst { instanceId, value } = payload;\n    const { option, message } = value;\n\n    if (isEmpty(value)) {\n        return;\n    }\n\n    const language: SupportedLanguage = yield select(selectors.getLanguage, instanceId);\n    const chatId = yield select(selectors.getChatId, instanceId);\n    const currency: ICurrency = yield select(selectors.getCurrency, instanceId);\n    const translation: ITranslation = yield select(selectors.getTranslation, instanceId);\n\n    if (isEmpty(option)) {\n        return;\n    }\n\n    // Firstly, we activate the option\n    yield put(activateToyOption(instanceId, option.id));\n\n    // Secondly, we remove the initial \"Toy Available\" system message, if it's the case\n    const defaultToyMessage = yield select(selectors.findMessage(\n        (mess: IMessage) => (mess.toy && mess.toy.isDefault) as boolean\n    ), instanceId);\n\n    if (!isEmpty(defaultToyMessage)) {\n        yield put(removeMessage(instanceId, defaultToyMessage.messageKey));\n    }\n\n    // Thirdly, we insert the start toy option system message\n    const { lovenseStartedMessage } = translation.chat.toyControl;\n    const toyTranslation = utils.getItemTranslation(language, option.translations);\n\n    yield put(addMessage(instanceId, {\n        id: cuid.slug(),\n\t\tmessageKey: cuid.slug(),\n\t\tmsgType: MsgType.TOY,\n        dateCreated: moment().toString(),\n        direction: MessageDirection.none,\n        isSystem: true,\n        chatId,\n        content: utils.translationWithValues(lovenseStartedMessage, {\n            name: upperFirst(toyTranslation.value),\n            price: option.price,\n            currency: currency.symbol\n        }),\n    }));\n\n    // Lastly, we add the active toy message\n    const toyOptionActive: IToyOption | undefined = yield select(selectors.getActiveToyOption,instanceId);\n\n    if (!toyOptionActive) {\n        return;\n    }\n\n    const toyMessage = utils.convertToToyMessage(\n        message,\n        toyOptionActive,\n        translation.chat.toyControl\n    );\n\n    yield put(addMessage(instanceId, toyMessage));\n};\n\nconst resendFailedMessagesSaga = function* ({ payload: { instanceId }}: Action<IPayload>) {\n    const failedMessages: string[] = yield select(selectors.getFailedMessages, instanceId);\n\n    yield put(clearFailedMessages(instanceId));\n\n    for(const message of failedMessages) {\n        yield put(requestSendMessage(instanceId, message));\n    }\n};\n\nconst watchSagas = function* () {\n    yield takeEvery(REQUEST_SEND_MESSAGE, requestSendMessageSaga);\n    yield takeEvery(REQUEST_SEND_VIBRATION_MESSAGE, requestSendMessageSaga);\n    yield takeEvery(REQUEST_SEND_AUDIO_MESSAGE, requestSendMessageSaga);\n\n    yield takeEvery(RECEIVE_SEND_MESSAGE, receiveSendMessageSaga);\n    yield takeEvery(RECEIVE_MESSAGE_FROM_NOOP, receiveMessageFromNoopSaga);\n    yield takeEvery(RECEIVE_MESSAGE_FROM_CHAT, receiveMessageFromChatSaga);\n    yield takeEvery(RECEIVE_TOY_MESSAGE, receiveToyMessageSaga);\n    yield takeEvery(RESEND_FAILED_MESSAGES, resendFailedMessagesSaga);\n};\n\nexport default watchSagas;\n","import AudioAnalyserContainer from \"./AudioAnalyserContainer\";\n\nexport default AudioAnalyserContainer;","import React, { Component } from 'react';\nimport { ReactMic } from '@cleandersonlobo/react-mic';\n\nimport selectors from '../../../redux/selectors';\nimport IStore from '../../../redux/store';\nimport { requestSendAudioMessage } from '../../../sagas/websockets/message';\nimport { setIsMicEnabled } from '../../../redux/modules/messenger';\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\nimport { ActionDispatcher } from \"../../../redux\";\n\ninterface IStoreProps {\n    // Properties\n    shouldSendMessage: boolean;\n    isRecording: boolean;\n    isMicEnabled: boolean;\n    hasAudioMessages: boolean;\n\n    // Action Creators\n    requestSendAudioMessage: ActionDispatcher<Blob>;\n    setIsMicEnabled: ActionDispatcher<boolean>;\n}\n\ntype IProps = IStoreProps & IInstanceProps;\n\nclass AudioAnalyserContainer extends Component<IProps> {\n    render() {\n        return this.props.hasAudioMessages && (\n\t\t\t<ReactMic\n\t\t\t\trecord={this.props.isRecording}\n\t\t\t\tonStop={this.setAudioSrc}\n\t\t\t\tmimeType=\"audio/mp3\"\n\t\t\t\tonData={this.enableMic}\n\t\t\t/>\n\t\t);\n    }\n\n    private setAudioSrc = (audioBlob: { blob: Blob }) => {\n        if (this.props.shouldSendMessage) {\n            this.props.requestSendAudioMessage(this.props.instanceId, audioBlob.blob);\n        }\n    };\n\n    private enableMic = () => {\n        if (!this.props.isMicEnabled) {\n            this.props.setIsMicEnabled(this.props.instanceId, true);\n        }\n    }\n}\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    shouldSendMessage: selectors.getShouldSendMessage(store, instanceId),\n    isRecording: selectors.isRecording(store, instanceId),\n    hasAudioMessages: selectors.hasAudioMessages(store, instanceId),\n    isMicEnabled: selectors.isMicEnabled(store, instanceId)\n});\n\nconst mapDispatchToProps = {\n    requestSendAudioMessage,\n    setIsMicEnabled\n};\n\nexport default withRedux(AudioAnalyserContainer, mapStateToProps, mapDispatchToProps);\n","import { isMobile } from \"react-device-detect\";\n\nimport config from \"../static/config\";\nimport { IViewHandlerProps, IViewProviderProps } from \"./interfaces\";\n\n/**\n * Return flags on how the messenger / videochat app should behave based on the resolution / format\n * @param props ViewHandlerProps\n * @return IViewProviderProps\n */\nconst getViewProviderParams = (props: IViewHandlerProps): IViewProviderProps => {\n\n    // Initialize\n    let result: IViewProviderProps = {\n        isMobile,\n\t\tisPortrait: !props.isLandscape,\n\t\tisLandscape: props.isLandscape,\n\n        isFullscreen: props.isFullscreen,\n        isVideoChat: props.isVideoChat,\n        containerWidth: props.containerWidth,\n        containerHeight: props.containerHeight,\n        originalVideoChatWidth: 0,\n        originalVideoChatHeight: 0,\n        videoChatRatio: 0,\n        videoChatWidth: 0,\n        videoChatHeight: 0,\n        videoChatOptimalWidth: 0,\n        videoChatOptimalHeight: 0,\n        messengerVideoModeWidth: 0,\n        messengerVideoModeHeight: 0,\n        isKeyboard: props.isKeyboard,\n        shouldRenderOnlyVideochat: props.shouldRenderOnlyVideochat,\n        hasActionButtons: props.hasActionButtons,\n        switchToPortraitWidth: props.switchToPortraitWidth\n\t};\n\n    // We are in VideoChat mode\n    if (props.resolution && result.isVideoChat) {\n        // Save the original width / height of the stream\n        result.originalVideoChatWidth = props.resolution.width;\n        result.originalVideoChatHeight = props.resolution.height;\n\n        // Get the VideoChat's width / height ratio\n        result.videoChatRatio = Math.round((props.resolution.width / props.resolution.height) * 10000) / 10000;\n\n        // Handle mobile or desktop\n        result = isMobile ? handleMobileVideoChat(result) : handleDesktopVideoChat(result);\n\t}\n\n    return result;\n};\n\n/**\n * Handle videochat in desktop mode\n * @param result IViewProviderProps\n * @return IViewProviderProps\n */\nconst handleDesktopVideoChat = (result: IViewProviderProps): IViewProviderProps => {\n    // Handle Videochat in fullscreen mode\n    if (result.isFullscreen) {\n        return handleDesktopFullscreen(result);\n    }\n\n\t// Handle Videochat in portrait mode\n    if (result.containerWidth <= result.switchToPortraitWidth) {\n        return handleDesktopPortraitVideoChat(result);\n    }\n\n    // Handle Videochat in landscape mode\n    return handleDesktopLandscapeVideoChat(result);\n};\n\n/**\n * Handle videochat in desktop landscape mode\n * @param result IViewProviderProps\n * @return IViewProviderProps\n */\nconst handleDesktopLandscapeVideoChat = (result: IViewProviderProps): IViewProviderProps => {\n    result.isPortrait = false;\n    result.isLandscape = true;\n    const { messengerWidthPercentage, videoChatWidthPercentage } = config.viewSizes;\n\n    // Get the width of the messenger based on the window size, in VideoChat mode\n    result.messengerVideoModeWidth = Math.round(result.containerWidth * messengerWidthPercentage);\n\n    // Calculate the VideoChat optimal width and height based on the window's size\n    result.videoChatOptimalWidth = Math.round(result.containerWidth * videoChatWidthPercentage);\n    result.videoChatOptimalHeight = Math.round(result.videoChatOptimalWidth / result.videoChatRatio);\n\n    // Calculate the videochat width and height based on the optimal sizes stored in the config\n    result.videoChatWidth = Math.round((\n        result.videoChatOptimalWidth + result.messengerVideoModeWidth >= result.containerWidth)\n            ? result.containerWidth - result.messengerVideoModeWidth\n            : result.videoChatOptimalWidth\n    );\n\n    result.videoChatHeight = Math.round(result.videoChatWidth / result.videoChatRatio);\n\n    // If we have a vertical resize and the VideoChat height si larger than window's height\n    // then resize everything and recalculate the new width based on the height of the VideoChat\n    if (result.videoChatHeight > result.containerHeight) {\n        result.videoChatHeight = result.containerHeight;\n        result.videoChatWidth = Math.round(result.videoChatHeight * result.videoChatRatio);\n    }\n\n    result.messengerVideoModeHeight = result.videoChatHeight;\n\n    return result;\n};\n\n/**\n * Handle videochat in desktop portrait mode\n * @param result IViewProviderProps\n * @return IViewProviderProps\n */\nconst handleDesktopPortraitVideoChat = (result: IViewProviderProps): IViewProviderProps => {\n    result.isPortrait = true;\n    result.isLandscape = false;\n\n    // Try to set the videochat's width as wide as the window's width\n    result.videoChatWidth = result.containerWidth;\n\n    // Adjust the height to maintain the width / height ratio\n    result.videoChatHeight = Math.round(result.videoChatWidth / result.videoChatRatio);\n\n    // If the messenger window is not tall enough then resize the videochat to fit the messenger in the screen\n    if (result.containerHeight - result.videoChatHeight < config.viewSizes.messengerPortraitMinHeight) {\n        result.videoChatHeight = result.containerHeight - config.viewSizes.messengerPortraitMinHeight;\n        result.videoChatWidth = Math.round(result.videoChatHeight * result.videoChatRatio);\n    }\n\n    return result;\n};\n\n/**\n * Handle videochat in fullscreen mode\n * @param result IViewProviderProps\n * @return IViewProviderProps\n */\nconst handleDesktopFullscreen = (result: IViewProviderProps): IViewProviderProps => {\n    // Get the videochat's height by extracting from the window's width, the size of the top and bottom bars\n    const { topBarHeight, bottomBarHeight } = config.viewSizes.fullScreen;\n    result.videoChatHeight = result.containerHeight - topBarHeight - bottomBarHeight;\n\n    // Recalculate the width based on the height maintaining the width / height ratio\n    result.videoChatWidth = Math.round(result.videoChatHeight * result.videoChatRatio);\n\n    return result;\n};\n\n/**\n * Handle videochat in mobile mode\n * @param result IViewProviderProps\n * @return IViewProviderProps\n */\nconst handleMobileVideoChat = (result: IViewProviderProps): IViewProviderProps => {\n\tif (result.isFullscreen) {\n\t\treturn handleMobileFullscreenVideoChat(result);\n\t}\n\n\treturn result.isPortrait\n\t\t? handleMobilePortraitVideoChat(result)\n    \t: handleDesktopLandscapeVideoChat(result);\n}\n\n/**\n * Handle Fullscreen videochat in mobile mode\n * @param result IViewProviderProps\n * @return IViewProviderProps\n */\nconst handleMobileFullscreenVideoChat = (result: IViewProviderProps): IViewProviderProps => {\n    const windowRatio = Math.round((result.containerWidth / result.containerHeight) * 10000) / 10000;\n\n    // unused areas on left and right sides\n    if (windowRatio > result.videoChatRatio) {\n        result.videoChatHeight = result.containerHeight;\n        result.videoChatWidth = Math.round(result.videoChatHeight * result.videoChatRatio);\n    // unused areas on top and bottom\n    } else {\n        result.videoChatWidth = result.containerWidth;\n        result.videoChatHeight = Math.round(result.videoChatWidth / result.videoChatRatio);\n    }\n\n    return result;\n};\n\n/**\n * Handle portrait videochat in mobile mode\n * @param result IViewProviderProps\n * @return IViewProviderProps\n */\nconst handleMobilePortraitVideoChat = (result: IViewProviderProps): IViewProviderProps => {\n    result.videoChatWidth = result.containerWidth;\n    // Adjust the height to maintain the width / height ratio\n    result.videoChatHeight = Math.round(result.videoChatWidth / result.videoChatRatio);\n\n    // Get the optimal height of the videochat by subtracting the top bar's height and the bottom bar's height\n    const { topBarHeight, bottomBarHeight, bottomActionButtonsBarHeight } = config.viewSizes.mobile;\n\n    let videoChatHeight = result.containerHeight - topBarHeight - bottomBarHeight;\n\n    // if no action buttons are rendered, we gain some extra space as height\n    if (!result.hasActionButtons) {\n        videoChatHeight += bottomActionButtonsBarHeight;\n    }\n\n    // Recalculate the width based on the new height if current is larger than optimal\n    if (result.videoChatHeight > videoChatHeight) {\n        result.videoChatHeight = videoChatHeight;\n        result.videoChatWidth = Math.round(result.videoChatHeight * result.videoChatRatio);\n    }\n\n    return result;\n};\n\nexport default getViewProviderParams;\n","import styled from \"styled-components\";\nimport withCustomClasses, { DomCustomClass } from \"../../hoc/withCustomClasses/\";\n\ninterface IActionResponseWrapperProps {\n    color: string;\n}\n\nexport const ActionResponseWrapper = withCustomClasses<IActionResponseWrapperProps>(styled.div<IActionResponseWrapperProps>`\n    background-color: ${props => props.color};\n\n    flex: 0 0 auto;\n    width: 100%;\n    min-height: 35px;\n    color: #1D1E1F;\n    box-sizing: border-box;\n    box-shadow: 0 -7px 31px 1px rgba(0,0,0,.08);\n    z-index: 1;\n    \n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n`, [DomCustomClass.ActionResponse]);\n\n\nexport const TextWrapper = styled.div.attrs({className: 'action-response-text-wrapper'})`\n    font-family: ${(props) => props.theme.typography.fontFamily};\n    font-weight: ${(props) => props.theme.typography.weight.regular};\n    display: inline-block;\n    padding: 9px;\n    font-size: 14px;\n    \n    i {\n        display: inline-block;\n        font-size: 16px;\n        margin-right: 5px;\n    }\n`;\n","import * as React from 'react';\nimport { IActionResponse, ActionResponseType } from '../../../redux/store';\nimport { TextWrapper, ActionResponseWrapper } from './style';\nimport CloseButtonContainer, { CloseButtonType } from '../CloseButton/CloseButtonContainer';\nimport { ITheme } from '../../../themes';\nimport { withTheme } from 'styled-components';\nimport { isUndefined } from 'lodash';\nimport defaultTheme from '../../../themes/defaultTheme';\n\nexport interface IProps {\n    actionResponse: IActionResponse;\n    theme?: ITheme;\n\n    closeText: string;\n    onCloseClick: () => void;\n}\n\ninterface IWrapperProps {\n    color: string;\n    iconClassName: string;\n    className: string;\n}\n\nconst ActionResponse = (props: IProps) => {\n    const { type, text } = props.actionResponse;\n    const currentTheme = isUndefined(props.theme) ? defaultTheme : props.theme;\n    const { warningColor, errorColor, successfulColor } = currentTheme.colors.actionResponse;\n\n    const actionResponseWrapperProps: {[key: string]: IWrapperProps} = {};\n\n    actionResponseWrapperProps[ActionResponseType.SUCCESSFUL] = {\n        iconClassName: '-icon-round-success-line',\n        className: 'successful-action-response-wrapper',\n        color: successfulColor\n    };\n    actionResponseWrapperProps[ActionResponseType.ERROR] = {\n        iconClassName: '-icon-round-info-line',\n        className: 'error-action-response-wrapper',\n        color: errorColor\n    };\n    actionResponseWrapperProps[ActionResponseType.WARNING] = {\n        iconClassName: '-icon-round-info-line',\n        className: 'warning-action-response-wrapper',\n        color: warningColor\n    };\n\n    const defaultWrapperProps = actionResponseWrapperProps[ActionResponseType.SUCCESSFUL];\n    const wrapperProps: IWrapperProps = actionResponseWrapperProps[type] || defaultWrapperProps;\n\n    return (\n        <ActionResponseWrapper\n            color={wrapperProps.color}\n            className={wrapperProps.className}\n        >\n            <TextWrapper>\n                <i className={wrapperProps.iconClassName} /> {text}\n            </TextWrapper>\n\n            <CloseButtonContainer\n                onClick={props.onCloseClick}\n                hoverText={props.closeText}\n                closeButtonType={CloseButtonType.ACTION_RESPONSE}\n            />\n        </ActionResponseWrapper>\n    );\n};\n\nexport default withTheme<IProps, ITheme>(ActionResponse);\n","import * as React from 'react';\nimport { isEmpty } from 'lodash';\n\nimport ActionResponse from './ActionResponse';\nimport selectors from '../../../redux/selectors';\nimport { ActionDispatcher } from '../../../redux';\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\nimport { resetActionResponse } from '../../../redux/modules/messenger';\nimport IStore, { IActionResponse, ITranslation } from '../../../redux/store';\n\ninterface IStoreProps {\n    translation: ITranslation;\n    actionResponse: IActionResponse;\n\n    resetActionResponse: ActionDispatcher;\n}\n\ntype IProps = IStoreProps & IInstanceProps;\n\nclass ActionResponseContainer extends React.Component<IProps> {\n    componentDidUpdate(prevProps: IProps) {\n        const actionResponseTime = 5000;\n\n        /** The action response message should disappear after 5 seconds. */\n        if (isEmpty(prevProps.actionResponse) && !isEmpty(this.props.actionResponse)) {\n            setTimeout(this.resetActionResponse, actionResponseTime);\n        }\n    }\n\n    render() {\n        return (\n            <>\n                {!isEmpty(this.props.actionResponse) &&\n                    <ActionResponse\n                        actionResponse={this.props.actionResponse}\n                        closeText={this.props.translation.common.close}\n                        onCloseClick={this.resetActionResponse}\n                    />\n                }\n            </>\n        );\n    }\n\n    private resetActionResponse = () => {\n        this.props.resetActionResponse(this.props.instanceId);\n    };\n}\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    actionResponse: selectors.getActionResponse(store, instanceId),\n    translation: selectors.getTranslation(store, instanceId)\n});\n\nconst mapDispatchToProps = {\n    resetActionResponse\n};\n\nexport default withRedux(ActionResponseContainer, mapStateToProps, mapDispatchToProps);","import MessageSectionPopupWrapper from './MessageSectionPopupWrapper'\n\nexport default MessageSectionPopupWrapper;\n","import styled from 'styled-components';\n\nconst MessageSectionPopupWrapper = styled.div`\n    box-shadow: 0 -10px 20px -20px rgba(0, 0, 0, 8);\n`;\n\nexport default MessageSectionPopupWrapper;\n","import { isMobile } from 'react-device-detect';\nimport styled from 'styled-components';\nimport withIdentifier, { DomIdentifier } from \"../../hoc/withIdentifier\";\nimport MessageSectionPopupWrapper from '../../common/MessageSectionPopupWrapper';\nimport utils from '../../../utils';\n\ninterface IMessageSectionContainerWrapperProps {\n    minMessageSectionHeight: number;\n}\n\n export interface IMessengerBaseButtonProps extends React.HTMLAttributes<HTMLDivElement> {\n    isInverted?: boolean;\n    isActive?: boolean;\n    isDropDownOpen?: boolean;\n    isResponsive?: boolean;\n    hasOnlySendButton?: boolean;\n}\n\ninterface IMessengerButtonsWrapper {\n\thasButtonsMargin?: boolean;\n}\n\ninterface IMessengerSectionWrapperProps {\n    isFullscreen: boolean;\n}\n\ninterface IMessengerBoxProps {\n    className?: string;\n    hasText: boolean;\n    hasEditor: boolean;\n    isInteractive: boolean;\n\tshouldIncreaseMessageFontSize: boolean;\n}\n\ninterface IDropDownContentProps {\n    isAnySectionOpen?: boolean;\n    isOpen: boolean;\n\tshouldUseDropdownAnimation: boolean;\n}\n\ninterface IDropDownButtonProps {\n    dropDownOpen?: boolean;\n    isInverted?: boolean;\n    isActive?: boolean;\n    hasLeftSeparator?: boolean;\n}\n\ninterface IMessengerBaseButtonIconProps {\n    hasLeftSeparator?: boolean;\n    isInverted?: boolean;\n}\n\ninterface IMessageSectionPopupsProps {\n    isResponsive?: boolean;\n}\n\nexport const MessageSectionContainerWrapper =\n    styled.div.attrs({ className: 'MessageSectionContainerWrapper' })<IMessageSectionContainerWrapperProps>`\n    min-height: ${props => props.minMessageSectionHeight}px;\n    position: relative;\n    overflow: hidden;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    -webkit-tap-highlight-color: ${(props) => props.theme.colors.selectedButton.clickHighlight};\n    \n    .-icon-send-chat-full {\n        line-height: 2;\n    }\n`;\n\nexport const MessageSectionWrapper = styled.div.attrs({ className: 'message-section-wrapper' })`\n    position: relative;\n    width: 100%;\n    bottom: 0px;\n`;\n\nexport const MessengerBox = styled.div.attrs({ className: \"messenger-box\" })<IMessengerBoxProps>`\n    font-family: ${(props) => props.theme.typography.fontFamily};\n    font-weight: ${(props) => props.theme.typography.weight.medium};\n    background-color: ${(props) => props.theme.colors.messageEditorBackgroundColor};\n    color: ${props => props.hasText ? \"#888\" : props.theme.colors.messageEditorTextColor};\n    \n    ${(props) => !props.isInteractive && `cursor: not-allowed;`}\n\n    ${(props) => props.hasEditor && `margin: 5px;`}\n    \n    font-size: ${({ shouldIncreaseMessageFontSize }) => \n\t\t`${utils.computeMessageFontSize(shouldIncreaseMessageFontSize, 15)} !important`};\n    box-sizing: border-box;\n    flex: 1 0;\n    font-size: 1em;\n    min-height: 45px;\n    max-height: 100px;\n    padding-left: 3px;\n    padding-top: 13px;\n    word-break: break-all;\n    overflow-y: auto;\n`;\n\nexport const MessengerSectionWrapper = withIdentifier<IMessengerSectionWrapperProps>(styled.div<IMessengerSectionWrapperProps>`\n    background-color: ${(props) => props.theme.colors.messageEditorBackgroundColor};\n    ${(props: IMessengerSectionWrapperProps) => props.isFullscreen && `\n        margin: 5px 0 10px;            \n    `}\n\n    display: flex;\n    min-height: 50px;\n    align-items: center;\n`, DomIdentifier.MessengerSection);\n\nexport const MessengerButtonsWrapper = styled.div<IMessengerButtonsWrapper>`\n    display: flex;\n\talign-content: center;\n\t${({ hasButtonsMargin }) => hasButtonsMargin && `margin-right: 15px;`}\n`;\n\nexport const MessengerBaseButton = styled.div<IMessengerBaseButtonProps>`\n    ${props => props.isResponsive\n        ?`\n            width: 100%;\n            border-bottom: 0.5px solid rgba(184, 184, 184, 0.6);\n            justify-content: space-between;\n                \n            &:hover {\n                color: ${props.theme.colors.messengerButtonInvertedText};\n                background-color: ${props.theme.colors.selectedButton.blueBackgroundHover};\n            }\n                \n            &:hover .-icon-single-arrow-right-line {\n                display: flex;\n            }\n        `:`\n            width: 35px;\n            justify-content: center;\n\n            &:hover {\n                color: ${props.theme.colors.messengerButtonHover};\n            }\n        `\n    }\n    \n    ${props => props.isActive && `\n        color: ${props.theme.colors.selectedButton.blueBackgroundHover}!important;\n    `}\n\n    ${props => props.hasOnlySendButton && 'margin-right: 10px;'}\n    padding: ${props => props.isResponsive ? '15px 0' : '4px 0px'};\n    \n    color: ${props => props.isInverted \n\t\t? props.theme.colors.selectedButton.blueBackgroundHover\n\t\t: props.theme.colors.selectedButton.greyBackgroundHover\n\t};\n\n    height: 28px;\n    box-sizing: content-box;\n    cursor: pointer;\n    text-align: center;\n    display: inline-flex;\n    align-items: center;\n    position: relative;\n    \n    & .-icon-send-msg-single-full {\n        margin-top: 3px;\n    }\n`;\n\nexport const MessengerBaseButtonIcon = styled.i<IMessengerBaseButtonIconProps>`\n    ${props => props.isInverted && 'transform: rotate(135deg);'}\n\n    ${props => props.hasLeftSeparator && `\n        border-left: 1px solid #ccc;\n        padding-left: 7px;\n        line-height: 2;\n    `}\n\n    position: relative;\n    display: flex;\n    align-items: center;\n    font-weight: 400;\n    font-size: 18px;\n    line-height: 2;\n    z-index: 0;\n    transition: transform .5s ease-in-out;\n    \n    width: 50px;\n    align-content: center;\n    justify-content: center;\n`;\n\nexport const ToyControlBaseButtonIcon = styled(MessengerBaseButtonIcon)`\n    margin-left: 20px;\n`;\n\nexport const ToyControlIcon = styled.i`\n    color: ${props => props.theme.colors.toySection.primaryColor};\n    font-size: 40px;\n    margin: 0px 10px 0px 5px;\n`;\n\nexport const DropDownButton = styled.div.attrs({ className: 'DropDownButton' })<IDropDownButtonProps>`\n\t${props => props.hasLeftSeparator && 'border-left: 1px solid #DBDDDE;'}\n\n\tcolor: ${props => {\n\t\tconst { blueBackgroundHover, defaultDropDownBackground } = props.theme.colors.selectedButton;\n\t\treturn props.isInverted ? blueBackgroundHover : defaultDropDownBackground;\n\t}};\n\n\t${props => !isMobile &&\n\t\t`&:hover {\n\t\t\tcolor: ${props.theme.colors.selectedButton.blueBackgroundHover};\n\t\t}`\n\t}}\n    \n    position: relative;\n    width: 35px;\n    height: 28px;\n    padding: 4px 0px;\n    cursor: pointer;\n    text-align: center;\n    display: inline-flex;\n    align-items: center;\n\tjustify-content: center;\n\tbox-sizing: content-box;\n`;\n\nexport const DropDownContent = styled(MessageSectionPopupWrapper).attrs({ className: 'DropDownContent' })<IDropDownContentProps>`\n    ${props => `\n        left: ${(props.isAnySectionOpen) ? '-100%' : '0'};\n        height: ${props.isOpen ? '100%' : '0'};\n        background-color: ${props.theme.colors.dropDownContentBgColor};\n    `}\n    \n    transition: ${props => props.shouldUseDropdownAnimation ? 'height' : 'all'} 0.5s ease-in-out;\n\n\tfont-size: 15px;\n    border: 0;\n    bottom: 0;\n    z-index: 4;\n    width: 100%;\n    display: flex;\n    min-width: auto;\n    position: absolute;\n    flex-direction: column;\n    align-items: flex-end;\n`;\n\nexport const MessageSectionPopups = styled.div.attrs({ className: 'MessageSectionPopups' })<IMessageSectionPopupsProps>`\n    overflow: hidden;\n    position: relative;\n    height: auto;\n    width: 100%;\n    z-index: 2;\n`;\n","import styled from 'styled-components';\n\nexport const MessengerBaseButtonIconGroupWrapper = styled.div.attrs({className: 'MessengerBaseButtonIconGroupWrapper'})`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n`;\n\nexport const MessageSectionButtonsWrapper = styled.div`\n\tmargin-right: 5px;\n`;\n","import * as React from 'react';\n\nimport { IContainerProps as IProps } from \"./types\";\nimport { IMessengerBaseButtonProps, MessengerBaseButton, MessengerBaseButtonIcon } from '../MessageSection/style';\nimport { MessengerBaseButtonIconGroupWrapper } from './style';\nimport withIdentifier, { DomIdentifier } from '../../hoc/withIdentifier';\n\nexport const expandDropdown = (props: IProps) => {\n\tif (!props.isInteractive) {\n\t\treturn;\n\t}\n\n\tif (props.isResponsive) {\n\t\tprops.toggleDropDown(props.instanceId);\n\t}\n\n\tif (props.isEmoticonSectionOpen) {\n\t\tprops.closeEmoticonSection(props.instanceId);\n\t}\n\n\tif (props.isGiftSectionOpen) {\n\t\tprops.closeGiftSection(props.instanceId);\n\t}\n};\n\nexport const toggleEmoticonSection = (props: IProps) => () => {\n\tif (!props.isInteractive) {\n\t\treturn;\n\t}\n\n\tif (props.isEmoticonSectionOpen) {\n\t\tprops.closeEmoticonSection(props.instanceId);\n\t} else {\n\t\tprops.openEmoticonSection(props.instanceId);\n\t}\n\n\tif (!props.isResponsive && !props.isDropDownOpen) {\n\t\texpandDropdown(props);\n\t}\n};\n\nexport const toggleGiftSection = (props: IProps) => () => {\n\tif (!props.isInteractive) {\n\t\treturn;\n\t}\n\n\tprops.isGiftSectionOpen\n\t\t? props.closeGiftSection(props.instanceId)\n\t\t: props.openGiftSection(props.instanceId);\n\n\tif (!props.isResponsive && !props.isDropDownOpen) {\n\t\texpandDropdown(props);\n\t}\n};\n\nexport const toggleToySection = (props: IProps) => () => {\n\tif (!props.isInteractive) {\n\t\treturn;\n\t}\n\n\tprops.toggleToySectionAction(props.instanceId);\n\n\tif (!props.isResponsive && !props.isDropDownOpen) {\n\t\texpandDropdown(props);\n\t}\n};\n\nexport const getBaseButtonContent = (icon: string, text: string, isResponsive?: boolean) => {\n\tconst baseButtonIcon = <MessengerBaseButtonIcon className={icon} />;\n\n\tconst responsiveBaseButtonIcon = (\n\t\t<MessengerBaseButtonIconGroupWrapper>\n\t\t\t{baseButtonIcon}\n\t\t\t{text}\n\t\t</MessengerBaseButtonIconGroupWrapper>\n\t);\n\n\treturn isResponsive ? responsiveBaseButtonIcon : baseButtonIcon;\n};\n\nexport const getButtonWithIdentifier = (identifier: DomIdentifier) =>\n\twithIdentifier<IMessengerBaseButtonProps>(MessengerBaseButton, identifier);\n\n","import { getButtonWithIdentifier } from \"./utils\";\nimport { DomIdentifier } from \"../../hoc/withIdentifier\";\n\nexport const EmoticonsButton = getButtonWithIdentifier(DomIdentifier.EmoticonButton);\nexport const ImageUploadButton = getButtonWithIdentifier(DomIdentifier.ImageUploadButton);\nexport const SendTipButton = getButtonWithIdentifier(DomIdentifier.SendTipButton);\nexport const GiftButton = getButtonWithIdentifier(DomIdentifier.GiftButton);\nexport const ToyButton = getButtonWithIdentifier(DomIdentifier.ToyButton);\nexport const AudioMessageButton = getButtonWithIdentifier(DomIdentifier.AudioMessageButton);\n","import * as React from 'react';\nimport { isTablet } from 'react-device-detect';\n\nimport { ITranslation } from '../../../redux/store';\nimport { getBaseButtonContent } from './utils';\nimport { MessageSectionButtonsWrapper } from './style';\nimport { EmoticonsButton, GiftButton, ImageUploadButton, SendTipButton, ToyButton } from './automation';\n\ninterface IProps {\n    hasEmoticons: boolean;\n    hasImageUpload: boolean;\n    shouldShowTipping: boolean;\n    isResponsive?: boolean;\n    isDropDownOpen?: boolean;\n    isGiftSectionOpen: boolean;\n    isToySectionOpen: boolean;\n    hasToyControl: boolean;\n    isGiftButtonVisible?: boolean;\n    isEmoticonSectionOpen: boolean;\n    translation: ITranslation;\n\n    onGiftClick: () => void;\n    onEmoticonClick: () => void;\n    onToyClick: () => void;\n    onTipClick?: () => void;\n    requestImageUpload: () => void;\n}\n\nconst MessageSectionButtons = (props: IProps) => {\n    const { toyControl } = props.translation.chat.toyControl;\n    const { insertEmoticons, sendImage, tip4 } = props.translation.chat;\n    const { menuSendGift, menuSendPhotos, menuSendEmoticon } = props.translation.message;\n    const isToyButtonVisible = props.hasToyControl && (props.isResponsive || isTablet);\n\n    return (\n        <MessageSectionButtonsWrapper>\n            {props.hasEmoticons &&\n                <EmoticonsButton\n                    title={insertEmoticons}\n                    isInverted={props.isEmoticonSectionOpen}\n                    isDropDownOpen={props.isDropDownOpen}\n                    isResponsive={props.isResponsive}\n                    onClick={props.onEmoticonClick}\n                >\n                    {getBaseButtonContent(\"-icon-smile-full\", menuSendEmoticon, props.isResponsive)}\n                </EmoticonsButton>\n\n            }\n\n            {props.hasImageUpload &&\n                <ImageUploadButton\n                    title={sendImage}\n                    isDropDownOpen={props.isDropDownOpen}\n                    isResponsive={props.isResponsive}\n                    onClick={props.requestImageUpload}\n                >\n\n                    {getBaseButtonContent(\"-icon-image-full\", menuSendPhotos, props.isResponsive)}\n                </ImageUploadButton>\n            }\n\n            {props.shouldShowTipping &&\n                <SendTipButton\n                    title={tip4}\n                    isDropDownOpen={props.isDropDownOpen}\n                    isResponsive={props.isResponsive}\n                    onClick={props.onTipClick}\n                >\n                    {getBaseButtonContent(\"-icon-euro-line\", tip4, props.isResponsive)}\n                </SendTipButton>\n            }\n\n            {props.isGiftButtonVisible &&\n                <GiftButton\n                    title={props.translation.message.sendGifts}\n                    isInverted={props.isGiftSectionOpen}\n                    isDropDownOpen={props.isDropDownOpen}\n                    isResponsive={props.isResponsive}\n                    onClick={props.onGiftClick}\n                >\n                    {getBaseButtonContent(\"-icon-gift-full\", menuSendGift, props.isResponsive)}\n                </GiftButton>\n            }\n\n            {isToyButtonVisible &&\n                <ToyButton\n                    title={toyControl}\n                    isInverted={props.isToySectionOpen}\n                    isDropDownOpen={props.isDropDownOpen}\n                    isResponsive={props.isResponsive}\n                    onClick={props.onToyClick}\n                >\n                    {getBaseButtonContent(\"-icon-toy-control\", toyControl, props.isResponsive)}\n                </ToyButton>\n            }\n        </MessageSectionButtonsWrapper>\n    );\n};\n\nexport default MessageSectionButtons;\n\n","import * as React from 'react';\n\nimport selectors from '../../../redux/selectors';\nimport MessageSectionButtons from './MessageSectionButtons';\nimport IStore from '../../../redux/store';\nimport { openTipPrompt } from \"../../../sagas/common/userPrompt\";\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\nimport { IContainerProps as IProps } from \"./types\";\n\nimport {\n    closeEmoticonSection,\n    closeGiftSection,\n    openEmoticonSection,\n    openGiftSection,\n    requestImageUpload,\n    toggleDropDown,\n    toggleToySection as toggleToySectionAction\n} from '../../../redux/modules/messenger';\n\nimport {\n    toggleGiftSection,\n    toggleEmoticonSection,\n    toggleToySection\n} from './utils'\n\nconst requestUpload = (props: IProps) => () => {\n    props.requestImageUpload(props.instanceId);\n};\n\nconst onTipClick = (props: IProps) => () => {\n    props.openTipPrompt(props.instanceId);\n};\n\nconst MessageSectionButtonsContainer = (props: IProps) => (\n    <MessageSectionButtons\n        hasEmoticons={props.hasEmoticons}\n        hasImageUpload={props.hasImageUpload}\n        shouldShowTipping={props.shouldShowTipping}\n        isResponsive={props.isResponsive}\n        isDropDownOpen={props.isDropDownOpen}\n        isGiftSectionOpen={props.isGiftSectionOpen}\n        isToySectionOpen={props.isToySectionOpen}\n        hasToyControl={props.hasToyControl}\n        isGiftButtonVisible={props.isGiftButtonVisible}\n        isEmoticonSectionOpen={props.isEmoticonSectionOpen}\n        translation={props.translation}\n\n        onGiftClick={toggleGiftSection(props)}\n        onEmoticonClick={toggleEmoticonSection(props)}\n        requestImageUpload={requestUpload(props)}\n        onToyClick={toggleToySection(props)}\n        onTipClick={onTipClick(props)}\n    />\n);\n\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    hasEmoticons: selectors.hasEmoticons(store, instanceId),\n    hasImageUpload: selectors.hasImageUpload(store, instanceId),\n    shouldShowTipping: selectors.shouldShowTipping(store, instanceId),\n    isResponsive: selectors.isResponsive(store, instanceId),\n    isInteractive: selectors.isInteractive(store, instanceId),\n    isDropDownOpen: selectors.isDropDownMenuOpen(store, instanceId),\n    isGiftSectionOpen: selectors.isGiftSectionOpen(store, instanceId),\n    isToySectionOpen: selectors.isToySectionOpen(store, instanceId),\n    hasToyControl: selectors.hasToyControl(store, instanceId),\n    isGiftButtonVisible: selectors.isGiftButtonVisible(store, instanceId),\n    isEmoticonSectionOpen: selectors.isEmoticonSectionOpen(store, instanceId),\n    translation: selectors.getTranslation(store, instanceId)\n});\n\nconst mapDispatchToProps = {\n    toggleDropDown,\n    toggleToySectionAction,\n    openGiftSection,\n    closeGiftSection,\n    openEmoticonSection,\n    closeEmoticonSection,\n    requestImageUpload,\n    openTipPrompt\n};\n\nexport default withRedux(MessageSectionButtonsContainer, mapStateToProps, mapDispatchToProps);\n","import MessageSectionButtonsContainer from './MessageSectionButtonsContainer';\n\nexport default MessageSectionButtonsContainer;\n","import { DraftHandleValue, Editor as DraftJSEditor, EditorState } from 'draft-js';\nimport * as React from 'react';\nimport { MessengerBox } from '../MessageSection/style';\nimport { isEmpty } from 'lodash';\n\ninterface IProps {\n\tisInteractive: boolean;\n\tshouldIncreaseMessageFontSize: boolean;\n\teditorState: EditorState;\n\tplaceholder: string;\n\teditorRef?: React.RefObject<DraftJSEditor>;\n\n\tonChange: any;\n\thandleReturn: any;\n\thandleBeforeInput: any;\n\tonUpArrow: (event: any) => void;\n\tonDownArrow: (event: any) => void;\n\thandlePastedText: (text: string, html: string | undefined) => DraftHandleValue;\n}\n\nconst Editor = (props: IProps) => (\n\t<MessengerBox\n\t\thasEditor={true}\n\t\tisInteractive={props.isInteractive}\n\t\tshouldIncreaseMessageFontSize={props.shouldIncreaseMessageFontSize}\n\t\thasText={!isEmpty(props.editorState.getCurrentContent().getPlainText())}\n\t>\n\t\t<DraftJSEditor\n\t\t\tref={props.editorRef}\n\t\t\teditorState={props.editorState}\n\t\t\treadOnly={!props.isInteractive}\n\t\t\tplaceholder={props.placeholder}\n\t\t\thandleBeforeInput={props.handleBeforeInput}\n\t\t\thandleReturn={props.handleReturn}\n\t\t\thandlePastedText={props.handlePastedText}\n\t\t\tonChange={props.onChange}\n\t\t\tonUpArrow={props.onUpArrow}\n\t\t\tonDownArrow={props.onDownArrow}\n\t\t\tautoComplete={'off'}\n\t\t\tautoCorrect={'off'}\n\t\t\tautoCapitalize={'off'}\n\t\t\tspellCheck={false}\n\t\t/>\n\t</MessengerBox>\n);\n\nexport default Editor;\n","import styled from \"styled-components\";\n\ninterface IGiftDecoratorWrapperProps {\n    url?: string;\n}\n\nexport const GiftDecoratorWrapper = styled.span`\n    display: inline-flex;\n    width: 23px;\n    height: 23px;\n    font-size: 1.4em;\n    background-size: 100%;\n    background-repeat: no-repeat;\n    vertical-align: middle;\n    background-image: url(${(props: IGiftDecoratorWrapperProps) => props.url});\n`;\n","import GiftDecorator from './GiftDecorator';\n\nexport default GiftDecorator;","import { find } from 'lodash';\nimport * as React from 'react';\nimport { IGift } from '../../../redux/store';\nimport utils from '../../../utils';\nimport { GiftDecoratorWrapper } from './style';\n\ninterface IProps {\n    gifts: IGift[];\n    [prop: string]: any;\n}\n\nconst GiftDecorator = (props: IProps) => {\n    const { contentState, entityKey } = props;\n    const gift = contentState.getEntity(entityKey).getData().entity;\n    const foundGift = find(props.gifts,\n        (giftItem: IGift) => utils.getGiftEncoding(giftItem) === gift\n    );\n\n    return (\n        <GiftDecoratorWrapper\n            url={foundGift && foundGift.imageUrl} \n            data-entity={gift}\n        >\n            {props.children}\n        </GiftDecoratorWrapper>\n    );\n};\n\nexport default GiftDecorator;","import styled from \"styled-components\";\nimport { isMacOs } from \"react-device-detect\";\n\ninterface IEmoticonProps {\n    position?: string;\n    className?: string\n}\n\nexport const Emoticon = styled.span`\n    display: inline-flex;\n    background-size: 1000%;\n    background-repeat: no-repeat;\n     \n    ${isMacOs\n\t\t? `\n\t\t\twidth: 1.2em;\n\t\t\tmargin: 0 2px 0 0;\n\t\t`\n\t\t: `\n\t\t\twidth: auto;\n\t\t`\n\t}\n    \n    ${(props: IEmoticonProps) => props.position\n        ? `\n            ${props.position};\n            width: 23px;\n            height: 23px;\n        `\n        : `\n            background: none;\n            height: auto;\n            font-size: 1.2em;\n        `\n    };\n`;\n\n","import EmoticonDecorator from './EmoticonDecorator';\n\nexport default EmoticonDecorator;","import * as React from 'react';\nimport { Emoticon as EmoticonWrapper } from './style';\nimport { ContentState } from \"draft-js\";\nimport { IEmoticon } from \"../../../redux/store\";\nimport utils from \"../../../utils\";\n\ninterface IProps {\n    contentState: ContentState;\n    entityKey: string;\n    children: any;\n    emoticons: IEmoticon[];\n}\n\nconst EmoticonDecorator = (props: IProps) => {\n    const { contentState, entityKey } = props;\n    const icon = contentState.getEntity(entityKey).getData().entity;\n    const emoticon = props.emoticons.find((e: IEmoticon) => e.text === icon) || props.emoticons[0];\n\n    return (\n        <EmoticonWrapper\n            className={utils.getEmoticonClass(emoticon)}\n            position={emoticon.position}\n            data-entity={icon}>\n            {props.children}\n        </EmoticonWrapper>\n    );\n};\n\nexport default EmoticonDecorator;","import styled from \"styled-components\";\n\nexport const MentionDecoratorWrapper = styled.span`\n    background-color: ${({theme}) => theme.colors.mentionBackground};\n`;\n","import MentionDecorator from './MentionDecorator'\n\nexport default MentionDecorator;\n","import React from 'react';\n\nimport { MentionDecoratorWrapper } from './style';\n\ninterface IProps {\n    children: any;\n}\n\nconst MentionDecorator = (props: IProps) => (\n    <MentionDecoratorWrapper contentEditable={false}>\n        {props.children}\n    </MentionDecoratorWrapper>\n);\n\nexport default MentionDecorator;\n","export enum ArrowDirection {\n\tDOWN = \"-icon-single-arrow-down-line\",\n\tLEFT = \"-icon-single-arrow-left-line\",\n\tUP = \"-icon-single-arrow-up-line\"\n}\n","import EditorContainer from './EditorContainer';\n\nexport default EditorContainer;","import styled from \"styled-components\";\nimport withCustomClasses, { DomCustomClass } from \"../../hoc/withCustomClasses/\";\n\ninterface IGiftStyle {\n    url: string | undefined;\n    hasEnlargedContent?: boolean;\n}\n\nexport const MessageGiftWrapper = withCustomClasses<IGiftStyle>(styled.span<IGiftStyle>`\n    background-image: url(${(props: IGiftStyle) => props.url});\n    width: ${({ hasEnlargedContent }) => hasEnlargedContent ? '56' : '24'}px;\n    height: ${({ hasEnlargedContent }) => hasEnlargedContent ? '56' : '24'}px;\n    \n    display: inline-block;\n    background-size: 100%;\n    background-repeat: no-repeat;\n    vertical-align: middle;\n`, [DomCustomClass.MessageGift]);\n","import * as React from 'react';\nimport { IGift } from '../../../redux/store';\nimport utils from '../../../utils';\nimport { MessageGiftWrapper } from './style';\n\ninterface IProps {\n    icon: string;\n    gifts: IGift[];\n    hasEnlargedContent?: boolean;\n}\n\nconst MessageGift = (props: IProps) => {\n    const foundGift = props.gifts.find(\n        (gift: IGift) => utils.getGiftEncoding(gift) === props.icon\n    );\n\n    return (\n        <MessageGiftWrapper\n            url={foundGift && foundGift.imageUrl}\n            data-entity={foundGift &&  utils.getGiftEncoding(foundGift)}\n            hasEnlargedContent={props.hasEnlargedContent}\n        >\n            <span>{utils.CHAR_BEHIND_GIFTS}</span>\n        </MessageGiftWrapper>\n    );\n};\n\nexport default MessageGift;","import MessageGift from './MessageGift';\n\nexport default MessageGift;","import styled from \"styled-components\";\nimport withIdentifier, { DomIdentifier } from \"../../hoc/withIdentifier\";\n\nexport const DefaultEditorWrapper = withIdentifier(styled.div`\n    margin-right: 10px;\n    position: relative;\n`, DomIdentifier.DefaultEditor);\n\nexport const GiftsWrapper = styled.div`\n    margin-right: 20px;\n`;\n\nexport const TotalPriceWrapper = styled.span`\n    padding-left: 3px;\n`;\n\nexport const Editor = styled.textarea`\n    color: ${(props) => props.theme.colors.editor.text};\n    background-color: ${(props) => props.theme.colors.editor.background};\n    \n    font-family: Roboto;\n    font-weight: 300;\n    width: 100%;\n    resize: none;\n    overflow: auto;\n    outline: none;\n    border: none;\n`;\n\nexport const RemoveGiftWrapper = styled.div.attrs({ className  : \"-icon-trash-full\" })`\n    right: 0;\n    top: 0;\n    cursor: pointer;\n    position: absolute;\n`;\n","import { isEmpty, map, sumBy } from 'lodash';\nimport * as React from 'react';\nimport { ICurrency, IGift } from '../../../redux/store';\nimport utils from '../../../utils';\nimport MessageGift from '../MessageGift';\nimport { MessengerBox } from '../MessageSection/style';\nimport { DefaultEditorWrapper, Editor, GiftsWrapper, RemoveGiftWrapper, TotalPriceWrapper } from './style';\n\ninterface IProps {\n    text: string;\n    currency: ICurrency;\n    gifts: IGift[];\n    insertedGifts: IGift[];\n    placeholder: string;\n    isInteractive: boolean;\n\tshouldIncreaseMessageFontSize: boolean;\n\n    onRemoveGiftClick: () => void;\n    onChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => void;\n    onKeyDown: (event: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n}\n\nconst DefaultEditor = (props: IProps) => {\n    const insertedGiftsPrice = sumBy(props.insertedGifts,\n        (gift: IGift) => gift.currentQuantity && gift.currentQuantity > 0\n            ? 0\n            : gift.price\n    );\n\n    return (\n        <MessengerBox\n            hasEditor={false}\n            isInteractive={props.isInteractive}\n            hasText={!isEmpty(props.text)}\n            shouldIncreaseMessageFontSize={props.shouldIncreaseMessageFontSize}\n        >\n            <DefaultEditorWrapper>\n                {!isEmpty(props.insertedGifts) &&\n                <>\n                    <GiftsWrapper>\n                        {map(props.insertedGifts, (gift: IGift, index) =>\n                            <MessageGift\n                                key={`${gift.id}${index}`}\n                                icon={utils.getGiftEncoding(gift)}\n                                gifts={props.gifts}\n                            />\n                        )}\n\n                        <TotalPriceWrapper>\n                            ({insertedGiftsPrice}{props.currency.symbol})\n                        </TotalPriceWrapper>\n                    </GiftsWrapper>\n\n                    <RemoveGiftWrapper\n                        onClick={props.onRemoveGiftClick}\n                        title={\"Remove gift\"}\n                    />\n                </>\n                }\n\n                <Editor\n                    value={props.text}\n                    onChange={props.onChange}\n                    onKeyDown={props.onKeyDown}\n                    placeholder={props.placeholder}\n                    disabled={!props.isInteractive}\n                />\n            </DefaultEditorWrapper>\n        </MessengerBox>\n    );\n};\n\n\nexport default DefaultEditor;\n","import * as React from 'react';\nimport { filter, forEach, isEmpty, isEqual, reduce, size } from 'lodash';\n\nimport utils from '../../../utils';\nimport DefaultEditor from './DefaultEditor';\nimport selectors from '../../../redux/selectors';\nimport { ActionDispatcher } from '../../../redux';\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\nimport { decreaseCurrentGiftQuantity, IHandleQuantitiesPayload } from '../../../redux/modules/session';\nimport IStore, {\n    ActionResponseType,\n    IActionResponse,\n    ICurrency,\n    IGift,\n    IStoredEditorState,\n    ITranslation\n} from '../../../redux/store';\nimport {\n\tcloseMentionSection,\n\topenMentionSection,\n\tsetMentionQuery,\n\tresetSymbols,\n\tsetActionResponse,\n\tsetStoredEditorState\n} from \"../../../redux/modules/messenger\";\nimport constants from '../../../static/constants';\n\ninterface IComponentProps {\n    emoticon?: string;\n    mention?: string;\n    placeholder: string;\n    isInteractive: boolean;\n    shouldResetEditorState: boolean;\n    gift?: IGift;\n\n    sendMessage: () => void;\n    onTextChanged: (text: string) => void;\n    onGiftTextChanged: (giftText: string) => void;\n}\n\ninterface IStoreProps {\n    gifts: IGift[];\n    currency: ICurrency;\n    translation: ITranslation;\n    storedEditorState: IStoredEditorState;\n    isMentionSectionOpen: boolean;\n\tshouldIncreaseMessageFontSize: boolean;\n\n    setActionResponse: ActionDispatcher<IActionResponse>;\n    resetSymbols: ActionDispatcher;\n    setStoredEditorState: ActionDispatcher<IStoredEditorState>;\n    decreaseCurrentGiftQuantity: ActionDispatcher<IHandleQuantitiesPayload>;\n    openMentionSection: ActionDispatcher;\n    closeMentionSection: ActionDispatcher;\n    setMentionQuery: ActionDispatcher<string>;\n\tisVideoChatInGroupMode: boolean;\n}\n\ntype IProps = IComponentProps & IStoreProps & IInstanceProps;\n\nclass DefaultEditorContainer extends React.Component<IProps> {\n    componentDidMount() {\n        const { text, gifts } = this.props.storedEditorState;\n\n        // let the parent components know about our new loaded stored text and gifts\n        if (!isEmpty(text)) {\n            this.props.onTextChanged(text);\n        }\n\n        if (!isEmpty(gifts)) {\n            this.props.onGiftTextChanged(this.getGiftText(gifts));\n        }\n    }\n\n    componentDidUpdate(prevProps: IProps) {\n        const { text, gifts } = this.props.storedEditorState;\n        const latestCharacter = text.slice(-1);\n        const mentionPosition = text.lastIndexOf(constants.mentionSpecialCharacter);\n        const shouldCloseMentionSection = this.props.isMentionSectionOpen\n            && text.length < prevProps.storedEditorState.text.length;\n\n        if (latestCharacter === constants.mentionSpecialCharacter && this.props.isVideoChatInGroupMode) {\n            this.props.openMentionSection(this.props.instanceId, false);\n        }\n\n        if (this.props.isMentionSectionOpen && mentionPosition !== -1) {\n            const mentionQuery = text.slice(mentionPosition + 1);\n\n            this.props.setMentionQuery(this.props.instanceId, mentionQuery);\n        }\n\n        if (shouldCloseMentionSection) {\n            this.props.closeMentionSection(this.props.instanceId);\n        }\n\n        // Update the store & restart the added gift\n        if (this.props.gift &&\n            this.props.gift !== prevProps.gift &&\n            isEqual(this.props.gifts, prevProps.gifts)\n        ) {\n            this.setInsertedGifts(gifts.concat(this.props.gift));\n            this.props.resetSymbols(this.props.instanceId);\n        }\n\n        if (this.props.emoticon && this.props.emoticon !== prevProps.emoticon) {\n            const newText = `${text}${this.props.emoticon}`;\n            this.updateStoredEditorState({ text: newText, gifts });\n\n            this.props.resetSymbols(this.props.instanceId);\n        }\n\n        if (!prevProps.mention && this.props.mention && this.props.isVideoChatInGroupMode) {\n            const slicedText = text.slice(0, mentionPosition);\n\n            this.updateStoredEditorState({ text: `${slicedText}${constants.mentionSpecialCharacter}${this.props.mention}`, gifts });\n            this.props.closeMentionSection(this.props.instanceId);\n            this.props.resetSymbols(this.props.instanceId);\n        }\n\n\n        // Reset both text and gifts if a message has been sent\n        if (this.props.shouldResetEditorState &&\n            this.props.shouldResetEditorState !== prevProps.shouldResetEditorState\n        ) {\n            this.updateStoredEditorState({ text: \"\", gifts: [] });\n            return;\n        }\n\n        // Update gifts stock\n        forEach(this.props.gifts, (gift: IGift) => {\n            if (gift.initialQuantity) {\n                const quantityToHandle = size(filter(gifts, (g: IGift) => g.id === gift.id));\n\n                this.props.decreaseCurrentGiftQuantity(this.props.instanceId, {\n                    giftId: gift.id,\n                    quantityToHandle\n                });\n            }\n        });\n    }\n\n    render() {\n        const { text, gifts } = this.props.storedEditorState;\n\n        return (\n            <DefaultEditor\n                text={text}\n                currency={this.props.currency}\n                gifts={this.props.gifts}\n                insertedGifts={gifts}\n                placeholder={this.props.placeholder}\n                isInteractive={this.props.isInteractive}\n                shouldIncreaseMessageFontSize={this.props.shouldIncreaseMessageFontSize}\n\n                onChange={this.onChange}\n                onKeyDown={this.onKeyDown}\n                onRemoveGiftClick={this.onRemoveGiftClick}\n            />\n        );\n    }\n\n    private onChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n        this.updateStoredEditorState({\n            text: event.target.value,\n            gifts: this.props.storedEditorState.gifts\n        });\n    };\n\n    private updateStoredEditorState = ({ text, gifts }: IStoredEditorState) => {\n        const { instanceId } = this.props;\n\n        if (utils.hasExceededTextLimit(text)) {\n            this.props.setActionResponse(instanceId, {\n                text: this.props.translation.error.textLimit,\n                type: ActionResponseType.WARNING\n            });\n\n            return;\n        }\n\n        const { storedEditorState, onTextChanged, onGiftTextChanged } = this.props;\n        const hasModifiedText = !isEqual(text, storedEditorState.text);\n        const hasModifiedGifts = !isEqual(gifts, storedEditorState.gifts);\n\n        if (hasModifiedText) {\n            onTextChanged(text);\n        }\n\n        if (hasModifiedGifts) {\n            onGiftTextChanged(this.getGiftText(gifts));\n        }\n\n        if (hasModifiedText || hasModifiedGifts) {\n            this.props.setStoredEditorState(instanceId, { text, gifts });\n        }\n    };\n\n    private onKeyDown = (event: React.KeyboardEvent<HTMLTextAreaElement>) => {\n        if (event.keyCode === constants.ENTER_KEY_CODE && !event.shiftKey) {\n\t\t\tevent.preventDefault();\n\n            if (!this.props.isMentionSectionOpen) {\n\t\t\t\tthis.props.sendMessage();\n\t\t\t}\n        }\n    };\n\n    private onRemoveGiftClick = () => {\n        const { gifts } = this.props.storedEditorState;\n        this.setInsertedGifts(gifts.slice(0, -1));\n    };\n\n    private setInsertedGifts = (gifts: IGift[]) => {\n        this.updateStoredEditorState({\n            text: this.props.storedEditorState.text,\n            gifts\n        });\n    };\n\n    private getGiftText = (gifts: IGift[]) => reduce(gifts,\n        (prevText, gift: IGift) => `${prevText}${utils.getGiftEncoding(gift)}`,\n        \"\"\n    );\n}\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    currency: selectors.getCurrency(store, instanceId),\n    gifts: selectors.getTranslatedGifts(store, instanceId),\n    storedEditorState: selectors.getEditorState(store, instanceId),\n    translation: selectors.getTranslation(store, instanceId),\n    isMentionSectionOpen: selectors.isMentionSectionOpen(store, instanceId),\n\tisVideoChatInGroupMode: selectors.isVideoChatInGroupMode(store, instanceId),\n\tshouldIncreaseMessageFontSize: selectors.getShouldIncreaseMessageFontSize(store, instanceId)\n});\n\nconst mapDispatchToProps = {\n    decreaseCurrentGiftQuantity,\n    setStoredEditorState,\n    setActionResponse,\n    resetSymbols,\n    openMentionSection,\n    closeMentionSection,\n    setMentionQuery\n};\n\nexport default withRedux<IComponentProps>(DefaultEditorContainer, mapStateToProps, mapDispatchToProps);\n","import DefaultEditorContainer from './DefaultEditorContainer';\n\nexport default DefaultEditorContainer;","import styled, { css, keyframes } from \"styled-components\";\n\ninterface IWrapperProps {\n    isRecording: boolean;\n}\n\nconst activePulsation = keyframes`\n    0% { opacity: 0.1; }\n    100% { opacity: 1; }\n`;\n\nconst animation = css`\n\tanimation: ${activePulsation} 1s infinite ease-in-out;\n`;\n\nexport const Wrapper = styled.div<IWrapperProps>`\n    ${({ isRecording }: IWrapperProps) => !isRecording && `\n        transition-property: display;\n        transition-delay: 250ms;\n    `}\n    left: ${({ isRecording }: IWrapperProps) => isRecording ? '0' : '100%'};\n    opacity: ${({ isRecording }: IWrapperProps) => isRecording ? '1' : '0'};\n    \n    display: flex;\n    transition: all 0.5s;\n    \n    width: 100%;\n    height: 100%;\n    position: absolute;\n    z-index: 3;\n    bottom: 0;\n    background-color: white;\n    flex-direction: column-reverse;\n    \n`;\n\nexport const BaseIcon = styled.i`\n    position: relative;\n    display: flex;\n    align-items: center;\n    font-weight: 400;\n    font-size: 20px;\n    z-index: 0;\n    transition: transform .5s ease-in-out;\n    \n    width: 50px;\n    align-content: center;\n    justify-content: center;\n`;\n\nexport const RecordingIcon = styled(BaseIcon)`\n    color: red;\n    width: 20px;\n    margin-left: 15px;\n    margin-right: 5px;\n    ${animation};\n`;\n\nexport const SendIcon = styled(BaseIcon)`\n    color: ${(props) => props.theme.colors.sendMessageButton};\n    cursor: pointer;\n`;\n\nexport const AudioAnalyserContent = styled.div`\n    display: flex;\n    height: 100%;\n    justify-content: space-between;\n`;\n\nexport const RecordingAreaContent = styled.div`\n    display: flex;\n    align-items: center;\n`;\n\nexport const CountDownWrapper = styled.div`\n    width: 100px;\n`;\n\nexport const CancelRecordingWrapper = styled.div`\n    cursor: pointer;\n    \n    &:hover {\n        color: ${(props) => props.theme.colors.cancelRecordingHover};\n    }\n`;\n","import React, { FC } from 'react';\nimport {\n    AudioAnalyserContent,\n    CancelRecordingWrapper,\n    CountDownWrapper,\n    RecordingAreaContent,\n    RecordingIcon,\n    SendIcon,\n    Wrapper\n} from './style';\n\ninterface IProps {\n    isRecording: boolean;\n    shouldSendMessage: boolean;\n    recordingSeconds: string;\n    recordingMinutes: string;\n\n    stopRecording: () => void;\n    sendAudioMessage: () => void;\n}\n\nexport const AudioMessageUploader: FC<IProps> = (props: IProps) => {\n    const countDown: string = `${props.recordingMinutes}:${props.recordingSeconds}`;\n\n    return (\n        <Wrapper isRecording={props.isRecording}>\n            <AudioAnalyserContent>\n                <RecordingAreaContent>\n                    <RecordingIcon className={\"-icon-voice-recording-full\"} />\n                    <CountDownWrapper>\n                        {countDown}\n                    </CountDownWrapper>\n                    <CancelRecordingWrapper onClick={props.stopRecording}>Cancel</CancelRecordingWrapper>\n                </RecordingAreaContent>\n                <SendIcon className={\"-icon-send-chat-full\"} onClick={props.sendAudioMessage} />\n            </AudioAnalyserContent>\n        </Wrapper>\n    )\n};\n\nexport default AudioMessageUploader;\n","export const getSeconds = (seconds: number): string => `0${seconds % 60}`.slice(-2);\nexport const getMinutes = (seconds: number): string => `${Math.floor(seconds / 60)}`;\n","import React, { Component } from 'react';\n\nimport AudioMessageUploader from './AudioMessageUploader';\nimport IStore, { IMessage } from '../../../redux/store';\nimport selectors from '../../../redux/selectors';\nimport {\n    addMessage,\n    setIsRecordingAudioMessage,\n    setSecondsElapsed,\n    setShouldSendMessage\n} from \"../../../redux/modules/messenger\";\nimport { getMinutes, getSeconds } from './utils'\nimport {ActionDispatcher} from \"../../../redux\";\nimport {IInstanceProps} from \"../../hoc/withInstanceInfo\";\nimport withRedux from \"../../hoc/withRedux\";\n\ninterface IState {\n    secondsElapsed: number;\n}\n\ninterface IStoreProps {\n    // Properties\n    isRecording: boolean;\n    shouldSendMessage: boolean;\n    isMicEnabled: boolean;\n    secondsElapsed: number;\n\n\n    addMessage: ActionDispatcher<IMessage>;\n    setIsRecordingAudioMessage: ActionDispatcher<boolean>;\n    setIsMicEnabled: ActionDispatcher<boolean>;\n    setSecondsElapsed: ActionDispatcher<number>;\n    setShouldSendMessage: ActionDispatcher<boolean>;\n}\n\ntype IProps = IStoreProps & IInstanceProps;\n\nclass AudioMessageUploaderContainer extends Component<IProps, IState> {\n    private countdown: any;\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            secondsElapsed: 0\n        }\n    }\n\n    componentDidMount() {\n        if (this.props.isRecording && this.props.isMicEnabled) {\n            this.countdown = setInterval(() => {\n                this.incrementSecondElapsed();\n            }, 1000);\n        }\n    }\n\n    componentDidUpdate(prevProps: IProps) {\n        if (this.props.secondsElapsed !== prevProps.secondsElapsed) {\n            this.setState((oldState: IState) => ({\n                secondsElapsed: this.props.secondsElapsed + 1\n            }));\n        }\n\n        if (this.props.isMicEnabled && !prevProps.isMicEnabled) {\n            this.countdown = setInterval(() => {\n                this.incrementSecondElapsed();\n            }, 1000);\n        }\n\n        if (this.props.isRecording && !prevProps.isRecording && this.props.isMicEnabled) {\n            this.setState((oldState: IState) => ({\n                secondsElapsed: this.props.secondsElapsed\n            }));\n\n            this.countdown = setInterval(() => {\n                this.incrementSecondElapsed();\n            }, 1000);\n        }\n\n        if (!this.props.isRecording && prevProps.isRecording && this.props.isMicEnabled) {\n            clearInterval(this.countdown);\n\n            this.resetSecondsElapsed();\n        }\n    }\n\n    componentWillUnmount(): void {\n        this.props.setSecondsElapsed(this.props.instanceId, this.state.secondsElapsed);\n    }\n\n    render() {\n        return (\n            <AudioMessageUploader\n                isRecording={this.props.isRecording}\n                shouldSendMessage={this.props.shouldSendMessage}\n                stopRecording={this.stopRecording}\n                sendAudioMessage={this.sendAudioMessage}\n                recordingSeconds={getSeconds(this.state.secondsElapsed)}\n                recordingMinutes={getMinutes(this.state.secondsElapsed)}\n            />\n        );\n    }\n\n    private incrementSecondElapsed = () => {\n        this.setState((oldState: IState) => ({\n            secondsElapsed: oldState.secondsElapsed + 1\n        }));\n    };\n\n    private stopRecording = () => {\n        const { instanceId } = this.props;\n\n        this.props.setIsRecordingAudioMessage(instanceId, false);\n        this.props.setShouldSendMessage(instanceId, false);\n        this.resetSecondsElapsed();\n    };\n\n    private sendAudioMessage = () => {\n        const { instanceId } = this.props;\n\n        this.props.setIsRecordingAudioMessage(instanceId, false);\n        this.props.setShouldSendMessage(instanceId, true);\n        this.resetSecondsElapsed();\n    };\n\n    private resetSecondsElapsed = () => {\n        const { instanceId } = this.props;\n\n        this.props.setSecondsElapsed(instanceId, 0);\n        this.setState((oldState: IState) => ({\n            secondsElapsed: 0\n        }));\n    }\n}\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    isRecording: selectors.isRecording(store, instanceId),\n    secondsElapsed: selectors.getSecondsElapsed(store, instanceId),\n    shouldSendMessage: selectors.getShouldSendMessage(store, instanceId),\n    isMicEnabled: selectors.isMicEnabled(store, instanceId)\n});\n\nconst mapDispatchToProps = {\n    addMessage,\n    setIsRecordingAudioMessage,\n    setSecondsElapsed,\n    setShouldSendMessage\n};\n\nexport default withRedux(AudioMessageUploaderContainer, mapStateToProps, mapDispatchToProps);\n","import AudioMessageUploaderContainer from './AudioMessageUploaderContainer';\n\nexport default AudioMessageUploaderContainer;","import * as React from 'react';\nimport { isIE } from \"react-device-detect\";\n\nimport { ICurrency, IGift, ITranslation } from '../../../redux/store';\nimport ActionResponseContainer from '../../common/ActionResponse/ActionResponseContainer';\nimport MessageSectionButtonsContainer from '../MessageSectionButtons';\nimport {\n    DropDownButton,\n    IMessengerBaseButtonProps,\n    MessengerBaseButton,\n    MessengerBaseButtonIcon,\n    MessengerButtonsWrapper,\n    MessengerSectionWrapper,\n    ToyControlBaseButtonIcon,\n    ToyControlIcon\n} from './style';\nimport EditorContainer from '../Editor';\nimport DefaultEditorContainer from '../DefaultEditor';\nimport utils from '../../../utils';\nimport withIdentifier, { DomIdentifier } from \"../../hoc/withIdentifier\";\nimport AudioMessageUploaderContainer from '../AudioMessageUploader';\n\nconst SendMessageButton = withIdentifier<IMessengerBaseButtonProps>(MessengerBaseButton, DomIdentifier.SendMessageButton);\nconst AudioMessageButton = withIdentifier<IMessengerBaseButtonProps>(MessengerBaseButton, DomIdentifier.AudioMessageButton);\n\nexport interface IProps {\n    hasContent: boolean;\n    emoticon?: string;\n    gift?: IGift;\n    mention?: string;\n    hasEditor: boolean;\n    currency: ICurrency;\n    hasFreeMessages: boolean;\n    isEmoticonSectionOpen: boolean;\n    isDropDownOpen: boolean;\n    shouldResetEditorState: boolean;\n    messagePrice: number;\n    translation: ITranslation;\n    isGiftSectionOpen: boolean;\n    isInteractive: boolean;\n    isResponsive: boolean;\n    isVideoChatOpen: boolean;\n    isFullscreen: boolean;\n    hasSendMessageButton: boolean;\n    hasOnlySendButton: boolean;\n    hasToyControlButton: boolean;\n    shouldDisplayMessageSectionButtons: boolean;\n    isAnyTextInEditor: boolean;\n    hasAudioMessages: boolean;\n\n    expandDropdown: () => void;\n    sendMessage: () => void;\n    toggleToySection: () => any;\n    onTextChanged: (text: string) => void;\n    onStartRecording: () => void;\n    onGiftTextChanged: (giftText: string) => void;\n}\n\nconst MessageSection = (props: IProps) => {\n    const { writePrice, writeFree, write } = props.translation.message;\n    const amount = `${props.messagePrice} ${props.currency.symbol}`;\n\n    /**\n     * We should render the default placeholder if we are in videochat.\n     * We should render the free placeholder if the user has free messages OR the price is 0.\n     * We should render the price placeholder if the price is more than 0 AND has no free messages.\n     */\n    let placeholder;\n    const hasFreeMessagesPlaceholder = props.hasFreeMessages || props.messagePrice === 0;\n    const placeholderWithPrice = utils.translationWithValues(writePrice, { amount });\n\n    placeholder = hasFreeMessagesPlaceholder ? writeFree : placeholderWithPrice;\n    placeholder = props.isVideoChatOpen ? write : placeholder;\n\n    let encodedGiftId: string | undefined;\n    if (props.gift) {\n        encodedGiftId = utils.getGiftEncoding(props.gift);\n    }\n\n    const editor = (\n        <EditorContainer\n            emoticon={props.emoticon}\n            gift={encodedGiftId}\n            mention={props.mention}\n            placeholder={placeholder}\n            shouldResetEditorState={props.shouldResetEditorState}\n\n            onTextChanged={props.onTextChanged}\n            sendMessage={props.sendMessage}\n        />\n    );\n\n    const defaultEditor = (\n        <DefaultEditorContainer\n            emoticon={props.emoticon}\n            mention={props.mention}\n            isInteractive={props.isInteractive}\n            placeholder={placeholder}\n            gift={props.gift}\n            shouldResetEditorState={props.shouldResetEditorState}\n\n            onTextChanged={props.onTextChanged}\n            sendMessage={props.sendMessage}\n            onGiftTextChanged={props.onGiftTextChanged}\n        />\n    );\n\n    const responsiveDropDown = (\n        <DropDownButton\n            isInverted={props.isDropDownOpen}\n            onClick={props.expandDropdown}\n        >\n            <MessengerBaseButtonIcon\n                className={\"-icon-round-plus\"}\n                isInverted={props.isDropDownOpen}\n            />\n        </DropDownButton>\n    );\n\n    const sectionButtons = props.isResponsive ? responsiveDropDown : <MessageSectionButtonsContainer />;\n    const shouldRenderAudioButton = !props.isAnyTextInEditor && props.hasAudioMessages;\n\tconst shouldRenderSendMessageButton = props.isInteractive && props.hasSendMessageButton;\n\tconst hasButtonsMargin = props.isFullscreen && props.hasToyControlButton;\n\n\t// IE-SPECIFIC: the audio messages feature will be disabled on any IE browser.\n\tconst hasAudioMessages = !isIE;\n\n    return (\n        <>\n            <ActionResponseContainer />\n\n            {hasAudioMessages && <AudioMessageUploaderContainer />}\n\n            <MessengerSectionWrapper isFullscreen={props.isFullscreen}>\n                {props.hasEditor ? editor : defaultEditor}\n\n                <MessengerButtonsWrapper hasButtonsMargin={hasButtonsMargin}>\n                    {shouldRenderAudioButton\n                        ?   <AudioMessageButton\n                                title={props.translation.message.sendAudioMessage}\n                                onClick={props.onStartRecording}\n                            >\n                                <MessengerBaseButtonIcon\n                                    className={\"-icon-voice-recording-full\"}\n                                    hasLeftSeparator={true}\n                                />\n                            </AudioMessageButton>\n                        : shouldRenderSendMessageButton &&\n                            <SendMessageButton\n                                isActive={props.hasContent}\n                                title={props.translation.message.send}\n                                hasOnlySendButton={props.hasOnlySendButton}\n                                onClick={props.sendMessage}\n                            >\n                                <MessengerBaseButtonIcon\n                                    className={\"-icon-send-chat-full\"}\n                                    hasLeftSeparator={true}\n                                />\n                            </SendMessageButton>\n                    }\n\n                    {props.shouldDisplayMessageSectionButtons && <>{sectionButtons}</>}\n\n                    {props.hasToyControlButton &&\n                        <MessengerBaseButton\n                            isActive={props.hasContent}\n                            title={props.translation.chat.toyControl.toyControl}\n                            onClick={props.toggleToySection}\n                        >\n                            <ToyControlBaseButtonIcon hasLeftSeparator={true}>\n                                <ToyControlIcon className={\"-icon-toy-control-vibrating\"} />\n                            </ToyControlBaseButtonIcon>\n                        </MessengerBaseButton>\n\n                    }\n                </MessengerButtonsWrapper>\n\n            </MessengerSectionWrapper>\n        </>\n    );\n};\n\nexport default MessageSection;\n\n","import * as React from 'react';\nimport { find, isEmpty } from 'lodash';\nimport { withTheme } from 'styled-components';\nimport { withResizeDetector } from 'react-resize-detector';\n\nimport config from '../../../static/config';\nimport utils from '../../../utils';\nimport MessageSection from './MessageSection';\nimport selectors from '../../../redux/selectors';\nimport { ActionDispatcher } from '../../../redux';\nimport { MessageSectionContainerWrapper } from './style';\nimport { requestSendMessage } from '../../../sagas/websockets/message';\nimport { syncQuantitiesOnMessageSent } from '../../../redux/modules/session';\nimport IStore, { IGiftPage, IGift, ITranslation, ICurrency } from '../../../redux/store';\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\nimport {\n    closeEmoticonSection,\n    closeGiftSection,\n    closeSections,\n    openEmoticonSection,\n\tcloseToySection,\n    setIsResponsive,\n    toggleDropDown,\n    toggleToySection,\n    setIsRecordingAudioMessage\n} from '../../../redux/modules/messenger';\nimport { ITheme } from '../../../themes';\n\ninterface IState {\n    text: string;\n\n    // When we send a message, we have to reset the text from children components\n    shouldResetEditorState: boolean;\n\n    // This property is used only on default editor\n    giftText: string;\n}\n\ninterface IIResizeDetector {\n    width: number;\n    height: number;\n}\n\ninterface IStoreProps {\n    isEmoticonSectionOpen: boolean;\n    isGiftSectionOpen: boolean;\n\tisToySectionOpen: boolean;\n    isVideoChatOpen: boolean;\n    isInteractive: boolean;\n\thasEditor: boolean;\n\ttheme: ITheme;\n    currency: ICurrency;\n    hasFreeMessages: boolean;\n    isResponsive: boolean;\n    giftPages: IGiftPage[];\n    gifts: IGift[];\n    messagePrice: number;\n    translation: ITranslation;\n    isDropDownOpen: boolean;\n    activeEmoticon: string;\n    activeGift: string;\n    activeMention: string;\n    isFullscreen: boolean;\n    hasSendMessageButton: boolean;\n    hasAudioMessages: boolean;\n    hasOnlySendButton: boolean;\n    hasToyControlButton: boolean;\n    shouldDisplayMessageSectionButtons: boolean;\n    isAnyTextInEditor: boolean;\n\n    closeSections: ActionDispatcher;\n    toggleDropDown: ActionDispatcher;\n    closeGiftSection: ActionDispatcher;\n    openEmoticonSection: ActionDispatcher;\n    closeEmoticonSection: ActionDispatcher;\n\tcloseToySection: ActionDispatcher;\n    toggleToySection: ActionDispatcher;\n    syncQuantitiesOnMessageSent: ActionDispatcher;\n    requestSendMessage: ActionDispatcher<string>;\n    setIsResponsive: ActionDispatcher<boolean>;\n    setIsRecordingAudioMessage: ActionDispatcher<boolean>;\n}\n\ntype IProps = IInstanceProps & IStoreProps & IIResizeDetector;\n\nclass MessageSectionContainer extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            text: \"\",\n            giftText: \"\",\n            shouldResetEditorState: false\n        };\n    }\n\n    componentDidUpdate(prevProps: IProps) {\n\t\tconst { theme, instanceId } = this.props;\n\t\tconst isResponsive = this.props.width < theme.layout.messageSection.responsiveBreakpointWidth;\n\n        if (prevProps.isResponsive !== isResponsive) {\n            this.props.setIsResponsive(instanceId, isResponsive);\n        }\n    }\n\n    render() {\n        let gift: IGift | undefined;\n\n        if (this.props.activeGift) {\n            const giftId = utils.getGiftDecoded(this.props.activeGift);\n            gift = find(this.props.gifts, (g: IGift) => g.id === giftId);\n        }\n\n        const hasContent = !isEmpty(this.state.text) || !isEmpty(this.state.giftText);\n\n        return (\n            <MessageSectionContainerWrapper minMessageSectionHeight={config.viewSizes.minMessageSectionHeight}>\n                <MessageSection\n                    hasContent={hasContent}\n                    gift={gift}\n                    emoticon={this.props.activeEmoticon}\n                    mention={this.props.activeMention}\n                    hasEditor={this.props.hasEditor}\n                    currency={this.props.currency}\n                    shouldResetEditorState={this.state.shouldResetEditorState}\n                    isGiftSectionOpen={this.props.isGiftSectionOpen}\n                    isFullscreen={this.props.isFullscreen}\n                    isInteractive={this.props.isInteractive}\n                    isDropDownOpen={this.props.isDropDownOpen}\n                    isVideoChatOpen={this.props.isVideoChatOpen}\n                    isEmoticonSectionOpen={this.props.isEmoticonSectionOpen}\n                    expandDropdown={this.expandDropdown}\n                    isResponsive={this.props.isResponsive}\n                    hasFreeMessages={this.props.hasFreeMessages}\n                    hasSendMessageButton={this.props.hasSendMessageButton}\n                    hasOnlySendButton={this.props.hasOnlySendButton}\n                    hasToyControlButton={this.props.hasToyControlButton}\n                    shouldDisplayMessageSectionButtons={this.props.shouldDisplayMessageSectionButtons}\n                    messagePrice={this.props.messagePrice}\n                    translation={this.props.translation}\n                    isAnyTextInEditor={this.props.isAnyTextInEditor}\n                    hasAudioMessages={this.props.hasAudioMessages}\n                    onStartRecording={this.onStartRecording}\n\n                    sendMessage={this.sendMessage}\n                    onTextChanged={this.onTextChanged}\n                    toggleToySection={this.toggleToySection}\n                    onGiftTextChanged={this.onGiftTextChanged}\n                />\n            </MessageSectionContainerWrapper>\n        );\n    }\n\n    private toggleToySection = () => {\n        this.props.toggleToySection(this.props.instanceId);\n    };\n\n    private sendMessage = () => {\n        const { instanceId } = this.props;\n\t\tconst { text, giftText } = this.state;\n\n        if (!isEmpty(text) || !isEmpty(giftText)) {\n\t\t\tconst messageText = !isEmpty(giftText) ? `${giftText} ${text}` : text;\n\t\t\tthis.props.requestSendMessage(instanceId, messageText);\n\n            this.setState({\n                text: \"\",\n                giftText: \"\",\n                shouldResetEditorState: true\n            });\n        }\n\n        this.props.syncQuantitiesOnMessageSent(instanceId);\n        this.props.closeSections(instanceId);\n    };\n\n    private onGiftTextChanged = (giftText: string) => {\n        this.setState({\n            giftText,\n            shouldResetEditorState: false\n        });\n    };\n\n    private onTextChanged = (text: string) => {\n        this.setState({\n            text,\n            shouldResetEditorState: false\n        });\n    };\n\n    private expandDropdown = () => {\n        const { instanceId } = this.props;\n\n        if (!this.props.isInteractive) {\n            return;\n        }\n\n        if (this.props.isResponsive) {\n            this.props.toggleDropDown(instanceId);\n        }\n\n        if (this.props.isEmoticonSectionOpen) {\n            this.props.closeEmoticonSection(instanceId);\n        }\n\n\t    if (this.props.isToySectionOpen) {\n\t\t    this.props.closeToySection(instanceId);\n\t    }\n\n        if (this.props.isGiftSectionOpen) {\n            this.props.closeGiftSection(instanceId);\n        }\n    };\n\n    private onStartRecording = () => {\n        this.props.setIsRecordingAudioMessage(this.props.instanceId, true);\n    }\n}\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    giftPages: selectors.getGiftPages(store, instanceId),\n    gifts: selectors.getTranslatedGifts(store, instanceId),\n    hasEditor: selectors.hasEditor(store, instanceId),\n    hasFreeMessages: selectors.hasFreeMessages(store, instanceId),\n    currency: selectors.getCurrency(store, instanceId),\n    isEmoticonSectionOpen: selectors.isEmoticonSectionOpen(store, instanceId),\n    isGiftSectionOpen: selectors.isGiftSectionOpen(store, instanceId),\n    isToySectionOpen: selectors.isToySectionOpen(store, instanceId),\n    isInteractive: selectors.isInteractive(store, instanceId),\n    messagePrice: selectors.getMessagePrice(store, instanceId),\n    translation: selectors.getTranslation(store, instanceId),\n    isDropDownOpen: selectors.isDropDownMenuOpen(store, instanceId),\n    isVideoChatOpen: selectors.isVideoChatOpen(store, instanceId),\n    activeEmoticon: selectors.getActiveEmoticon(store, instanceId),\n    activeGift: selectors.getActiveGift(store, instanceId),\n    activeMention: selectors.getActiveMention(store, instanceId),\n    isResponsive: selectors.isResponsive(store, instanceId),\n    isFullscreen: selectors.isFullScreen(store, instanceId),\n    hasSendMessageButton: selectors.hasSendMessageButton(store, instanceId),\n    hasOnlySendButton: selectors.hasOnlySendButton(store, instanceId),\n    hasAudioMessages: selectors.hasAudioMessages(store, instanceId),\n    shouldDisplayMessageSectionButtons: selectors.shouldDisplayMessageSectionButtons(store, instanceId),\n    hasToyControlButton: selectors.hasToyControlButton(store, instanceId),\n    isAnyTextInEditor: selectors.isAnyTextInEditor(store, instanceId)\n});\n\nconst mapDispatchToProps = {\n    syncQuantitiesOnMessageSent,\n    requestSendMessage,\n    closeEmoticonSection,\n    openEmoticonSection,\n    closeGiftSection,\n    toggleToySection,\n    toggleDropDown,\n    closeSections,\n    setIsResponsive,\n    setIsRecordingAudioMessage,\n\tcloseToySection\n};\n\nexport default withRedux(MessageSectionContainer, mapStateToProps, mapDispatchToProps, {\n\twithResizeDetector,\n\twithTheme \n});\n","import MessageSectionContainer from './MessageSectionContainer';\n\nexport default MessageSectionContainer;","import ActionSectionContainer from './ActionSectionContainer';\n\nexport default ActionSectionContainer;","import styled from 'styled-components';\n\ninterface IProfileNameWrapperProps {\n    hasModelProfilePicture: boolean;\n}\n\ninterface IProfileOnlineBulletProps {\n    isModelOnline: boolean;\n}\n\nexport interface IProfileNameProps {\n    title?: string;\n    onClick: () => void;\n}\n\nexport const ProfileInfoInnerWrapper = styled.div.attrs({ className: 'profile-wrapper' })`\n    margin-top: 0;\n`;\n\nexport const ProfileNameWrapper = styled.div.attrs({ className: 'profile-name-wrapper' })<IProfileNameWrapperProps>`\n    ${props => !props.hasModelProfilePicture ? 'padding-top: 12px' : 'padding: 5px 0'};\n    \n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n`;\n\nexport const ActionSectionWrapper = styled.div.attrs({ className: 'action-section-wrapper' })`\n    width: 100%;\n`;\n\nexport const ProfileName = styled.div<IProfileNameProps>`\n    ${props => props.title && `\n        cursor: pointer;\n        \n        &:hover {\n            color: ${props.theme.colors.profileLinkHover};\n        }\n    `}\n    \n    font-family: ${(props) => props.theme.typography.fontFamily};\n    color: ${(props) => props.theme.colors.profileLink};   \n    font-weight: ${(props) => props.theme.typography.weight.medium};\n\n    font-size: 23px;\n    display: inline-block;\n    text-decoration: none;\n`;\n\nexport const Motto = styled.div`\n    font-family: ${(props) => props.theme.typography.fontFamily};\n    font-weight: ${(props) => props.theme.typography.weight.regular};\n    color: ${(props) => props.theme.colors.profileMotto};\n\n    width: 80%;\n    margin: 5px auto 15px;\n    text-align: center;\n    font-size: 14px;\n`;\n\nexport const FeatureWrapper = styled.div`\n    margin-left: 7px;\n    display: inline-block;\n`;\n\nexport const ProfileOnlineBullet = styled.span<IProfileOnlineBulletProps>`\n    height: 7px;\n    width: 7px;\n    background-color: ${props => props.isModelOnline \n        ? props.theme.colors.onlineBulletColor\n        : props.theme.colors.offlineBulletColor\n    };\n    border-radius: 50%;\n    display: inline-block;\n    margin-right: 7px;\n`;\n","import styled from \"styled-components\";\nimport withIdentifier, { DomIdentifier } from \"../../hoc/withIdentifier\";\n\nexport const FavoriteIcon = withIdentifier(styled.div`\n    cursor: pointer;\n    color: #FF4D3C;\n    font-size: 18px;\n`, DomIdentifier.FavoriteButton);","import * as React from 'react';\nimport { FavoriteIcon } from './style';\n\ninterface IProps {\n    className: string;\n    title: string;\n    onClick: () => void;\n}\n\nconst Favorite = (props: IProps) => (\n    <FavoriteIcon \n        className={props.className}\n        title={props.title}\n        onClick={props.onClick}\n    />\n);\n\nexport default Favorite;","import { IContainerProps as IProps } from \"./types\";\n\nexport const onClick = (props: IProps) => () => {\n    props.requestSetFavorite(props.instanceId, !props.isModelFavorite)\n};\n","import { Action } from 'redux-actions';\nimport { findLast, isEmpty } from 'lodash';\nimport { put, select, takeEvery, call } from 'redux-saga/effects';\nimport {\n\tACTION,\n\tCMDC_CHANNELINFO,\n\tCMDP_GETCHANNELINFO,\n\tCMDP_GETCHANNELINFO_RESPONSE,\n\tCMDP_SETCHANNELINFO,\n\tCMDP_SETCHANNELINFO_RESPONSE,\n\tICOMMAND,\n\tSupportedLanguage,\n\tIChannelInfoBackEndPayload\n} from 'vxcontrol-client-lib';\n\nimport utils from '../../utils';\nimport selectors from '../../redux/selectors';\nimport ApiService from '../../services/ApiService';\nimport { IContactNote } from '../../redux/store';\nimport { ActionIds } from '../../redux/interfaces';\nimport { createAction, createActionType } from '../../redux/utils';\nimport { IPayload } from '../../redux/interfaces';\nimport { closeContactNote, resetContactNote, setContactNote } from '../../redux/modules/messenger';\nimport {\n\tresetModelName,\n\tresetMotto,\n\tresetProfilePicture,\n\tsetFavorite,\n\tsetFreeModelMessages,\n\tsetModelFreeChatDuration,\n\tsetModelName,\n\tsetProfilePicture,\n\tsetModelPrices,\n\tsetMotto\n} from '../../redux/modules/model';\n\nconst createChannelInfoActionType = createActionType(ActionIds.CHANNEL_INFO, { isSagaAction: true });\n\n// Actions\nconst REQUEST_GET_CHANNEL_INFO = createChannelInfoActionType(\"REQUEST_GET_CHANNEL_INFO\");\nexport const RECEIVE_GET_CHANNEL_INFO = createChannelInfoActionType(\"RECEIVE_GET_CHANNEL_INFO\");\nconst REQUEST_SET_CONTACT_NOTE = createChannelInfoActionType(\"REQUEST_SET_CONTACT_NOTE\");\nconst REQUEST_SET_FAVORITE = createChannelInfoActionType(\"REQUEST_SET_FAVORITE\");\nconst RECEIVE_SET_CHANNEL_INFO = createChannelInfoActionType(\"RECEIVE_SET_CHANNEL_INFO\");\n\n// Action Creators\nexport const requestGetChannelInfo = createAction(REQUEST_GET_CHANNEL_INFO);\nexport const requestSetContactNote = createAction<string>(REQUEST_SET_CONTACT_NOTE);\nexport const requestSetFavorite = createAction<boolean>(REQUEST_SET_FAVORITE);\nexport const onReceiveGetChannelInfo = createAction<ICOMMAND>(RECEIVE_GET_CHANNEL_INFO);\nexport const onReceiveSetChannelInfo = createAction<ICOMMAND>(RECEIVE_SET_CHANNEL_INFO);\n\n/** Set contact note and model's favorite in the Redux store */\nconst setFavoriteAndContactNoteSaga = function*(instanceId: string, note: string, regularCustomer: boolean) {\n    yield put(note ? setContactNote(instanceId, note) : resetContactNote(instanceId));\n\tyield put(setFavorite(instanceId, regularCustomer));\n}\n\n/** Sagas for Get Channel Info */\nconst requestGetChannelInfoSaga = function* ({ payload: { instanceId }}: Action<IPayload>) {\n    const channelId = yield select(selectors.getChannelId, instanceId);\n\n    const command: CMDP_GETCHANNELINFO = {\n        action: ACTION.CMDP_GETCHANNELINFO,\n        params: { channelId }\n    };\n\n    ApiService.getService(instanceId).sendCommand(command);\n};\n\nconst requestSetChannelInfoSaga = function* ({ payload, type }: Action<IPayload>) {\n    const { instanceId, value } = payload;\n\n    const channelId: string = yield select(selectors.getChannelId, instanceId);\n    const sessionID: string = yield select(selectors.getSessionId, instanceId);\n    const contactNote: IContactNote = yield select(selectors.getContactNote, instanceId);\n    const isModelFavorite: boolean = yield select(selectors.isModelFavorite, instanceId);\n\n    // Set contact note and model's favorite status params for our request\n    const note: string = type === REQUEST_SET_CONTACT_NOTE ? value : contactNote.text;\n    const isFavorite: boolean = type === REQUEST_SET_FAVORITE ? value : isModelFavorite;\n    const regularCustomer = isFavorite ? \"true\" : \"false\";\n\n    const command: CMDP_SETCHANNELINFO = {\n        action: ACTION.CMDP_SETCHANNELINFO,\n        params: {\n            channelId,\n            sessionID,\n            note,\n            regularCustomer\n        }\n    };\n\n    ApiService.getService(instanceId).sendCommand(command);\n};\n\nconst receiveSetChannelInfoSaga = function* ({ payload }: Action<IPayload<CMDP_SETCHANNELINFO_RESPONSE>>) {\n    const { instanceId, value } = payload;\n\n    if (isEmpty(value) || isEmpty(value.params)) {\n        return;\n    }\n\n    const { note, regularCustomer } = value.params;\n    yield call(setFavoriteAndContactNoteSaga, instanceId, note || '', regularCustomer === 'true');\n\n    /** Close contact note dialog before backend's response for faster feedback */\n    const contactNote: IContactNote = yield select(selectors.getContactNote, instanceId);\n    if (contactNote.isOpen) {\n        yield put(closeContactNote(instanceId));\n    }\n};\n\nconst receiveGetChannelInfoSaga = function* ({ payload }: Action<IPayload<CMDP_GETCHANNELINFO_RESPONSE>>) {\n    const { instanceId, value } = payload;\n\n    if (isEmpty(value) || isEmpty(value.payload)) {\n        return;\n\t}\n\n\tconst data = value.payload as IChannelInfoBackEndPayload;\n\n    // Set client's free messages and videochat time for this specific model\n    const { freeChatDuration, freeMessagesCount } = data;\n    yield put(setFreeModelMessages(instanceId, freeMessagesCount));\n    yield put(setModelFreeChatDuration(instanceId, freeChatDuration));\n\n    // Set model's prices for all the not-free features the client will have in the messenger\n    if (data) {\n        yield put(setModelPrices(instanceId, {\n            messagePrice: data.messagePrice || 0,\n            videoChatPrice: data.videoChatPrice || 0,\n            voyeurChatPrice: data.voyeurChatPrice || 0\n        }));\n    }\n\n    const modelInfo = findLast(value.commands,\n        (command: ICOMMAND) => command.action === ACTION.CMDC_CHANNELINFO\n    ) as CMDC_CHANNELINFO;\n\n    if (isEmpty(modelInfo) || isEmpty(modelInfo.params)) {\n        return;\n    }\n\n    const { ualias, imgSrc, regularCustomer, note } = modelInfo.params;\n    const modelInfoPayload = modelInfo.params.payload;\n\n\tyield call(setFavoriteAndContactNoteSaga, instanceId, note || '', regularCustomer === 'true');\n\n    yield put(ualias ? setModelName(instanceId, ualias) : resetModelName(instanceId));\n    yield put(imgSrc ? setProfilePicture(instanceId, imgSrc) : resetProfilePicture(instanceId));\n\n    /**\n     * Set model's motto if we receive an undeleted one.\n     * Reset motto to its initial value if there comes\n     * no payload in the response or it has been deleted.\n     */\n    if (modelInfoPayload) {\n        try {\n            const mottoPayload = JSON.parse(modelInfoPayload as string);\n            if (isEmpty(mottoPayload) || isEmpty(mottoPayload.motto)) {\n                yield put(resetMotto(instanceId));\n                return;\n            }\n\n            const { en, de, es, deleted } = mottoPayload.motto;\n\n            if (deleted) {\n                yield put(resetMotto(instanceId));\n            } else {\n                const language: SupportedLanguage = yield select(selectors.getLanguage, instanceId);\n                const motto = utils.getValueByLanguage(language, {\n\t\t\t\t\tEN: en,\n\t\t\t\t\tDE: de,\n\t\t\t\t\tES: es\n\t\t\t\t});\n\n                yield put(setMotto(instanceId, motto));\n            }\n        } catch {\n            yield put(resetMotto(instanceId));\n        }\n\n    } else {\n        yield put(resetMotto(instanceId));\n    }\n};\n\n/** Mapping sagas to actions */\nconst watchAll = function* () {\n    yield takeEvery(REQUEST_GET_CHANNEL_INFO, requestGetChannelInfoSaga);\n    yield takeEvery(RECEIVE_GET_CHANNEL_INFO, receiveGetChannelInfoSaga);\n\n    yield takeEvery(REQUEST_SET_FAVORITE, requestSetChannelInfoSaga);\n    yield takeEvery(REQUEST_SET_CONTACT_NOTE, requestSetChannelInfoSaga);\n    yield takeEvery(RECEIVE_SET_CHANNEL_INFO, receiveSetChannelInfoSaga);\n};\n\nexport default watchAll;\n\n","import * as React from 'react';\n\nimport Favorite from './Favorite';\nimport { onClick } from './utils';\nimport selectors from '../../../redux/selectors';\nimport IStore from '../../../redux/store';\nimport { requestSetFavorite } from '../../../sagas/websockets/channelInfo';\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\nimport { IContainerProps as IProps } from \"./types\";\n\nconst FavoriteContainer = (props: IProps) => {\n    const className = props.isModelFavorite\n        ? \"-icon-heart-full\"\n        : \"-icon-heart-line\";\n\n    const { addFavorite, removeFavorite } = props.translation.user;\n    const title = props.isModelFavorite ? removeFavorite : addFavorite;\n\n    return (\n        <Favorite\n            className={className}\n            title={title}\n            onClick={onClick(props)}\n        />\n    );\n};\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    isModelFavorite: selectors.isModelFavorite(store, instanceId),\n    translation: selectors.getTranslation(store, instanceId)\n});\n\nconst mapDispatchToProps = {\n    requestSetFavorite\n};\n\nexport default withRedux(FavoriteContainer, mapStateToProps, mapDispatchToProps);\n","import FavoriteContainer from './FavoriteContainer';\n\nexport default FavoriteContainer;","import styled from \"styled-components\";\nimport withIdentifier, { DomIdentifier } from \"../../hoc/withIdentifier\";\n\nexport const ContactNoteIcon = withIdentifier(styled.div`\n\tcolor: ${(props) => props.theme.colors.noteButton};\n\n    cursor: pointer;\n    font-size: 18px;\n`, DomIdentifier.ContactNoteButton);\n","import * as React from 'react';\nimport { ContactNoteIcon } from './style';\n\ninterface IProps {\n    title: string;\n    hasContactNoteText: boolean;\n\n    onClick: () => void;\n}\n\nconst ContactNote = (props: IProps) => (\n    <ContactNoteIcon\n\t\ttitle={props.title}\n\t\tclassName={`-icon-note-${props.hasContactNoteText ? \"full\" : \"line\" }`} \n        onClick={props.onClick}\n    />\n);\n\nexport default ContactNote;\n","import * as React from 'react';\n\nimport ContactNote from './ContactNote';\nimport selectors from '../../../redux/selectors';\nimport { ActionDispatcher} from '../../../redux';\nimport IStore, { ITranslation } from '../../../redux/store';\nimport { openContactNote } from '../../../redux/modules/messenger';\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\n\ninterface IStoreProps {\n    hasContactNoteText: boolean;\n    translation: ITranslation;\n\n    openContactNote: ActionDispatcher;\n}\n\ntype IProps = IInstanceProps & IStoreProps;\n\nconst onContactNoteClick = (props: IProps) => () => {\n    props.openContactNote(props.instanceId);\n};\n\nconst ContactNoteContainer = (props: IProps) => (\n    <ContactNote\n        hasContactNoteText={props.hasContactNoteText}\n        title={props.translation.user.addNote}\n        onClick={onContactNoteClick(props)}\n    />\n);\n\nconst mapStateToProps = (store: IStore, { instanceId}: IInstanceProps) => ({\n    hasContactNoteText: selectors.hasContactNoteText(store, instanceId),\n    translation: selectors.getTranslation(store, instanceId)\n});\n\nconst mapDispatchToProps = {\n    openContactNote\n};\n\nexport default withRedux(ContactNoteContainer, mapStateToProps, mapDispatchToProps);","import ContactNoteContainer from './ContactNoteContainer';\n\nexport default ContactNoteContainer;","import * as React from 'react';\nimport { ITranslation } from '../../../redux/store';\nimport ActionSectionContainer from '../ActionSection';\nimport {\n    ActionSectionWrapper,\n    FeatureWrapper,\n    Motto,\n    ProfileInfoInnerWrapper,\n    ProfileName,\n    ProfileNameWrapper,\n    IProfileNameProps,\n    ProfileOnlineBullet\n} from './style';\nimport FavoriteContainer from '../Favorite';\nimport ContactNoteContainer from '../ContactNote';\nimport { isMobile } from 'react-device-detect';\n\ninterface IProps {\n    children?: any;\n    hasFavorite: boolean;\n    hasContactNote: boolean;\n    hasModelName: boolean;\n    hasModelProfilePicture: boolean;\n    modelName: string;\n    tooltipText: string;\n    shouldRenderMotto: boolean;\n    hasActionSectionInProfile: boolean;\n    hasProfileClickHover: boolean;\n    isModelOnline: boolean;\n    translation: ITranslation;\n\n    onClickTitle: () => void;\n}\n\nconst ProfileInfo = (props: IProps) => {\n\n    const profileNameProps: IProfileNameProps = {\n        onClick: props.onClickTitle\n    };\n\n    if (props.hasProfileClickHover) {\n        profileNameProps.title = props.translation.user.visitProfile;\n    }\n\n    return (\n        <ProfileInfoInnerWrapper>\n            <ProfileNameWrapper hasModelProfilePicture={props.hasModelProfilePicture}>\n                {isMobile && <ProfileOnlineBullet isModelOnline={props.isModelOnline} />}\n\n                {props.hasModelName &&\n                    <ProfileName {...profileNameProps}>\n                        {props.modelName}\n                    </ProfileName>\n                }\n    \n                {props.hasFavorite &&\n                    <FeatureWrapper>\n                        <FavoriteContainer />\n                    </FeatureWrapper>\n                }\n    \n                {props.hasContactNote &&\n                    <FeatureWrapper>\n                        <ContactNoteContainer />\n                    </FeatureWrapper>\n                }\n            </ProfileNameWrapper>\n    \n            <ActionSectionWrapper>\n                {props.shouldRenderMotto && props.children &&\n                    <Motto>{props.children}</Motto>\n                }\n    \n                {props.hasActionSectionInProfile && <ActionSectionContainer />}\n            </ActionSectionWrapper>\n        </ProfileInfoInnerWrapper>\n    );\n};\n\nexport default ProfileInfo;\n","import AppService from '../../../services/AppService';\nimport utils from '../../../utils';\nimport { IContainerProps as IProps } from \"./types\";\n\nexport const onClickTitle = (props: IProps) => () => {\n    const appService = AppService.getService(props.instanceId);\n\n    if (appService.onClickProfile) {\n        appService.onClickProfile();\n    }\n};\n\nexport const hasProfileClickHover = (props:IProps) =>\n    utils.hasHookConfigured(AppService.getService(props.instanceId).onClickProfile);\n\n","import * as React from 'react';\n\nimport ProfileInfo from './ProfileInfo';\nimport selectors from '../../../redux/selectors';\nimport { onClickTitle, hasProfileClickHover } from './utils';\nimport IStore from '../../../redux/store';\nimport withRedux from '../../hoc/withRedux';\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport { IContainerProps as IProps, IContainerComponentProps as IComponentProps } from \"./types\";\n\nconst ProfileInfoContainer = (props: IProps) => (\n    <ProfileInfo\n        children={props.children}\n        hasFavorite={props.hasFavorite}\n        hasModelName={props.hasModelName}\n        isModelOnline={props.isModelOnline}\n        shouldRenderMotto={props.shouldRenderMotto}\n        hasProfileClickHover={hasProfileClickHover(props)}\n        hasContactNote={props.hasContactNote}\n        hasModelProfilePicture={props.hasModelProfilePicture}\n        hasActionSectionInProfile={props.hasActionSectionInProfile}\n        modelName={props.modelName}\n        tooltipText={props.tooltipText}\n        translation={props.translation}\n\n        onClickTitle={onClickTitle(props)}\n    />\n);\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    hasFavorite: selectors.hasFavorite(store, instanceId),\n    hasContactNote: selectors.hasContactNote(store, instanceId),\n    hasModelName: selectors.hasModelName(store, instanceId),\n    hasModelProfilePicture: selectors.hasModelProfilePicture(store, instanceId),\n    shouldRenderMotto: selectors.shouldRenderMotto(store, instanceId),\n    isModelOnline: selectors.isModelOnline(store, instanceId),\n    hasActionSectionInProfile: selectors.hasActionSectionInProfile(store, instanceId),\n    modelName: selectors.getModelName(store, instanceId),\n    translation: selectors.getTranslation(store, instanceId)\n});\n\nexport default withRedux<IComponentProps>(ProfileInfoContainer, mapStateToProps);\n","import ProfileInfoContainer from \"./ProfileInfoContainer\";\n\nexport default ProfileInfoContainer;","import ProfilePictureContainer from './ProfilePictureContainer';\n\nexport default ProfilePictureContainer;","import * as React from 'react';\nimport { IChat, ITranslation } from '../../../redux/store';\nimport ProfileInfoContainer from '../ProfileInfo';\nimport ProfilePictureContainer from '../ProfilePicture';\n\ninterface IProps {\n    chat?: IChat;\n    motto: string;\n    isVideochatOpen: boolean;\n    hasModelProfilePicture?: boolean;\n    hasModelPictureInProfile: boolean;\n    translation: ITranslation;\n\n    onClickProfilePicture: () => any;\n}\n\nconst Profile = (props: IProps) => {\n    const {visitProfile} = props.translation.user;\n\n    return (\n        <>\n            {props.hasModelPictureInProfile && \n                <ProfilePictureContainer\n                    tooltipText={visitProfile}\n                    onClick={props.onClickProfilePicture}\n                />\n            }\n\n            <ProfileInfoContainer tooltipText={visitProfile}>\n                {props.motto}\n            </ProfileInfoContainer>\n        </>\n    );\n};\n\nexport default Profile;\n","import styled from \"styled-components\";\nimport withIdentifier, { DomIdentifier } from \"../../hoc/withIdentifier\";\n\nexport const ProfileWrapper = withIdentifier(styled.div`\n    position: relative;\n`, DomIdentifier.Profile);\n","import AppService from '../../../services/AppService';\nimport { IContainerProps as IProps } from \"./types\";\n\nexport const onClickProfilePicture = (props: IProps) => () => {\n    const appService = AppService.getService(props.instanceId);\n\n    if (appService.onClickProfile) {\n        appService.onClickProfile();\n    }\n};\n","import * as React from 'react';\n\nimport Profile from './Profile';\nimport { ProfileWrapper } from './style';\nimport { onClickProfilePicture } from './utils';\nimport selectors from '../../../redux/selectors';\nimport IStore from '../../../redux/store';\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\nimport { IContainerProps as IProps } from \"./types\";\n\nconst ProfileContainer = (props: IProps) => (\n    <ProfileWrapper>\n        <Profile\n            motto={props.motto}\n            isVideochatOpen={props.isVideochatOpen}\n            translation={props.translation}\n            onClickProfilePicture={onClickProfilePicture(props)}\n            hasModelProfilePicture={props.hasModelProfilePicture}\n            hasModelPictureInProfile={props.hasModelPictureInProfile}\n        />\n    </ProfileWrapper>\n);\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    isVideochatOpen: selectors.isVideoChatOpen(store, instanceId),\n    motto: selectors.getModelMotto(store, instanceId),\n    translation: selectors.getTranslation(store, instanceId),\n    hasModelProfilePicture: selectors.hasModelProfilePicture(store, instanceId),\n    hasModelPictureInProfile: selectors.hasModelPictureInProfile(store, instanceId)\n});\n\nexport default withRedux(ProfileContainer, mapStateToProps);\n","import ProfileContainer from './ProfileContainer'\n\nexport default ProfileContainer;","import styled from 'styled-components';\nimport config from '../../../static/config';\n\ninterface IWrapperProps {\n    isFullscreen?: boolean;\n}\n\nexport const FullscreenFooterWrapper = styled.div.attrs({ className: \"fullscreen-footer-wrapper\" })`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: relative;\n    text-align: center;\n    box-sizing: border-box;\n    background-color: ${(props) => props.theme.colors.messengerWrapper};\n    height: ${config.viewSizes.fullScreen.bottomBarHeight}px;\n`;\n\nexport const ProfileContainerWrapper = styled.div`\n    flex: 0 0 50%;\n    padding-left: 25px;\n    box-sizing: border-box;\n    \n    .profile-wrapper {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n    \n    .profile-name-wrapper {\n        width: auto;\n        flex: 0 0 auto;\n    }\n    \n    .action-section-wrapper {\n        width: auto;\n        flex: 1 0 auto;\n        padding: 0;\n    }\n    \n    .action-section {\n        padding-left: 25px;\n        align-items: left;\n        justify-content: left;\n    }\n`;\n\nexport const MessageSectionContainerWrapper = styled.div<IWrapperProps>`\n    ${props => !props.isFullscreen && 'height: 100%;'}\n    flex: 0 0 50%;\n    padding-right: 25px;\n    box-sizing: border-box;\n    position: relative;\n    align-self: flex-end;\n    \n    .message-section-wrapper {\n        border-left: 2px solid #DBDDDE;\n        padding-left: 5px;\n    }\n    \n    .messenger-box {\n        max-height: ${config.viewSizes.fullScreen.bottomBarHeight}px;\n    }\n`;\n","import styled from \"styled-components\";\nimport { ICountdownWarning, ITranslation } from '../../../redux/store';\nimport config from '../../../static/config';\n\ninterface ICountdownWarningProps {\n    translation: ITranslation;\n    warning?: ICountdownWarning;\n    isResponsive: boolean;\n    isFullscreen: boolean;\n}\n\nexport const CountdownWarningWrapper = styled.div.attrs({ className: \"countdownWarning\" })<ICountdownWarningProps>`\n    ${props => props.theme && `\n        border-top: 1px solid ${props.theme.colors.messageEditorTextColor};\n        background-color: ${props.theme.colors.timerBgColor};\n        `\n    }\n        \n\tposition: relative;\n\tbottom: 0;\n    box-sizing: content-box;\n    z-index: 4;\n    padding: 5px;\n    width: 100%;\n    height: ${config.viewSizes.countdownWarning.height}px;\n    \n`;\n\nexport const CountdownWarningContentWrapper = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    width: 100%;\n    ${props => props.theme && `\n        color:  ${props.theme.colors.messageEditorTextColor};\n        font-family: ${props.theme.typography.fontFamily};\n        font-weight: ${props.theme.typography.weight.regular};\n    `}\n    \n    & .textWarning {\n        color: ${props => props.theme.colors.timerTextColor};\n        font-family: ${props => props.theme.typography.fontFamily};\n\t\tfont-weight: ${props => props.theme.typography.weight.regular};\n\t\t\n        flex-flow: wrap;\n        flex-grow: 1;\n        margin: 0 10px;\n        display: flex;\n        flex-direction: row;\n        justify-content: flex-start;\n        align-items: center;\n        align-content: center;\n        font-size: 15px;\n    }\n    \n    & .rechargeNowWrapper {\n        white-space: nowrap;\n    }\n    \n    & .rechargeNowLink {\n        padding-left: 8px;\n        text-decoration: underline;\n        cursor: pointer;\n    }\n    \n    & .topUpButton {\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n    }\n`;\n","import * as React from 'react';\nimport { ICountdownWarning, CountdownWarningType, ITranslation } from '../../../redux/store';\nimport Timer from '../../common/Timer';\nimport { CountdownWarningContentWrapper, CountdownWarningWrapper } from './style';\nimport config from \"../../../static/config\";\n\nexport interface ICountdownWarningProps {\n    translation: ITranslation;\n    warning: ICountdownWarning;\n    isResponsive: boolean;\n    isFullscreen: boolean;\n\n    onAnswer: () => any;\n    onTimeIsOver?: () => any;\n    updateCountdownWarningTime?: (time: number) => any;\n}\n\n/**\n * Stateless component used to deal with various types of countdown warnings\n * @param props\n * @constructor\n */\nconst CountdownWarning = (props: ICountdownWarningProps) => {\n    const { warning: { type, time } } = props;\n    const { lowBalance, chargeNow } = props.translation.chat;\n    const totalTime = config.videoChatTimeLimits.liveChatStartWarning;\n\n    /** Translations for warnings */\n    const warningTranslations: { [warningType: string]: string } = {};\n    warningTranslations[CountdownWarningType.OUT_OF_BALANCE] = lowBalance;\n    warningTranslations[CountdownWarningType.ONE_CLICK_OUT_OF_BALANCE] = lowBalance;\n\n    const rechargeNowLink = <a\n        onClick={props.onAnswer}\n        className=\"rechargeNowLink\"\n    >\n        {chargeNow}\n    </a>;\n\n    const outOfBalanceWarning = (\n        <>\n            <Timer\n                currentTime={totalTime - time}\n                totalTime={totalTime}\n                onUnmount={props.updateCountdownWarningTime}\n                onTimeIsOver={props.onTimeIsOver}\n            />\n            <span className=\"textWarning\">\n                <span>\n                    {warningTranslations[type]}\n                    <span className=\"rechargeNowWrapper\">{rechargeNowLink}</span>\n                </span>\n            </span>\n        </>\n    );\n\n    const warnings: { [warningType: string]: any } = {};\n    warnings[CountdownWarningType.OUT_OF_BALANCE] = outOfBalanceWarning;\n    warnings[CountdownWarningType.ONE_CLICK_OUT_OF_BALANCE] = outOfBalanceWarning;\n\n    return (\n        <CountdownWarningWrapper\n            isFullscreen={props.isFullscreen}\n            isResponsive={props.isResponsive}\n            warning={props.warning}\n            translation={props.translation}\n        >\n            {props.warning &&\n                <CountdownWarningContentWrapper>\n                    {warnings[type]}\n                </CountdownWarningContentWrapper>\n            }\n        </CountdownWarningWrapper>\n    );\n};\n\nexport default CountdownWarning;\n","import * as React from 'react';\n\nimport CountdownWarning from './CountdownWarning';\nimport selectors from \"../../../redux/selectors\";\nimport { ActionDispatcher } from \"../../../redux\";\nimport { rechargeExternal } from '../../../sagas/common/recharge';\nimport { openCountdownWarning } from '../../../redux/modules/messenger';\nimport {closeFullscreen, setVideoChatTimeLimit} from '../../../redux/modules/videochat';\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\nimport IStore, { ICountdownWarning, ITranslation, KnownAnswerType } from '../../../redux/store';\nimport { openLoadAccountOneClickPrompt, IOpenLoadAccountPayload } from \"../../../sagas/common/userPrompt\";\n\ninterface IComponentProps {\n    className?: string;\n}\n\nexport interface IStoreProps {\n    isResponsive: boolean;\n    isFullscreen: boolean;\n    isOneClickRechargeAvailable: boolean;\n    translation: ITranslation;\n    warning?: ICountdownWarning;\n\n    rechargeExternal: ActionDispatcher;\n    closeFullscreen: ActionDispatcher;\n    openCountdownWarning: ActionDispatcher<ICountdownWarning>;\n    setVideoChatTimeLimit: ActionDispatcher<number>;\n    openLoadAccountOneClickPrompt: ActionDispatcher<IOpenLoadAccountPayload>\n}\n\ntype IProps = IComponentProps & IStoreProps & IInstanceProps;\n\nclass CountdownWarningContainer extends React.Component<IProps> {\n    render() {\n        return (\n            <>\n                {this.props.warning &&\n                    <CountdownWarning\n                        onAnswer={this.openRecharge}\n                        onTimeIsOver={this.onTimeIsOver}\n                        translation={this.props.translation}\n                        warning={this.props.warning}\n                        isResponsive={this.props.isResponsive}\n                        isFullscreen={this.props.isFullscreen}\n                        updateCountdownWarningTime={this.updateCountdownWarningTime}\n                    />\n                }\n            </>\n        );\n    }\n\n    private openRecharge = () => {\n        const { instanceId } = this.props;\n\n        if (this.props.isOneClickRechargeAvailable) {\n            this.props.openLoadAccountOneClickPrompt(instanceId, { answer: KnownAnswerType.OK });\n            return;\n        }\n\n        if (this.props.isFullscreen) {\n            this.props.closeFullscreen(instanceId);\n        }\n\n        this.props.rechargeExternal(instanceId);\n    };\n\n    private updateCountdownWarningTime = (time: number) => {\n        if (this.props.warning) {\n            this.props.openCountdownWarning(this.props.instanceId, {\n                ...this.props.warning,\n                time\n            });\n        }\n    };\n\n    private onTimeIsOver = () => {\n        this.props.setVideoChatTimeLimit(this.props.instanceId, 0);\n    };\n}\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    translation: selectors.getTranslation(store, instanceId),\n    isOneClickRechargeAvailable: selectors.isOneClickRechargeAvailable(store, instanceId),\n    isResponsive: selectors.isResponsive(store, instanceId),\n    isFullscreen: selectors.isFullScreen(store, instanceId),\n    warning: selectors.getCountdownWarning(store, instanceId)\n});\n\nconst mapDispatchToProps = {\n    openLoadAccountOneClickPrompt,\n    rechargeExternal,\n    openCountdownWarning,\n    closeFullscreen,\n    setVideoChatTimeLimit\n};\n\nexport default withRedux<IComponentProps>(CountdownWarningContainer, mapStateToProps, mapDispatchToProps);","import CountdownWarningContainer from './CountdownWarningContainer';\n\nexport default CountdownWarningContainer;","import { set } from 'lodash';\nimport styled from 'styled-components';\nimport { isMobile } from 'react-device-detect';\n\nimport config from '../../../static/config';\nimport withIdentifier, { DomIdentifier } from '../../hoc/withIdentifier';\n\ninterface IMentionSectionWrapperProps {\n\tisOpen: boolean;\n\tshouldDisplayCustomMentionSection: boolean;\n\tisFullScreen: boolean;\n}\n\nexport const selectStyles = ({ isFullScreen, shouldDisplayCustomMentionSection }) => {\n\tconst styles = {\n\t\tcontainer: () => ({\n\t\t\tposition: 'relative',\n\t\t\tboxSizing: 'border-box',\n\t\t\twidth: `calc(100% + ${isMobile || shouldDisplayCustomMentionSection ? 0 : 12}px)`,\n\t\t\tbottom: isFullScreen ? '100%' : '1px',\n\t\t\tzIndex: '4'\n\t\t}),\n\t\tmenu: (provided) => ({\n\t\t\t...provided,\n\t\t\ttop: 'auto',\n\t\t\tbottom: '0',\n\t\t\tleft: isMobile\n\t\t\t\t? '5px'\n\t\t\t\t: '0',\n\t\t\tmargin: '0',\n\t\t\tpadding: '0',\n\t\t\twidth: isMobile\n\t\t\t\t? 'calc(100% - 10px)'\n\t\t\t\t: shouldDisplayCustomMentionSection ? '100%' : 'auto',\n\t\t\tposition: 'relative',\n\t\t\tborderRadius: '0'\n\t\t}),\n\t\tmenuList: (provided) => ({\n\t\t\t...provided,\n\t\t\tpadding: '0',\n\t\t\tmaxHeight: '150px'\n\t\t}),\n\t\toption: (_, state) => ({\n\t\t\tbackgroundColor: state.isFocused ? '#ECECEE' : 'auto',\n\t\t\tcolor: 'black',\n\t\t\tpadding: '8px 10px',\n\t\t\tcursor: 'pointer'\n\t\t}),\n\t};\n\n\tif (!isMobile) {\n\t\tset(styles.menu, 'boxShadow', 'none');\n\t\tset(styles.menu, 'minWidth', '212px');\n\t\tset(styles.menu, 'maxWidth', '90%');\n\t}\n\n\tif (isFullScreen) {\n\t\tset(styles.container, 'left', '-5x');\n\t}\n\n\treturn styles;\n};\n\nexport const getMentionSectionWrapper = (identifier: DomIdentifier) => withIdentifier<IMentionSectionWrapperProps>(\n\tstyled.div<IMentionSectionWrapperProps>`\n\t\tmax-height: ${props => props.isOpen ? '100%' : '0'};\n\t\t\n\t\t${props => props.shouldDisplayCustomMentionSection\n\t\t? `\n\t\t\t\tbottom: ${props.isFullScreen ? '100%' : '0'};\n\t\t\t\ttransition: max-height ${config.popupsTransitionTime}s ease-in-out;\n\t\t\t\ttransition-delay: ${config.popupsTransitionTime};\n\t\t\t\toverflow: hidden;\n\t\t\t\twidth: 100%;\n\t\t\t`\n\t\t: `\n\t\t\t\tbottom: ${props.isFullScreen ? '100%' : '10px'};\n\t\t\t\t${isMobile ? `width: 100%;` : `left: 10px;`}\n\t\t\t`\n\t}\n\t\t\n\t\tposition: absolute;\n\t`, identifier\n);\n\n/**\n * Set styles for a certain div, but without styled components\n * because currently, the reference for a styled components element is not coming right.\n * FUTURE TODO try to use styled components again when upgrading the library\n * @param props\n */\nexport const getStylesForMentionSectionContainer = (props: IMentionSectionWrapperProps) => {\n\tif (!isMobile && !props.shouldDisplayCustomMentionSection) {\n\t\treturn {};\n\t}\n\n\tlet height = 0;\n\n\tif (props.isOpen) {\n\t\theight = props.shouldDisplayCustomMentionSection ? 180 : 150;\n\t}\n\n\treturn {\n\t\tposition: \"absolute\" as \"absolute\",\n\t\tleft: 0,\n\t\tbottom: 0,\n\t\twidth: '100%',\n\t\theight\n\t};\n};\n","import styled from 'styled-components';\n\nexport const ModelMentionOptionWrapper = styled.div`\n    display: flex;\n    align-items: center;\n`;\n\nexport const ModelName = styled.span`\n    margin-left: 5px;\n`;\n","import React from 'react';\nimport { Component } from 'react';\nimport { components, Props as ReactSelectProps } from 'react-select';\n\nimport { ModelMentionOptionWrapper, ModelName } from './style';\nimport SimpleModelPicture from '../../common/SimpleModelPicture';\nimport config from '../../../static/config';\n\ninterface IComponentProps {\n\tmodelName: string;\n\tmodelPicture: string;\n\tfocusedOption?: string;\n\n\tonMouseFocus: (id: string) => void;\n}\n\ntype IProps = ReactSelectProps & IComponentProps;\n\nclass CustomMentionOption extends Component<IProps> {\n\tcomponentDidUpdate(prevProps: IProps) {\n\t\tif (!prevProps.isFocused && this.props.isFocused) {\n\t\t\t// it is a mouse focus\n\t\t\tthis.props.onMouseFocus(this.props.data.id);\n\t\t}\n\t}\n\n\trender() {\n\t\tconst isFocused = this.props.focusedOption\n\t\t\t? this.props.focusedOption === this.props.data.id\n\t\t\t: this.props.isFocused;\n\n\t\tconst optionWrapper = (\n\t\t\t<ModelMentionOptionWrapper>\n\t\t\t\t<SimpleModelPicture\n\t\t\t\t\tpicture={this.props.modelPicture}\n\t\t\t\t\tsize={config.customMentionPictureSize}\n\t\t\t\t\tisForGroupChatMentions={true}\n\t\t\t\t/>\n\t\t\t\t<ModelName>\n\t\t\t\t\t{this.props.modelName}\n\t\t\t\t</ModelName>\n\t\t\t</ModelMentionOptionWrapper>\n\t\t);\n\n\t\treturn (\n\t\t\t<components.Option\n\t\t\t\t{...this.props}\n\t\t\t\tisFocused={isFocused}\n\t\t\t\tchildren={\n\t\t\t\t\tthis.props.data.label === this.props.modelName\n\t\t\t\t\t? optionWrapper\n\t\t\t\t\t: this.props.children\n\t\t\t\t}\n\t\t\t/>\n\t\t);\n\t}\n}\n\n\nexport default CustomMentionOption;\n","import React from 'react';\nimport { Props as ReactSelectProps } from 'react-select';\n\nimport CustomMentionOption from './CustomMentionOption';\nimport IStore from '../../../redux/store';\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport selectors from '../../../redux/selectors';\nimport withRedux from '../../hoc/withRedux';\n\ninterface IStoreProps {\n    modelName: string,\n    modelPicture: string;\n\tfocusedMentionOption: string;\n}\n\ninterface IComponentProps {\n\tfocusedOptionId?: string;\n\tonMouseFocus: (id: string) => void;\n}\n\ntype IProps = IStoreProps &IComponentProps & ReactSelectProps;\n\nconst CustomMentionOptionContainer = (props: IProps) => (\n    <CustomMentionOption\n\t\t{...props}\n\t\tmodelName={props.modelName}\n\t\tmodelPicture={props.modelPicture}\n\t\tfocusedOption={props.focusedMentionOption}\n\t\tonMouseFocus={props.onMouseFocus}\n    />\n);\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    modelName: selectors.getModelName(store, instanceId),\n    modelPicture: selectors.getModelProfilePicture(store, instanceId),\n\tfocusedMentionOption: selectors.getFocusedMentionOption(store, instanceId)\n});\n\nexport default withRedux<IComponentProps>(CustomMentionOptionContainer, mapStateToProps);\n","import CustomMentionOptionContainer from './CustomMentionOptionContainer'\n\nexport default CustomMentionOptionContainer;\n","import styled from 'styled-components';\n\nexport const Header = styled.div`\n\tfont-family: ${(props) => props.theme.typography.fontFamily};\n    font-weight: ${(props) => props.theme.typography.weight.thin};\n    color: ${(props) => props.theme.colors.mentionHeaderText};\n    \n    padding: 5px 10px;\n    background-color: white;\n`;\n\nexport const ModelName = styled.span`\n\tfont-weight: bold;\n\tcursor: pointer;\n`;\n\nexport const CustomMenu = styled.div`\n\tdisplay: 'flex';\n\tflexDirection: 'column';\n`;\n","import CloseButtonContainer from './CloseButtonContainer';\nimport CloseButton from './CloseButton';\n\nexport { CloseButton };\nexport default CloseButtonContainer;\n","import React from 'react';\nimport { components, Props as ReactSelectProps } from 'react-select';\n\nimport { CustomMenu, Header, ModelName } from './style';\nimport CloseButtonContainer from '../../common/CloseButton';\nimport { CloseButtonType } from '../../common/CloseButton/CloseButtonContainer';\nimport { ITranslation } from '../../../redux/store';\nimport { translationWithValues } from \"../../../utils/utils\";\n\ninterface IComponentProps {\n\tshouldDisplayCustomMentionSection: boolean;\n\tparticipantsNumber: number;\n\tmodelName: string;\n\ttranslation: ITranslation;\n\n\tonModelClick: () => null;\n\tonCloseMenu: () => null;\n}\n\ntype IProps = IComponentProps & ReactSelectProps;\n\nconst MentionMenu = (props: IProps) => (\n\tprops.shouldDisplayCustomMentionSection\n\t\t? <CustomMenu>\n\t\t\t<Header>\n\t\t\t\t{props.participantsNumber === 1\n\t\t\t\t\t? translationWithValues(props.translation.chat.groupChat.mentionHeaderPartOneSingle, {value: props.participantsNumber})\n\t\t\t\t\t: translationWithValues(props.translation.chat.groupChat.mentionHeaderPartOne, {value: props.participantsNumber})\n\t\t\t\t}\n\t\t\t\t\t<ModelName onClick={props.onModelClick}>\n\t\t\t\t\t\t{` ${props.modelName}`}\n\t\t\t\t\t</ModelName>\n\t\t\t\t{props.translation.chat.groupChat.mentionHeaderPartTwo}\n\t\t\t\t<CloseButtonContainer\n\t\t\t\t\tonClick={props.onCloseMenu}\n\t\t\t\t\tcloseButtonType={CloseButtonType.GROUP_CHAT_HEADER}\n\t\t\t\t/>\n\t\t\t</Header>\n\t\t\t<components.Menu {...props} />\n\t\t</CustomMenu>\n    \t: <components.Menu {...props} />\n);\n\nexport default MentionMenu;\n","import React from 'react';\nimport { Props as ReactSelectProps } from 'react-select';\n\nimport MentionMenu from './MentionMenu';\nimport IStore, { ITranslation } from '../../../redux/store';\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport selectors from '../../../redux/selectors';\nimport withRedux from '../../hoc/withRedux';\nimport {\n\tcloseMentionSection,\n\tsetActiveMention\n} from '../../../redux/modules/messenger';\nimport { ActionDispatcher } from '../../../redux';\n\ninterface IStoreProps {\n\tshouldDisplayCustomMentionSection: boolean;\n\tparticipantsNumber: number;\n\tmodelName: string;\n\ttranslation: ITranslation;\n\n\tcloseMentionSection: ActionDispatcher;\n\tsetActiveMention: ActionDispatcher<string>;\n}\n\ntype IProps = IStoreProps & ReactSelectProps & IInstanceProps;\n\nconst MentionMenuContainer = (props: IProps) => {\n\tconst onModelClick = () => {\n\t\tprops.setActiveMention(props.instanceId, props.modelName);\n\t\tprops.closeMentionSection(props.instanceId);\n\t};\n\n\tconst onCloseMenu = () => {\n\t\tprops.closeMentionSection(props.instanceId);\n\t};\n\n\treturn (\n\t\t<MentionMenu\n\t\t\t{...props}\n\t\t\tshouldDisplayCustomMentionSection={props.shouldDisplayCustomMentionSection}\n\t\t\tparticipantsNumber={props.participantsNumber}\n\t\t\tmodelName={props.modelName}\n\t\t\tonModelClick={onModelClick}\n\t\t\tonCloseMenu={onCloseMenu}\n\t\t\ttranslation={props.translation}\n\t\t/>\n\t);\n};\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n\tshouldDisplayCustomMentionSection: selectors.shouldDisplayCustomMentionSection(store, instanceId),\n\tparticipantsNumber: selectors.getGroupChatParticipantsNumber(store, instanceId),\n\tmodelName: selectors.getModelName(store, instanceId),\n\ttranslation: selectors.getTranslation(store, instanceId),\n});\n\nconst mapDispatchToProps = {\n\tcloseMentionSection,\n\tsetActiveMention\n};\n\nexport default withRedux(MentionMenuContainer, mapStateToProps, mapDispatchToProps);\n","import MentionMenuContainer from './MentionMenuContainer'\n\nexport default MentionMenuContainer;\n","import React from 'react';\nimport Select from 'react-select'\n\nimport { getMentionSectionWrapper, selectStyles } from './style';\nimport CustomMentionOptionContainer from '../CustomMentionOption';\nimport MentionMenuContainer from '../MentionMenu';\nimport { DomIdentifier } from '../../hoc/withIdentifier';\nimport {IStateOption} from \"./types\";\n\nexport interface IProps {\n\tmentionOptions: IStateOption[];\n\tisOpen: boolean;\n\tisFullScreen: boolean;\n\tshouldDisplayCustomMentionSection: boolean;\n\tinputValue: string;\n\tfocusedOptionId?: string;\n\n\tonChange: (value: any) => void;\n\tonMouseFocus: (id: string) => void;\n}\n\nconst MentionSection = (props: IProps) => {\n\tconst { shouldDisplayCustomMentionSection, isFullScreen, isOpen } = props;\n\n\tconst CustomOption = (innerProps) => (\n\t\t<div data-id={innerProps.data.id} >\n\t\t\t<CustomMentionOptionContainer {...innerProps}\n\t\t\t\t  onMouseFocus={props.onMouseFocus}\n\t\t\t/>\n\t\t</div>\n\t);\n\n\tconst components = {\n\t\tControl: () => <></>,\n\t\tNoOptionsMessage: () => <></>,\n\t\tOption: CustomOption,\n\t\tMenu: MentionMenuContainer\n\t};\n\n\tconst MentionSectionWrapper = getMentionSectionWrapper(\n\t\tprops.shouldDisplayCustomMentionSection\n\t\t\t? DomIdentifier.CustomMentionSection\n\t\t\t: DomIdentifier.MentionSection\n\t);\n\n\treturn (\n\t\t<MentionSectionWrapper\n\t\t\tisFullScreen={isFullScreen}\n\t\t\tisOpen={isOpen}\n\t\t\tshouldDisplayCustomMentionSection={shouldDisplayCustomMentionSection}\n\t\t>\n\t\t\t<Select\n\t\t\t\toptions={props.mentionOptions}\n\t\t\t\tstyles={selectStyles({ isFullScreen, shouldDisplayCustomMentionSection })}\n\t\t\t\tcomponents={components}\n\t\t\t\tmenuIsOpen={shouldDisplayCustomMentionSection || props.isOpen}\n\t\t\t\tonChange={props.onChange}\n\t\t\t\tinputValue={props.inputValue}\n\t\t\t\tisFocused={true}\n\t\t\t/>\n\t\t</MentionSectionWrapper>\n\t);\n};\n\nexport default MentionSection;\n","import { chain, findIndex, startsWith } from \"lodash\";\n\nimport { IStateOption } from \"./types\";\n\n/**\n * Convert participants to options\n * @param participants\n * @param query\n */\nexport const  getOptions = (participants: string[], query: string) =>\n\tchain(participants)\n\t\t.filter(participant => query ? startsWith(participant, query) : true)\n\t\t.map((participant) =>\n\t\t\t({\n\t\t\t\tid: participant,\n\t\t\t\tvalue: participant,\n\t\t\t\tlabel: participant\n\t\t\t})\n\t\t)\n\t\t.value() as IStateOption[];\n\n/**\n * Get previous option\n * @param options - options list\n * @param currentOptionId - id of the current focused option\n * @return id of the previous option, or undefined if options are empty\n */\nexport const getPreviousOption = (options: IStateOption[], currentOptionId: string | undefined): string | undefined => {\n\tconst optionsLength = options.length;\n\n\tif (!optionsLength) {\n\t\treturn undefined;\n\t}\n\n\tconst currentFocusIndex = currentOptionId\n\t\t? findIndex(options, (option) => option.id === currentOptionId)\n\t\t: 0;\n\n\tconst previousIsInBounds = currentFocusIndex - 1 >= 0;\n\tconst previousIndex = previousIsInBounds ? currentFocusIndex - 1 : optionsLength -1;\n\n\treturn options[previousIndex].id;\n};\n\n/**\n * Get next option\n * @param options - options list\n * @param currentOptionId - id of the current focused option\n * @return id of the previous option, or undefined if options are empty\n */\nexport const getNextOption = (options: IStateOption[], currentOptionId: string | undefined): string | undefined => {\n\tconst optionsLength = options.length;\n\n\tif (!optionsLength) {\n\t\treturn undefined;\n\t}\n\n\tconst currentFocusIndex = currentOptionId\n\t\t? findIndex(options, (option) => option.id === currentOptionId)\n\t\t: -1;\n\n\tconst nextIsInBounds = currentFocusIndex + 1 < optionsLength;\n\tconst nextIndex = nextIsInBounds ? currentFocusIndex + 1 : 0;\n\treturn options[nextIndex].id;\n};\n\n\n/**\n * Get the HTML element for the entire selection list\n * @param elemRef - component's reference\n */\nexport const getMenuElement = (elemRef: React.RefObject<HTMLElement>) => {\n\tconst element = elemRef.current;\n\t// found no better choice for selecting react-select list element :-(\n\treturn element?.querySelector('div[class*=\"MenuList\"]');\n};\n\n/**\n * Get the HTML element for a certain option in selection list\n * @param elemRef - component's reference\n * @param optionId - id of the option\n */\nexport const getOptionElement = (elemRef: React.RefObject<HTMLElement>, optionId: string) => {\n\tconst element = elemRef.current;\n\treturn element?.querySelector(`div[data-id=\"${optionId}\"]`);\n};\n\n/**\n * Scrolls the list to the specified option\n * @param elemRef - component's reference\n * @param optionId - id of the option\n */\nexport const scrollTo = (elemRef: React.RefObject<HTMLElement>, optionId: string ) => {\n\n\tif (!optionId) {\n\t\treturn;\n\t}\n\n\tconst menuElement = getMenuElement(elemRef);\n\tconst optionElement = getOptionElement(elemRef, optionId);\n\tif (menuElement && optionElement) {\n\t\tconst menuRect= menuElement.getBoundingClientRect();\n\t\tconst optionRect= optionElement.getBoundingClientRect();\n\n\t\tconst scrollDelta = getScrollDelta(optionRect, menuRect);\n\t\tif (scrollDelta) {\n\t\t\tmenuElement.scrollTop += scrollDelta;\n\t\t}\n\t}\n};\n\n/**\n * Return the amount of more (or less) scroll to be applied on the selection list\n * to have a certain target element visible\n * @param targetRect\n * @param containerRect\n */\nexport const getScrollDelta = (targetRect: DOMRect, containerRect: DOMRect) => {\n\tif (targetRect.bottom > containerRect.bottom) {\n\t\treturn targetRect.bottom - containerRect.bottom;\n\t}\n\n\tif (targetRect.top < containerRect.top) {\n\t\treturn targetRect.top - containerRect.top;\n\t}\n\n\treturn 0;\n};\n\n\n","import * as React from 'react';\nimport { Component } from 'react';\nimport { isEqual } from 'lodash';\n\nimport MentionSection from './MentionSection';\nimport IStore from '../../../redux/store';\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport selectors from '../../../redux/selectors';\nimport withRedux from '../../hoc/withRedux';\nimport {\n\tcloseMentionSection,\n\tresetFocusedMentionOption,\n\tsetActiveMention,\n\tsetFocusedMentionOption\n} from '../../../redux/modules/messenger';\nimport { IProps, IStateOption } from \"./types\";\nimport constants from \"../../../static/constants\";\nimport { getNextOption, getOptions, getPreviousOption, scrollTo } from \"./utils\";\nimport { getStylesForMentionSectionContainer } from \"./style\";\n\ninterface IState {\n\toptions: IStateOption[];\n}\n\nclass MentionSectionContainer extends Component<IProps, IState> {\n\n\tconstructor(props: IProps) {\n\t\tsuper(props);\n\n\t\tthis.elemRef = React.createRef<HTMLElement>();\n\n\t\tconst options: IStateOption[] = getOptions(props.mentionOptions, props.mentionQuery);\n\n\t\tthis.state = {\n\t\t\toptions\n\t\t}\n\t}\n\n\tprivate readonly elemRef: any;\n\n\tprivate isMouseOver?: boolean;\n\n\tprivate mouseFocusedOptionId?: string;\n\tprivate keyboardFocusedOptionId?: string;\n\n\tcomponentDidMount() {\n\t\tdocument.addEventListener(\"keydown\", this.handleKeyDown);\n\n\t\tconst element = this.elemRef.current;\n\t\tif (element) {\n\t\t\telement.addEventListener(\"mouseenter\", this.handleMouseEnter);\n\t\t\telement.addEventListener(\"mouseleave\", this.handleMouseLeave);\n\t\t}\n\t}\n\n\tshouldComponentUpdate(nextProps:IProps, nextState: IState) {\n\t\tconst props = this.props;\n\n\t\tif (!isEqual(nextProps.focusedMentionOption, this.props.focusedMentionOption)) {\n\t\t\tthis.keyboardFocusedOptionId = nextProps.focusedMentionOption;\n\t\t\tscrollTo(this.elemRef, this.keyboardFocusedOptionId);\n\t\t}\n\n\t\t// take care to not re-render if only \"focusedMentionOption\" was change,\n\t\t// otherwise this dumb react-select will do a scroll-up\n\t\treturn (!isEqual(nextProps, props) && isEqual(nextProps.focusedMentionOption, props.focusedMentionOption))\n\t\t\t|| !isEqual(nextState, this.state);\n\t}\n\n\tcomponentWillUnmount() {\n\t\tdocument.removeEventListener(\"keydown\", this.handleKeyDown);\n\n\t\tconst element = this.elemRef.current;\n\t\tif (element) {\n\t\t\telement.removeEventListener(\"mouseenter\", this.handleMouseEnter);\n\t\t\telement.removeEventListener(\"mouseleave\", this.handleMouseLeave);\n\t\t}\n\t}\n\n\tcomponentDidUpdate(prevProps: IProps, prevState: IState) {\n\t\tconst mentionsChanged = !isEqual(prevProps.mentionOptions, this.props.mentionOptions);\n\t\tconst queryChanged = !isEqual(prevProps.mentionQuery, this.props.mentionQuery)\n\t\tif (mentionsChanged || queryChanged) {\n\n\t\t\tconst options: IStateOption[] =\n\t\t\t\tgetOptions(this.props.mentionOptions, this.props.mentionQuery);\n\n\t\t\tthis.setState({\n\t\t\t\toptions\n\t\t\t});\n\t\t}\n\n\t\tif (!isEqual(prevProps.isMentionSectionOpen, this.props.isMentionSectionOpen) &&\n\t\t\t!this.props.isMentionSectionOpen) {\n\t\t\tthis.props.resetFocusedMentionOption(this.props.instanceId);\n\t\t}\n\t}\n\n    render() {\n\t\treturn (\n\t\t\t<div ref={this.elemRef}\n\t\t\t\tstyle={getStylesForMentionSectionContainer({\n\t\t\t\t\tisOpen: this.props.isMentionSectionOpen,\n\t\t\t\t\tshouldDisplayCustomMentionSection: this.props.shouldDisplayCustomMentionSection,\n\t\t\t\t\tisFullScreen: this.props.isFullScreen\n\t\t\t\t})}>\n\t\t\t\t<MentionSection\n\t\t\t\t\tmentionOptions={this.state.options}\n\t\t\t\t\tisOpen={this.props.isMentionSectionOpen}\n\t\t\t\t\tonChange={this.onChange}\n\t\t\t\t\tinputValue={this.props.mentionQuery}\n\t\t\t\t\tisFullScreen={this.props.isFullScreen}\n\t\t\t\t\tshouldDisplayCustomMentionSection={this.props.shouldDisplayCustomMentionSection}\n\t\t\t\t\tonMouseFocus={this.handleMouseFocus}\n\t\t\t\t/>\n\t\t\t</div>\n        );\n    }\n\n\n\t/**\n\t * Triggered when mouse enters over the options list\n\t */\n\tprivate handleMouseEnter = () => {\n\t\tif (!this.isMouseOver) {\n\t\t\tthis.props.resetFocusedMentionOption(this.props.instanceId);\n\t\t}\n\t\tthis.isMouseOver = true;\n\t};\n\n\t/**\n\t * Triggered when mouse leaves the options list\n\t */\n\tprivate handleMouseLeave = () => {\n\t\tthis.isMouseOver = false;\n\n\t\tif (this.mouseFocusedOptionId) {\n\t\t\tthis.props.setFocusedMentionOption(this.props.instanceId, this.mouseFocusedOptionId);\n\t\t\tthis.mouseFocusedOptionId = undefined;\n\t\t}\n\t};\n\n\t/**\n\t * Triggered when mouse is focusing an option in the list\n\t * @param id of the focused option\n\t */\n\tprivate handleMouseFocus = (id: string) => {\n\t\tthis.mouseFocusedOptionId = id;\n\t};\n\n\t/**\n\t * Triggered when a key is pressed\n\t * @param event\n\t */\n\tprivate handleKeyDown = (event) => {\n\t\tconst handlers = {};\n\t\thandlers[constants.ARROW_UP_KEY_CODE] = this.handleArrowUp;\n\t\thandlers[constants.ARROW_DOWN_KEY_CODE] = this.handleArrowDown;\n\t\thandlers[constants.ENTER_KEY_CODE] = this.handleEnter;\n\n\t\tif (this.props.isMentionSectionOpen && handlers[event.keyCode]) {\n\t\t\thandlers[event.keyCode]();\n\t\t}\n\t};\n\n\t/**\n\t * Triggered when arrow up key is pressed\n\t */\n\tprivate handleArrowUp = () => {\n\t\t// focus previous option\n\t\tconst previousOption = getPreviousOption(this.state.options, this.keyboardFocusedOptionId);\n\n\t\tif (previousOption) {\n\t\t\tthis.props.setFocusedMentionOption(this.props.instanceId, previousOption);\n\t\t}\n\t};\n\n\t/**\n\t * Triggered when arrow down key is pressed\n\t */\n\tprivate handleArrowDown = () => {\n\t\t// focus next option\n\t\tconst nextOption = getNextOption(this.state.options, this.keyboardFocusedOptionId);\n\n\t\tif (nextOption) {\n\t\t\tthis.props.setFocusedMentionOption(this.props.instanceId, nextOption);\n\t\t}\n\t};\n\n\t/**\n\t * Triggered when Enter key is pressed\n\t */\n\tprivate handleEnter = () => {\n\t\tconst mention = this.state.options\n\t\t\t.find(option => option.id === this.keyboardFocusedOptionId);\n\n\t\tif (mention) {\n\t\t\tthis.onChange(mention);\n\t\t}\n\t};\n\n\tprivate onChange = (mention) => {\n\t\tthis.props.setActiveMention(this.props.instanceId, mention.value);\n\t\tthis.props.closeMentionSection(this.props.instanceId);\n\t};\n}\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    mentionOptions: selectors.getMentionOptions(store, instanceId),\n    focusedMentionOption: selectors.getFocusedMentionOption(store, instanceId),\n    isMentionSectionOpen: selectors.isMentionSectionOpen(store, instanceId),\n    mentionQuery: selectors.getMentionQuery(store, instanceId),\n    modelName: selectors.getModelName(store, instanceId),\n\tisFullScreen: selectors.isFullScreen(store, instanceId),\n\tshouldDisplayCustomMentionSection: selectors.shouldDisplayCustomMentionSection(store, instanceId)\n});\n\nconst mapDispatchToProps = {\n    closeMentionSection,\n    setActiveMention,\n\tsetFocusedMentionOption,\n\tresetFocusedMentionOption\n};\n\nexport default withRedux(MentionSectionContainer, mapStateToProps, mapDispatchToProps);\n","import MentionSectionContainer from './MentionSectionContainer'\n\nexport default MentionSectionContainer;\n","import * as React from 'react';\nimport MessageSectionContainer from '../../specific/MessageSection';\nimport ProfileContainer from '../../specific/Profile';\nimport { FullscreenFooterWrapper, MessageSectionContainerWrapper, ProfileContainerWrapper } from './style';\nimport CountdownWarningContainer from '../../specific/CountdownWarning';\nimport MentionSectionContainer from '../../specific/MentionSection';\n\nconst FullscreenFooter = () => (\n    <FullscreenFooterWrapper>\n\n        <ProfileContainerWrapper>\n            <ProfileContainer />\n        </ProfileContainerWrapper>\n\n        <MessageSectionContainerWrapper isFullscreen={true}>\n            <CountdownWarningContainer />\n            <MessageSectionContainer />\n\t\t\t<MentionSectionContainer />\n        </MessageSectionContainerWrapper>\n\n    </FullscreenFooterWrapper>\n);\n\nexport default FullscreenFooter;\n","import FullscreenFooter from './FullscreenFooter';\n\nexport default FullscreenFooter;","import utils, { screenfull } from '../../../utils';\nimport { IContainerProps as IProps } from './types';\n\nexport const exitFullscreen = (props: IProps) => () => {\n\tscreenfull.toggle(utils.getMessengerNode(props.instanceId));\n\tprops.clickCloseMessengerButton(props.instanceId);\n};\n","import styled from 'styled-components';\nimport config from '../../../static/config';\nimport withCustomClasses, { DomCustomClass } from \"../../hoc/withCustomClasses/\";\n\nexport const FullscreenHeaderWrapper = withCustomClasses(styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: flex-end;\n    position: relative;\n    text-align: center;\n    box-sizing: border-box;\n    background-color: ${(props) => props.theme.colors.messengerWrapper};\n    height: ${config.viewSizes.fullScreen.topBarHeight}px;\n    padding: 0 15px;\n`, [DomCustomClass.FullScreenHeader]);\n\nexport const CloseButton = styled.i`\n    right: 5px;\n    position: absolute;\n    line-height: 2!important;\n    cursor: pointer;    \n`;\n","import * as React from 'react';\nimport { FullscreenHeaderWrapper } from './style';\nimport CloseButtonContainer, { CloseButtonType } from '../CloseButton/CloseButtonContainer';\n\ninterface IProps {\n    closeText: string;\n    exitFullscreen: () => void;\n}\n\nconst FullscreenHeader = (props: IProps) => (\n    <FullscreenHeaderWrapper>\n        <CloseButtonContainer\n            onClick={props.exitFullscreen}\n            hoverText={props.closeText}\n            closeButtonType={CloseButtonType.FULLSCREEN_HEADER}\n        />\n    </FullscreenHeaderWrapper>\n);\n\nexport default FullscreenHeader;\n","import * as React from 'react';\n\nimport { exitFullscreen } from './utils';\nimport selectors from '../../../redux/selectors';\nimport FullscreenHeader from './FullscreenHeader';\nimport IStore from '../../../redux/store';\nimport { clickCloseMessengerButton } from \"../../../sagas/common/ui\";\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\nimport { IContainerProps as IProps } from \"./types\";\n\nconst FullscreenHeaderContainer = (props: IProps) => (\n    <FullscreenHeader\n        closeText={props.translation.common.close}\n        exitFullscreen={exitFullscreen(props)}\n    />\n);\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    translation: selectors.getTranslation(store, instanceId)\n});\n\nconst mapDispatchToProps = {\n    clickCloseMessengerButton\n};\n\nexport default withRedux(FullscreenHeaderContainer, mapStateToProps, mapDispatchToProps);\n","import styled from \"styled-components\";\nimport config from '../../../static/config';\nimport withIdentifier, { DomIdentifier } from \"../../hoc/withIdentifier\";\n\ninterface IChatBoxWrapperProps {\n    shouldLiftChatbox: boolean;\n    shouldTrimChatbox: boolean;\n\tshouldApplyOverflow: boolean;\n}\n\ninterface IMessageListingProps {\n    opacity: number;\n    isGroupMessage?: boolean;\n}\n\ninterface IMessageListProps {\n    isMobileLandscape?: boolean;\n}\n\nexport const ChatBoxWrapper = withIdentifier<IChatBoxWrapperProps>(styled.div.attrs({ className: 'chatbox-wrapper' })<IChatBoxWrapperProps>`\n    ${props => props.shouldLiftChatbox && 'margin-bottom: 82px;'}\n    ${props => props.shouldTrimChatbox && `max-height: calc(100% - ${config.viewSizes.countdownWarning.height}px) !important;`}\n\t${props => props.shouldApplyOverflow && 'overflow: hidden;'}\n    clear: both;\n    flex: 1 0 auto;\n\tposition: relative;\n\tbox-sizing: content-box;\n`, DomIdentifier.ChatBox);\n\nexport const ChatBoxBlanket = styled.div.attrs({className: 'chatbox-blanket'})`\n\t${(props) => `background-color: ${props.theme.colors.chatBoxContainer};`}\n\t\n\tposition: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    z-index: 4;\n`;\n\nexport const MessageItem = styled.li<IMessageListingProps>`\n    opacity: ${(props: IMessageListingProps) => props.opacity};\n    ${(props: IMessageListingProps) => !props.isGroupMessage && 'margin: 0 15px;'}\n`;\n\nexport const MessageList = styled.ol<IMessageListProps>`\n    display: block;\n    list-style: none;\n    height: 100%;\n    margin: 0px;\n    padding: 0px;\n    clear: both;\n    ${props => props.isMobileLandscape && 'margin-bottom: 15px;'}\n`;\n\nexport const ImageUrlContentWrapper = styled.a`\n    display: block;\n    cursor: pointer;\n    text-decoration: none;\n    color: #111111;\n`;\n\nexport const ImageUrlTextWrapper = styled.div`\n    margin-top: 5px;\n`;\n\nexport const GroupChatParticipantsWrapper = styled.div`\n    position: absolute;\n    left: 5px;\n    top: 5px;\n    z-index: 1;\n`;\n\n","import { Action } from 'redux-actions';\nimport { isEmpty, map, find, includes } from 'lodash';\nimport { put, select, takeEvery } from 'redux-saga/effects';\nimport { ACTION, CMDP_GETHISTORY, CMDP_GETHISTORY_RESPONSE, EnumSortOrder } from 'vxcontrol-client-lib';\n\nimport utils from '../../utils';\nimport config from '../../static/config';\nimport { createAction, createActionType } from '../../redux/utils';\nimport { IPayload } from '../../redux/interfaces';\nimport selectors from '../../redux/selectors';\nimport ApiService from '../../services/ApiService';\nimport { insertAllMessages } from '../../redux/modules/messenger';\nimport { IMessage, IMessenger, ISession, IToyOption, ITranslation } from '../../redux/store';\nimport { ActionIds } from '../../redux/interfaces';\n\nconst createHistoryActionType = createActionType(ActionIds.HISTORY, { isSagaAction: true });\n\n// Actions\nconst REQUEST_HISTORY = createHistoryActionType(\"REQUEST_HISTORY\");\nconst RECEIVE_HISTORY = createHistoryActionType(\"RECEIVE_HISTORY\");\nconst INSERT_MESSAGES_TO_STORE = createHistoryActionType(\"INSERT_MESSAGES_TO_STORE\");\n\n// Action Creators\nexport const requestHistory = createAction(REQUEST_HISTORY);\nexport const onReceiveHistory = createAction<CMDP_GETHISTORY_RESPONSE>(RECEIVE_HISTORY);\nexport const insertMessagesToStore = createAction<IMessage[]>(INSERT_MESSAGES_TO_STORE);\n\n/** Request the list of history messages from the current channel */\nexport const requestHistorySaga = function* ({ payload: { instanceId }}: Action<IPayload>) {\n    const shouldShowHistory = yield select(selectors.shouldShowHistory, instanceId);\n    if (!shouldShowHistory) {\n        return;\n    }\n\n    const session: ISession = yield select(selectors.getSession, instanceId);\n    const { channelId, sessionID } = session;\n\n    const messages: IMessage[] = yield select(selectors.getMessages, instanceId);\n    const numberOfMessages = messages.length + config.limitations.maxNumberOfMessages.onGettingHistory;\n\n    const command: CMDP_GETHISTORY = {\n        action: ACTION.CMDP_GETHISTORY,\n        params: {\n            channelId,\n            sessionID,\n            sort: EnumSortOrder.DESC,\n            limit: numberOfMessages.toString()\n        }\n    };\n\n    ApiService.getService(instanceId).sendCommand(command);\n};\n\n/** Receive the last 50 history messages and map them to our structure */\nexport const receiveHistorySaga = function* ({ payload }: Action<IPayload<CMDP_GETHISTORY_RESPONSE>>) {\n    const { instanceId, value } = payload;\n\n    if (isEmpty(value) || isEmpty(value.commands)) {\n        return;\n    }\n\n    const messenger: IMessenger = yield select(selectors.getMessenger, instanceId);\n\tconst gifts = yield select(selectors.getGifts, instanceId);\n\n    const newMessages = utils.reconcileMessages(\n        messenger.messages,\n        value.commands,\n        config.limitations.maxNumberOfMessages.onGettingHistory,\n        gifts\n    );\n\n    // After mapping the messages, add them to the Redux store in order to be rendered\n    if (!isEmpty(newMessages)) {\n        yield put(insertMessagesToStore(instanceId, newMessages));\n    }\n};\n\n/** Receives a list of messages and insert them in our Redux store */\nconst insertAllMessagesSaga = function* ({ payload }: Action<IPayload<IMessage[]>>) {\n    const { instanceId, value } = payload;\n\n    const toyOptions: IToyOption[] = yield select(selectors.getToyOptions, instanceId);\n    const translation: ITranslation = yield select(selectors.getTranslation, instanceId);\n\n    const messages = map(value, (message: IMessage) => {\n        const toyOption = find(toyOptions, option => includes(message.content, option.name));\n\n        return toyOption\n            ? utils.convertToToyMessage(\n                message,\n                toyOption,\n                translation.chat.toyControl\n            )\n            : message;\n    });\n\n    yield put(insertAllMessages(instanceId, messages));\n};\n\nconst watchSagas = function* () {\n    yield takeEvery(REQUEST_HISTORY, requestHistorySaga);\n    yield takeEvery(RECEIVE_HISTORY, receiveHistorySaga);\n    yield takeEvery(INSERT_MESSAGES_TO_STORE, insertAllMessagesSaga);\n};\n\nexport default watchSagas;\n","import styled from 'styled-components';\nimport withCustomClasses, {DomCustomClass} from \"../../hoc/withCustomClasses/\";\nimport utils from '../../../utils';\n\ninterface IGroupWrapperProps {\n\tshowArrow?: boolean;\n}\n\ninterface IGroupContentWrapperProps {\n\tisOpen?: boolean;\n}\n\ninterface IGroupTextWrapper {\n\tshouldIncreaseMessageFontSize?: boolean;\n}\n\nexport const GroupContentWrapper = styled.div<IGroupContentWrapperProps>`\n\t${({isOpen}) => !isOpen ? `\n        width: 0;\n        height: 0;\n        overflow: hidden;\n    ` : ''}\n`;\n\nexport const GroupWrapper = withCustomClasses<IGroupWrapperProps>(styled.div<IGroupWrapperProps>`\n\tfont-family: ${(props) => props.theme.typography.fontFamily};\n\tfont-weight: ${(props) => props.theme.typography.weight.regular};\n\tcolor: ${(props) => props.theme.colors.groupTextColor};\n\twidth: ${(props) => props.showArrow ? '93%' : '100%'};\n\tborder-top: 1px solid ${(props) => props.theme.colors.groupTextColor};\n\tfont-style: normal;\n\tfont-size: 12px;\n\ttext-align: center;\n\tmargin: 15px auto;\n\tdisplay: block;\n\tclear: both;\n`, [DomCustomClass.Group]);\n\nexport const GroupTextWrapper = styled.span<IGroupTextWrapper>`\n\tbackground: ${(props) => props.theme.colors.groupColor};\n\n\tfont-size: ${({shouldIncreaseMessageFontSize}) => utils.computeMessageFontSize(shouldIncreaseMessageFontSize, 12)};\n\tdisplay: inline-block;\n\tposition: relative;\n\ttext-align: center;\n\tpadding: 5px 15px;\n\ttop: -14px;\n`;\n\nexport const TextArrow = styled.a`\n\tdisplay: inline-block;\n\tcursor: pointer;\n\tmargin-right: 5px;\n`;\n","import * as React from 'react';\nimport { ITranslation } from '../../../redux/store';\nimport { GroupContentWrapper, GroupTextWrapper, GroupWrapper, TextArrow } from './style';\nimport { getChatGroupTime, getDayGroupDate } from './utils';\n\nexport interface IGroupProps {\n\tchildren: any;\n\tdatetime: string;\n\tlanguage: string;\n\tshouldIncreaseMessageFontSize: boolean;\n\tisOpen?: boolean;\n\tisDayGroup?: boolean;\n\tshowArrow: boolean;\n\tinformationText?: string;\n\ttranslation: ITranslation;\n\tclassName?: string;\n\n\tonClick: () => void;\n}\n\nconst Group = (props: IGroupProps) => {\n\tconst textArrowClassName = props.isOpen\n\t\t? \"-icon-single-arrow-up-line\"\n\t\t: \"-icon-single-arrow-down-line\";\n\n\treturn (\n\t\t<GroupWrapper\n\t\t\tclassName={props.className}\n\t\t\tshowArrow={props.showArrow}>\n\t\t\t<GroupTextWrapper shouldIncreaseMessageFontSize={props.shouldIncreaseMessageFontSize}>\n\t\t\t\t{props.showArrow && (\n\t\t\t\t\t<TextArrow\n\t\t\t\t\t\tclassName={textArrowClassName}\n\t\t\t\t\t\tonClick={props.onClick}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\n\t\t\t\t{props.informationText\n\t\t\t\t\t? props.informationText\n\t\t\t\t\t: (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t{props.isDayGroup\n\t\t\t\t\t\t\t\t? getDayGroupDate(props.datetime, props.language)\n\t\t\t\t\t\t\t\t: `${props.translation.chat.liveChat} ${getChatGroupTime(props.datetime)}`\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t</GroupTextWrapper>\n\n\t\t\t<GroupContentWrapper isOpen={props.isOpen}>\n\t\t\t\t{props.children}\n\t\t\t\t{!props.isDayGroup && (\n\t\t\t\t\t<GroupWrapper>\n\t\t\t\t\t\t<GroupTextWrapper shouldIncreaseMessageFontSize={props.shouldIncreaseMessageFontSize}>\n\t\t\t\t\t\t\t{props.translation.chat.popup.ended}\n\t\t\t\t\t\t</GroupTextWrapper>\n\t\t\t\t\t</GroupWrapper>\n\t\t\t\t)}\n\t\t\t</GroupContentWrapper>\n\n\t\t</GroupWrapper>\n\t);\n};\n\nexport default Group;\n","import * as moment from 'moment';\n\nexport const getDayGroupDate = (datetime: string, language: string): string => {\n\tconst momentDate = moment(datetime, moment.defaultFormat).locale(language);\n\tconst daysAgo = moment().diff(momentDate, 'days');\n\tconst groupTimeLastWeek = daysAgo === 0 ? 'Today' : momentDate.format('dddd');\n\n\treturn daysAgo < 7\n\t\t? groupTimeLastWeek\n\t\t: momentDate.format('dddd, DD MMMM YYYY');\n};\n\nexport const getChatGroupTime = (datetime: string): string => {\n\tconst momentDate = moment(datetime);\n\n\n\treturn momentDate.format(\"LT\");\n};\n","import GroupContainer, {IComponentProps} from './GroupContainer';\n\nexport {IComponentProps};\nexport default GroupContainer;","import * as React from 'react';\n\nimport Group from './Group';\nimport selectors from '../../../redux/selectors';\nimport IStore, {ITranslation} from '../../../redux/store';\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\n\nexport interface IComponentProps {\n    datetime: string;\n    showArrow: boolean;\n    className?: string;\n    hasSectionsInitiallyOpened?: boolean;\n    isDayGroup?: boolean;\n    children?: any;\n\n    /** The Group component could render a specific information text given as prop */\n    informationText?: any;\n    onContentUpdate?: () => void;\n}\n\ninterface IStoreProps {\n    translation: ITranslation;\n\tlanguage: string;\n\tshouldIncreaseMessageFontSize: boolean;\n}\n\ninterface IState {\n    isOpen: boolean;\n}\n\nexport type IProps = IComponentProps & IStoreProps & IInstanceProps;\n\nclass GroupContainer extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n        this.state = { isOpen: false };\n    }\n\n    componentDidMount() {\n        this.setState({\n            isOpen: this.props.hasSectionsInitiallyOpened as boolean\n        });\n    }\n\n    render() {\n        return (\n            <Group\n                className={this.props.className}\n                children={this.props.children}\n                informationText={this.props.informationText}\n                datetime={this.props.datetime}\n                showArrow={this.props.showArrow}\n                isOpen={this.state.isOpen}\n                translation={this.props.translation}\n                onClick={this.onClick}\n                isDayGroup={this.props.isDayGroup}\n                language={this.props.language}\n                shouldIncreaseMessageFontSize={this.props.shouldIncreaseMessageFontSize}\n            />\n        );\n    }\n\n    private onClick = () => {\n        this.setState((state: IState) => ({\n            ...state,\n            isOpen: !state.isOpen\n        }));\n\n        if (this.props.onContentUpdate) {\n            this.props.onContentUpdate();\n        }\n    };\n}\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    translation: selectors.getTranslation(store, instanceId),\n\tlanguage: selectors.getLanguage(store, instanceId),\n\tshouldIncreaseMessageFontSize: selectors.getShouldIncreaseMessageFontSize(store, instanceId)\n});\n\nexport default withRedux<IComponentProps>(GroupContainer, mapStateToProps);\n","import styled from \"styled-components\";\nimport { isMacOs } from \"react-device-detect\";\n\nimport withCustomClasses, { DomCustomClass } from \"../../hoc/withCustomClasses/\";\n\ninterface IEmoticonProps {\n    position?: string;\n    className?: string\n}\n\nexport const MessageEmoticonWrapper = withCustomClasses<IEmoticonProps>(styled.span`\n    margin: 0;\n    display: inline-block;\n    background-size: 1000%;\n    background-repeat: no-repeat;\n    vertical-align: middle;\n    \n    ${isMacOs\n\t\t? `\n\t\t\twidth: 1.2em;\n\t\t\tmargin: 0 2px 0 0;\n\t\t`\n\t\t: `\n\t\t\twidth: auto;\n\t\t`\n\t}\n\n    ${(props: IEmoticonProps) => props.position\n        ? `\n            width: 20px;\n            height: 20px;\n        `\n        : `\n            background: none;\n            height: auto;\n            font-size: 1.2em;\n            text-align: center;\n        `\n    };\n`, [DomCustomClass.MessageEmoticon]);\n\n","import MessageEmoticon from './MessageEmoticon';\n\nexport default MessageEmoticon;","import * as React from 'react';\nimport { MessageEmoticonWrapper } from './style';\nimport utils from \"../../../utils\";\nimport { IEmoticon } from \"../../../redux/store\";\n\ninterface IProps {\n    icon: string;\n    emoticons: IEmoticon[];\n    children?: any;\n}\n\nconst MessageEmoticon = (props: IProps) => {\n    const icon = decodeURIComponent(props.icon);\n    \n    const emoticon = props.emoticons.find(\n        (emoticonItem: IEmoticon) => emoticonItem.text === icon\n    ) || props.emoticons[0];\n\n    return (\n        <MessageEmoticonWrapper\n            className={utils.getEmoticonClass(emoticon)}\n            position={emoticon.position}\n            data-entity={icon}>\n            {props.children}\n            <span>{utils.emoticonCodeToPrintableChar(emoticon.code)}</span>\n        </MessageEmoticonWrapper>\n    );\n};\n\nexport default MessageEmoticon;\n","import styled from \"styled-components\";\n\ninterface IImageProps {\n    width?: number;\n    height?: number;\n    isHidden?: boolean;\n}\n\nexport const ImageWrapper = styled.div`\n    width: 100%;\n    cursor: pointer;\n    display: flex;\n    justify-content: center;\n`;\nexport const ImageLoaderWrapper = styled.div`\n    position: absolute;\n    top: 50%;\n    transform: translateY(-50%);\n`;\n\nexport const Image = styled.img<IImageProps>`\n    ${({ width }) => width ? `width: ${width}px;` : `width: 100%;`}\n    ${({ height }) => height && `height: ${height}px;`}\n    \n    ${({ isHidden }) => isHidden ? 'opacity: 0;' : ''}\n    \n    object-fit: cover;\n`;\n","import { IProps } from \"./types\";\nimport { MessageDirection } from \"../../../redux/store\";\n\n/**\n * These computations are indeed intriguing and filled with magic numbers,\n * but they are based on the CSS rules between the chat box container and the image element\n * and it is the only way I found to determine the maximum available horizontal dimension\n * for an image to use, but BEFORE the image is loading.\n *\n * Note: please note that this needs to be kept in sync with the aforementioned CSS changes\n */\nexport const getMaxAvailableWidth = (props: IProps) => {\n\tconst { containerWidth, isFullscreen } = props;\n\n\tif (!containerWidth) {\n\t\treturn 0;\n\t}\n\n\tif (isFullscreen) {\n\t\treturn (containerWidth - 20) * .7;\n\t}\n\n\treturn containerWidth * .93 * .93 * .7 - 33;\n};\n\n/**\n * Image in the bubble should be square shaped (as per the newest requirements), so this function get its w = h dimension\n * @param props\n */\nexport const getSquareImageDimension = (props: IProps): number => {\n\tconst maxAvailableWidth = getMaxAvailableWidth(props);\n\tconst {imgWidth, imgHeight} = props;\n\n\treturn imgWidth <= maxAvailableWidth\n\t\t? Math.min(imgWidth, imgHeight)\n\t\t: Math.min(imgHeight, maxAvailableWidth);\n};\n\nexport const getImageLoaderColor = (props: IProps) =>\n\tprops.direction === MessageDirection.in ? props.theme.colors.clientMessageBackground : undefined;\n","import styled from \"styled-components\";\n\nexport const LoaderWrapper = styled.div`\n    text-align: center;\n`;\n","import config from '../../../static/config';\nimport {IProps} from \"./types\";\nimport {isUndefined} from \"util\";\n\nexport const getImageLoaderSize = (props: IProps): number => {\n\tconst { imageLoaderSize } = config.viewSizes;\n\n\tif (isUndefined(props.width) || isUndefined(props.height)) {\n\t\treturn imageLoaderSize;\n\t}\n\n\tconst imageMinSize = Math.min(props.width, props.height);\n\n\treturn Math.min(imageMinSize, imageLoaderSize);\n};\n","import * as React from 'react';\nimport Loader from 'react-loader-spinner';\nimport { LoaderWrapper } from './style';\nimport {IProps} from \"./types\";\nimport {getImageLoaderSize} from \"./utils\";\n\nconst ImageLoader = (props: IProps) => (\n    <LoaderWrapper>\n        <Loader\n            type={\"Watch\"}\n            color={props.color || \"#FFF\"}\n            width={getImageLoaderSize(props)}\n            height={getImageLoaderSize(props)}\n        />\n    </LoaderWrapper>\n);\n\nexport default ImageLoader;\n","import ImageMessageContainer from  './ImageMessageContainer';\n\nexport default ImageMessageContainer;\n","import * as React from 'react';\nimport { withTheme } from \"styled-components\";\n\nimport { Image, ImageLoaderWrapper, ImageWrapper } from \"./style\";\nimport withRedux from \"../../hoc/withRedux/withRedux\";\nimport IStore, { MessageDirection } from \"../../../redux/store\";\nimport { IInstanceProps } from \"../../hoc/withInstanceInfo\";\nimport selectors from \"../../../redux/selectors\";\nimport { IComponentProps, IProps, IState } from \"./types\";\nimport { getImageLoaderColor, getSquareImageDimension } from \"./utils\";\nimport ImageLoader from \"../../common/ImageLoader/ImageLoader\";\nimport AppService from '../../../services/AppService';\n\nclass ImageMessageContainer extends React.Component<IProps, IState> {\n\tconstructor(props: IProps) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tisLoading: true\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { id, src } = this.props;\n\n\t\tconst width = getSquareImageDimension(this.props) || undefined;\n\t\tconst height = getSquareImageDimension(this.props) || undefined;\n\t\tconst shouldHideImage = this.props.direction === MessageDirection.in && !this.props.showCensoredContent;\n\n\t\treturn (\n\t\t\t<ImageWrapper\n\t\t\t\tonClick={this.onClick(shouldHideImage)}\n\t\t\t\tid={id}\n\t\t\t>\n\t\t\t\t{this.state.isLoading &&\n\t\t\t\t<ImageLoaderWrapper>\n\t\t\t\t\t<ImageLoader\n\t\t\t\t\t\twidth={width || 0}\n\t\t\t\t\t\theight={height || 0}\n\t\t\t\t\t\tcolor={getImageLoaderColor(this.props)}\n\t\t\t\t\t/>\n\t\t\t\t</ImageLoaderWrapper>\n\t\t\t\t}\n\n\t\t\t\t<Image src={shouldHideImage ? this.props.censoredContentImage : src}\n\t\t\t\t\t   width={width}\n\t\t\t\t\t   height={height}\n\t\t\t\t\t   isHidden={this.state.isLoading}\n\t\t\t\t\t   onLoad={this.onLoad}\n\t\t\t\t/>\n\t\t\t</ImageWrapper>\n\t\t);\n\t}\n\n\tonClick = shouldHideImage => () => {\n\t\tconst { censoredContentImage, src, onClick, instanceId } = this.props;\n\t\tconst appService = AppService.getService(instanceId);\n\n\t\tif (shouldHideImage) {\n\t\t\tappService.onAgeVerification();\n\t\t\treturn;\n\t\t}\n\t\t// @ts-ignore\n\t\tif (appService.onClickImage) {\n\t\t\tappService.onClickImage(shouldHideImage ? censoredContentImage : src);\n\t\t\treturn;\n\t\t}\n\t\tif (onClick) {\n\t\t\tonClick();\n\t\t}\n\t};\n\n\tonLoad = () => {\n\t\tthis.setState({ isLoading: false });\n\n\t\tif (this.props.onLoad) {\n\t\t\tthis.props.onLoad();\n\t\t}\n\t};\n}\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n\tisFullscreen: selectors.isFullScreen(store, instanceId),\n\tshowCensoredContent: selectors.getShowCensoredContent(store, instanceId),\n\tcensoredContentImage: selectors.getCensoredContentImage(store, instanceId)\n});\n\nexport default withRedux<IComponentProps>(ImageMessageContainer, mapStateToProps, null, {\n\twithTheme\n});\n","import ImageLoader from './ImageLoader';\n\nexport default ImageLoader;\n","import styled from 'styled-components';\n\nexport const BaseIcon = styled.i`\n    cursor: pointer;\n    font-size: 24px;\n`;\n\nexport const RecordingIcon = styled(BaseIcon)`\n    font-size: 19px;\n    color: ${props => props.theme.colors.recordingIcon}};\n`;\n\nexport const PlayerWrapper = styled.div`\n    height: 12px;\n`;\n\nexport const ControlsWrapper = styled.div`\n    display: flex;\n    align-items: center;\n`;\n\nexport const CurrentTimeWrapper = styled.div`\n    margin-left: 10px;\n    margin-right: 20px;\n`;\n","import styled from 'styled-components';\n\ninterface IProgressBarKnob {\n    currentPercentage: number;\n}\n\nexport const ProgressBar = styled.div`\n    flex: 1;\n    border-radius: 5px;\n    margin: 0 20px;\n    height: 5px;\n    display: flex;\n    align-items: center;\n    cursor: pointer;\n    background-color: #aaa;\n`;\n\nexport const ProgressBarKnob = styled.span<IProgressBarKnob>`\n    left: ${props => props.currentPercentage - 2}%;\n    \n    position: relative;\n    height: 10px;\n    width: 10px;\n    border-radius: 50%;\n    background-color: black;\n`;\n","import * as React from 'react';\nimport { ProgressBar, ProgressBarKnob } from './style';\n\ninterface IProps {\n    currentPercentage: number;\n    audioPlayerBarRef: any;\n    onMouseDown: (e: React.MouseEvent) => void;\n}\n\nconst AudioPlayerBar = (props: IProps) => (\n    <ProgressBar\n        innerRef={props.audioPlayerBarRef}\n        onMouseDown={props.onMouseDown}\n    >\n        <ProgressBarKnob currentPercentage={props.currentPercentage} />\n    </ProgressBar>\n);\n\nexport default AudioPlayerBar;\n","import AudioPlayerBarContainer from './AudioPlayerBarContainer'\n\nexport default AudioPlayerBarContainer;\n","import * as React from 'react';\nimport { RefObject } from 'react';\n\nimport AudioPlayerBar from './AudioPlayerBar';\n\ninterface IProps {\n    currentTime: number;\n    duration: number;\n\n    setClickedTime: (clickedTime: number) => void;\n}\n\nclass AudioPlayerBarContainer extends React.Component<IProps> {\n\n    constructor(props) {\n        super(props);\n        this.audioPlayerBarRef = React.createRef();\n    }\n\n    render() {\n        const { currentTime, duration } = this.props;\n        const currentPercentage = (currentTime / duration) * 100;\n\n        return (\n            <AudioPlayerBar\n                currentPercentage={currentPercentage}\n                audioPlayerBarRef={this.audioPlayerBarRef}\n                onMouseDown={e => this.handleTimeDrag(e)}\n            />\n        );\n\n    }\n\n    componentWillUnmount(): void {\n        document.removeEventListener(\"mouseup\", () => {\n            document.removeEventListener(\"mousemove\", this.updateTimeOnMove);\n        });\n    }\n\n    private readonly audioPlayerBarRef: RefObject<HTMLDivElement>;\n\n    private calcClickedTime = (e: React.MouseEvent) => {\n        const { current } = this.audioPlayerBarRef;\n\n        if (!current) {\n            return;\n        }\n\n        const clickPositionInPage = e.pageX;\n        const barStart = current.getBoundingClientRect().left + window.scrollX;\n        const barWidth = current.offsetWidth;\n        const clickPositionInBar = clickPositionInPage - barStart;\n        const timePerPixel = this.props.duration / barWidth;\n\n        return timePerPixel * clickPositionInBar;\n    }\n\n    private handleTimeDrag = (e: React.MouseEvent) => {\n        const clickedTime = this.calcClickedTime(e);\n\n        if (clickedTime) {\n            e.persist();\n            this.props.setClickedTime(clickedTime);\n        }\n\n        document.addEventListener(\"mousemove\", this.updateTimeOnMove);\n\n        document.addEventListener(\"mouseup\", () => {\n            document.removeEventListener(\"mousemove\", this.updateTimeOnMove);\n        });\n    }\n\n    private updateTimeOnMove = eMove => {\n        const clickedTime = this.calcClickedTime(eMove);\n\n        if (clickedTime) {\n            this.props.setClickedTime(clickedTime);\n        }\n    };\n}\n\nexport default AudioPlayerBarContainer;\n","import * as React from 'react';\nimport { BaseIcon, ControlsWrapper, CurrentTimeWrapper, PlayerWrapper, RecordingIcon } from './style'\nimport AudioPlayerBarContainer from '../AudioPlayerBar';\nimport utils from '../../../utils';\n\ninterface IProps {\n    audioRef: any;\n    audioSrc: string;\n    isPlaying: boolean;\n    currentTime: number;\n    duration: number;\n\n    setAudioTime: () => void;\n    setClickedTime: (clickedTime: number) => void;\n    stopPlaying: () => void;\n    startPlaying: () => void;\n}\n\nconst AudioPlayer = (props: IProps) => (\n    <PlayerWrapper>\n        <audio ref={props.audioRef} src={props.audioSrc} />\n\n        <ControlsWrapper>\n            <RecordingIcon className={'-icon-voice-recording-full'} />\n\n            <CurrentTimeWrapper>\n                {utils.getFormattedDuration(props.currentTime)}\n            </CurrentTimeWrapper>\n\n            <BaseIcon\n                className={props.isPlaying ? '-icon-pause-full' : '-icon-single-play-full'}\n                onClick={props.isPlaying ? props.stopPlaying : props.startPlaying}\n            />\n\n            <AudioPlayerBarContainer\n                duration={props.duration}\n                currentTime={props.currentTime}\n                setClickedTime={props.setClickedTime}\n            />\n        </ControlsWrapper>\n    </PlayerWrapper>\n);\n\nexport default AudioPlayer;\n","import AudioPlayerContainer from './AudioPlayerContainer';\n\nexport default AudioPlayerContainer\n","import * as React from 'react';\n\nimport AudioPlayer from './AudioPlayer';\n\n\ninterface IProps {\n    audioSrc: string;\n}\n\ninterface IState {\n    duration: number;\n    currentTime: number;\n    isPlaying: boolean;\n    clickedTime?: number;\n}\n\nclass AudioPlayerContainer extends React.Component<IProps, IState> {\n    private readonly audioRef: any;\n\n    constructor(props) {\n        super(props);\n\n        this.audioRef = React.createRef<HTMLElement>();\n        this.state = {\n            duration: 0,\n            currentTime: 0,\n            isPlaying: false,\n            clickedTime: 0\n        };\n    }\n\n    componentDidMount() {\n        const audioElement = this.audioRef.current;\n\n        audioElement.addEventListener(\"loadedmetadata\", this.setAudioData);\n        audioElement.addEventListener(\"timeupdate\", this.setAudioTime);\n        audioElement.addEventListener('ended', this.stopPlaying);\n    }\n\n    componentWillUnmount(): void {\n        const audioElement = this.audioRef.current;\n\n        audioElement.removeEventListener(\"loadedmetadata\", this.setAudioData);\n        audioElement.removeEventListener(\"timeupdate\", this.setAudioTime);\n        audioElement.removeEventListener(\"ended\", this.stopPlaying);\n    }\n\n    componentDidUpdate(_, prevState: IState) {\n        const { clickedTime, isPlaying, currentTime } = this.state;\n        const audioElement = this.audioRef.current;\n\n        if (prevState.isPlaying !== isPlaying) {\n            if (isPlaying) {\n                audioElement.play();\n            } else {\n                audioElement.pause();\n            }\n        }\n\n        if (clickedTime && clickedTime !== currentTime) {\n            audioElement.currentTime = clickedTime;\n            this.setState({ clickedTime: undefined });\n        }\n    }\n\n    render() {\n        return (\n            <AudioPlayer\n                audioRef={this.audioRef}\n                audioSrc={this.props.audioSrc}\n                isPlaying={this.state.isPlaying}\n                currentTime={this.state.currentTime}\n                duration={this.state.duration}\n\n                setAudioTime={this.setAudioTime}\n                setClickedTime={this.setClickedTime}\n                startPlaying={this.startPlaying}\n                stopPlaying={this.stopPlaying}\n            />\n        )\n    }\n\n    private setAudioTime = () => {\n        const audioElement = this.audioRef.current;\n\n        this.setState({ currentTime: audioElement.currentTime })\n    };\n\n    private setAudioData = () => {\n        const audioElement = this.audioRef.current;\n\n        this.setState({\n            currentTime: audioElement.currentTime,\n            duration: audioElement.duration\n        });\n    };\n\n    private setClickedTime = (clickedTime: number) => {\n        this.setState({\n            clickedTime\n        })\n    };\n\n    private startPlaying = () => {\n        this.setState({ isPlaying: true });\n    };\n\n    private stopPlaying = () => {\n        this.setState({ isPlaying: false });\n    };\n}\n\nexport default AudioPlayerContainer;\n","import styled, { css, keyframes } from 'styled-components';\nimport { MessageDirection } from '../../../redux/store';\nimport constants from '../../../static/constants';\nimport withCustomClasses, { DomCustomClass } from \"../../hoc/withCustomClasses/\";\nimport ITheme from \"../../../themes/interfaces\";\nimport utils from '../../../utils';\n\ninterface IContentWrapperProps {\n    isVideoChatInGroupMode?: boolean;\n    isModelMessage?: boolean;\n    isGroupUserMessage?: boolean;\n\tisMessageWithJustOneEmoticon?: boolean;\n\tshouldIncreaseMessageFontSize: boolean;\n}\n\ninterface IGroupChatModelNameProps {\n    isVideoChatInGroupMode?: boolean;\n}\n\ninterface IFullscreenSystemMessage {\n\tshouldIncreaseMessageFontSize: boolean;\n}\n\ninterface IClientMessageWrapperProps {\n\tisMobileLandscape?: boolean;\n\tisFullscreen?: boolean;\n    isConsecutiveGroupMessage?: boolean;\n\tisLastConsecutiveGroupMessage?: boolean;\n\tisSoloMessage?: boolean;\n}\n\ninterface IModelMessageAndImageWrapperProps {\n    isMobileLandscape?: boolean;\n    isConsecutiveGroupMessage?: boolean;\n\tisLastConsecutiveGroupMessage?: boolean;\n\tisSoloMessage?: boolean;\n\n    /**\n     * In some messenger contexts (fullscreen or responsive rendering),\n     * the profile picture to the left of the message bubble is not rendered\n     */\n    isContextWithoutProfilePicture?: boolean;\n}\n\ninterface IModelProfilePictureProps {\n    picture?: string;\n}\n\ninterface ITimeSectionProps {\n\tshouldIncreaseMessageFontSize: boolean;\n\tdirection?: MessageDirection;\n\tisConsecutiveGroupMessage?: boolean;\n}\n\ninterface IMessageBaseProps {\n\thasImage?: boolean;\n\tisFullscreen?: boolean;\n    isConsecutiveGroupMessage?: boolean;\n    isVideoChatInGroupMode?: boolean;\n    isGroupChatUserMessage?: boolean\n\tshouldRenderAudioMessage?: boolean;\n}\n\ninterface IToyMessageWrapper {\n    isActive?: boolean;\n\tshouldApplyMargin?: boolean;\n}\n\ninterface IGroupUsername {\n    color?: string;\n    isFromClient?: boolean;\n}\n\ninterface IModelMessageWrapper {\n    isConsecutiveGroupMessage?: boolean;\n\tisLastConsecutiveGroupMessage?: boolean;\n\tisSoloMessage?: boolean;\n\thasProfilePicture?: boolean;\n}\n\nexport const getModelMessageBackgroundColor = (\n\ttheme: ITheme,\n\tisVideoChatInGroupMode?: boolean,\n\tisGroupChatUserMessage?: boolean\n) => {\n\tconst { groupChat, modelMessageBackground } = theme.colors;\n\n\tif (isVideoChatInGroupMode) {\n\t\treturn isGroupChatUserMessage\n\t\t\t? groupChat.userMessageBackground\n\t\t\t: groupChat.modelMessageBackground;\n\t}\n\n\treturn modelMessageBackground;\n};\n\nexport const getClientMessageBackgroundColor = (\n\ttheme: ITheme,\n\tisVideoChatInGroupMode?: boolean\n) => isVideoChatInGroupMode\n\t? theme.colors.groupChat.clientMessageBackground\n\t: theme.colors.clientMessageBackground;\n\nexport const getClientMessagePadding = (props: IClientMessageWrapperProps) => {\n\tconst { isConsecutiveGroupMessage, isLastConsecutiveGroupMessage, isSoloMessage, isMobileLandscape } = props;\n\n\tif (isConsecutiveGroupMessage) {\n\t\treturn isLastConsecutiveGroupMessage ? '0 0 10px' :`0 15px 0 0`;\n\t}\n\n\treturn isSoloMessage ? `10px 15px 20px 0`\t: `10px 15px ${isMobileLandscape ? 0 : 15}px 0`\n};\n\nexport const getReceivedMessagePadding = (props: IModelMessageAndImageWrapperProps) => {\n\tconst { isConsecutiveGroupMessage, isLastConsecutiveGroupMessage, isSoloMessage, isMobileLandscape } = props;\n\n\tif (isConsecutiveGroupMessage) {\n\t\treturn isLastConsecutiveGroupMessage ? '0 0 10px' : '0';\n\t}\n\n\treturn isSoloMessage\n\t\t? `10px 15px ${isMobileLandscape ? 5 : 20}px ${constants.receivedMessageAndImageWrapperPaddingRight}px`\n\t\t: `10px 0 ${isMobileLandscape ? 5 : 20}px ${constants.receivedMessageAndImageWrapperPaddingRight}px`;\n};\n\nexport const getMaxWidthForReceivedMessage = (props: IModelMessageWrapper) => {\n\tconst { isConsecutiveGroupMessage, hasProfilePicture} = props;\n\n\tif (!isConsecutiveGroupMessage) {\n\t\treturn '70%';\n\t}\n\n\treturn `calc(70% + ${hasProfilePicture ? 45 : 10}px)`;\n};\n\nexport const messageAnimation = keyframes`\n    0%{\n        -webkit-transform:matrix3d(0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1);\n        transform:matrix3d(0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1)\n    }\n    4.7%{\n        -webkit-transform:matrix3d(.45,0,0,0,0,.45,0,0,0,0,1,0,0,0,0,1);\n        transform:matrix3d(.45,0,0,0,0,.45,0,0,0,0,1,0,0,0,0,1)\n    }\n    9.41%{\n        -webkit-transform:matrix3d(.883,0,0,0,0,.883,0,0,0,0,1,0,0,0,0,1);\n        transform:matrix3d(.883,0,0,0,0,.883,0,0,0,0,1,0,0,0,0,1)\n    }\n    14.11%{\n        -webkit-transform:matrix3d(1.141,0,0,0,0,1.141,0,0,0,0,1,0,0,0,0,1);\n        transform:matrix3d(1.141,0,0,0,0,1.141,0,0,0,0,1,0,0,0,0,1)\n    }\n    18.72%{\n        -webkit-transform:matrix3d(1.212,0,0,0,0,1.212,0,0,0,0,1,0,0,0,0,1);\n        transform:matrix3d(1.212,0,0,0,0,1.212,0,0,0,0,1,0,0,0,0,1)\n    }\n    24.32%{\n        -webkit-transform:matrix3d(1.151,0,0,0,0,1.151,0,0,0,0,1,0,0,0,0,1);\n        transform:matrix3d(1.151,0,0,0,0,1.151,0,0,0,0,1,0,0,0,0,1)\n    }\n    29.93%{\n        -webkit-transform:matrix3d(1.048,0,0,0,0,1.048,0,0,0,0,1,0,0,0,0,1);\n        transform:matrix3d(1.048,0,0,0,0,1.048,0,0,0,0,1,0,0,0,0,1)\n    }\n    35.54%{\n        -webkit-transform:matrix3d(.979,0,0,0,0,.979,0,0,0,0,1,0,0,0,0,1);\n        transform:matrix3d(.979,0,0,0,0,.979,0,0,0,0,1,0,0,0,0,1)\n    }\n    41.04%{\n        -webkit-transform:matrix3d(.961,0,0,0,0,.961,0,0,0,0,1,0,0,0,0,1);\n        transform:matrix3d(.961,0,0,0,0,.961,0,0,0,0,1,0,0,0,0,1)\n    }\n    52.15%{\n        -webkit-transform:matrix3d(.991,0,0,0,0,.991,0,0,0,0,1,0,0,0,0,1);\n        transform:matrix3d(.991,0,0,0,0,.991,0,0,0,0,1,0,0,0,0,1)\n    }\n    63.26%{\n        -webkit-transform:matrix3d(1.007,0,0,0,0,1.007,0,0,0,0,1,0,0,0,0,1);\n        transform:matrix3d(1.007,0,0,0,0,1.007,0,0,0,0,1,0,0,0,0,1)\n    }\n    85.49%{\n        -webkit-transform:matrix3d(.999,0,0,0,0,.999,0,0,0,0,1,0,0,0,0,1);\n        transform:matrix3d(.999,0,0,0,0,.999,0,0,0,0,1,0,0,0,0,1)\n    }\n    100%{\n        -webkit-transform:matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);\n        transform:matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)\n    }\n`;\n\nconst animation = css`\n    ${messageAnimation} .5s linear both;\n`;\n\nexport const MessageBase = styled.div<IMessageBaseProps>`\n    padding: ${props => props.hasImage\n        ? `15px`\n        : `15px 15px 20px`\n    };\n\n    font-family: ${(props) => props.theme.typography.fontFamily};\n    font-weight: ${(props) => props.theme.typography.weight.regular};\n\n    width: 75%;\n    margin-bottom: 7px;\n    transform-origin: 0 0;\n    word-wrap: break-word;\n    border-top-left-radius: 5px;\n    border-top-right-radius: 5px;\n\n    animation: ${animation};\n`;\n\nexport const NotSystemMessageBase = styled(MessageBase)<IMessageBaseProps>`\n    ${({ isConsecutiveGroupMessage }) => !isConsecutiveGroupMessage &&\n    `\n        &:after {\n            position: absolute;\n            width: 0;\n            display: block;\n            bottom: -20px;\n            border-style: solid;\n            content: \"\";\n        }\n    `}\n`;\n\nexport const GroupChatPictureWrapper = styled.div`\n\tmargin-right: 5px;\n`;\n\nexport const ClientMessage = withCustomClasses<IMessageBaseProps>(\n    styled(NotSystemMessageBase)<IMessageBaseProps>`\n        background-color: ${({ theme, isVideoChatInGroupMode }) =>\n\t\t\tgetClientMessageBackgroundColor(theme, isVideoChatInGroupMode)\n\t\t};\n\t\t\n\t\t${({ isFullscreen }) => isFullscreen && `float: right;`}\n\n        ${({ isConsecutiveGroupMessage }) => isConsecutiveGroupMessage && `\n\t\t\tmargin-right: 12px;\n\t\t\tmargin-left: auto;\n            border-bottom-right-radius: 5px;\n\t\t`}\n\n\t\twidth: ${({ shouldRenderAudioMessage }) => shouldRenderAudioMessage ? '70%': 'max-content'};\n\t\tmax-width: 70%;\n\t\ttext-align: left;\n\t\tmargin-left: 8px;\n\t\tborder-bottom-left-radius: 5px;\n\n        &:after {\n            border-color: ${({ theme, isVideoChatInGroupMode }) =>\n                getClientMessageBackgroundColor(theme, isVideoChatInGroupMode)\n            } transparent;\n            right: -15px;\n            margin-right: 15px;\n            border-width: 21px 0 0 16px;\n        }\n    `,\n    [DomCustomClass.Message, DomCustomClass.ClientMessage]\n);\n\nexport const GroupChatModelInfoWrapper = styled.div`\n    color: ${(props) => props.theme.colors.groupChat.modelInfoText};\n\n    display: flex;\n    align-items: center;\n    font-style: Roboto;\n    font-weight: bold;\n    font-size: 12px;\n    margin-bottom: 2px;\n`;\n\nexport const GroupChatModelName = styled.div<IGroupChatModelNameProps>`\n    ${({ isVideoChatInGroupMode, theme }) => isVideoChatInGroupMode\n        && `color: ${theme.colors.groupChat.modelMessageUsername}`\n}\n`;\n\nexport const ToyMessageWrapper = withCustomClasses<IToyMessageWrapper>(styled.div<IToyMessageWrapper>`\n\t${props => props.shouldApplyMargin && 'margin-top: -30px;'}\n\t\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\tpadding: 10px 0 10px 0;\n`, (props: IToyMessageWrapper) => {\n        const classes = [DomCustomClass.Message, DomCustomClass.ToyMessage];\n        if (!props.isActive) {\n            classes.push(DomCustomClass.ToyMessageInactive);\n        }\n        return classes;\n    }\n);\n\nexport const FullscreenSystemMessage = styled(MessageBase)<IFullscreenSystemMessage>`\n    float: right;\n    text-align: left;\n    font-size: ${({shouldIncreaseMessageFontSize}) =>\n\t\tshouldIncreaseMessageFontSize ? `calc(14px + ${constants.messageFontSizePercentage}%)` : '14px'};\n    background-color: ${(props) => props.theme.colors.fullscreenSystemMessageBackground};\n    color: ${(props) => props.theme.colors.fullscreenSystemMessageText};\n`;\n\nexport const MessageContentWrapper = styled(NotSystemMessageBase)<IMessageBaseProps>`\n    background-color: ${({ theme, isVideoChatInGroupMode, isGroupChatUserMessage }) =>\n        getModelMessageBackgroundColor(theme, isVideoChatInGroupMode, isGroupChatUserMessage)\n\t};\n\t\n    color: ${(props) => props.theme.colors.messageText};\n    ${({ isConsecutiveGroupMessage }) => isConsecutiveGroupMessage && `border-bottom-left-radius: 5px;`}\n\t\n\tdisplay: flex;\n\tflex-direction: ${({ isVideoChatInGroupMode }) => isVideoChatInGroupMode ? 'column' : 'row'};\n    border-bottom-right-radius: 5px;\n    \n    text-align: left;\n    width: 100%;\n    box-sizing: border-box;\n    \n    &:after {\n        left: -15px;\n        border-color: ${({ theme, isVideoChatInGroupMode, isGroupChatUserMessage }) =>\n    \t\tgetModelMessageBackgroundColor(theme, isVideoChatInGroupMode, isGroupChatUserMessage)} transparent;\n        margin-left: 15px;\n        border-width: 21px 16px 0 0;\n    }\n`;\n\nexport const TrashIcon = styled.span`\n    width: 15px;\n    height: 15px;\n    position: relative;\n    float: right;\n    cursor: pointer;\n    font-size: 11px;\n    color: rgba(0,0,0,.6);\n    margin-top: 20px;\n    right: -3px;\n`;\n\nexport const TimeSection = styled.div<ITimeSectionProps>`\n    font-family: ${(props) => props.theme.typography.fontFamily};\n    font-weight: ${(props) => props.theme.typography.weight.regular};\n    color: ${(props) => props.theme.colors.messageTimeAgo};\n\t\n\tz-index: 2;\n\tfont-size: ${({ shouldIncreaseMessageFontSize }) => utils.computeMessageFontSize(shouldIncreaseMessageFontSize, 11)};\n\n    ${(props) => props.direction === MessageDirection.out && `\n\t\tmargin-left: auto;\n    `}\n\n    ${(props) => props.direction === MessageDirection.in && `\n\t\talign-self: flex-start;\n    `}\n`;\n\nexport const ProfilePictureWrapper = styled.div`\n    ${(props: IModelProfilePictureProps) => props.picture &&\n\t\t`background: url(${props.picture}) no-repeat center center;`\n\t}\n    \n    align-self: flex-end;\n    left: -11px;\n    top: 10px;\n    height: 48px;\n    width: 48px;\n    border-radius: 50%;\n    background-size: auto 100%;\n    display: inline-block;\n    position: relative;\n`;\n\nexport const ClientMessageWrapper = styled.div<IClientMessageWrapperProps>`\n    padding: ${(props) => getClientMessagePadding(props)};\n\n\t${({ isFullscreen }) => isFullscreen\n\t\t? `display: inline-block;`\n\t\t: `\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: row;\n\t\t`\n\t}\n\t\n    width: 100%;\n    position: relative;\n    clear: both;\n`;\n\nexport const ContentWrapper = styled.div<IContentWrapperProps>`\n\tcolor: ${({ isVideoChatInGroupMode, isModelMessage, isGroupUserMessage, theme }) => {\n\t\tconst { messageText, groupChat } = theme.colors;\n\n\t\tif (!isVideoChatInGroupMode) {\n\t\t\treturn messageText;\n\t\t}\n\n\t\tif (isModelMessage) {\n\t\t\treturn groupChat.modelMessageText;\n\t\t}\n\n\t\treturn isGroupUserMessage\n\t\t\t? groupChat.userMessageText\n\t\t\t: groupChat.clientMessageText;\n\t}};\n\n\tfont-size: ${(props) => {\n\t\tif (props.isMessageWithJustOneEmoticon) {\n\t\t\treturn constants.emoticonSize.large\n\t\t}\n\n\t\treturn props.shouldIncreaseMessageFontSize\n\t\t\t? (100 + constants.messageFontSizePercentage) * constants.emoticonSize.small / 100\n\t\t\t: constants.emoticonSize.small;\n\t}}px;\n\t\n\twidth: 100%;\n`;\n\nexport const FullscreenSystemMessageWrapper = styled.div`\n    display: inline-block;\n    width: 100%;\n    position: relative;\n    clear: both;\n`;\n\nexport const ReceivedMessageAndImageWrapper = styled.div<IModelMessageAndImageWrapperProps>`\n    padding: ${(props) => getReceivedMessagePadding(props)};\n\n    ${({ isConsecutiveGroupMessage, isContextWithoutProfilePicture }) => isConsecutiveGroupMessage\n        ? `width: calc(100% - ${isContextWithoutProfilePicture ? constants.receivedMessageAndImageWrapperMarginLeft : 68}px);\n           margin-left: ${isContextWithoutProfilePicture ? `${constants.receivedMessageAndImageWrapperMarginLeft}px` : '68px'};`\n        : `width: 100%;`\n\t}\n\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    position: relative;\n    clear: both;\n`;\n\nexport const ReceivedMessageWrapper = withCustomClasses<IModelMessageWrapper>(\n    styled.div<IModelMessageWrapper>`\n        max-width: ${props => getMaxWidthForReceivedMessage(props)};\n        \n        width: max-content;\n        display: inline-block;\n        position: relative;\n        margin-right: 5px;\n    `, [DomCustomClass.Message, DomCustomClass.ModelMessage]\n);\n\nexport const FullscreenReceivedMessageWrapper = withCustomClasses(styled.div`\n    display: inline-block;\n    position: relative;\n    width: 100%;\n`, [DomCustomClass.Message, DomCustomClass.ModelMessage, DomCustomClass.FullScreen]\n);\n\nexport const GroupChatUsername = styled.div<IGroupUsername>`\n    font-weight: ${props => props.theme.typography.weight.bold};\n    color: ${({ color, isFromClient, theme }) => isFromClient\n        ? theme.colors.groupChat.clientName\n        : color\n    };\n\n    font-size: 14px;\n    padding: 3px 0;\n`;\n","import styled from \"styled-components\";\n\ninterface IOptionImageText {\n    isActive?: boolean;\n}\n\nexport const Logo = styled.div`\n    color: ${props => props.theme.colors.toySection.primaryColor};\n    \n    font-size: 50px;\n`;\n\nexport const OptionImage = styled.i<IOptionImageText>`\n\t${props => {\n\t\tconst { primaryColor, inactiveToyMessageText } = props.theme.colors.toySection;\n\t\n\t\treturn `color: ${props.isActive ? primaryColor : inactiveToyMessageText};`;\n\t}}\n\n    font-size: 40px;\n    padding: 5px;\n`;\n\nexport const Text = styled.div<IOptionImageText>`\n    color: ${props => props.theme.colors.toySection.text};\n\n    ${props => {\n        const { primaryColor, secondaryColor, inactiveToyMessageText } = props.theme.colors.toySection;\n\n        return props.isActive\n            ? `background-image: linear-gradient(180deg,${primaryColor}, ${secondaryColor});`\n            : `background-color: ${inactiveToyMessageText};`\n        }\n    }\n\n    border-radius: 2px;\n    font-size: 11px;\n    text-transform: uppercase;\n    padding: 2px 3px 1px;\n`;\n","import * as React from \"react\";\nimport { Logo, Text, OptionImage } from \"./style\";\nimport { IToyMessageInfo } from \"src/redux/store\";\n\ntype IProps = IToyMessageInfo;\n\nconst DefaultToyMessage = () => (\n    <Logo className=\"-icon-toy-control-vibrating\" />\n); \n\nconst ToyMessage: React.FC<IProps> = ({\n    text,\n    isActive,\n    isDefault\n}: IProps) => {\n    const isMessageActive = isDefault || isActive;\n\tconst image = <OptionImage\n\t\tisActive={isMessageActive}\n\t\tclassName={isMessageActive ? '-icon-toy-control-vibrating' : '-icon-toy-control'}\n\t/>;\n\n    return (\n        <>\n            {isDefault\n                ? <DefaultToyMessage />\n                : image\n            }\n            \n            <Text isActive={isMessageActive}>\n                {text}\n            </Text>\n        </>\n    )\n};\n\nexport default ToyMessage;\n","import ToyMessage from \"./ToyMessage\";\n\nexport default ToyMessage;\n   ","import * as moment from \"moment\";\nimport * as React from \"react\";\nimport { isEmpty } from \"lodash\";\n\nimport IMessageProps from \"./interfaces\";\nimport config from \"../../../static/config\";\nimport SimpleModelPicture from \"../../common/SimpleModelPicture\";\nimport withCustomClasses, { DomCustomClass } from \"../../hoc/withCustomClasses\";\nimport GroupContainer, { IComponentProps as IGroupContainerProps } from '../../common/Group';\nimport {\n    ClientMessage,\n    ClientMessageWrapper,\n    ContentWrapper,\n    FullscreenReceivedMessageWrapper,\n    FullscreenSystemMessage,\n    FullscreenSystemMessageWrapper,\n    GroupChatModelInfoWrapper,\n    GroupChatModelName,\n    GroupChatUsername,\n    MessageContentWrapper,\n    ProfilePictureWrapper,\n    ReceivedMessageAndImageWrapper,\n    ReceivedMessageWrapper,\n    ToyMessageWrapper,\n\tGroupChatPictureWrapper\n} from \"./style\";\nimport ToyMessage from \"../../../features/common/ToyMessage\";\nimport { IToyMessageInfo } from \"../../../redux/store\";\n\nexport const getMessageTime = (dateCreated: string) => moment(dateCreated).format(\"LT\");\n\n/**\n * Returns the message sent by the current client as a React element.\n */\nexport const getClientMessageComponent = (\n\tcontent: any,\n\ttimeIndicatorComponent: React.ReactElement,\n\tprops: IMessageProps,\n\tshouldRenderAudioMessage?: boolean\n) => {\n\tconst shouldRenderClientName = props.isVideoChatInGroupMode\n\t\t&& props.hasClientName\n\t\t&& !props.isConsecutiveGroupMessage\n\t\t&& !isEmpty(props.groupChatClientName);\n\n\treturn (\n\t\t<ClientMessageWrapper\n\t\t\tid={props.id}\n\t\t\tisFullscreen={props.isFullscreen}\n\t\t\tisMobileLandscape={props.isMobileLandscape}\n\t\t\tisConsecutiveGroupMessage={props.isConsecutiveGroupMessage}\n\t\t\tisLastConsecutiveGroupMessage={props.isLastConsecutiveGroupMessage}\n\t\t\tisSoloMessage={props.isSoloMessage}\n\t\t>\n\t\t\t{hasTimeIndicator(props) && timeIndicatorComponent}\n\n\t\t\t<ClientMessage\n\t\t\t\thasImage={props.isImage}\n\t\t\t\tisFullscreen={props.isFullscreen}\n\t\t\t\tisConsecutiveGroupMessage={props.isConsecutiveGroupMessage}\n\t\t\t\tisVideoChatInGroupMode={props.isVideoChatInGroupMode}\n\t\t\t\tshouldRenderAudioMessage={shouldRenderAudioMessage}\n\t\t\t>\n\t\t\t\t{shouldRenderClientName &&\n\t\t\t\t\t<GroupChatUsername isFromClient={true}>\n\t\t\t\t\t\t{props.groupChatClientName}\n\t\t\t\t\t</GroupChatUsername>\n\t\t\t\t}\n\n\t\t\t\t<ContentWrapper\n\t\t\t\t\tisVideoChatInGroupMode={props.isVideoChatInGroupMode}\n\t\t\t\t\tisMessageWithJustOneEmoticon={props.isMessageWithJustOneEmoticon}\n\t\t\t\t\tshouldIncreaseMessageFontSize={props.shouldIncreaseMessageFontSize}\n\t\t\t\t>\n\t\t\t\t\t{content}\n\t\t\t\t</ContentWrapper>\n\t\t\t</ClientMessage>\n\t\t</ClientMessageWrapper>\n\t);\n};\n\n/**\n * Returns the message sent by the model as a React element\n */\nexport const getReceivedMessageComponent = (\n    content: any,\n    timeIndicatorComponent: React.ReactElement,\n    props: IMessageProps,\n    shouldHavePicture: boolean = true,\n    isGroupChatUserMessage: boolean = false\n) => {\n    const shouldRenderModelProfilePicture = !props.isFullscreen\n        && !props.isResponsive\n        && props.hasModelProfilePicture\n        && shouldHavePicture\n        && !props.isConsecutiveGroupMessage;\n\n    const messageContent = (\n\t\t<MessageContentWrapper\n\t\t\thasImage={props.isImage}\n\t\t\tisConsecutiveGroupMessage={props.isConsecutiveGroupMessage}\n\t\t\tisVideoChatInGroupMode={props.isVideoChatInGroupMode}\n\t\t\tisGroupChatUserMessage={isGroupChatUserMessage}\n\t\t\tisFullscreen={props.isFullscreen}\n\t\t>\n\t\t\t{content}\n\t\t</MessageContentWrapper>\n    );\n\n\tconst isContextWithoutProfilePicture = props.isResponsive\n\t\t|| props.isFullscreen\n\t\t|| !isEmpty(props.username)\n\t\t|| props.isVideoChatInGroupMode;\n\n\tconst messageData = (\n        <ReceivedMessageWrapper\n            id={props.id}\n            isConsecutiveGroupMessage={props.isConsecutiveGroupMessage}\n\t\t\tisLastConsecutiveGroupMessage={props.isLastConsecutiveGroupMessage}\n\t\t\tisSoloMessage={props.isSoloMessage}\n\t\t\thasProfilePicture={!isContextWithoutProfilePicture}\n        >\n            {messageContent}\n        </ReceivedMessageWrapper>\n    );\n\n    const fullscreenMessage = (\n        <FullscreenReceivedMessageWrapper id={props.id}>\n            {messageData}\n        </FullscreenReceivedMessageWrapper>\n    );\n\n    const receivedMessage = <>\n        {shouldRenderModelProfilePicture &&\n\t\t\t<ProfilePictureWrapper>\n\t\t\t\t<SimpleModelPicture\n\t\t\t\t\tpicture={props.modelProfilePicture}\n\t\t\t\t\tsize={config.profilePictureSizes.small}\n\t\t\t\t/>\n\t\t\t</ProfilePictureWrapper>\n        }\n\n        {props.isFullscreen ? fullscreenMessage : messageData}\n    </>;\n\n    const groupModeReceivedMessage = <>\n        {props.isFullscreen\n            ? fullscreenMessage\n            : (<ReceivedMessageWrapper>\n                    {messageContent}\n                </ReceivedMessageWrapper>\n            )\n        }\n\t</>;\n\n    return (\n        <ReceivedMessageAndImageWrapper\n            id={props.id}\n            isMobileLandscape={props.isMobileLandscape}\n            isConsecutiveGroupMessage={props.isConsecutiveGroupMessage}\n\t\t\tisLastConsecutiveGroupMessage={props.isLastConsecutiveGroupMessage}\n\t\t\tisSoloMessage={props.isSoloMessage}\n            isContextWithoutProfilePicture={isContextWithoutProfilePicture}\n        >\n            {props.isVideoChatInGroupMode\n                ? groupModeReceivedMessage\n                : receivedMessage\n            }\n\n\t\t\t{hasTimeIndicator(props) && timeIndicatorComponent}\n        </ReceivedMessageAndImageWrapper>\n    );\n};\n\n/**\n * Creates a static group component with automated test identifier\n */\nconst SystemMessage = withCustomClasses<IGroupContainerProps>(GroupContainer,\n    [DomCustomClass.Message, DomCustomClass.SystemMessage]\n);\n\n/**\n * Returns the system message received from the backend as a React element\n */\nexport const getSystemMessage = (content: any, props: IMessageProps) => {\n    const systemMessageComponent = (\n        <div id={props.id}>\n            <SystemMessage\n                datetime={props.dateCreated}\n                informationText={props.children}\n                showArrow={false}\n            />\n        </div>\n    );\n\n    const fullscreenSystemMessageComponent = (\n        <FullscreenSystemMessageWrapper id={props.id}>\n            <FullscreenSystemMessage shouldIncreaseMessageFontSize={props.shouldIncreaseMessageFontSize}>\n                {content}\n            </FullscreenSystemMessage>\n        </FullscreenSystemMessageWrapper>\n    );\n\n    return props.isFullscreen\n        ? fullscreenSystemMessageComponent\n        : systemMessageComponent;\n};\n\n/**\n *\n * @param toy\n */\nexport const getToyMessage = (toy: IToyMessageInfo, messageId?: string, groupIndex?: number) => (\n    <ToyMessageWrapper\n        id={messageId}\n        isActive={toy.isActive}\n        shouldApplyMargin={groupIndex === 1}\n\t>\n        <ToyMessage {...toy} />\n    </ToyMessageWrapper>\n);\n\nexport const getGroupChatUserMessage = (\n    content: any,\n    timeIndicatorComponent: React.ReactElement,\n    props: IMessageProps\n) => {\n    const groupMessageContent = (\n        <>\n            {!props.isConsecutiveGroupMessage &&\n\t\t\t\t<GroupChatUsername color={props.usernameColor as string}>\n\t\t\t\t\t{props.username}\n\t\t\t\t</GroupChatUsername>\n            }\n            <ContentWrapper\n                isVideoChatInGroupMode={props.isVideoChatInGroupMode}\n                isGroupUserMessage={true}\n\t\t\t\tisMessageWithJustOneEmoticon={props.isMessageWithJustOneEmoticon}\n\t\t\t\tshouldIncreaseMessageFontSize={props.shouldIncreaseMessageFontSize}\n            >\n                {content}\n            </ContentWrapper>\n        </>\n    );\n\n    return getReceivedMessageComponent(groupMessageContent, timeIndicatorComponent, props, false, true);\n};\n\nexport const getModelMessageComponent = (\n    content: any,\n    timeIndicatorComponent: React.ReactElement,\n    props: IMessageProps\n) => {\n    const hasGroupChatInfo = props.isVideoChatInGroupMode\n        && !props.isConsecutiveGroupMessage;\n\n    const messageContent = (\n        <>\n            {hasGroupChatInfo && (\n                <GroupChatModelInfoWrapper>\n\t\t\t\t\t{props.hasModelProfilePicture &&\n\t\t\t\t\t\t<GroupChatPictureWrapper>\n\t\t\t\t\t\t\t<SimpleModelPicture\n\t\t\t\t\t\t\t\tpicture={props.modelProfilePicture}\n\t\t\t\t\t\t\t\tsize={config.profilePictureSizes.extraSmall}\n\t\t\t\t\t\t\t\tisGroupChatMode={props.isVideoChatInGroupMode}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</GroupChatPictureWrapper>\n\t\t\t\t\t}\n\n\t\t\t\t\t<GroupChatModelName isVideoChatInGroupMode={props.isVideoChatInGroupMode}>\n\t\t\t\t\t\t{props.modelName}\n\t\t\t\t\t</GroupChatModelName>\n                </GroupChatModelInfoWrapper>\n            )}\n            <ContentWrapper\n                isVideoChatInGroupMode={props.isVideoChatInGroupMode}\n                isModelMessage={true}\n\t\t\t\tisMessageWithJustOneEmoticon={props.isMessageWithJustOneEmoticon}\n\t\t\t\tshouldIncreaseMessageFontSize={props.shouldIncreaseMessageFontSize}\n            >\n                {content}\n            </ContentWrapper>\n        </>\n    );\n\n\treturn getReceivedMessageComponent(messageContent,\n\t\ttimeIndicatorComponent,\n\t\tprops,\n\t\tprops.hasModelProfilePicture\n\t);\n};\n\nconst hasTimeIndicator = (props: IMessageProps) => !props.isFullscreen;\n","import * as React from 'react';\nimport { isUndefined, isEmpty } from 'lodash'\n\nimport { TimeSection } from './style';\nimport IMessageProps from './interfaces';\nimport AudioPlayerContainer from '../../specific/AudioPlayer';\nimport { MessageContentType, MessageDirection, IToyMessageInfo } from '../../../redux/store';\nimport { getToyMessage, getSystemMessage, getClientMessageComponent, getModelMessageComponent, getGroupChatUserMessage, getMessageTime } from './utils';\nimport { MsgType } from '../../../redux/store';\n\nconst Message = (props: IMessageProps) => {\n    const timeIndicatorComponent = (\n\t\t<TimeSection\n\t\t\tdirection={props.direction}\n\t\t\tisConsecutiveGroupMessage={props.isConsecutiveGroupMessage}\n\t\t\tshouldIncreaseMessageFontSize={props.shouldIncreaseMessageFontSize}\n\t\t>\n\t\t\t<div>{getMessageTime(props.dateCreated)}</div>\n\t\t</TimeSection>\n    );\n\n    const shouldRenderAudioMessage = props.contentType === MessageContentType.AUDIO\n        && !isUndefined(props.audioSrc);\n\n    const messageContent = shouldRenderAudioMessage\n        ? <AudioPlayerContainer audioSrc={props.audioSrc as string} />\n        : props.children;\n\n    const isMessageReceived = !props.isSystem && props.direction === MessageDirection.in;\n\n    const messageContext = {\n        isSystem: props.isSystem,\n        isToy: props.type === MsgType.TOY && !isEmpty(props.toy),\n        isFromClient: !props.isSystem && props.direction === MessageDirection.out,\n        isFromModel: isMessageReceived && isEmpty(props.username),\n        isFromGroupUser: isMessageReceived && !isEmpty(props.username)\n    };\n\n    return (\n        <>\n            {messageContext.isSystem && getSystemMessage(messageContent, props)}\n\n            {messageContext.isToy && getToyMessage(props.toy as IToyMessageInfo, props.id, props.groupIndex)}\n\n            {messageContext.isFromClient && getClientMessageComponent(messageContent, timeIndicatorComponent, props, shouldRenderAudioMessage)}\n\n            {messageContext.isFromModel && getModelMessageComponent(messageContent, timeIndicatorComponent, props)}\n\n            {messageContext.isFromGroupUser && getGroupChatUserMessage(messageContent, timeIndicatorComponent, props)}\n        </>\n    );\n};\n\nexport default Message;\n","import MessageContainer from './MessageContainer';\n\nexport default MessageContainer;","import * as React from 'react';\n\nimport Message from './Message';\nimport selectors from '../../../redux/selectors';\nimport IStore, { MessageDirection, ITranslation, IToyMessageInfo, MessageContentType, MsgType } from '../../../redux/store';\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\n\ninterface IComponentProps {\n    id: string;\n    isSystem: boolean;\n    dateCreated: string;\n    type?: MsgType;\n    toy?: IToyMessageInfo;\n    direction: MessageDirection;\n    contentType?: MessageContentType;\n    isImage?: boolean;\n    audioSrc?: string;\n    username?: string;\n    usernameColor?: string;\n\tgroupIndex?: number;\n    isFullscreen: boolean;\n    isResponsive: boolean;\n    isMessageWithJustOneEmoticon?: boolean;\n    children: any;\n\n    onContentUpdate?: () => any;\n}\n\ninterface IStoreProps {\n    // Properties\n    isMobileLandscape: boolean;\n    hasModelProfilePicture: boolean;\n    isConsecutiveGroupMessage: boolean;\n\tisLastConsecutiveGroupMessage: boolean;\n\tisSoloMessage: boolean;\n    modelProfilePicture: any;\n    translation: ITranslation;\n    isVideoChatInGroupMode: boolean;\n    groupChatClientName: string;\n    hasClientName: boolean;\n\tshouldIncreaseMessageFontSize: boolean;\n    modelName: string;\n}\n\ntype IProps = IComponentProps & IStoreProps & IInstanceProps;\n\nclass MessageContainer extends React.Component<IProps> {\n\n    componentDidUpdate(): void {\n        if (this.props.onContentUpdate) {\n            this.props.onContentUpdate();\n        }\n    }\n\n    render() {\n        return (\n            <Message\n                id={this.props.id}\n                dateCreated={this.props.dateCreated}\n                direction={this.props.direction}\n                type={this.props.type}\n                toy={this.props.toy}\n                audioSrc={this.props.audioSrc}\n                contentType={this.props.contentType}\n                isSystem={this.props.isSystem}\n                isImage={this.props.isImage}\n                isFullscreen={this.props.isFullscreen}\n                isResponsive={this.props.isResponsive}\n                username={this.props.username}\n                groupChatClientName={this.props.groupChatClientName}\n                hasClientName={this.props.hasClientName}\n                usernameColor={this.props.usernameColor}\n                translation={this.props.translation}\n                hasModelProfilePicture={this.props.hasModelProfilePicture}\n                isMobileLandscape={this.props.isMobileLandscape}\n                isMessageWithJustOneEmoticon={this.props.isMessageWithJustOneEmoticon}\n                isConsecutiveGroupMessage={this.props.isConsecutiveGroupMessage}\n\t\t\t\tisLastConsecutiveGroupMessage={this.props.isLastConsecutiveGroupMessage}\n\t\t\t\tisSoloMessage={this.props.isSoloMessage}\n                modelProfilePicture={this.props.modelProfilePicture}\n                isVideoChatInGroupMode={this.props.isVideoChatInGroupMode}\n                modelName={this.props.modelName}\n                groupIndex={this.props.groupIndex}\n                shouldIncreaseMessageFontSize={this.props.shouldIncreaseMessageFontSize}\n            >\n                {this.props.children}\n            </Message>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IStore, { instanceId, id }: IProps) => ({\n    modelProfilePicture: selectors.getModelProfilePicture(store, instanceId),\n    translation: selectors.getTranslation(store, instanceId),\n    hasModelProfilePicture: selectors.hasModelProfilePicture(store, instanceId),\n    isMobileLandscape: selectors.isMobileLandscape(store, instanceId),\n    isConsecutiveGroupMessage: selectors.isConsecutiveGroupMessage(id)(store, instanceId),\n\tisLastConsecutiveGroupMessage: selectors.isLastConsecutiveGroupMessage(id)(store, instanceId),\n\tisSoloMessage: selectors.isSoloMessage(id)(store, instanceId),\n    groupChatClientName: selectors.getGroupChatClientName(store, instanceId),\n    isVideoChatInGroupMode: selectors.isVideoChatInGroupMode(store, instanceId),\n    hasClientName: selectors.hasClientName(store, instanceId),\n    modelName: selectors.getModelName(store, instanceId),\n\tshouldIncreaseMessageFontSize: selectors.getShouldIncreaseMessageFontSize(store, instanceId)\n});\n\nexport default withRedux<IComponentProps>(MessageContainer, mapStateToProps);\n","import * as React from 'react';\nimport 'react-perfect-scrollbar/dist/css/styles.css';\nimport reactStringReplace from 'react-string-replace';\nimport { forEach, get, includes, isEmpty, map, replace } from 'lodash';\n\nimport utils from '../../../utils';\nimport MessageGift from '../MessageGift';\nimport MessageEmoticon from '../MessageEmoticon';\nimport constants from \"../../../static/constants\";\nimport { IEmoticon, IGift, IGroupMessage, IMessage, MessageContentType, MessageDirection } from '../../../redux/store';\nimport { ImageUrlContentWrapper, ImageUrlTextWrapper, MessageItem, MessageList } from './style';\nimport GroupContainer from '../../common/Group';\nimport { CONTENT_UPDATE_TYPE, IChatBoxProps } from './types';\nimport ImageMessageContainer from '../ImageMessage';\nimport ImageLoader from '../../common/ImageLoader';\nimport AudioPlayerContainer from '../AudioPlayer';\nimport MessageContainer from '../Message';\n\nconst getImgWidth = (imgMessage: IMessage) =>\n\timgMessage.modalContent?.imgWidth && parseInt(imgMessage.modalContent?.imgWidth, 10) || 0;\n\nconst getImgHeight = (imgMessage: IMessage) =>\n\timgMessage.modalContent?.imgHeight && parseInt(imgMessage.modalContent?.imgHeight, 10) || 0;\n\n/**\n * Translates the text from the editor to the message rendered inside the bubble.\n * In this process, emoticons and gifts shortcuts are replaced by their image.\n * Also, new lines separators are translated for HTML\n */\nexport const prepareTextMessageForDisplaying = (\n\temoticons: IEmoticon[],\n\tgifts: IGift[],\n\tmessage: string,\n\tmentionOptions: string[]\n): any => {\n\tlet result: any[] = [];\n\tconst lines = message.split(constants.MESSAGE_LINE_SEPARATOR);\n\n\tlines.forEach((line: string, index: number) => {\n\t\t// We transform the emoticons and gifts shortcuts into their images\n\t\tresult = result.concat(replaceTextWithSpecialCharacters(\n\t\t\temoticons,\n\t\t\tgifts,\n\t\t\tmentionOptions,\n\t\t\tline,\n\t\t\tindex\n\t\t));\n\n\t\tresult = result.concat();\n\t\tif (index < lines.length - 1) {\n\t\t\tresult.push(<br key={index} />)\n\t\t}\n\t});\n\n\t// We will apply bold styling on all group chat mentions\n\n\treturn result;\n};\n\n/**\n * Being given a line of text, it replaces the emoticons shortcuts and gifts shortcuts\n * with their corresponding images + the group chat mentions with elements with different styling\n * @param emoticons - supported emoticons\n * @param gifts - supported gifts\n * @param groupChatParticipants - active group chat participants\n * @param messageLine - one line of the message\n * @param lineIndex - index of the message line in the whole message\n */\nconst replaceTextWithSpecialCharacters = (\n\temoticons: IEmoticon[],\n\tgifts: IGift[],\n\tmentionOptions: string[],\n\tmessageLine: string,\n\tlineIndex: number\n): any => {\n\tconst emoticonIcons = map(emoticons, emoticon => emoticon.text);\n\tconst giftIcons = map(gifts, gift => utils.getGiftEncoding(gift));\n\tconst mentions = map(mentionOptions, participant => `@${participant}`);\n\n\tconst specialCharactersRegex = utils.getSpecialCharactersRegex(\n\t\temoticons,\n\t\tgiftIcons,\n\t\tmentions\n\t);\n\n\treturn reactStringReplace(messageLine, specialCharactersRegex, (match: string, index: number) => {\n\t\tconst elementKey = `${lineIndex}_${match}_${index}`;\n\n\t\tif (includes(emoticonIcons, match)) {\n\t\t\treturn (\n\t\t\t\t<MessageEmoticon\n\t\t\t\t\tkey={elementKey}\n\t\t\t\t\ticon={match}\n\t\t\t\t\temoticons={emoticons}\n\t\t\t\t/>\n\t\t\t);\n\t\t}\n\n\t\tif (includes(giftIcons, match)) {\n\t\t\treturn (\n\t\t\t\t<MessageGift\n\t\t\t\t\tkey={elementKey}\n\t\t\t\t\ticon={match}\n\t\t\t\t\tgifts={gifts}\n\t\t\t\t\thasEnlargedContent={isGiftMessage(gifts, messageLine)}\n\t\t\t\t/>\n\t\t\t);\n\t\t}\n\n\t\tif (includes(mentions, match)) {\n\t\t\treturn (\n\t\t\t\t<b key={elementKey}>{match}</b>\n\t\t\t);\n\t\t}\n\n\t\treturn match;\n\t});\n};\n\n/**\n *\n * @return {boolean} true if the message is of type text and\n * contains only one emoticon and no other element (text, gifts and so on).\n */\nexport const isMessageWithJustOneEmoticon = (emoticons: IEmoticon[], content: any): boolean => {\n\tif (typeof content !== \"string\") {\n\t\treturn false;\n\t}\n\n\tconst message = content as string;\n\tconst emoticonRegex = utils.getSpecialCharactersRegex(emoticons);\n\tconst emoticonMatch = message.match(emoticonRegex);\n\tconst emoticonCount = emoticonMatch ? emoticonMatch.length : 0;\n\tconst textWithoutEmoticons = message.replace(emoticonRegex, '');\n\tconst textWithoutEmoticonsAndSpaces = textWithoutEmoticons.replace(/\\s+/g, '');\n\n\treturn emoticonCount === 1 && textWithoutEmoticonsAndSpaces.length === 0;\n};\n\n/**\n * A gift message represents a message that contains only gifts -\n * no text, emoticons or other elements.\n */\nconst isGiftMessage = (gifts: IGift[], content: any): boolean => {\n\tif (typeof content !== \"string\") {\n\t\treturn false;\n\t}\n\n\tlet encoding: RegExp;\n\tlet message = content as string;\n\tmessage = replace(message, \" \", \"\");\n\n\tforEach(gifts, (gift: IGift) => {\n\t\tencoding = new RegExp(utils.getGiftEncoding(gift), \"g\");\n\t\tmessage = replace(message, encoding, \"\");\n\t});\n\n\treturn isEmpty(message);\n};\n\nexport const getMessagesToRender =\n\t(groupedMessage: (IMessage | IGroupMessage),\n\t index: number,\n\t props: IChatBoxProps,\n\t key?: string) => {\n\t\tconst isGroup = utils.isGroupMessage(groupedMessage);\n\t\tconst timestamp = utils.getTimestampForMessage(groupedMessage.dateCreated);\n\t\tconst opacity = utils.messageOpacity(\n\t\t\tkey ? props.organizedMessages[key].length : props.organizedMessages.length,\n\t\t\tindex,\n\t\t\tprops.isFullscreen\n\t\t);\n\n\t\tif (!isGroup) {\n\t\t\tconst message = groupedMessage as IMessage;\n\t\t\treturn getMessageListing(message, opacity, props);\n\t\t}\n\n\t\tconst groupMessage = groupedMessage as IGroupMessage;\n\t\tconst group = map(groupMessage.messages, (message: IMessage, groupIndex: number) =>\n\t\t\tgetMessageListing(message, opacity, props, true, groupIndex)\n\t\t);\n\n\t\tconst messageList = (\n\t\t\t<MessageList key={`${index}_${timestamp}`}>\n\t\t\t\t{group}\n\t\t\t</MessageList>\n\t\t);\n\n\t\treturn (\n\t\t\t<GroupContainer\n\t\t\t\tkey={`${index}_${timestamp}`}\n\t\t\t\tdatetime={groupedMessage.dateCreated}\n\t\t\t\tshowArrow={!isEmpty(group)}\n\t\t\t\thasSectionsInitiallyOpened={props.hasHistorySectionsOpened}\n\n\t\t\t\tonContentUpdate={props.onContentUpdate(CONTENT_UPDATE_TYPE.GROUP)}\n\t\t\t>\n\t\t\t\t{messageList}\n\t\t\t</GroupContainer>\n\t\t);\n\t}\n\nexport const getMessageListing = (message: IMessage, opacity: number, props: IChatBoxProps, isGroupMessage?: boolean, groupIndex?: number) => {\n\tconst { emoticons, gifts, mentionOptions } = props;\n\n\tconst getTextMessage = () => message.content\n\t\t&& prepareTextMessageForDisplaying(\n\t\t\temoticons,\n\t\t\tgifts,\n\t\t\tmessage.content as string,\n\t\t\tmentionOptions\n\t\t);\n\n\tconst getImageUrlMessage = () => {\n\t\tconst text = message.content.text\n\t\t\t&& prepareTextMessageForDisplaying(\n\t\t\t\temoticons,\n\t\t\t\tgifts,\n\t\t\t\tmessage.content.text as string,\n\t\t\t\tmentionOptions\n\t\t\t);\n\n\t\treturn (\n\t\t\t<ImageUrlContentWrapper href={message.content.link}>\n\t\t\t\t<ImageMessageContainer\n\t\t\t\t\tid={message.id}\n\t\t\t\t\tsrc={message.content.imgSrc}\n\t\t\t\t\tcontainerWidth={props.width}\n\t\t\t\t\timgWidth={getImgWidth(message)}\n\t\t\t\t\timgHeight={getImgHeight(message)}\n\t\t\t\t\tdirection={message.direction}\n\t\t\t\t/>\n\n\t\t\t\t<ImageUrlTextWrapper>{text}</ImageUrlTextWrapper>\n\t\t\t</ImageUrlContentWrapper>\n\t\t);\n\t};\n\n\tconst getImageMessage = () => message.isOnLoading ? <ImageLoader /> : (\n\t\t<ImageMessageContainer\n\t\t\tid={message.id}\n\t\t\tsrc={message.content}\n\t\t\tonClick={props.setModalContent(message.modalContent)}\n\t\t\tcontainerWidth={props.width}\n\t\t\timgWidth={getImgWidth(message)}\n\t\t\timgHeight={getImgHeight(message)}\n\t\t\tdirection={message.direction}\n\t\t/>\n\t);\n\n\tconst getAudioMessage = () => message.content && message.content.audioMp3 &&\n\t\t<AudioPlayerContainer audioSrc={message.content.audioMp3} />\n\n\tconst messageContent = [];\n\tmessageContent[MessageContentType.TEXT] = getTextMessage;\n\tmessageContent[MessageContentType.IMAGE] = getImageMessage;\n\tmessageContent[MessageContentType.IMAGE_URL] = getImageUrlMessage;\n\tmessageContent[MessageContentType.AUDIO] = getAudioMessage;\n\n\tconst defaultMessageContent = getTextMessage;\n\n\treturn (\n\t\t<MessageItem\n\t\t\tkey={message.id}\n\t\t\topacity={opacity}\n\t\t\tisGroupMessage={isGroupMessage}\n\t\t>\n\t\t\t<MessageContainer\n\t\t\t\tid={message.id}\n\t\t\t\ttype={message.msgType}\n\t\t\t\ttoy={message.toy}\n\t\t\t\tisSystem={message.isSystem}\n\t\t\t\tcontentType={message.contentType}\n\t\t\t\tisFullscreen={props.isFullscreen}\n\t\t\t\tisResponsive={props.isResponsive}\n\t\t\t\tdateCreated={message.dateCreated}\n\t\t\t\tusername={message.username}\n\t\t\t\tusernameColor={message.usernameColor}\n\t\t\t\tdirection={message.direction || MessageDirection.none}\n\t\t\t\taudioSrc={message.content && message.content.audioMp3}\n\t\t\t\tisMessageWithJustOneEmoticon={isMessageWithJustOneEmoticon(props.emoticons, message.content)}\n\t\t\t\tgroupIndex={groupIndex}\n\t\t\t\tisImage={includes([MessageContentType.IMAGE, MessageContentType.IMAGE_URL], message.contentType)}\n\n\t\t\t\tonContentUpdate={props.onContentUpdate(CONTENT_UPDATE_TYPE.MESSAGES, message)}\n\t\t\t>\n\t\t\t\t{message.contentType\n\t\t\t\t\t? get(messageContent, message.contentType, defaultMessageContent)()\n\t\t\t\t\t: defaultMessageContent()\n\t\t\t\t}\n\t\t\t</MessageContainer>\n\t\t</MessageItem>\n\t)\n};\n","import { map, isArray } from 'lodash';\nimport * as React from 'react';\nimport 'react-perfect-scrollbar/dist/css/styles.css';\nimport { IGroupMessage, IMessage } from '../../../redux/store';\nimport GroupContainer from '../../common/Group';\nimport { MessageList } from './style';\nimport { IChatBoxProps, CONTENT_UPDATE_TYPE } from './types';\nimport { getMessagesToRender } from './utils';\n\nconst ChatBox = (props: IChatBoxProps) => {\n\tconst messages: any[] = [];\n\n\t// Grouped messages\n\tif (!isArray(props.organizedMessages)) {\n\t\tObject.keys(props.organizedMessages).forEach(key => {\n\t\t\tconst groupedMessages: React.ReactElement[] = map(props.organizedMessages[key],\n\t\t\t\t(groupedMessage: (IMessage | IGroupMessage), index: number) =>\n\t\t\t\t\tgetMessagesToRender(groupedMessage, index, props, key)\n\t\t\t);\n\n\t\t\tconst dayGroupedMessages: React.ReactElement =\n\t\t\t\t<GroupContainer\n\t\t\t\t\tkey={key}\n\t\t\t\t\tdatetime={key}\n\t\t\t\t\tshowArrow={true}\n\t\t\t\t\thasSectionsInitiallyOpened={props.hasHistorySectionsOpened}\n\t\t\t\t\tisDayGroup={true}\n\n\t\t\t\t\tonContentUpdate={props.onContentUpdate(CONTENT_UPDATE_TYPE.GROUP)}\n\t\t\t\t>\n\t\t\t\t\t{groupedMessages}\n\t\t\t\t</GroupContainer>\n\n\t\t\tmessages.push(props.hasMessagesGrouped ? dayGroupedMessages : groupedMessages);\n\t\t});\n\t} else {\n\t\t// Plain messages\n\t\tprops.organizedMessages.forEach((message: IMessage, index: number) => {\n\t\t\tmessages.push(getMessagesToRender(message, index, props));\n\t\t});\n\t}\n\n\treturn (\n\t\t<MessageList isMobileLandscape={props.isMobileLandscape}>\n\t\t\t{messages}\n\t\t</MessageList>\n\t);\n};\n\nexport default ChatBox;\n","import styled from \"styled-components\";\n\nimport withCustomClasses, { DomCustomClass } from \"../../hoc/withCustomClasses/\";\n\nexport const GroupChatParticipantsWrapper = withCustomClasses(styled.div`\n    background-color: ${props => props.theme.colors.groupChat.participants.bgColor};\n    color: ${props => props.theme.colors.groupChat.participants.textColor};\n    \n    font-family: Roboto;\n    font-weight: bold;\n    font-size: small;\n    \n    border-radius: 2px;\n    padding: 2px 5px;\n    \n    width: fit-content;\n    cursor: pointer;\n`, [DomCustomClass.GroupChatParticipants]);\n","import * as React from 'react';\n\nimport { ITranslation } from \"../../../redux/store\";\nimport { GroupChatParticipantsWrapper } from \"./style\";\nimport { translationWithValues } from \"../../../utils/utils\";\n\nexport interface IProps {\n\tparticipants: number;\n\ttranslation: ITranslation;\n\n\topenMentionSection: () => void;\n}\n\nconst GroupChatParticipants = (props: IProps) => (\n\t<GroupChatParticipantsWrapper onClick={props.openMentionSection}>\n\t\t{props.participants === 1\n\t\t\t? translationWithValues(props.translation.chat.groupChat.singleMember, { value: props.participants })\n\t\t\t: translationWithValues(props.translation.chat.groupChat.members, { value: props.participants })}\n\t</GroupChatParticipantsWrapper>\n);\n\nexport default GroupChatParticipants;\n","import GroupChatParticipantsContainer from './GroupChatParticipantsContainer';\n\nexport default GroupChatParticipantsContainer;","import * as React from 'react';\nimport { isMobile } from 'react-device-detect';\n\nimport IStore, { ITranslation } from \"../../../redux/store\";\nimport { IInstanceProps } from \"../../hoc/withInstanceInfo\";\nimport GroupChatParticipants from \"./GroupChatParticipants\";\nimport selectors from \"../../../redux/selectors\";\nimport withRedux from \"../../hoc/withRedux\";\nimport { openMentionSection, setMentionQuery } from '../../../redux/modules/messenger';\nimport { ActionDispatcher } from '../../../redux';\n\ninterface IStoreProps {\n\tparticipants: number;\n\tshouldRenderParticipants: boolean;\n\ttranslation: ITranslation;\n\thasGroupChatIndicator: boolean;\n\n\topenMentionSection: ActionDispatcher;\n\tsetMentionQuery: ActionDispatcher<string>;\n}\n\ntype IProps = IInstanceProps & IStoreProps;\n\nconst GroupChatParticipantsContainer = (props: IProps) => {\n\tconst openMentionMenu = () => {\n\t\tif (!isMobile) {\n\t\t\tprops.openMentionSection(props.instanceId, true);\n\t\t\tprops.setMentionQuery(props.instanceId, '');\n\t\t}\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t{props.shouldRenderParticipants && props.hasGroupChatIndicator &&\n\t\t\t\t<GroupChatParticipants\n\t\t\t\t\tparticipants={props.participants}\n\t\t\t\t\ttranslation={props.translation}\n\t\t\t\t\topenMentionSection={openMentionMenu}\n\t\t\t\t/>\n\t\t\t}\n\t\t</>\n\t);\n};\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n\ttranslation: selectors.getTranslation(store, instanceId),\n\tparticipants: selectors.getGroupChatParticipantsNumber(store, instanceId),\n\tshouldRenderParticipants: selectors.shouldRenderGroupChatParticipants(store, instanceId),\n\thasGroupChatIndicator: selectors.hasGroupChatIndicator(store, instanceId)\n});\n\nconst mapDispatchToProps = {\n\topenMentionSection,\n\tsetMentionQuery\n};\n\nexport default withRedux(GroupChatParticipantsContainer, mapStateToProps, mapDispatchToProps);\n","import styled from 'styled-components';\n\nexport const FontSizeSwitcherWrapper = styled.div`\n\tbackground-color: ${props => props.theme.colors.lightGreyColor};\n\tcolor: ${props => props.theme.colors.fontSwitcherIcon};\n\tfont-size: 16px;\n\n\tposition: absolute;\n\tz-index: 5;\n\tright: 0;\n\tpadding: 1px 2px;\n\tmargin 3px;\n\tcursor: pointer;\n`;\n","import React from 'react';\nimport { FontSizeSwitcherWrapper } from './style';\n\ninterface IProps {\n\tshouldIncreaseMessageFontSize: boolean;\n\n\ttoggleFontSize: () => void;\n}\n\nconst FontSizeSwitcher = (props: IProps) => (\n\t<FontSizeSwitcherWrapper onClick={props.toggleFontSize}>\n\t\t<i className={props.shouldIncreaseMessageFontSize ? \"-icon-font-size-hover-small\" : \"-icon-font-size-hover-big\"} />\n\t</FontSizeSwitcherWrapper>\n);\n\nexport default FontSizeSwitcher;\n","import FontSizeSwitcherContainer from './FontSizeSwitcherContainer'\n\nexport default FontSizeSwitcherContainer;\n","import React from 'react';\nimport withRedux from '../../hoc/withRedux';\nimport { isMobile } from 'react-device-detect';\n\nimport FontSizeSwitcher from './FontSizeSwitcher';\nimport IStore, { IMessage } from '../../../redux/store';\nimport selectors from '../../../redux/selectors';\nimport { setPreference } from '../../../redux/modules/user'\nimport { ActionDispatcher } from '../../../redux';\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport { PreferenceName } from \"../../../services/AppService/types\";\nimport { IPreferenceActionPayload } from \"../../../redux/interfaces\";\n\ninterface IStoreProps {\n\tshouldIncreaseMessageFontSize: boolean;\n\tisFullscreen: boolean;\n\tmessages: IMessage[];\n\n\tsetPreference: ActionDispatcher<IPreferenceActionPayload>;\n}\n\ntype IProps = IStoreProps & IInstanceProps;\n\nconst FontSizeSwitcherContainer = (props: IProps) => {\n\tconst shouldDisplayFontSizeSwitcher = !props.isFullscreen && !isMobile;\n\n\tconst toggleFontSize = () => {\n\t\tprops.setPreference(props.instanceId, {\n\t\t\tvalue: !props.shouldIncreaseMessageFontSize,\n\t\t\tpreferenceName: PreferenceName.ShouldIncreaseMessageFontSize\n\t\t});\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t{shouldDisplayFontSizeSwitcher && <FontSizeSwitcher\n\t\t\t\ttoggleFontSize={toggleFontSize}\n\t\t\t\tshouldIncreaseMessageFontSize={props.shouldIncreaseMessageFontSize}\n\t\t\t/>}\n\t\t</>\n\t);\n}\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n\tshouldIncreaseMessageFontSize: selectors.getShouldIncreaseMessageFontSize(store, instanceId),\n\tmessages: selectors.getActiveMessages(store, instanceId),\n\tisFullscreen: selectors.isFullScreen(store, instanceId)\n});\n\nconst mapDispatchToProps = {\n\tsetPreference\n};\n\nexport default withRedux(FontSizeSwitcherContainer, mapStateToProps, mapDispatchToProps);\n","import styled from 'styled-components';\nimport { ArrowDirection } from './types';\n\ninterface IArrowWrapperProps {\n    arrowDirection: ArrowDirection,\n    isResponsive?: boolean\n}\n\nexport const ArrowWrapper = styled.i.attrs(\n    { className: (props: any) => props.arrowDirection }\n)<IArrowWrapperProps>`\n    ${props => props.isResponsive ? 'margin-left: 10px' : 'margin-right: 10px'};\n    \n    ${\n        /* Had to hardcode this because -icon* has position: absolute set and overwrites this change */\n        props => props.isResponsive && 'position: relative !important;'\n    }\n    \n    cursor: pointer;\n`;\n","import * as React from 'react';\nimport { ArrowWrapper } from './style';\nimport { ArrowDirection } from \"./types\";\n\n\ninterface IProps {\n    arrowDirection?: ArrowDirection,\n    isResponsive?: boolean,\n    onClick?: () => any\n}\n\nconst Arrow = (props: IProps) => (\n    <ArrowWrapper\n        arrowDirection={props.arrowDirection || ArrowDirection.DOWN}\n        isResponsive={props.isResponsive}\n        onClick={props.onClick}\n    />\n);\n\nexport default Arrow;\n","import { isEqual } from \"lodash\";\nimport GA from \"react-ga\";\n\nexport enum AnalyticsCategories {\n    MESSENGER = \"Messenger\",\n    VIDEOCHAT = \"Videochat\"\n}\n\nexport enum AnalyticsActions {\n    CONTACT_NOTE = \"The client opened the contact note\",\n    GIFT_BUNDLES = \"The client opened the gifts bundles tab\",\n    TOY_SECTION = \"The client opened the toy section\",\n    MUTE_MODEL = \"The client has muted the model\",\n    FULLSCREEN_VIDEOCHAT = \"The client is watching the stream in fullscreen\"\n}\n\nclass AnalyticsService {\n\tprivate static key: string;\n\n    static initialize (newKey: string) {\n\t\tif (!isEqual(this.key, newKey)) {\n\t\t\tthis.key = newKey;\n\t\t\tGA.initialize(newKey);\n\t\t}\n    }\n\n    static triggerEvent (category: AnalyticsCategories, action: AnalyticsActions) {\n        GA.event({ category, action });\n    }\n}\n\nexport default AnalyticsService;\n","import Arrow from './Arrow';\nimport { ArrowDirection } from \"./types\";\n\nexport { ArrowDirection };\nexport default Arrow;\n","import { isMobile } from 'react-device-detect';\nimport styled from \"styled-components\";\nimport config from '../../../static/config'\nimport withCustomClasses, { DomCustomClass } from \"../../hoc/withCustomClasses/\";\nimport MessageSectionPopupWrapper from '../MessageSectionPopupWrapper';\n\ninterface IWindowBoxWrapperProps {\n    isOpen: boolean;\n    isFullScreen: boolean;\n\tshouldUseDropdownAnimation: boolean;\n    isResponsive?: boolean;\n    isWindowForUserPrompt?: boolean;\n}\n\nexport const WindowContentWrapper = styled.div`\n    padding: 10px;\n`;\n\nexport const WindowWrapper = withCustomClasses<IWindowBoxWrapperProps>(styled(MessageSectionPopupWrapper)<IWindowBoxWrapperProps>`\n  ${(props) => `background-color: ${props.theme.colors.windowBackground};`}\n  position: ${props => props.isFullScreen && isMobile ? 'relative' : 'absolute'};\n  \n  ${props => `height: ${(props.isResponsive && !props.isFullScreen) ? '100%' : 'auto'};`}\n  /* Logic for all component which use WindowWrapper except UserPrompt */\n  ${props => {\n  \tif (props.isWindowForUserPrompt) {\n\t    return '';\n    }\n\n\tif (props.isOpen) {\n\t\treturn props.isResponsive\n\t\t\t? `left: 0; ${!props.isFullScreen && 'max-height: 100%;'}`\n\t\t    : 'max-height: 350px;'\n    }\n\n    if (props.shouldUseDropdownAnimation) {\n\t    return `max-height: 0;`;\n    }\n\t    \n\treturn props.isResponsive ? 'left: 100%;' : 'max-height: 0;';\n  }}\n  \n  ${props => !props.isWindowForUserPrompt && `\n    /* we need .5s timeout for responsive context because we have side transition with DropDownMenu */\n\ttransition: ${props.isResponsive\n\t\t? `${props.shouldUseDropdownAnimation ? 'max-height' : 'left'} ${config.popupsTransitionTime}s`\n\t\t: `max-height ${config.popupsTransitionTime}s`} ease-in-out;\n      \n\ttransition-delay: ${!props.isResponsive && props.isOpen ? `${config.popupsTransitionTime}s` : 'unset'};\n  `}\n  \n  /* Logic for UserPrompt TransitionGroup classes */\n  &.enter {\n    max-height: 0px;\n  }\n  \n  &.enter.enterActive {\n    max-height: 350px;\n    transition: max-height .5s ease-in-out;\n    ${props => !props.isResponsive && `transition-delay: ${config.popupsTransitionTime}s;`}\n  }\n  \n  &.exit {\n    max-height: 350px;\n  }\n  \n  &.exit.exitActive {\n    max-height: 0px;\n    transition: max-height .5s ease-in-out; \n  }\n\n  width: ${props => props.isResponsive && props.isFullScreen ? '100vw' : '100%'};\n  overflow: hidden;\n  box-sizing: border-box;\n  bottom: 0;\n  z-index: 5;\n`, [DomCustomClass.WindowBox]);\n\nexport const WindowTitleWrapper = styled.div`\n    display: flex;\n    align-items: center;\n    font-family: ${(props) => props.theme.typography.fontFamily};\n    font-weight: ${(props) => props.theme.typography.weight.regular};\n    border-bottom: 1px solid #888;\n    margin-bottom: 10px;\n    padding: 0px 0 10px;\n    text-align: left;\n    color: #888;\n    min-height: 15px;\n    font-size: 14px;\n    vertical-align: middle;\n    position: relative;\n    box-sizing: content-box;\n\n    i {\n        position: absolute;\n        right: 5px;\n        color: #888888;\n        cursor: pointer;\n    }\n`;\n","import * as React from 'react';\nimport Arrow, { ArrowDirection } from '../Arrow';\nimport { WindowTitleWrapper, WindowWrapper, WindowContentWrapper } from './style';\nimport PerfectScrollbarContainer from '../PerfectScrollbar';\n\nexport interface IWindowBoxProps {\n    isOpen: boolean;\n    isResponsive: boolean;\n    children?: any;\n    customCloseIcon?: JSX.Element;\n    title?: string | JSX.Element;\n    isWindowForUserPrompt?: boolean;\n    hideHeader?: boolean;\n    isFullScreen: boolean;\n\tshouldUseDropdownAnimation: boolean;\n\n    handleClose: () => void;\n}\n\nconst WindowBox = (props: IWindowBoxProps) => {\n    const { LEFT, DOWN } = ArrowDirection;\n\n    const arrowCloseIcon = (\n        <Arrow\n            isResponsive={props.isResponsive}\n            arrowDirection={props.isResponsive ? LEFT : DOWN}\n            onClick={props.handleClose}\n        />\n    );\n\n    const customCloseIcon = (\n        <div onClick={props.handleClose}>\n            {props.customCloseIcon}\n        </div>\n    );\n\n    const windowTitleIcon = props.customCloseIcon ? customCloseIcon : arrowCloseIcon;\n\n    const responsiveTitle = (\n        <>\n            {windowTitleIcon}\n            {props.title}\n        </>\n    );\n\n    const nonResponsiveTitle = (\n        <>\n            {props.title}\n            {windowTitleIcon}\n        </>\n    );\n\n    const header = (\n        <WindowTitleWrapper>\n            {props.isResponsive ? responsiveTitle : nonResponsiveTitle}\n        </WindowTitleWrapper>\n    );\n\n    return (\n        <WindowWrapper\n            isOpen={props.isOpen}\n            isResponsive={props.isResponsive}\n            isFullScreen={props.isFullScreen}\n            isWindowForUserPrompt={props.isWindowForUserPrompt}\n            shouldUseDropdownAnimation={props.shouldUseDropdownAnimation}\n        >\n            <PerfectScrollbarContainer>\n                <WindowContentWrapper>\n                    {!props.hideHeader && header}\n                    {props.children}\n                </WindowContentWrapper>\n            </PerfectScrollbarContainer>\n        </WindowWrapper>\n    );\n};\n\nexport default WindowBox;\n","import WindowBoxContainer from './WindowBoxContainer';\n\nexport default WindowBoxContainer;","import * as React from 'react';\n\nimport WindowBox from \"./WindowBox\";\nimport IStore from \"../../../redux/store\";\nimport selectors from \"../../../redux/selectors\";\nimport { IInstanceProps } from \"../../hoc/withInstanceInfo\";\nimport withRedux from \"../../hoc/withRedux\";\n\ninterface IComponentProps {\n    children: any;\n    isOpen: boolean;\n    hideHeader?: boolean;\n    isWindowForUserPrompt?: boolean;\n    customCloseIcon?: JSX.Element;\n    title?: string | JSX.Element;\n\n    handleClose: () => void;\n}\n\ninterface IStoreProps {\n    isResponsive: boolean;\n    isFullScreen: boolean;\n\tshouldUseDropdownAnimation: boolean;\n}\n\ntype IProps = IComponentProps & IStoreProps & IInstanceProps;\n\nconst WindowBoxContainer = (props: IProps) => (\n    <WindowBox\n        isWindowForUserPrompt={props.isWindowForUserPrompt}\n        customCloseIcon={props.customCloseIcon}\n        hideHeader={props.hideHeader}\n        isOpen={props.isOpen}\n        isResponsive={props.isResponsive}\n        title={props.title}\n        handleClose={props.handleClose}\n        isFullScreen={props.isFullScreen}\n        shouldUseDropdownAnimation={props.shouldUseDropdownAnimation}\n    >\n        {props.children}\n    </WindowBox>\n);\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    isResponsive: selectors.isResponsive(store, instanceId),\n    isFullScreen: selectors.isFullScreen(store, instanceId),\n\tshouldUseDropdownAnimation: selectors.shouldUseDropdownAnimation(store, instanceId)\n});\n\nexport default withRedux<IComponentProps>(WindowBoxContainer, mapStateToProps);\n","import styled from \"styled-components\";\nimport withIdentifier, { DomIdentifier } from \"../../hoc/withIdentifier\";\n\ninterface IEmoticonStyleProps {\n    key: string;\n    title: string;\n    position?: string;\n    className?: string;\n    onClick: any;\n}\n\nexport const EmoticonWrapper = withIdentifier(styled.div.attrs({className: 'EmoticonWrapper'})`\n    width: auto;\n    text-align: left;\n    padding-bottom: 5px;\n`, DomIdentifier.EmoticonWrapper);\n\nexport const EmoticonStyle = styled.div<IEmoticonStyleProps>`\n    ${(props: IEmoticonStyleProps) => props.position\n        ? `\n            ${props.position};\n            width: 32px;\n            height: 32px;\n        `\n        : `\n            width: auto;\n            height: auto;\n            background: none;\n            font-size: 25px;\n        `\n    };\n\n    margin: 2px 3px;\n    display: inline-block;\n    cursor: pointer;\n    background-size: 1000%;\n\n    &:hover {\n        filter: drop-shadow(0 0 3px ProgressBarKnob);\n    }\n`;\n","import * as React from 'react';\nimport { IEmoticon, ITranslation } from '../../../redux/store';\nimport WindowBoxContainer from '../../common/WindowBox';\nimport { EmoticonStyle, EmoticonWrapper } from './style';\nimport utils from \"../../../utils\";\n\nexport interface IEmoticonSectionProps {\n    isOpen: boolean;\n    translation: ITranslation;\n    isResponsive?: boolean;\n    emoticons: IEmoticon[];\n\n    closeEmoticonSection: () => any;\n    emoticonClick: (emoticon: string) => () => void;\n}\n\nconst EmoticonSection = (props: IEmoticonSectionProps) => (\n    <WindowBoxContainer\n        isOpen={props.isOpen}\n        title={props.translation.message.selectEmoticon}\n        handleClose={props.closeEmoticonSection}\n    >\n        <EmoticonWrapper>\n            {props.emoticons.map((emoticon: IEmoticon) => (\n                <EmoticonStyle\n                    key={emoticon.text}\n                    className={utils.getEmoticonClass(emoticon)}\n                    position={emoticon.position}\n                    title={emoticon.text}\n                    onClick={props.emoticonClick(emoticon.text)}\n                >\n                    {utils.emoticonCodeToPrintableChar(emoticon.code)}\n                </EmoticonStyle>\n            ))}\n        </EmoticonWrapper>\n    </WindowBoxContainer>\n);\n\nexport default EmoticonSection;\n","import * as React from 'react';\n\nimport EmoticonSection from './EmoticonSection';\nimport selectors from '../../../redux/selectors';\nimport { ActionDispatcher } from '../../../redux';\nimport IStore, { ITranslation, IEmoticon } from '../../../redux/store';\nimport { closeEmoticonSection } from '../../../redux/modules/messenger';\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\n\ninterface IComponentProps {\n    isOpen: boolean;\n    translation: ITranslation;\n    isResponsive?: boolean;\n\n    emoticonClick: (emoticon: string) => () => void;\n}\n\ninterface IStoreProps {\n    emoticons: IEmoticon[];\n\n    closeEmoticonSection: ActionDispatcher;\n}\n\ntype IProps = IComponentProps & IStoreProps & IInstanceProps;\n\nconst closeSection = (props: IProps) => () => {\n    props.closeEmoticonSection(props.instanceId);\n};\n\nconst EmoticonSectionContainer = (props: IProps) => (\n    <EmoticonSection\n        isOpen={props.isOpen}\n        emoticons={props.emoticons}\n        isResponsive={props.isResponsive}\n        translation={props.translation}\n\n        emoticonClick={props.emoticonClick}\n        closeEmoticonSection={closeSection(props)}\n    />\n);\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    emoticons: selectors.getEmoticons(store, instanceId)\n});\n\nconst mapDispatchToProps = {\n    closeEmoticonSection\n};\n\nexport default withRedux<IComponentProps>(EmoticonSectionContainer, mapStateToProps, mapDispatchToProps);\n","import EmoticonSectionContainer from './EmoticonSectionContainer';\n\nexport default EmoticonSectionContainer;","import styled from \"styled-components\";\nimport withCustomClasses, { DomCustomClass } from \"../../hoc/withCustomClasses/\";\n\ninterface IGiftItemStyleProps {\n    url: string;\n}\n\ninterface IGiftNameProps {\n    isBundleGiftPage: boolean;\n    [props: string]: any;\n}\n\nexport const GiftItem = styled.i`\n    display: block;\n    margin: 2px 3px;\n    cursor: pointer;\n    width: 56px;\n    height: 56px;\n    background-size: 56px;\n    background-image: url(${(props: IGiftItemStyleProps) => props.url});\n`;\n\nexport const GiftDetail = withCustomClasses(styled.div`\n    font-family: ${props => props.theme.typography.fontFamily};\n    font-weight: ${props => props.theme.typography.weight.medium};\n    font-size: 13px;\n    font-style: italic;\n    color: #888;\n`, [DomCustomClass.GiftDetail]);\n\nexport const GiftName = withCustomClasses<IGiftNameProps>(styled.div`\n    font-family: ${props => props.theme.typography.fontFamily};\n    font-weight: ${(props: IGiftNameProps) => props.theme.typography.weight.medium};\n    color: #888;\n    font-size: 13px;\n    padding-top: 5px;\n`, [DomCustomClass.GiftName]);\n\nexport const GiftWrapper = withCustomClasses(styled.div`\n    display: inline-flex;\n    cursor: pointer;\n    width: 25%;\n    height: 100%;\n    text-align: center;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    margin: 10px 12.5% 0 12.5%;\n    box-sizing: border-box;\n    border: 2px solid transparent;\n    border-radius: 6px;\n\n    &:hover {\n        border-color: #43b31c;\n    }\n`, [DomCustomClass.Gift]);\n\nexport const Inline = styled.div`\n    display: inline-block;\n`;\n\nexport const InlineInitialPrice = styled(Inline)`\n    color: #3c3d3e;\n    margin-right: 2px;\n    text-decoration: line-through;\n`;\n\nexport const InlineReducedPrice = styled(Inline)`\n    color: #FF4D3C;\n`;\n","import Gift from './Gift';\n\nexport default Gift;","import * as React from 'react';\nimport { ITranslation } from '../../../redux/store';\nimport { GiftDetail, GiftItem, GiftName, GiftWrapper, Inline, InlineInitialPrice, InlineReducedPrice } from './style';\n\ninterface IProps {\n    icon: string\n    url: string;\n    title: string;\n    price: number;\n    initialPrice?: number;\n    currency: string;\n    quantity?: number;\n    isBundleGiftPage: boolean;\n    translation: ITranslation;\n\n    onGiftClick: (icon: string) => () => void;\n}\n\nconst Gift = (props: IProps) => (\n    <GiftWrapper onClick={props.onGiftClick(props.icon)}>\n        <GiftItem \n            url={props.url} \n            title={props.title}\n        />\n \n        <GiftName isBundleGiftPage={props.isBundleGiftPage}>\n            {props.title}\n        </GiftName>\n\n        {props.quantity && props.quantity > 0\n            ? <GiftDetail>({props.translation.user.stock}: {props.quantity})</GiftDetail>\n            : <GiftDetail>\n                <Inline>\n                    <Inline>(</Inline>\n                    {props.initialPrice\n                        ? (\n                            <>\n                                <InlineInitialPrice>{props.initialPrice} {props.currency}</InlineInitialPrice>\n                                <InlineReducedPrice>{props.price} {props.currency}</InlineReducedPrice>\n                            </>\n                        ) : (\n                            <Inline>{props.price} {props.currency}</Inline>\n                        )\n                        \n                    }\n                    <Inline>)</Inline>\n                </Inline>\n            </GiftDetail>\n        }\n    </GiftWrapper>\n);\n\nexport default Gift;\n","import styled from \"styled-components\";\nimport withCustomClasses, { DomCustomClass } from \"../../hoc/withCustomClasses\";\n\nexport const GiftBundlePageTitle = styled.div`\n    width: 85%;\n    padding-bottom: 2px;\n    margin: 10px auto auto;\n    text-align: left;\n    white-space: nowrap;\n`;\n\nexport const GiftPageWrapper = withCustomClasses(styled.div.attrs({ className: 'GiftPageWrapper' })`\n    height: calc(100% - 20px);\n    text-align: left;\n`, [DomCustomClass.GiftPage]);\n\nexport const GiftsWrapper = styled.div.attrs({ className: 'GiftsWrapper' })`\n    padding-bottom: 10px;\n`;\n","import * as React from 'react';\nimport { ICurrency, IGift, ITranslation } from '../../../redux/store';\nimport utils from '../../../utils';\nimport Gift from '../Gift';\nimport { GiftBundlePageTitle, GiftPageWrapper, GiftsWrapper } from './style';\n\ninterface IProps {\n    page: IGift[];\n    activePage: number;\n    currency: ICurrency;\n    translation: ITranslation;\n    isBundleGiftPage: boolean;\n    title?: React.ReactElement;\n\n    onGiftClick: (giftIcon: string) => () => void;\n}\n\nconst GiftPage = (props: IProps) => (\n    <GiftPageWrapper>\n        {props.title &&\n            <GiftBundlePageTitle>{props.title}</GiftBundlePageTitle>\n        }\n\n        <GiftsWrapper>\n            {props.page.map((gift: IGift, index) =>\n                <Gift\n                    key={index}\n                    title={gift.name}\n                    url={gift.imageUrl}\n                    price={gift.price}\n                    initialPrice={gift.initialPrice}\n                    quantity={gift.currentQuantity}\n                    isBundleGiftPage={props.isBundleGiftPage}\n                    icon={utils.getGiftEncoding(gift)}\n                    currency={props.currency.symbol}\n                    translation={props.translation}\n                    onGiftClick={props.onGiftClick}\n                />\n            )}\n        </GiftsWrapper>\n        \n    </GiftPageWrapper>\n);\n\n\nexport default GiftPage;\n","import GiftPageContainer from './GiftPageContainer';\n\nexport default GiftPageContainer;","import * as React from 'react';\n\nimport GiftPage from './GiftPage';\nimport selectors from '../../../redux/selectors';\nimport IStore, { IGift, ITranslation, ICurrency } from '../../../redux/store';\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\n\ninterface IStoreProps {\n    currency: ICurrency;\n    translation: ITranslation;\n}\n\ninterface IComponentProps {\n    page: IGift[];\n    activePage: number;\n    isBundleGiftPage: boolean;\n    title?: React.ReactElement;\n\n    onGiftClick: (gift: string) => () => void;\n}\n\ntype IProps = IComponentProps & IStoreProps & IInstanceProps;\n\nconst GiftPageContainer = (props: IProps) => (\n    <GiftPage\n        activePage={props.activePage}\n        title={props.title}\n        page={props.page}\n        currency={props.currency}\n        translation={props.translation}\n        isBundleGiftPage={props.isBundleGiftPage}\n\n        onGiftClick={props.onGiftClick}\n    />\n);\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    currency: selectors.getCurrency(store, instanceId),\n    translation: selectors.getTranslation(store, instanceId)\n});\n\nexport default withRedux<IComponentProps>(GiftPageContainer, mapStateToProps);","import styled from 'styled-components';\nimport withCustomClasses, { DomCustomClass } from \"../../hoc/withCustomClasses/\";\n\ninterface IGiftTabWrapperProps {\n    isActive: boolean;\n}\n\nexport const GiftTabWrapper = withCustomClasses<IGiftTabWrapperProps>(styled.i<IGiftTabWrapperProps>`\n    display: inline-block;\n    font-size: 23px;\n    color: #888;\n    padding: 10px 16px 0px 16px;\n    cursor: pointer;\n\n    ${props => props.isActive && `\n        border-bottom: 1px solid #FF4D3C;\n        color: #FF4D3C;\n        &:after {\n            content: '';\n            display: block;\n            width: 0px;\n            height: 0px;\n            border-left: 5px solid transparent;\n            border-right: 5px solid transparent;\n            border-top: 5px solid #f00;\n            margin: 0 auto;\n            position: relative;\n            bottom: -5px;\n        }    \n    `}\n`, [DomCustomClass.GiftTab]);\n","import GiftTab from './GiftTab';\n\nexport default GiftTab;","import * as React from 'react';\nimport { IGiftPage, ITranslation } from '../../../redux/store';\nimport { GiftTabWrapper } from './style';\n\ninterface IProps {\n    changeTab: (activeIndex: number) => () => void;\n    giftPage: IGiftPage;\n    translation: ITranslation;\n    className: string;\n    isActive: boolean;\n}\n\nconst GiftTab = (props: IProps) => (\n    <GiftTabWrapper \n        className={props.className} \n        title={props.giftPage.name}\n        isActive={props.isActive}\n        onClick={props.changeTab(props.giftPage.id)}\n    />\n);\n\nexport default GiftTab;\n","import styled from \"styled-components\";\nimport withIdentifier, { DomIdentifier } from \"../../hoc/withIdentifier\";\n\nexport const CloseButton = styled.div`\n    position: absolute;\n    right: 5px;\n    padding: 5px;\n    cursor: pointer;\n    z-index: 3;\n`;\n\nexport const ContentWrapper = withIdentifier(styled.div`\n\theight: 176px;\n\tmargin-bottom: 16px;\n    padding-top: 20px;\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n`, DomIdentifier.PurchaseBundlePage);\n\nexport const Content = styled.div`\n\twidth: 100%;\n    display: flex;\n    justify-content: space-around;\n`;\n\nexport const ImageWrapper = styled.div`\n    float: left;\n`;\n\nexport const Image = styled.img`\n    width: 10em;\n`;\n\nexport const TextWrapper = styled.div`\n\tcolor: ${props => props.theme.colors.giftPageText};\n`;\n\nexport const Footer = styled.div`\n\tcolor: #888;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 11px;\n    flex: 1 0 auto;\n    margin-bottom: 10px;\n`;\n\nexport const BundleName = styled.div`\n    font-weight: 700;\n    font-size: 16px;\n    margin-top: 2px;\n    padding-bottom: 5px;\n    display: flex;\n`;\n\nexport const ContainsText = styled.div`\n    font-style: italic;\n    font-size: 12px;\n    display: flex;\n`;\n\nexport const PurchaseButton = styled.div`\n    position: relative;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: #1F93E9;\n    border: none;\n    border-radius: 5px;\n    width: 130px;\n    height: 32px;\n    color: #FFF;\n    cursor: pointer;\n    z-index: 3;\n`;\n\nexport const PurchaseGiftsList = styled.ul`\n    position: relative;\n    font-size: 12px;\n    float: left;\n    padding: 0;\n`;\n\nexport const PurchaseGiftItem = styled.li`\n    margin: 0;\n    padding: 0;\n    text-align: start;\n    margin-left: 15px;\n`;\n\nexport const GiftBundleInformation = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n`;\n","import BundleGiftPage, { IGiftItemForPurchaseList } from './PurchaseBundlePage';\n\nexport { IGiftItemForPurchaseList };\nexport default BundleGiftPage;","import { map } from 'lodash';\nimport * as React from 'react';\nimport { ICurrency, ITranslation } from '../../../redux/store';\nimport utils from '../../../utils';\nimport Tooltip from '../../common/Tooltip';\nimport {\n\tBundleName,\n\tCloseButton,\n\tContainsText,\n\tContent,\n\tContentWrapper,\n\tFooter,\n\tImage,\n\tImageWrapper,\n\tPurchaseButton,\n\tPurchaseGiftItem,\n\tPurchaseGiftsList,\n\tTextWrapper,\n\tGiftBundleInformation\n} from './style';\n\nexport interface IGiftItemForPurchaseList {\n\tname: string;\n\tquantity: number;\n}\n\ninterface IProps {\n\timageUrl: string;\n\tname: string;\n\tprice: number;\n\tcurrency: ICurrency;\n\tgifts: IGiftItemForPurchaseList[];\n\ttranslation: ITranslation;\n\n\tonClose: () => void;\n\tonBundlePurchase: () => void;\n}\n\nconst PurchaseBundlePage = (props: IProps) => {\n\tconst { contains, bundleInfo, bundleBuy, close } = props.translation.common;\n\n\tconst purchaseButtonText = utils.translationWithValues(bundleBuy, {\n\t\tamount: `${props.price} ${props.currency.symbol}`\n\t});\n\n\tconst purchaseGifts = map(props.gifts, (gift) => (\n\t\t<PurchaseGiftItem key={gift.name}>\n\t\t\t{gift.quantity} x {gift.name}\n\t\t</PurchaseGiftItem>\n\t));\n\n\treturn (\n\t\t<>\n\t\t\t<Tooltip id={\"close-chat\"} text={close}>\n\t\t\t\t<CloseButton\n\t\t\t\t\tclassName={\"-icon-close-full\"}\n\t\t\t\t\tonClick={props.onClose}\n\t\t\t\t/>\n\t\t\t</Tooltip>\n\n\t\t\t<ContentWrapper>\n\t\t\t\t<Content>\n\t\t\t\t\t<ImageWrapper>\n\t\t\t\t\t\t<Image src={props.imageUrl} />\n\t\t\t\t\t</ImageWrapper>\n\n\t\t\t\t\t<GiftBundleInformation>\n\t\t\t\t\t\t<TextWrapper>\n\t\t\t\t\t\t\t<BundleName>{props.name}</BundleName>\n\t\t\t\t\t\t\t<ContainsText>{contains}</ContainsText>\n\n\t\t\t\t\t\t\t<PurchaseGiftsList>\n\t\t\t\t\t\t\t\t{purchaseGifts}\n\t\t\t\t\t\t\t</PurchaseGiftsList>\n\t\t\t\t\t\t</TextWrapper>\n\n\t\t\t\t\t\t<PurchaseButton onClick={props.onBundlePurchase}>\n\t\t\t\t\t\t\t{purchaseButtonText}\n\t\t\t\t\t\t</PurchaseButton>\n\t\t\t\t\t</GiftBundleInformation>\n\t\t\t\t</Content>\n\t\t\t</ContentWrapper>\n\n\t\t\t<Footer>\n\t\t\t\t* {bundleInfo}\n\t\t\t</Footer>\n\t\t</>\n\t);\n};\n\nexport default PurchaseBundlePage;\n","import styled from \"styled-components\";\nimport config from '../../../static/config';\nimport withIdentifier, { DomIdentifier } from \"../../hoc/withIdentifier\";\nimport MessageSectionPopupWrapper from '../../common/MessageSectionPopupWrapper';\n\ninterface IGiftWindowWrapperProps {\n    isOpen: boolean;\n    isResponsive?: boolean;\n    isMobileLandscape?: boolean;\n\tisFullScreen: boolean;\n\tshouldUseDropdownAnimation: boolean;\n}\n\ninterface IGiftPaginatorWrapperProps {\n    isResponsive?: boolean;\n}\n\nexport const GiftPagesWrapper = withIdentifier(styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    height: calc(100% - 40px);\n`, DomIdentifier.GiftPages);\n\nexport const GiftWindowWrapper = withIdentifier<IGiftWindowWrapperProps>(styled(MessageSectionPopupWrapper)<IGiftWindowWrapperProps>`\n    bottom: 0;\n    background-color: ${(props) => props.theme.colors.windowBackground};\n\n\t${props => props.isResponsive && 'max-height: 100%;'}\n    ${props => {\n\t\tif (props.isOpen) {\n\t\t\tif (props.isResponsive) {\n\t\t\t\treturn `\n\t\t\t\t\tleft: 0;\n\t\t\t\t\theight: 100%;\n\t\t\t\t`;\n\t\t\t}\n\t\n\t\t\treturn `height: ${props.isFullScreen ? '303px' : '100%'};`\n\t\t}\n\n\t\tif (props.shouldUseDropdownAnimation) {\n\t\t\treturn 'height: 0;';\n\t\t}\n\t\n\t\treturn props.isResponsive ? 'left: 100%;' : 'height: 0;';\n\t}}\n    \n    \n    ${props => props.isMobileLandscape\n        ? `\n            position: relative;\n            bottom: auto;\n        `\n        :   'position: absolute;'\n    }\n\n    z-index: 5;\n    width: 100%;\n    overflow: hidden;\n    box-sizing: border-box;\n    transition: all ${config.popupsTransitionTime}s ease-in-out;\n    ${props => !props.isResponsive && props.isOpen && `transition-delay: ${config.popupsTransitionTime}s;`}\n`, DomIdentifier.GiftWindow);\n\nexport const GiftWindowBox = styled.div`\n    display: flex;\n    height: 100%;\n    flex-direction: column;\n    text-align: center;\n`;\n\nexport const GiftPaginatorWrapper = withIdentifier<IGiftPaginatorWrapperProps>(styled.div.attrs({className: 'GiftPaginatorWrapper'})<IGiftPaginatorWrapperProps>`\n    flex-direction: ${(props) => props.isResponsive ? 'row' : 'row-reverse'};\n    color: ${(props) => props.theme.colors.giftsCloseButton};\n    background-color: ${(props) => props.theme.colors.messengerWrapper};\n    \n    display: flex;\n    justify-content: space-evenly;\n    align-items: center;\n    padding-bottom: 0;\n    font-weight: 400;\n    height: 40px;\n    min-height: 40px;\n    text-align: center;\n    border-bottom: 1px solid #C8C8C8;\n    border-top: 1px solid #C8C8C8;\n`, DomIdentifier.GiftPaginator);\n\nconst BaseText = styled.span`\n    font-family: ${(props) => props.theme.typography.fontFamily};\n    font-style: italic;\n    font-size: 14px;\n    letter-spacing: 0.3px;\n`;\n\nexport const RegularText = styled(BaseText)`\n    font-weight: ${props => props.theme.typography.weight.medium};\n    color: ${props => props.theme.colors.giftPageTitle};\n`;\n\nexport const BoldText = styled(BaseText)`\n    font-weight: ${props => props.theme.typography.weight.bold};\n    color: #3c3d3e;\n`;\n\nexport const GiftsWrapper = styled.div.attrs({className: 'GiftsWrapper'})`\n    display: inline-block;\n    width: 100%;\n`;\n\nexport const ArrowWrapper = styled.div`\n\tfont-size: 18px;\n\tmargin-top: 3px;\n`;\n","import { find, get, isEmpty, map } from 'lodash';\nimport * as React from 'react';\nimport { IBundle, IGiftPage, ITranslation, ICurrency } from '../../../redux/store';\nimport config from '../../../static/config';\nimport Arrow, { ArrowDirection } from '../../common/Arrow';\nimport GiftPageContainer from '../GiftPage';\nimport GiftTab from '../GiftTab';\nimport PurchaseBundlePage, { IGiftItemForPurchaseList } from '../PurchaseBundlePage';\nimport { BoldText, GiftPagesWrapper, GiftPaginatorWrapper, GiftsWrapper, GiftWindowBox, GiftWindowWrapper, RegularText, ArrowWrapper } from './style';\nimport PerfectScrollbarContainer from '../../common/PerfectScrollbar';\n\nexport interface IGiftSectionProps {\n    activeIndex: number;\n    activeBundle?: IBundle;\n    bundleGifts: IGiftItemForPurchaseList[];\n    giftPages: IGiftPage[];\n    translation: ITranslation;\n    specialGiftPages: config.ISpecialGiftPages;\n    currency: ICurrency;\n    isResponsive?: boolean\n    isOpen: boolean;\n    isMobileLandscape?: boolean;\n    scrollbar: React.Ref<any>;\n\tisFullScreen: boolean;\n\tshouldUseDropdownAnimation: boolean;\n\n    closeGiftSection: () => any;\n    onBundlePurchase: () => void;\n    onBundlePageClose: () => void;\n    changeTab: (activeIndex: number) => () => void;\n    onGiftClick: (giftEncodedId: string) => () => void;\n    onBundleGiftClick: (giftEncodedId: string) => () => void;\n}\n\nconst GiftSection = (props: IGiftSectionProps) => {\n    // FUTURE TODO: for the time being we have the hardcode the classNames based\n    // on id's value as the current API does not provide any information about the icons.\n    let giftClassNames: { [prop: number]: string };\n    giftClassNames = {\n        1: \"-icon-heart-line\",\n        2: \"-icon-vx-winter-messenger\",\n        3: \"-icon-vx-summer-messenger\",\n        4: \"-icon-vx-fetish-messenger\"\n    };\n\n    const { inventoryGiftId, giftBundlesId } = props.specialGiftPages;\n    giftClassNames[inventoryGiftId] = \"-icon-vx-user-outline\";\n    giftClassNames[giftBundlesId] = \"-icon-merchandise-sale-lite\";\n\n    const giftTabs = map(props.giftPages, (page: IGiftPage) => {\n        /** Get the hard-coded className with fallback on first icon */\n        const giftClassName = get(giftClassNames, page.id.toString(), giftClassNames[\"1\"]);\n\n        return (\n            <GiftTab\n                key={page.id}\n                changeTab={props.changeTab}\n                giftPage={page}\n                className={giftClassName}\n                isActive={props.activeIndex === page.id}\n                translation={props.translation}\n            />\n        );\n    });\n\n    // The active standard gift page (standard means not the bundle page)\n    const activeGiftPage = find(props.giftPages, (page: IGiftPage) => page.id === props.activeIndex);\n    const isBundleGiftPage = !!activeGiftPage && activeGiftPage.id === giftBundlesId;\n    const isInventoryGiftPage = !!activeGiftPage && activeGiftPage.id === inventoryGiftId;\n\n    const onGiftClick = isBundleGiftPage ? props.onBundleGiftClick : props.onGiftClick;\n\n    const { giftBundles, bundlesReducedPrice } = props.translation.common;\n\n    // We create the titles for bundle page and inventory page\n    let title;\n    if (isInventoryGiftPage) {\n        title = <RegularText>{props.translation.user.boughtGiftsHeading}</RegularText>;\n    }\n\n    if (isBundleGiftPage) {\n        title = (\n            <>\n                <RegularText>{giftBundles}</RegularText> <BoldText>{bundlesReducedPrice}</BoldText>\n            </>\n        );\n    }\n\n    const standardGiftPage = activeGiftPage && (\n        <GiftPageContainer\n            key={activeGiftPage.id}\n            page={activeGiftPage.gifts}\n            activePage={props.activeIndex}\n            onGiftClick={onGiftClick}\n            isBundleGiftPage={isBundleGiftPage}\n            title={title}\n        />\n    );\n\n    const { activeBundle } = props;\n\n    // The bundle gifts page\n    const bundleGiftPage = activeBundle && (\n        <PurchaseBundlePage\n            imageUrl={activeBundle.imageUrl}\n            name={activeBundle.name}\n            gifts={props.bundleGifts}\n            currency={props.currency}\n            price={activeBundle.price}\n            translation={props.translation}\n            onClose={props.onBundlePageClose}\n            onBundlePurchase={props.onBundlePurchase}\n        />\n    );\n\n    const shouldRenderBundleGiftPage = activeGiftPage\n        && activeGiftPage.id === giftBundlesId\n        && !isEmpty(props.activeBundle);\n\n    return (\n        <GiftWindowWrapper\n            isOpen={props.isOpen}\n            isResponsive={props.isResponsive}\n            isMobileLandscape={props.isMobileLandscape}\n            isFullScreen={props.isFullScreen}\n            shouldUseDropdownAnimation={props.shouldUseDropdownAnimation}\n        >\n            <GiftWindowBox>\n                <GiftPaginatorWrapper isResponsive={props.isResponsive}>\n\t                <ArrowWrapper>\n\t                    <Arrow\n\t                        onClick={props.closeGiftSection}\n\t                        arrowDirection={props.isResponsive ? ArrowDirection.LEFT : ArrowDirection.DOWN}\n\t                        isResponsive={props.isResponsive}\n\t                    />\n\t                </ArrowWrapper>\n\n                    <GiftsWrapper>\n                        {giftTabs}\n                    </GiftsWrapper>\n\n                </GiftPaginatorWrapper>\n\n                <GiftPagesWrapper>\n\n                    {!!(bundleGiftPage || standardGiftPage) &&\n                        <PerfectScrollbarContainer ref={props.scrollbar}>\n                            {shouldRenderBundleGiftPage ? bundleGiftPage : standardGiftPage}\n                        </PerfectScrollbarContainer>\n                    }\n\n                </GiftPagesWrapper>\n            </GiftWindowBox>\n        </GiftWindowWrapper>\n\n    );\n};\n\nexport default GiftSection;\n","export enum TooltipPlacement {\n    TOP = 'TOP',\n    BOTTOM = 'BOTTOM',\n    LEFT = 'LEFT',\n    RIGHT = 'RIGHT'\n}\n\n/**\n * Dimensions in pixels for the tooltip\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Rectangular coordinates (in pixels) of the area in which the tooltip should be forced to stay\n */\nexport interface IBoundingRect {\n    top: number;\n    bottom: number;\n    left: number;\n    right: number;\n}\n","import { Action } from 'redux-actions';\nimport { select, takeEvery } from 'redux-saga/effects';\n\nimport { createAction, createActionType } from '../../redux/utils';\nimport { IPayload } from '../../redux/interfaces';\nimport selectors from '../../redux/selectors';\nimport { TOGGLE_TOY_SECTION, OPEN_CONTACT_NOTE } from '../../redux/modules/messenger';\nimport AnalyticsService, { AnalyticsCategories, AnalyticsActions } from \"../../services/AnalyticsService\";\nimport { SET_IS_MUTED_BY_CLIENT, TOGGLE_FULLSCREEN, OPEN_FULLSCREEN } from '../../redux/modules/videochat';\nimport { ActionIds } from '../../redux/interfaces';\n\nconst createAnalyticsActionType = createActionType(ActionIds.ANALYTICS, { isSagaAction: true });\n\n// Actions\nconst OPEN_GIFT_BUNDLES_PAGE = createAnalyticsActionType(\"OPEN_GIFT_BUNDLES_PAGE\");\n\n// Action Creators\nexport const openGiftBundlesPage = createAction(OPEN_GIFT_BUNDLES_PAGE);\n\n// Sagas\nconst toySectionAnalyticsSaga = function* ({ payload: { instanceId }}: Action<IPayload>) {\n    const isToySectionOpen = yield select(selectors.isToySectionOpen, instanceId);\n\n    if (isToySectionOpen) {\n        AnalyticsService.triggerEvent(\n            AnalyticsCategories.VIDEOCHAT,\n            AnalyticsActions.TOY_SECTION\n        );\n    }\n};\n\nconst contactNoteAnalyticsSaga = function* () {\n    AnalyticsService.triggerEvent(\n        AnalyticsCategories.MESSENGER,\n        AnalyticsActions.CONTACT_NOTE\n    );\n};\n\nconst giftBundlesAnalyticsSaga = function* () {\n    AnalyticsService.triggerEvent(\n        AnalyticsCategories.MESSENGER,\n        AnalyticsActions.GIFT_BUNDLES\n    );\n};\n\nconst muteModelAnalyticsSaga = function* () {\n    AnalyticsService.triggerEvent(\n        AnalyticsCategories.VIDEOCHAT,\n        AnalyticsActions.MUTE_MODEL\n    );\n};\n\nconst fullscreenAnalyticsSaga = function* ({ payload: { instanceId }, type }: Action<IPayload>) {\n    if (type === TOGGLE_FULLSCREEN) {\n        const isFullscreen = yield select(selectors.isFullScreen, instanceId);\n        if (!isFullscreen) { return; }\n    }\n\n    AnalyticsService.triggerEvent(\n        AnalyticsCategories.VIDEOCHAT,\n        AnalyticsActions.FULLSCREEN_VIDEOCHAT\n    );\n};\n\nconst watchSagas = function*() {\n    yield takeEvery(TOGGLE_TOY_SECTION, toySectionAnalyticsSaga);\n    yield takeEvery(OPEN_CONTACT_NOTE, contactNoteAnalyticsSaga);\n    yield takeEvery(OPEN_GIFT_BUNDLES_PAGE, giftBundlesAnalyticsSaga);\n    yield takeEvery(SET_IS_MUTED_BY_CLIENT, muteModelAnalyticsSaga);\n\n    yield takeEvery(TOGGLE_FULLSCREEN, fullscreenAnalyticsSaga);\n    yield takeEvery(OPEN_FULLSCREEN, fullscreenAnalyticsSaga);\n};\n\nexport default watchSagas;\n","import { Action } from \"redux-actions\";\nimport { ACTION } from \"vxcontrol-client-lib\";\nimport { select, takeEvery } from \"redux-saga/effects\";\n\nimport { createAction, createActionType } from '../../redux/utils';\nimport { IPayload } from '../../redux/interfaces';\nimport selectors from \"../../redux/selectors\";\nimport ApiService from \"../../services/ApiService\";\nimport { ActionIds } from \"../../redux/interfaces\";\n\nconst createGiftsActionType = createActionType(ActionIds.GIFTS, { isSagaAction: true });\n\n// Actions\nconst REQUEST_PURCHASE_GIFT_BUNDLE = createGiftsActionType(\"REQUEST_PURCHASE_GIFT_BUNDLE\");\n\n// Action Creators\nexport const requestPurchaseGiftBundles = createAction<string>(REQUEST_PURCHASE_GIFT_BUNDLE);\n\n/** It receives gift bundle's id that should be purchased for the user */\nconst requestPurchaseGiftBundleSaga = function* ({ payload }: Action<IPayload<string>>) {\n    const { instanceId, value } = payload;\n\n    const subaction = \"BUYGIFTBUNDLE\";\n    const webtoken: string = yield select(selectors.getWebtoken, instanceId);\n\n    const command = {\n        action: ACTION.CMDP_QUERYBACKEND,\n        params: {\n            bundleId: value,\n            subaction,\n            webtoken\n        }\n    };\n\n    ApiService.getService(instanceId).sendCommand(command);\n};\n\nconst watchSagas = function* () {\n    yield takeEvery(REQUEST_PURCHASE_GIFT_BUNDLE, requestPurchaseGiftBundleSaga);\n};\n\nexport default watchSagas;\n","import * as React from 'react';\nimport { chain, find, first, includes, map } from 'lodash';\n\nimport utils from '../../../utils';\nimport GiftSection from './GiftSection';\nimport config from '../../../static/config';\nimport selectors from '../../../redux/selectors';\nimport { ActionDispatcher } from '../../../redux';\nimport { IGiftItemForPurchaseList } from '../PurchaseBundlePage';\nimport { closeGiftSection } from '../../../redux/modules/messenger';\nimport { openGiftBundlesPage } from '../../../sagas/specific/analytics';\nimport { requestPurchaseGiftBundles } from '../../../sagas/websockets/gifts';\nimport IStore, { IBundle, IGiftPage, IGift, ITranslation, ICurrency } from '../../../redux/store';\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\n\ninterface IState {\n    activeIndex: number;\n    activeBundleIndex?: string;\n}\n\ninterface IComponentProps {\n    isOpen: boolean;\n    isResponsive?: boolean;\n\n    onGiftClick: (giftIcon: string) => () => void;\n}\n\ninterface IStoreProps {\n    gifts: IGift[];\n    currency: ICurrency;\n    giftPages: IGiftPage[];\n    giftBundles: IBundle[];\n    translation: ITranslation;\n    isMobileLandscape: boolean;\n\tshouldUseDropdownAnimation: boolean;\n\tisFullScreen: boolean;\n\n    closeGiftSection: ActionDispatcher;\n    openGiftBundlesPage: ActionDispatcher;\n    requestPurchaseGiftBundles: ActionDispatcher<string>;\n}\n\ntype IProps = IComponentProps & IStoreProps & IInstanceProps;\n\nclass GiftSectionContainer extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n        this.scrollbar = React.createRef();\n\n        this.state = {\n            activeIndex: this.getFirstPageIndex()\n        };\n    }\n\n    scrollbar: any;\n\n    render() {\n        const activeBundle = find(this.props.giftBundles, \n            (bundle: IBundle) => bundle.id.toString() === this.state.activeBundleIndex\n        );\n\n        // When we have an active bundle, we must send for rendering gifts name and quantity.\n        let bundleGifts: IGiftItemForPurchaseList[] = [];\n        if (activeBundle) {\n            const bundleGiftIds = map(activeBundle.gifts, gift => gift.gift.id);\n\n            bundleGifts = chain(this.props.gifts)\n                .filter((gift: IGift) => includes(bundleGiftIds, gift.id))\n                .map((gift: IGift) => {\n                    const giftFromBundle = find(activeBundle.gifts, g => g.gift.id === gift.id);\n\n                    return ({\n                        name: gift.name,\n                        quantity: (giftFromBundle && giftFromBundle.quantity) || 0\n                    });\n                })\n                .value() as IGiftItemForPurchaseList[];\n        }\n\n        return (\n            <GiftSection\n                activeIndex={this.state.activeIndex}\n                activeBundle={activeBundle}\n                bundleGifts={bundleGifts}\n                isOpen={this.props.isOpen}\n                currency={this.props.currency}\n                giftPages={this.props.giftPages}\n                specialGiftPages={config.specialGiftPages}\n                translation={this.props.translation}\n                isResponsive={this.props.isResponsive}\n                isMobileLandscape={this.props.isMobileLandscape}\n                isFullScreen={this.props.isFullScreen}\n                shouldUseDropdownAnimation={this.props.shouldUseDropdownAnimation}\n\n                scrollbar={this.scrollbar}\n                changeTab={this.changeTab}\n                onGiftClick={this.props.onGiftClick}\n                onBundleGiftClick={this.onBundleGiftClick}\n                onBundlePurchase={this.onBundlePurchase}\n                onBundlePageClose={this.onBundlePageClose}\n                closeGiftSection={this.closeGiftSection}\n            />\n        );\n    }\n\n    private closeGiftSection = () => {\n        this.props.closeGiftSection(this.props.instanceId)\n    }\n\n    private onBundlePurchase = () => {\n        if (this.state.activeBundleIndex) {\n            this.props.requestPurchaseGiftBundles(\n                this.props.instanceId,\n                this.state.activeBundleIndex\n            );\n\n            this.setState({\n                activeIndex: this.getFirstPageIndex(),\n                activeBundleIndex: undefined\n            });\n        }\n    };\n\n    private onBundlePageClose = () => this.setState({ activeBundleIndex: undefined });\n\n    private onBundleGiftClick = (encodedBundleId: string) => () => {\n        const activeBundleIndex = utils.getGiftDecoded(encodedBundleId).toString();\n        this.setState({activeBundleIndex});\n    };\n\n    private getFirstPageIndex = (): number => {\n        const firstPage = first(this.props.giftPages);\n        return (firstPage && firstPage.id) || 1;\n    };\n\n    private changeTab = (activeIndex: number) => (): void => {\n        const scrollbar = this.scrollbar.current;\n        if (scrollbar) {\n            scrollbar.scrollUp();\n        }\n\n        this.setState({ activeIndex });\n\n        // Dispatch action for Google Analytics tracking\n        const giftBundlesStaticId = 5;\n        if (activeIndex === giftBundlesStaticId) {\n            this.props.openGiftBundlesPage(this.props.instanceId);\n        }\n    };\n}\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    currency:selectors.getCurrency(store, instanceId),\n    gifts: selectors.getTranslatedGifts(store, instanceId),\n    giftPages: selectors.getGiftPages(store, instanceId),\n    giftBundles: selectors.getGiftBundles(store, instanceId),\n    isMobileLandscape: selectors.isMobileLandscape(store, instanceId),\n    translation: selectors.getTranslation(store, instanceId),\n\tisFullScreen: selectors.isFullScreen(store, instanceId),\n\tshouldUseDropdownAnimation: selectors.shouldUseDropdownAnimation(store, instanceId)\n});\n\nconst mapDispatchToProps = {\n    closeGiftSection,\n    requestPurchaseGiftBundles,\n    openGiftBundlesPage\n};\n\nexport default withRedux<IComponentProps>(GiftSectionContainer, mapStateToProps, mapDispatchToProps);\n","import styled from \"styled-components\";\nimport { isMobile } from \"react-device-detect\";\n\nimport config from '../../../static/config';\nimport withIdentifier from \"../../hoc/withIdentifier/withIdentifier\";\nimport {DomIdentifier} from \"../../hoc/withIdentifier\";\nimport MessageSectionPopupWrapper from '../../common/MessageSectionPopupWrapper';\n\ninterface IWrapper {\n\tisFullScreen: boolean;\n    isResponsive?: boolean;\n    isOpen: boolean;\n\tshouldUseDropdownAnimation: boolean;\n    isMobileLandscape?: boolean;\n    [props: string]: any;\n}\n\ninterface IText {\n\tisReponsive?: boolean;\n}\n\ninterface IInlineOption {\n    hasLimitedWidth: boolean;\n}\n\nexport const Wrapper = withIdentifier<IWrapper>(styled(MessageSectionPopupWrapper).attrs({className: \"toy-section-wrapper\"})<IWrapper>`    \n    ${props => {\n        const { primaryColor, secondaryColor } = props.theme.colors.toySection;\n\n        return `\n            background-image: -webkit-gradient(linear,left top,right top,from(${primaryColor}),to(${secondaryColor}));\n            background-image: linear-gradient(to right,${primaryColor},${secondaryColor});\n        `\n    }}\n\n    color: ${props => props.theme.colors.toySection.text};\n    ${props => props.isOpen && `transition: all ${config.popupsTransitionTime}s ease-in-out;`}\n    \n    ${props => props.isResponsive && 'height: 100%;'}\n    ${props => {\n\t\tif (props.isOpen) {\n\t\t\tif (props.isResponsive && !props.isMobileLandscape)\n\t\t\t\treturn `\n\t\t\t\t\tleft: 0;\n\t\t\t\t\tmax-height: 100%;\n\t\t\t\t`;\n\t\t\t\n\t\t\treturn props.isFullScreen ? 'height: 303px;' : 'height: 100%;'\n\t\t}\n\n\t\tif (props.shouldUseDropdownAnimation) {\n\t\t\treturn 'max-height: 0;';\n\t\t}\n\t\t\n\t\treturn props.isResponsive ? 'left: 100%;' : 'height: 0;';\n\t}}\n\n\tposition: absolute;\n    bottom: 0;\n    \n    ${props => props.isMobileLandscape && props.isOpen && `\n        position: absolute;\n        height: 303px;\n        bottom: auto;\n        z-index: 5;\n        top: 0;\n    `}\n\n\tpadding: 0 10px;\n    width: 100%;\n    box-sizing: border-box;\n    \n    z-index: 5;\n`, DomIdentifier.ToySection);\n\nexport const Text = styled.div<IText>`\n    color: ${props => props.theme.colors.toySection.text};\n    font-family: ${(props) => props.theme.typography.fontFamily};\n\n    font-size: ${(props) => isMobile || props.isReponsive ? \"12\" : \"14\"}px;\n    margin: 30px 15px 20px 0;\n`;\n\nconst Inline = styled.div`\n    display: inline-block;\n`;\n\nexport const InlineOption = styled(Inline)<IInlineOption>`\n    color: ${props => props.theme.colors.toySection.text};\n\n    margin: ${({ hasLimitedWidth }: IInlineOption) => {\n        const value = hasLimitedWidth ? 2 : 5;\n        return `0 ${value}% 0 ${value}%`\n    }};\n\n    flex-direction: row;\n    min-height: 120px;\n`;\n\nexport const OptionsWrapper = styled.div`\n    padding: 0;\n    margin: 45px 0 0;\n    list-style: none;\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    \n    position: relative;\n    bottom: 0;\n    left: 0;\n    right: 0;\n`;\n","import styled, { css, keyframes} from \"styled-components\";\nimport withCustomClasses, { DomCustomClass } from \"../../hoc/withCustomClasses/\";\n\ninterface IImage {\n    image: string;\n    isActive?: boolean;\n    canPlayOption?: boolean;\n}\n\ninterface IWrapper {\n    isClickable?: boolean;\n}\n\ninterface IText {\n    isResponsive: boolean;\n\thasTooltipOpen?: boolean;\n}\n\nconst activePulsation = keyframes`\n    0% { opacity: .1; }\n    50% { opacity: 1; }\n    100% { opacity: .1; }\n`;\n\nconst animation = css`\n\tanimation: ${activePulsation} 1s infinite ease-in-out;\n`;\n\nexport const Wrapper = withCustomClasses<IWrapper>(styled.div<IWrapper>`\n    ${({ isClickable }: IWrapper) => isClickable && `cursor: pointer;`}\n\n    font-size: 12px;\n    text-align: center;\n    position: relative;\n`, [DomCustomClass.ToyOption]);\n\nexport const ImageWrapper = styled.div`\n    width: 64px;\n    height: 64px;\n    margin: auto;\n`;\n\nexport const Image = styled.div<IImage>`\n    ${({ image }: IImage) => `background: url(${image}) no-repeat center center;`}\n    ${({ canPlayOption }: IImage) => !canPlayOption && `opacity: .45;`}\n    ${({ isActive }: IImage) => isActive && animation}\n\n    width: 100%;\n    height: 100%;\n    transition: opacity .15s;\n    background-size: auto 100%;\n`;\n\nexport const Text = styled.div<IText>`\n    color: ${props => props.theme.colors.toySection.optionText};\n    font-size: ${props => props.isResponsive ? '12' : '14'}px;\n    ${props => props.hasTooltipOpen && `font-weight: ${props.theme.typography.weight.bold};`}\n\n    min-width: 40px;\n    margin-top: 10px;\n    text-align: center;\n    position: relative;\n`;\n\nexport const Lock = styled.div`\n    font-weight: ${props => props.theme.typography.weight.medium};\n    color: ${props => props.theme.colors.toySection.lock};\n\n    position: relative;\n    float: right;\n\n    font-size: 25px;\n    z-index: 2;\n`;\n\nexport const PlayingStatusWrapper = styled.div`\n    position: absolute;\n    z-index: 2;\n`;\n\nexport const PlayingStatus = styled.div`\n    background-color: #000;\n    color: #fff;\n\n    margin: 0 auto;\n    border-radius: 2px;\n    text-transform: uppercase;\n    font-size: 11px;\n    text-align: center;\n    margin: -10px 0 0 5px;\n    padding: 1px 9px;\n`;\n","import * as React from 'react';\nimport { Image, Text, Wrapper, Lock, PlayingStatus, PlayingStatusWrapper, ImageWrapper } from \"./style\";  \n\nexport interface IProps {\n    name: string;\n    image: string;\n    hoverImage: string;\n    currency: string;\n    price: number;\n    durationText: string;\n    isResponsive: boolean;\n    isPlaying?: boolean;\n    isLocked?: boolean;\n\n    // Only the locked options will have an informative tooltip open\n    hasTooltipOpen?: boolean;\n\n    // This property is going to be false if we already have an active\n    // toy option active and this one is unlocked\n    isAvailable?: boolean;\n}\n\nconst ToyOption = (props: IProps) => {\n    const canPlayOption = props.isAvailable && !props.isLocked;\n\n    return (\n        <>\n            <Wrapper isClickable={props.isAvailable}>\n                <ImageWrapper>\n                    {props.isLocked && <Lock className={\"-icon-keylock_close\"} />}\n\n                    {props.isPlaying && (\n                        <PlayingStatusWrapper>\n                            <PlayingStatus>Active</PlayingStatus>\n                        </PlayingStatusWrapper>\n                    )}\n\n                    <Image\n                        image={props.image}\n                        isActive={props.isPlaying}\n                        canPlayOption={canPlayOption}\n                    />\n                </ImageWrapper>\n            </Wrapper>\n         \n            <Text\n\t            isResponsive={props.isResponsive}\n\t            hasTooltipOpen={props.hasTooltipOpen}\n            >\n                <div>{props.name} {props.currency}{props.price}</div>\n                {props.durationText && <div>{props.durationText}</div>}\n            </Text>\n        </>\n    );\n}\n\nexport default ToyOption;\n","import styled from \"styled-components\";\nimport withCustomClasses, { DomCustomClass } from \"../../hoc/withCustomClasses/\";\nimport withIdentifier, {DomIdentifier} from \"../../hoc/withIdentifier\";\n\ninterface ITooltipContentWrapper {\n    isResponsive: boolean;\n}\n\ninterface ITextTitle {\n\tisResponsive: boolean;\n}\n\nexport const Wrapper = withCustomClasses(styled.div`\n    color: ${props => props.theme.colors.toySection.hoverTooltipText};\n    display: inline-block;\n    position: relative;\n`, [DomCustomClass.ToyOptionWithTooltip]);\n\nexport const Title = styled.h3<ITextTitle>`\n    color: ${props => props.theme.colors.toySection.primaryColor};\n    ${props => !props.isResponsive && 'font-size: 14px;'}\n    margin-block-start: auto;\n    margin-block-end: auto;\n    margin-bottom: 10px;\n`;\n\nexport const Text = styled.div<ITextTitle>`\n    font-size: ${props => !props.isResponsive ? '13' : '12'}px;\n`;\n\nexport const Inline = styled.div`\n    display: inline-block;\n`;\n\nexport const TooltipContentWrapper = withIdentifier<ITooltipContentWrapper>(styled.div<ITooltipContentWrapper>`\n    width: ${props => props.isResponsive ? '240' : '280'}px;\n    \n    display: flex;\n    flex-direction: row;\n`, DomIdentifier.TooltipContentWrapper);\n","import styled from 'styled-components';\nimport {ICorrections} from \"./interfaces\";\nimport {IDimensions} from \"../AdvancedTooltip/interfaces\";\nimport withCustomClasses, { DomCustomClass } from \"../../hoc/withCustomClasses/\";\n\ntype IContentWrapperProps = IDimensions & ICorrections;\n\ninterface IHideableComponentProps {\n\tisHidden?: boolean;\n}\n\ntype IArrowProps = IDimensions & ICorrections & IHideableComponentProps;\n\ntype IContentProps = IHideableComponentProps;\n\nexport const ContentWrapper = withCustomClasses<IContentWrapperProps>(styled.div<IContentWrapperProps>`\n    font-family: ${(props) => props.theme.typography.fontFamily};\n    font-weight: ${(props) => props.theme.typography.weight.regular};\n    \n    position: absolute;\n    border-radius: 3px;\n    z-index: 4;\n`, [DomCustomClass.AdvancedTooltipContent]);\n\nexport const Content = styled.div<IContentProps>`\n    background-color: ${(props) => props.theme.colors.windowBackground};\n    \n    ${({ isHidden }) => isHidden\n\t\t? `\n\t\t\tposition: fixed;\n\t\t\topacity: 0;\n\t\t`\n\t\t: 'position: relative;'\n\t}\n\n    padding: 15px;\n`;\n\nexport const Arrow = styled.div<IArrowProps>`\n\t${({ isHidden }) => isHidden && 'opacity: 0;'}\n    background-color: ${(props) => props.theme.colors.windowBackground};\n    \n    width: 20px;\n    height: 20px;\n    transform: rotate(45deg);\n`;\n\nexport const TopContentWrapper = styled(ContentWrapper)`\n    left: ${(props) => `calc(50% - ${props.width}px / 2 + ${props.horizontal}px)`};\n    bottom: calc(100% + 5px);\n`;\n\nexport const BottomContentWrapper = styled(ContentWrapper)`\n    left: ${(props) => `calc(50% - ${props.width}px / 2 + ${props.horizontal}px)`};\n    top: 27px;\n`;\n\nexport const LeftContentWrapper = styled(ContentWrapper)`\n    top: ${(props) => `calc(50% - ${props.height}px / 2 + ${props.vertical}px)`};\n    right: calc(100% + 15px);\n    \n`;\n\nexport const RightContentWrapper = styled(ContentWrapper)`\n    bottom: ${(props) => `calc(50% - ${props.height}px / 2 - ${props.vertical}px)`};\n    left: calc(100% + 15px);\n`;\n\nexport const DownArrow = styled(Arrow)`\n    margin-left: ${(props) => `calc(${props.width}px / 2 - ${props.horizontal}px - 10px)`};\n    \n    margin-top: -10px;\n`;\n\nexport const UpArrow = styled(Arrow)`\n    margin-left: ${(props) => `calc(${props.width}px / 2 - ${props.horizontal}px - 10px)`};\n    \n    margin-bottom: -10px;\n`;\n\nexport const LeftArrow = styled(Arrow)`\n    top: ${(props) => `calc(${props.height}px / 2 - ${props.vertical}px - 10px)`};\n    \n    position: absolute;\n    left: -10px;\n    min-width: 20px;\n`;\n\nexport const RightArrow = styled(Arrow)`\n    top: ${(props) => `calc(${props.height}px / 2 - ${props.vertical}px - 10px)`};\n    \n    position: absolute;\n    right: -10px;\n    min-width: 20px;\n`;\n","import { isUndefined } from \"lodash\";\nimport utils from \"../../../utils\";\nimport {IBoundingRect, TooltipPlacement} from \"../AdvancedTooltip/interfaces\";\n\nexport const getBoundingRect = (boundingRect?: IBoundingRect): IBoundingRect => {\n    const viewPortDimensions = utils.getWindowDimensions();\n\n    return boundingRect || {\n        top: 0,\n        bottom: viewPortDimensions.height,\n        left: 0,\n        right: viewPortDimensions.width\n    };\n};\n\ntype Rect = ClientRect | DOMRect | IBoundingRect;\n/**\n * Transform fractional values inside the rectangle into integral values, by applying Math.floor\n * @param rect\n */\nexport const getRectWithIntegralValues = (rect: Rect) => ({\n    top: Math.floor(rect.top),\n    bottom: Math.floor(rect.bottom),\n    left: Math.floor(rect.left),\n    right: Math.floor(rect.right)\n});\n\nexport const canAdjustHorizontally = (placement?: TooltipPlacement): boolean =>\n    isUndefined(placement) ||\n        placement === TooltipPlacement.TOP ||\n        placement === TooltipPlacement.BOTTOM;\n\nexport const canAdjustVertically = (placement?: TooltipPlacement): boolean =>\n    placement === TooltipPlacement.LEFT ||\n    placement === TooltipPlacement.RIGHT;\n","import * as React from 'react';\nimport { find, isEmpty, upperFirst } from \"lodash\";\nimport { SupportedLanguage } from 'vxcontrol-client-lib';\n\nimport utils from \"../../../utils\";\nimport ToyOption from \"./ToyOption\";\nimport selectors from \"../../../redux/selectors\";\nimport { ActionDispatcher } from \"../../../redux\";\nimport { setHasTooltipOpen, ISetHasTooltipPayload } from \"../../../redux/modules/messenger\";\nimport ToyOptionWithTooltipContainer from \"../../specific/ToyOptionWithTooltip\";\nimport { IInstanceProps } from \"../../hoc/withInstanceInfo\";\nimport withRedux from \"../../hoc/withRedux\";\nimport Store, { ICurrency, IToyOption, ITranslation } from \"../../../redux/store\";\n\nexport interface IComponentProps {\n    id: number;\n    isAvailable?: boolean;\n    limitingContainerRef?: any;\n}\n\ninterface IStoreProps {\n    currency: ICurrency;\n    toyOptions: IToyOption[];\n    language: SupportedLanguage;\n    translation: ITranslation;\n\tisResponsive: boolean;\n\n    setHasTooltipOpen: ActionDispatcher<ISetHasTooltipPayload>;\n}\n\nenum InitiallyLockedToyNames {\n    DildocontrolIntensityHigh = \"DildocontrolIntensityHigh\",\n    DildocontrolIntensityRandom = \"DildocontrolIntensityRandom\"\n}\n\ninterface ITooltipTexts {\n    title: string;\n    text: string;\n}\n\ntype IProps = IComponentProps & IStoreProps & IInstanceProps;\n\nclass ToyOptionContainer extends React.Component<IProps> {\n    render() {\n        const { currency, language, translation } = this.props;\n        const option: IToyOption = this.getOption();\n        const toyTranslation = utils.getItemTranslation(language, option.translations);\n        const name = upperFirst(toyTranslation.value);\n\n        let durationText: string = \"\";\n        const { toyDuration } = translation.chat.toyControl;\n\n        if (option.duration) {\n            durationText = utils.translationWithValues(toyDuration, { value: option.duration / 1000 });\n        }\n\n        const lockedTooltipTexts = this.getLockedTooltipTexts(option.name, translation);\n\n        const props = {\n            image: option.imageUrlWhite,\n            hoverImage: option.imageUrl,\n            name,\n            currency: currency.symbol,\n            price: option.price,\n            durationText,\n            isLocked: this.isOptionLocked(option),\n            isPlaying: option.isPlaying,\n            isAvailable: this.props.isAvailable,\n            hasTooltipOpen: option.hasTooltipOpen,\n\t        isResponsive: this.props.isResponsive\n        };\n\n        const isOptionLockedAndHasTooltip = this.isOptionLocked(option) && props.hasTooltipOpen;\n\n        return (isOptionLockedAndHasTooltip\n                ? <ToyOptionWithTooltipContainer\n                        {...props}\n                        tooltipImage={option.imageUrl}\n                        tooltipText={lockedTooltipTexts.text}\n                        tooltipTitle={lockedTooltipTexts.title}\n\t\t\t\t\t\tlimitingContainerRef={this.props.limitingContainerRef}\n                />\n                : <ToyOption {...props} />\n        );\n    }\n\n    private getOption = (): IToyOption =>\n        find(this.props.toyOptions, (option) => option.id === this.props.id) as IToyOption;\n\n    private isOptionLocked = (option: IToyOption): boolean => !isEmpty(option.unlockedBy);\n\n    private getLockedTooltipTexts = (name: InitiallyLockedToyNames | string, translation: ITranslation): ITooltipTexts => {\n        const { toyControl: { highTooltipText, highTooltipTitle, randomTooltipText, randomTooltipTitle } } = translation.chat;\n        const texts: { [key: string]: ITooltipTexts } = {};\n\n        texts[InitiallyLockedToyNames.DildocontrolIntensityHigh] = {\n            text: highTooltipText,\n            title: highTooltipTitle\n        };\n        texts[InitiallyLockedToyNames.DildocontrolIntensityRandom] = {\n            text: randomTooltipText,\n            title: randomTooltipTitle\n        };\n\n        return texts[name] || { text: '', title: '' };\n    };\n};\n\nconst mapStateToProps = (store: Store, { instanceId }: IInstanceProps) => ({\n    currency: selectors.getCurrency(store, instanceId),\n    toyOptions: selectors.getToyOptions(store, instanceId),\n    language: selectors.getLanguage(store, instanceId),\n    translation: selectors.getTranslation(store, instanceId),\n\tisResponsive: selectors.isResponsive(store, instanceId)\n});\n\nconst mapDispatchToProps = {\n    setHasTooltipOpen\n};\n\nexport default withRedux<IComponentProps>(ToyOptionContainer, mapStateToProps, mapDispatchToProps);\n","import AdvancedTooltipContentContainer from './AdvancedTooltipContentContainer';\n\nexport default AdvancedTooltipContentContainer;","import * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { isEqual } from 'lodash';\n\nimport {\n    BottomContentWrapper, Content,\n    DownArrow,\n    LeftArrow,\n    LeftContentWrapper,\n    RightArrow,\n    RightContentWrapper,\n    TopContentWrapper,\n    UpArrow\n} from \"./style\";\nimport {ICorrections} from \"./interfaces\";\nimport {canAdjustHorizontally, canAdjustVertically, getBoundingRect, getRectWithIntegralValues} from \"./utils\";\nimport {isUndefined} from \"util\";\nimport {IBoundingRect, IDimensions, TooltipPlacement} from \"../AdvancedTooltip/interfaces\";\n\ninterface IProps {\n    children: any;\n    target?: any;\n    placement?: TooltipPlacement;\n    boundingRect?: IBoundingRect;\n}\n\ninterface IContentProps {\n\tisHidden?: boolean;\n}\n\ntype IState = ICorrections & IDimensions & IContentProps;\n\n/**\n * @class react class component dealing with tooltips displayed with absolute positioning\n */\nclass AdvancedTooltipContentContainer extends React.Component<IProps, IState> {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            width: 0,\n            height: 0,\n            horizontal: 0,\n            vertical: 0,\n\t\t\tisHidden: true\n        };\n    }\n\n    private isUnmounted: boolean;\n\n    componentDidMount() {\n        this.isUnmounted = false;\n        this.grabDimensionsAndCorrections(false);\n    }\n\n    componentDidUpdate(prevProps: IProps, prevState: IState) {\n        this.grabDimensionsAndCorrections(!isEqual(this.props.boundingRect, prevProps.boundingRect));\n    }\n\n    componentWillUnmount() {\n        this.isUnmounted = true;\n    }\n\n    render() {\n        const content = <Content\n\t\t\tisHidden={this.state.isHidden}>\n\t\t\t{this.props.children}\n\t\t</Content>;\n\n        const contents: {[key: string]: React.ReactElement} = {};\n\n        contents[TooltipPlacement.TOP] = (\n            <TopContentWrapper {...this.state}>\n                {content}\n                <DownArrow {...this.state} />\n            </TopContentWrapper>\n        );\n\n        contents[TooltipPlacement.BOTTOM] = (\n            <BottomContentWrapper {...this.state}>\n                <UpArrow {...this.state} />\n                {content}\n            </BottomContentWrapper>\n        );\n\n        contents[TooltipPlacement.LEFT] = (\n            <LeftContentWrapper {...this.state} >\n                {content}\n                <RightArrow {...this.state} />\n            </LeftContentWrapper>\n        );\n\n        contents[TooltipPlacement.RIGHT] = (\n            <RightContentWrapper {...this.state} >\n                <LeftArrow {...this.state}/>\n                {content}\n            </RightContentWrapper>\n        );\n\n        return (\n            <>\n                {contents[this.props.placement || TooltipPlacement.TOP]}\n            </>\n        );\n    }\n\n    /**\n     * call the provided callback in an animation frame context\n     * @param callback\n     */\n    private doInAnimationFrame = (callback: (node) => any) => {\n        window.requestAnimationFrame(() => {\n            if (!this.isUnmounted) {\n                const node: any = ReactDOM.findDOMNode(this);\n                if (!isUndefined(node)) {\n                    callback(node);\n                }\n            }\n        });\n    };\n\n    private grabDimensionsAndCorrections = (isBoundRectChanged: boolean) => {\n        this.doInAnimationFrame((node) => {\n            const { width, height } = node.getBoundingClientRect();\n\n            if (this.state.width !== width || this.state.height !== height || isBoundRectChanged) {\n                this.setState({ width, height }, () => {\n                    this.updateCorrections();\n                });\n            }\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tif (!this.isUnmounted) {\n\t\t\t\t\tthis.setState({ isHidden: false });\n\t\t\t\t}\n\t\t\t}, 100);\n        });\n    };\n\n    private updateCorrections = () => {\n        this.doInAnimationFrame((node) => {\n            const { horizontal, vertical } =\n                this.getViewportCorrections(node.getBoundingClientRect());\n\n            if (horizontal !== this.state.horizontal || vertical !== this.state.vertical) {\n                this.setState({ horizontal, vertical });\n            }\n        });\n\t};\n\n    private getViewportCorrections = (rect: ClientRect | DOMRect): ICorrections => {\n\n        let { horizontal, vertical } = this.state;\n\n        const { top, bottom, left, right } = getRectWithIntegralValues(rect);\n        const boundingRect: IBoundingRect = getRectWithIntegralValues(getBoundingRect(this.props.boundingRect));\n\n        let isCorrected = false;\n\n        if (canAdjustHorizontally(this.props.placement)) {\n            const shouldApplyPositiveCorrection = left < boundingRect.left;\n            const shouldApplyNegativeCorrection = right > boundingRect.right;\n\n            if (shouldApplyPositiveCorrection) {\n                // adjust horizontally with a positive value\n                horizontal += boundingRect.left - left;\n                isCorrected = true;\n            }\n\n            if (shouldApplyNegativeCorrection) {\n                // adjust horizontally with a negative value\n                horizontal += boundingRect.right - right;\n                isCorrected = true;\n            }\n\n            if (horizontal && !isCorrected) {\n\n                // check again if we can narrow the existing horizontal correction\n                if (!shouldApplyPositiveCorrection && horizontal >= 0) {\n                    const spaceAvailableToLeft = left - boundingRect.left;\n                    // re-adjust horizontal correction (but keep it positive or zero)\n                    horizontal = Math.max(0, horizontal - spaceAvailableToLeft);\n                } else if (!shouldApplyNegativeCorrection && horizontal <= 0) {\n                    const spaceAvailableToRight = boundingRect.right - right;\n                    // re-adjust horizontal correction (but keep it negative or zero)\n                    horizontal = Math.min(0, horizontal + spaceAvailableToRight);\n                }\n            }\n        }\n\n        if (canAdjustVertically(this.props.placement)) {\n            const shouldApplyPositiveCorrection = top < boundingRect.top;\n            const shouldApplyNegativeCorrection = bottom > boundingRect.bottom;\n\n\n            if (shouldApplyPositiveCorrection) {\n                // adjust vertically with a positive value\n                vertical += boundingRect.top - top;\n                isCorrected = true;\n            }\n\n            if (shouldApplyNegativeCorrection) {\n                // adjust vertically with a negative value\n                vertical += boundingRect.bottom - bottom;\n                isCorrected = true;\n            }\n\n            if (vertical && !isCorrected) {\n\n                // check again if we can narrow the existing vertical correction\n                if (!shouldApplyPositiveCorrection && vertical >= 0) {\n                    const spaceAvailableToTop = top - boundingRect.top;\n                    // re-adjust vertical correction (but keep it positive or zero)\n                    vertical = Math.max(0, vertical - spaceAvailableToTop);\n                } else if (!shouldApplyNegativeCorrection && vertical < 0) {\n                    const spaceAvailableToBottom = boundingRect.bottom - bottom;\n                    // re-adjust vertical correction (but keep it negative or zero)\n                    vertical = Math.min(0, vertical + spaceAvailableToBottom);\n                }\n            }\n        }\n\n        return { horizontal, vertical };\n    };\n}\n\nexport default AdvancedTooltipContentContainer;\n","import AdvancedTooltip from './AdvancedTooltip';\n\nexport default AdvancedTooltip;","import * as React from 'react';\nimport AdvancedTooltipContentContainer from \"../AdvancedTooltipContent\";\nimport {IBoundingRect, TooltipPlacement} from \"./interfaces\";\n\ninterface IProps {\n    children: React.ReactElement;\n    target?: any;\n    placement?: TooltipPlacement,\n    boundingRect?: IBoundingRect,\n}\n\nconst AdvancedTooltip = (props: IProps) => (\n    <div>\n        <AdvancedTooltipContentContainer {...props} />\n        {props.target}\n    </div>\n);\n\n\nexport default AdvancedTooltip;","import * as React from 'react';\n\nimport {Inline, Text, Title, TooltipContentWrapper, Wrapper} from \"./style\";\nimport ToyOption, {IProps as ToyOptionProps} from '../../common/ToyOption/ToyOption';\nimport AdvancedTooltip from \"../../common/AdvancedTooltip\";\nimport {IBoundingRect} from \"../../common/AdvancedTooltip/interfaces\";\n\nexport interface IProps extends ToyOptionProps {\n    tooltipImage: string;\n    tooltipTitle: string;\n    tooltipText: string;\n    isResponsive: boolean;\n\n    boundingRect?: IBoundingRect;\n}\n\nconst ToyOptionWithTooltip = (props: IProps) => {\n    const { tooltipText, tooltipTitle } = props;\n\n    const target = (\n        <Inline>\n            <ToyOption\n                {...props}\n                image={props.image}\n                hasTooltipOpen={true}\n                isLocked={true}\n                isPlaying={false}\n                isAvailable={false}\n            />\n        </Inline>\n    );\n\n    return (\n        <Wrapper>\n            <AdvancedTooltip\n                boundingRect={props.boundingRect}\n                target={target}\n            >\n                <TooltipContentWrapper isResponsive={props.isResponsive}>\n                    <Inline>\n                        <Title isResponsive={props.isResponsive}>\n\t                        {props.name} - {tooltipTitle}\n                        </Title>\n                        <Text isResponsive={props.isResponsive}>{tooltipText}</Text>\n                    </Inline>\n                </TooltipContentWrapper>\n            </AdvancedTooltip>\n        </Wrapper>\n    );\n};\n\nexport default ToyOptionWithTooltip;\n","import ToyOptionWithTooltipContainer from \"./ToyOptionWithTooltipContainer\";\nimport { IProps } from \"./ToyOptionWithTooltipContainer\";\n\nexport { IProps };\nexport default ToyOptionWithTooltipContainer;","import * as React from 'react';\n\nimport utils from \"../../../utils\";\nimport selectors from '../../../redux/selectors';\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\nimport ToyOptionWithTooltip from \"./ToyOptionWithTooltip\";\nimport { IBoundingRect } from \"../../common/AdvancedTooltip/interfaces\";\nimport { IProps as ToyOptionProps } from \"../../common/ToyOption/ToyOption\";\nimport IStore from '../../../redux/store';\n\nexport interface IPartialComponentProps extends ToyOptionProps {\n    tooltipImage: string;\n    tooltipTitle: string;\n    tooltipText: string;\n\tlimitingContainerRef?: any;\n\n    width?: number;\n    height?: number;\n}\n\ninterface IStoreProps {\n    isResponsive: boolean;\n}\n\ninterface IState {\n    boundingRect: IBoundingRect;\n}\n\ntype IComponentProps = IPartialComponentProps;\nexport type IProps = IComponentProps & IStoreProps & IInstanceProps;\n\nclass ToyOptionWithTooltipContainer extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            boundingRect: this.getBoundingRect()\n        }\n    }\n\n    componentDidMount() {\n        window.addEventListener('resize', this.updateBoundingRect);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.updateBoundingRect);\n    }\n\n    render() {\n        return (\n            <ToyOptionWithTooltip\n                {...this.props}\n                boundingRect={this.state.boundingRect} />\n        );\n    }\n\n    private updateBoundingRect = () => {\n        this.setState({ boundingRect: this.getBoundingRect() });\n    };\n\n    private getBoundingRect = (): IBoundingRect => {\n    \tif (this.props.limitingContainerRef) {\n    \t\tconst clientRect = (this.props.limitingContainerRef).getBoundingClientRect();\n\n    \t\treturn {\n    \t\t\tleft: clientRect.left,\n\t\t\t\tright: clientRect.right - 15,\n\t\t\t\ttop: clientRect.top,\n\t\t\t\tbottom: clientRect.bottom\n\t\t\t} as IBoundingRect;\n\t\t}\n\n        const { width, height } = utils.getWindowDimensions();\n\n        // limiting tooltip to not go closer that 15 pixels from the screen edges\n        return {\n            left: 15,\n            right: width - 15,\n            top: 15,\n            bottom: height - 15\n        } as IBoundingRect;\n    };\n}\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    isResponsive: selectors.isResponsive(store, instanceId)\n});\n\nexport default withRedux<IComponentProps>(ToyOptionWithTooltipContainer, mapStateToProps);\n","export enum HeaderAlignment {\n\tLEFT = \"left\",\n\tCENTER = \"center\"\n}\n","import ToyOptionContainer from \"./ToyOptionContainer\";\n\nexport default ToyOptionContainer;","import styled from \"styled-components\";\nimport withCustomClasses, { DomCustomClass } from \"../../hoc/withCustomClasses/\";\n\ninterface IBaseProps {\n\tisToySectionMinimizied: boolean;\n}\n\ninterface IInlineArrow {\n    isResponsive: boolean;\n}\n\nexport const Wrapper = withCustomClasses<IBaseProps>(styled.div<IBaseProps>`\n    cursor: pointer;\n    \n    ${props => {\n        const { primaryColor, secondaryColor } = props.theme.colors.toySection;\n        \n        return props.isToySectionMinimizied\n\t\t\t? `\n\t            background-color: ${props.theme.colors.toySection.headerSectionBackground};\n\t            border-color: ${props.theme.colors.toySection.headerSectionBorderColor};\n\t            border-width: 1px;\n\t            border-style: solid;\n\t            padding: 10px;\n\t            height: 25px;\n            `\n\t        :  `\n\t            color: ${props.theme.colors.toySection.text};\n\t            background-image: -webkit-gradient(linear,left top,right top,from(${primaryColor}),to(${secondaryColor}));\n\t            background-image: linear-gradient(to right,${primaryColor},#${secondaryColor});\n\t            padding: 10px 0;\n            `;\n    }}\n`, [DomCustomClass.ToySectionHeader]);\n\nconst Inline = styled.div`\n    display: inline-block;\n`;\n\nexport const InlineArrow = styled(Inline)<IInlineArrow>`\n    float: ${props => props.isResponsive ? 'left' : 'right'};\n    ${props => props.isResponsive && `margin-right: 15px;`}\n    ${props => props.isResponsive && `margin-left: -12px;`}\n    font-size: 18px;\n    height: 100%;\n    display: flex;\n    align-items: center;\n`;\n\nexport const InlineTitleElement = styled(Inline)<IBaseProps>`\n    color: ${props => {\n        const { primaryColor, text } = props.theme.colors.toySection;\n        \n\t\treturn props.isToySectionMinimizied ? primaryColor : text;\n    }};\n\n    font-weight: ${props => props.theme.typography.weight.medium};\n\n    font-size: 20px;\n    margin-right: 5px;\n`;\n\nexport const InlineLink = styled(Inline)`\n    color: ${props => props.theme.colors.toySection.headerSectionLink};\n    \n    height: 18px;\n    font-size: 15px;\n    font-weight: 400;\n    margin-left: 8px;\n    text-decoration: underline;\n`;\n","import * as React from 'react';\n\nimport Arrow, { ArrowDirection } from '../Arrow';\nimport { InlineTitleElement, InlineLink, InlineArrow, Wrapper } from './style';\n\ninterface IProps {\n    isOpen: boolean;\n    link: string;\n    title: string;\n    isResponsive: boolean;\n\tisToySectionMinimizied: boolean;\n\n    onClick: () => void;\n}\n\nconst ToySectionHeader = (props: IProps) => {\n    let arrowDirection = props.isOpen ? ArrowDirection.DOWN : ArrowDirection.UP;\n    arrowDirection = props.isResponsive ? ArrowDirection.LEFT : arrowDirection;\n\n    return (\n        <Wrapper\n            isToySectionMinimizied={props.isToySectionMinimizied}\n            onClick={props.onClick}\n        >\n            <InlineArrow isResponsive={props.isResponsive}>\n                <Arrow\n                    arrowDirection={arrowDirection}\n                    isResponsive={props.isResponsive}\n                />\n            </InlineArrow>\n\n            <InlineTitleElement\n                className={\"-icon-toy-control\"}\n                isToySectionMinimizied={props.isToySectionMinimizied}\n            />\n\n            <InlineTitleElement\n\t            isToySectionMinimizied={props.isToySectionMinimizied}\n            >\n                {props.title}\n            </InlineTitleElement>\n\n            {props.isToySectionMinimizied && <InlineLink>{props.link}</InlineLink>}\n        </Wrapper>\n    );\n}\n\nexport default ToySectionHeader;\n","import * as React from 'react';\n\nimport ToySectionHeader from './ToySectionHeader';\nimport selectors from '../../../redux/selectors';\nimport { ActionDispatcher } from '../../../redux';\nimport IStore, { ITranslation } from '../../../redux/store';\nimport { toggleToySection } from '../../../redux/modules/messenger';\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\n\ninterface IStoreProps {\n    isResponsive: boolean;\n    isToySectionOpen: boolean;\n    translations: ITranslation;\n\n    toggleToySection: ActionDispatcher;\n}\n\ninterface IComponentProps {\n\tisToySectionMinimizied: boolean;\n}\n\ntype IProps = IStoreProps & IInstanceProps & IComponentProps;\n\nconst onToyHeaderClick = (props: IProps) => () => {\n    props.toggleToySection(props.instanceId);\n};\n\nconst ToySectionHeaderContainer = (props: IProps) => {\n    const { toyControl, toyLearnMore } = props.translations.chat.toyControl;\n\n    return (\n        <ToySectionHeader\n            title={toyControl}\n            link={toyLearnMore}\n            isOpen={props.isToySectionOpen}\n            isResponsive={props.isResponsive}\n            isToySectionMinimizied={props.isToySectionMinimizied}\n\n            onClick={onToyHeaderClick(props)}\n        />\n    );\n};\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    isResponsive: selectors.isResponsive(store, instanceId),\n    isToySectionOpen: selectors.isToySectionOpen(store, instanceId),\n    translations: selectors.getTranslation(store, instanceId)\n});\n\nconst mapDispatchToProps = {\n    toggleToySection\n};\n\nexport default withRedux(ToySectionHeaderContainer, mapStateToProps, mapDispatchToProps);\n","import ToySectionHeaderContainer from \"./ToySectionHeaderContainer\";\n\nexport default ToySectionHeaderContainer;","import * as React from 'react';\nimport { map, some } from \"lodash\";\nimport { isMobile } from \"react-device-detect\";\n\nimport { InlineOption, OptionsWrapper, Text, Wrapper } from \"./style\";\nimport ToyOptionContainer from \"../../common/ToyOption\";\nimport { IToyOptionStructure } from \"./types\";\nimport ToySectionHeaderContainer from \"../../common/ToySectionHeader\";\nimport PerfectScrollbarContainer from \"../../common/PerfectScrollbar\";\n\ninterface IProps {\n    text: string;\n    isOpen: boolean;\n\tisFullScreen: boolean;\n\tshouldUseDropdownAnimation: boolean;\n    isResponsive?: boolean;\n    isMobileLandscape?: boolean;\n    options: IToyOptionStructure[];\n    toySectionRef?: any;\n\n    onOptionClick: (id: number) => (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n    closeToyOptionTooltip: () => void;\n\tonGetReference?: (ref: any) => void;\n}\n\nconst ToySection = (props: IProps) => {\n    const hasActiveOption = some(props.options, (option) => option.isPlaying);\n    const hasLimitedWidth = (isMobile || props.isResponsive) as boolean;\n\n    const options = map(props.options, (option) => (\n        <InlineOption\n            key={option.name}\n            hasLimitedWidth={hasLimitedWidth}\n            onClick={props.onOptionClick(option.id)}\n        >\n            <ToyOptionContainer\n                id={option.id}\n                isAvailable={!hasActiveOption || (hasActiveOption && option.isPlaying)}\n\t\t\t\tlimitingContainerRef={props.toySectionRef}\n            />\n        </InlineOption>\n    ));\n\n    return (\n        <Wrapper\n\t\t\tinnerRef={props.onGetReference}\n            isOpen={props.isOpen}\n\t\t\tshouldUseDropdownAnimation={props.shouldUseDropdownAnimation}\n            isMobileLandscape={props.isMobileLandscape}\n            isResponsive={props.isResponsive}\n            onClick={props.closeToyOptionTooltip}\n            isFullScreen={props.isFullScreen}\n        >\n            <PerfectScrollbarContainer>\n                <ToySectionHeaderContainer isToySectionMinimizied={false} />\n                <Text isReponsive={props.isResponsive}>{props.text}</Text>\n                <OptionsWrapper>{options}</OptionsWrapper>\n            </PerfectScrollbarContainer>\n        </Wrapper>\n    );\n};\n\nexport default ToySection;\n","import * as React from 'react';\nimport { find, isEmpty, map, some } from \"lodash\";\n\nimport ToySection from \"./ToySection\";\nimport { ActionDispatcher } from \"../../../redux\";\nimport selectors from \"../../../redux/selectors\";\nimport Store, { IToyOption, ITranslation } from \"../../../redux/store\";\nimport { requestSendVibrationMessage } from \"../../../sagas/websockets/message\";\nimport { closeToyOptionTooltip, closeToySection, setHasTooltipOpen, ISetHasTooltipPayload } from \"../../../redux/modules/messenger\";\nimport { IInstanceProps } from \"../../hoc/withInstanceInfo\";\nimport withRedux from \"../../hoc/withRedux\";\nimport { IToyOptionStructure } from \"./types\";\n\ninterface IComponentProps {\n    isOpen: boolean;\n}\n\ninterface IStoreProps {\n\tisFullScreen: boolean;\n\tshouldUseDropdownAnimation: boolean;\n    isResponsive?: boolean;\n    isMobileLandscape?: boolean;\n    toyOptions: IToyOption[];\n    translation: ITranslation;\n\n    closeToySection: ActionDispatcher;\n    closeToyOptionTooltip: ActionDispatcher;\n    requestSendVibrationMessage: ActionDispatcher<IToyOption>;\n    setHasTooltipOpen: ActionDispatcher<ISetHasTooltipPayload>;\n}\n\ntype IProps = IComponentProps & IStoreProps & IInstanceProps;\n\ninterface IState {\n\telemRef?: any;\n}\n\nclass ToySectionContainer extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {};\n    }\n\n    render() {\n        const { toyDescription } = this.props.translation.chat.toyControl;\n\n        const options: IToyOptionStructure[] = map(this.props.toyOptions, (option: IToyOption) => ({\n            ...option,\n            isLocked: !isEmpty(option.unlockedBy)\n        }));\n\n        return (\n            <ToySection\n                text={toyDescription}\n                options={options}\n                isResponsive={this.props.isResponsive}\n                isOpen={this.props.isOpen}\n                isMobileLandscape={this.props.isMobileLandscape}\n                isFullScreen={this.props.isFullScreen}\n                shouldUseDropdownAnimation={this.props.shouldUseDropdownAnimation}\n\t\t\t\ttoySectionRef={this.state.elemRef}\n                closeToyOptionTooltip={this.closeToyOptionTooltip}\n\n                onOptionClick={this.onOptionClick}\n\t\t\t\tonGetReference={this.onRefCallback}\n            />\n        );\n    }\n\n    private onRefCallback = (ref: any) => {\n    \tthis.setState({ elemRef: ref });\n\t};\n\n    private closeToyOptionTooltip = () => {\n        this.props.closeToyOptionTooltip(this.props.instanceId)\n    };\n\n    private onOptionClick = (id: number) => (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        const { instanceId } = this.props;\n\n        const activeToyOption = find(this.props.toyOptions, option => option.id === id);\n        const isAnotherOptionActive = some(this.props.toyOptions, option => option.isPlaying);\n        const isOptionLocked = activeToyOption && !isEmpty(activeToyOption.unlockedBy);\n\n        e.stopPropagation();\n\n        // Defensive programming\n        if (!activeToyOption) {\n            return;\n        }\n\n        // No behavior dispatched when clicking on an option while another one is active\n        if (isAnotherOptionActive) {\n            return;\n        }\n\n        if (isOptionLocked) {\n            if (!activeToyOption.hasTooltipOpen) {\n                this.props.setHasTooltipOpen(instanceId, {\n                    id: activeToyOption.id,\n                    hasTooltip: true\n                })\n            }\n\n            return;\n        }\n\n        this.props.requestSendVibrationMessage(instanceId, activeToyOption);\n        this.props.closeToySection(instanceId);\n    };\n}\n\nconst mapStateToProps = (store: Store, { instanceId }: IInstanceProps) => ({\n    isResponsive: selectors.isResponsive(store, instanceId),\n    isMobileLandscape: selectors.isMobileLandscape(store, instanceId),\n\tisFullScreen: selectors.isFullScreen(store, instanceId),\n    toyOptions: selectors.getToyOptions(store, instanceId),\n    translation: selectors.getTranslation(store, instanceId),\n\tshouldUseDropdownAnimation: selectors.shouldUseDropdownAnimation(store, instanceId),\n});\n\nconst mapDispatchToProps = {\n    closeToySection,\n    requestSendVibrationMessage,\n    setHasTooltipOpen,\n    closeToyOptionTooltip\n};\n\nexport default withRedux<IComponentProps>(ToySectionContainer, mapStateToProps, mapDispatchToProps);\n","import ToySectionContainer from \"./ToySectionContainer\";\n\nexport default ToySectionContainer;","import * as React from 'react';\nimport EmoticonSectionContainer from '../EmoticonSection';\nimport { ITranslation } from '../../../redux/store';\nimport GiftSectionContainer from '../GiftSection/GiftSectionContainer';\nimport ToySectionContainer from '../ToySection';\n\ninterface IProps {\n    isResponsive: boolean\n    isEmoticonSectionOpen: boolean;\n    isGiftSectionOpen: boolean;\n    isToySectionOpen: boolean;\n    translation: ITranslation;\n\n    emoticonClick: (emoticon: string) => () => void;\n    giftClick: (gift: string) => () => void;\n}\n\nconst SymbolSection = (props: IProps) => (\n    <>\n        <EmoticonSectionContainer\n            isOpen={props.isEmoticonSectionOpen}\n            translation={props.translation}\n            emoticonClick={props.emoticonClick}\n            isResponsive={props.isResponsive}\n        />\n\n        <GiftSectionContainer\n            isOpen={props.isGiftSectionOpen}\n            onGiftClick={props.giftClick}\n            isResponsive={props.isResponsive}\n        />\n\n        <ToySectionContainer isOpen={props.isToySectionOpen} />\n    </>\n);\n\nexport default SymbolSection;\n","import { IContainerProps as IProps } from \"./types\";\n\nexport const emoticonClick = (props: IProps) => (emoticonShortcut: string) => () => {\n    props.setActiveEmoticon(props.instanceId, emoticonShortcut);\n};\n\nexport const giftClick = (props: IProps) => (giftShortcut: string) => () => {\n    props.setActiveGift(props.instanceId, giftShortcut);\n};\n","import * as React from 'react';\n\nimport SymbolSection from './SymbolSection';\nimport selectors from '../../../redux/selectors';\nimport { emoticonClick, giftClick } from './utils';\nimport IStore from '../../../redux/store';\nimport { setActiveEmoticon, setActiveGift } from '../../../redux/modules/messenger';\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\nimport { IContainerProps as IProps } from \"./types\";\n\nconst SymbolSectionContainer = (props: IProps) => (\n    <SymbolSection\n        isResponsive={props.isResponsive}\n        isGiftSectionOpen={props.isGiftSectionOpen}\n        isToySectionOpen={props.isToySectionOpen}\n        translation={props.translation}\n        isEmoticonSectionOpen={props.isEmoticonSectionOpen}\n\n        emoticonClick={emoticonClick(props)}\n        giftClick={giftClick(props)}\n    />\n);\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    isGiftSectionOpen: selectors.isGiftSectionOpen(store, instanceId),\n    isEmoticonSectionOpen: selectors.isEmoticonSectionOpen(store, instanceId),\n    isToySectionOpen: selectors.isToySectionOpen(store, instanceId),\n    isResponsive: selectors.isResponsive(store, instanceId),\n    translation: selectors.getTranslation(store, instanceId)\n});\n\nconst mapDispatchToProps = {\n    setActiveEmoticon,\n    setActiveGift\n};\n\nexport default withRedux(SymbolSectionContainer, mapStateToProps, mapDispatchToProps);\n","import styled from \"styled-components\";\nimport MessageSectionPopupWrapper from '../../common/MessageSectionPopupWrapper';\n\ninterface IUserPromptContentProps {\n    isResponsive?: boolean\n    isMobileLandscape?: boolean;\n    isGiftSectionOpen?: boolean;\n    isTipPromptOpen?: boolean;\n    isAnyUserPromptOpen: boolean;\n}\n\nexport const UserPromptWrapper = styled(MessageSectionPopupWrapper).attrs({ className: `userPrompt` })<IUserPromptContentProps>`\n    ${props => props.isResponsive && `\n        background-color: ${props.theme.colors.windowBackground};\n        \n        display: flex;\n        height: ${props.isAnyUserPromptOpen ? '100%' : '0'};\n        width: 100%;\n        position: absolute;\n        bottom: 0;\n        z-index: 4;\n    `}\n   \n    ${props => props.isMobileLandscape && `\n        position: relative;\n        width: 100%;\n    `}\n\n    ${props => props.isGiftSectionOpen && !props.isResponsive && props.isTipPromptOpen && `\n        position: absolute;\n        bottom: 0;\n        z-index: 5;\n        width: 100%;\n        height: 100%;\n    `}\n`;\n\nexport const UserPromptContent = styled.div`\n    ${props => props.theme && `\n        color:  ${props.theme.colors.messageEditorTextColor};\n        font-family: ${props.theme.typography.fontFamily};\n        font-weight: ${props.theme.typography.weight.regular};\n    `}\n\n    & .additionalText {\n        text-align: center;\n        margin: 0 5px;\n        font-size: 14px;\n    }\n\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n`;\n\nexport const UserPromptTitle = styled.div`\n    & .timeAnimatedCircle {\n        margin-right: 10px;\n    }\n\n    display: flex;\n    margin-right: 20px;\n`;\n","import styled from 'styled-components';\n\nconst CloseIcon = styled.i.attrs({className: \"-icon-close-full\"})`\n    position: absolute;\n    top: 5%;\n    right: 10px;\n    color: #888;\n`;\n\nexport default CloseIcon;","import CloseIcon from './CloseIcon';\n\nexport default CloseIcon;","import {get} from 'lodash';\nimport * as React from 'react';\nimport {AnswerType, ICurrency, IQuestion, ITranslation, KnownAnswerType, QuestionType} from '../../../../redux/store';\nimport {translationWithValues} from \"../../../../utils/utils\";\nimport Timer from \"../../../common/Timer/Timer\";\nimport {UserPromptTitle as UserPromptTitleWrapper} from \"../style\";\n\nexport interface IUserPromptTitleProps {\n    question: IQuestion;\n    currency: ICurrency;\n    translation: ITranslation;\n    \n    onAnswer: (answer: AnswerType) => any;\n}\n\nconst GetTitle = (props: IUserPromptTitleProps) => {\n    const { question : { type, payload }} = props;\n    const modelname = payload && payload.modelName;\n\n    const { exitLoad, autoRecharge, voyeurToSingleInfo, closeConfirmation1,\n        closeConfirmation2, privateChat, chooseCamera\n    } = props.translation.chat;\n    \n    const privateChatText = privateChat || '';\n\n    const questions: {[questionType: string]: string} = {};\n    questions[QuestionType.LOAD_ACCOUNT] = exitLoad;\n    questions[QuestionType.LOAD_ACCOUNT_ONE_CLICK] = exitLoad;\n    questions[QuestionType.LOAD_ACCOUNT_AUTO_RECHARGE] = autoRecharge;\n    questions[QuestionType.VERIFY_AGE] = props.translation.chat.needAvs;\n    questions[QuestionType.SPY_PRIVATE_CHAT] = `${voyeurToSingleInfo}`;\n    questions[QuestionType.CLOSE_CHAT] = `${closeConfirmation1} \\n ${closeConfirmation2}`;\n    questions[QuestionType.INVITE_PRIVATE_CHAT] = privateChatText;\n    questions[QuestionType.CHOOSE_CAMERA] = `${chooseCamera}:`;\n\n    const closeChatTitle = (\n        <>\n            {translationWithValues(questions[type], { modelname })}\n        </>\n    );\n\n    const loadAutoRechargeTitle = (\n        <>\n            <Timer totalTime={3} onTimeIsOver={() => props.onAnswer(KnownAnswerType.OK)}/>\n            <div>\n                {translationWithValues(questions[type], {\n                    amount: payload && `${payload.defaultRecharge}${props.currency.symbol}`\n                })}\n            </div>\n        </>\n    );\n\n    const defaultTitle = (\n        <>\n            {get(questions, type, \"\")}\n        </>\n    );\n\n    const titles: {[ type: string]: any} = {};\n    titles[QuestionType.SPY_PRIVATE_CHAT] = closeChatTitle;\n    titles[QuestionType.CLOSE_CHAT] = closeChatTitle;\n    titles[QuestionType.LOAD_ACCOUNT_AUTO_RECHARGE] = loadAutoRechargeTitle;\n\n    return titles[type] || defaultTitle;\n};\n\nconst UserPromptTitle = (props: IUserPromptTitleProps) => (\n    <UserPromptTitleWrapper>\n        <GetTitle {...props} />\n    </UserPromptTitleWrapper>\n);\n\nexport default UserPromptTitle;","import styled from \"styled-components\";\nimport withCustomClasses, { DomCustomClass } from \"../../hoc/withCustomClasses/\";\n\ninterface ITipImageProps {\n    imageUrl: string;\n    imageSize: number;\n}\n\ninterface IUserPromptTipWrapperProps {\n    isResponsive?: boolean;\n}\n\nexport const UserPromptTipWrapper = withCustomClasses<IUserPromptTipWrapperProps>(styled.div<IUserPromptTipWrapperProps>`\n    ${props => props.isResponsive && \"margin-bottom: 30px;\"}\n    color: ${props => props.theme.colors.userPrompt.tipColor};\n    \n    & p {\n        font-size: 12px;\n    }\n\n    text-align: center;\n`, [DomCustomClass.UserPromptTips]);\n\nexport const UserPromptTipTitle = styled.div`\n    font-family: ${props => props.theme.typography.fontFamily};\n    font-weight: ${props => props.theme.typography.weight.bold};\n    font-size: 18px;\n    margin-bottom: 10px;\n    margin-top: 15px;\n`;\n\nexport const UserPromptTipSubTitle = styled(UserPromptTipTitle)`\n    font-size: 15px;\n`;\n\nexport const UserPromptTipButton = withCustomClasses(styled.div`\n    font-family: ${props => props.theme.typography.fontFamily};\n    font-weight: ${props => props.theme.typography.weight.regular};\n    background-color: ${props => props.theme.colors.userPrompt.tipButtonBackgroundColor};\n    color: ${props => props.theme.colors.userPrompt.tipButtonColor};\n    \n    &:hover {\n        background-color: ${props => props.theme.colors.userPrompt.tipButtonBackgroundHoverColor};\n    }\n    \n    display: inline-block;\n    padding: 10px 15px;\n    margin: 10px;\n    border-radius: 5px;\n    cursor: pointer;\n    position: relative;\n    border: 1px solid #888888;\n    border-color: inherit;\n    font-size: 16px;\n    transition: all .15s linear;\n`, [DomCustomClass.UserPromptTipButton]);\n\nexport const TipImage = styled.div<ITipImageProps>`\n    background-image: url(${props => props.imageUrl});\n    width: ${props => props.imageSize}px;\n    height: ${props => props.imageSize}px;\n    background-size: ${props => props.imageSize}px;\n    \n    background-position: center;\n    margin: 0 auto;\n`;\n\nexport const Text = styled.div`\n\tfont-size: 15px;\n`;\n\nexport const TipPrice = styled(Text)`\n    color: ${props => props.theme.colors.userPrompt.tipPriceColor};\n`;\n","import * as React from \"react\";\nimport { ITranslation, ICurrency, ITipOption} from \"../../../redux/store\";\nimport { TipImage, TipPrice, UserPromptTipButton, UserPromptTipSubTitle, UserPromptTipTitle, UserPromptTipWrapper } from './style';\n\ninterface IProps {\n    currency: ICurrency;\n    isResponsive?: boolean;\n    tip: ITipOption;\n    translation: ITranslation;\n    imageSize: number;\n\n    sendTip: () => void;\n}\n\nconst UserPromptTip = (props: IProps) => {\n    const { tip1, tip2, tip3 } = props.translation.chat;\n\n    return (\n        <UserPromptTipWrapper isResponsive={props.isResponsive}>\n            <UserPromptTipTitle>{tip1}</UserPromptTipTitle>\n            <UserPromptTipSubTitle>{tip2}</UserPromptTipSubTitle>\n\n            {props.tip.imageUrl &&\n                <TipImage\n                    imageUrl={props.tip.imageUrl}\n                    imageSize={props.imageSize}\n                />\n            }\n            \n            <TipPrice>\n                {`(${props.tip.value} ${props.tip.currency.symbol})`}\n            </TipPrice>\n\n            <UserPromptTipButton onClick={props.sendTip}>\n                {tip3}\n            </UserPromptTipButton>\n        </UserPromptTipWrapper>\n    );\n};\n\nexport default UserPromptTip;","import * as React from \"react\";\n\nimport { IGift, ITranslation, ICurrency } from \"../../../redux/store\";\nimport {\n\tText,\n\tTipImage,\n\tTipPrice,\n\tUserPromptTipButton,\n\tUserPromptTipSubTitle,\n\tUserPromptTipTitle,\n\tUserPromptTipWrapper\n} from './style';\n\ninterface IProps {\n    currency: ICurrency;\n    isResponsive?: boolean;\n    tip: IGift;\n    translation: ITranslation;\n    imageSize: number;\n\n    sendTip: () => void;\n}\n\nconst UserPromptAnonymousTip = (props: IProps) => {\n    const { voyeurTip1, voyeurTip2, voyeurTip3, voyeurTip4 } = props.translation.chat;\n\n    return(\n        <UserPromptTipWrapper isResponsive={props.isResponsive}>\n            <UserPromptTipTitle>{voyeurTip1}</UserPromptTipTitle>\n            <UserPromptTipSubTitle>{voyeurTip2}</UserPromptTipSubTitle>\n\n            <Text>({voyeurTip3})</Text>\n\n            <TipImage\n                imageUrl={props.tip.imageUrl}\n                imageSize={props.imageSize}\n            />\n            \n            <TipPrice>\n                {`(${props.tip.price} ${props.currency.symbol})`}\n            </TipPrice>\n\n            <UserPromptTipButton onClick={props.sendTip}>\n                {voyeurTip4}\n            </UserPromptTipButton>\n        </UserPromptTipWrapper>\n    );\n};\n\nexport default UserPromptAnonymousTip;\n","import * as React from 'react';\n\nimport { getDefaultGift } from './utils';\nimport UserPromptTip from './UserPromptTip';\nimport config from \"../../../static/config\";\nimport selectors from '../../../redux/selectors';\nimport UserPromptAnonymousTip from \"./UserPromptAnonymousTip\";\nimport IStore, { IGift } from '../../../redux/store';\nimport { requestSendAnonymousTip, requestSendTip } from '../../../sagas/common/videochat';\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\nimport { IContainerProps as IProps, IContainerComponentProps as IComponentProps } from \"./types\";\n\nconst sendTip = (props: IProps, isAnonymous: boolean = false) => () => {\n    if (isAnonymous) {\n        props.requestSendAnonymousTip(props.instanceId)\n    } else {\n        props.requestSendTip(props.instanceId);\n    }\n};\n\nconst getTip = (props: IProps) => (\n    <UserPromptTip\n        tip={props.tip}\n        currency={props.currency}\n        isResponsive={props.isResponsive}\n        sendTip={sendTip(props)}\n        translation={props.translation}\n        imageSize={config.tipImageSize}\n    />\n);\n\nconst getAnnonymousTip = (props: IProps) => {\n    // We should always render the dollar gift as the anonymous tip.\n    const defaultGift: IGift | undefined = getDefaultGift(props);\n\n    return (\n        <>\n            {defaultGift &&\n                <UserPromptAnonymousTip\n                    tip={defaultGift}\n                    currency={props.currency}\n                    isResponsive={props.isResponsive}\n                    sendTip={sendTip(props, true)}\n                    translation={props.translation}\n                    imageSize={config.tipImageSize}\n                />\n            }\n        </>\n    );\n};\n\n\nconst UserPromptTipContainer = (props: IProps) => props.isAnonymous ? getAnnonymousTip(props) : getTip(props);\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    currency: selectors.getCurrency(store, instanceId),\n    isResponsive: selectors.isResponsive(store, instanceId),\n    translation: selectors.getTranslation(store, instanceId),\n    tip: selectors.getTip(store, instanceId),\n    gifts: selectors.getTranslatedGifts(store, instanceId)\n});\n\nconst mapDispatchToProps = {\n    requestSendTip,\n    requestSendAnonymousTip\n};\n\nexport default withRedux<IComponentProps>(UserPromptTipContainer, mapStateToProps, mapDispatchToProps);\n","import { IGift } from '../../../redux/store';\nimport { dollarGiftStaticData } from '../../../static/constants/constants';\nimport { IContainerProps as IProps } from \"./types\";\nimport { isEmpty, find } from 'lodash';\n\nexport const getDefaultGift = (props: IProps): IGift | undefined => {\n    if (!isEmpty(props.gifts)) {\n        const { id, name } = dollarGiftStaticData;\n\n        return find(\n            props.gifts,\n            (gift: IGift) => gift.active && (gift.id === id || gift.name === name)\n        ) as IGift;\n    } else {\n        return undefined;\n    }\n};\n","import * as React from \"react\";\n\nimport { ICamerasSplit, IProps } from \"./types\";\nimport { ICameraDevice } from \"../../../redux/store\";\n\nexport const onSelectCamera = (props: IProps) => (id:string) => (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    props.setCam2CamSelectedCamera(props.instanceId, id);\n};\n\nexport const extractFrontAndBackCameras = (cameras: ICameraDevice[]): ICamerasSplit => {\n    const frontAndBack: ICameraDevice[] = [];\n    const others: ICameraDevice[] = [];\n\n    cameras.forEach((camera: ICameraDevice) => {\n        (camera.isBack || camera.isFront ? frontAndBack : others).push(camera);\n    });\n\n    return { frontAndBack, others };\n}\n","import styled from \"styled-components\";\nimport withCustomClasses from \"../../hoc/withCustomClasses/withCustomClasses\";\nimport {DomCustomClass} from \"../../hoc/withCustomClasses\";\n\ninterface IWrapper {\n    isSelected: boolean;\n}\n\nexport const Wrapper = withCustomClasses<IWrapper>(styled.div<IWrapper>`\n    ${props => (\n        props.isSelected\n            ? `border: 1px solid ${props.theme.colors.cameraSelection.option.selectedColor};`\n            : `border: 1px solid ${props.theme.colors.cameraSelection.option.defaultColor};`\n    )}\n\n    border-radius: 2px;\n    \n    width: 100%;\n    min-height: 50px;\n    \n    display: flex;\n    flex-direction: row;\n    \n    position: relative;\n    margin: 10px 0;\n    cursor: pointer;\n`, [DomCustomClass.CameraOption]);\n\nexport const FrontBackWrapper = withCustomClasses<IWrapper>(styled(Wrapper)<IWrapper>`\n    justify-content: center;\n    flex-flow: column;\n    \n    margin: 10px;    \n`, [DomCustomClass.CameraOption]);\n\nexport const IconWrapper = styled.div`\n    font-size: 18px;\n    \n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    padding: 10px;\n`;\n\nexport const FrontBackIconWrapper = styled(IconWrapper)`\n    flex-direction: row;\n    \n    font-size: 4em;\n    padding: 0;\n    margin: 20px 15% 10px 15%;\n`;\n\nexport const LabelWrapper = styled.div`\n    font-family: Roboto;\n    text-transform: capitalize;\n    \n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n\tmargin-right: 30px;\n\tfont-size: 15px;\n`;\n\nexport const FrontBackLabelWrapper = styled(LabelWrapper)`\n    text-align: center;\n    margin: 10px 15% 20px 15%;\n`;\n\nexport const CheckedWrapper = styled.div`\n    ${props => `\n        color: ${props.theme.colors.cameraSelection.option.selectedColor};\n    `}\n    \n    position: absolute;\n    top: 15px;\n    right: 10px;\n    \n    font-size: 15px;\n`;\n","import * as React from 'react';\n\nimport {ICameraDevice} from \"../../../redux/store\";\nimport {\n    CheckedWrapper,\n    FrontBackIconWrapper,\n    FrontBackLabelWrapper,\n    FrontBackWrapper,\n    IconWrapper,\n    LabelWrapper,\n    Wrapper\n} from \"./style\";\n\ninterface IProps {\n    camera: ICameraDevice;\n    isSelected: boolean;\n\n    onClick?: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n}\n\nconst NormalCameraOption = (props: IProps) => (\n    <Wrapper\n        onClick={props.onClick}\n        isSelected={props.isSelected}>\n\n        <IconWrapper>\n            <div className=\"-icon-webcam-single-full\" />\n        </IconWrapper>\n\n        <LabelWrapper>{props.camera.label}</LabelWrapper>\n\n        {props.isSelected &&\n            <CheckedWrapper>\n                <div className=\"-icon-success-rounded-full\" />\n            </CheckedWrapper>\n        }\n    </Wrapper>\n);\n\nconst FrontBackCameraOption = (props: IProps) => {\n    const iconClassName = props.camera.isFront ? '-icon-smartphone-frontcam-full' : '-icon-smartphone-full';\n\n    return (\n        <FrontBackWrapper\n            onClick={props.onClick}\n            isSelected={props.isSelected}>\n\n            <FrontBackIconWrapper>\n                <div className={iconClassName}/>\n            </FrontBackIconWrapper>\n\n            <FrontBackLabelWrapper>{props.camera.label}</FrontBackLabelWrapper>\n\n            {props.isSelected &&\n                <CheckedWrapper>\n                    <div className=\"-icon-success-rounded-full\" />\n                </CheckedWrapper>\n            }\n        </FrontBackWrapper>\n    )\n};\n\nconst CameraOption = (props: IProps) => (\n    props.camera.isFront || props.camera.isBack\n        ? <FrontBackCameraOption {...props} />\n        : <NormalCameraOption {...props} />\n);\n\nexport default CameraOption;\n","import styled from \"styled-components\";\nimport withCustomClasses, { DomCustomClass } from \"../../hoc/withCustomClasses\";\n\nexport const Wrapper = withCustomClasses(styled.div`\n    padding: 0 10px;\n`, [ DomCustomClass.CamerasSection ]);\n\nexport const FrontBackCamerasWrapper = styled.div`\n    display: flex;\n    flex-direction: row;\n    margin: auto -10px;\n`;\n\nexport const RegularCamerasWrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n`;","import * as React from 'react';\nimport { isEmpty } from 'lodash';\n\nimport { ICameraDevice } from \"../../../redux/store\";\nimport CameraOption from \"../CameraOption/CameraOption\";\nimport { FrontBackCamerasWrapper, RegularCamerasWrapper, Wrapper } from './style';\nimport { ICamerasSplit } from \"./types\";\nimport { extractFrontAndBackCameras } from \"./utils\";\n\ninterface IProps {\n    cameras: ICameraDevice[];\n    selectedCamera?: ICameraDevice;\n\n    onSelectCamera: (id: string) => (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n}\n\nconst getCameraOptions = (props: IProps, cameras: ICameraDevice[]) => (\n    cameras.map((camera: ICameraDevice) =>\n        <CameraOption\n            key={camera.deviceId}\n            camera={camera}\n            isSelected={camera === props.selectedCamera}\n            onClick={props.onSelectCamera(camera.deviceId)}\n        />\n    )\n);\n\nconst CamerasSection = (props: IProps) => {\n    const camerasSplit: ICamerasSplit = extractFrontAndBackCameras(props.cameras);\n\n    return (\n        <Wrapper>\n        {!isEmpty(camerasSplit.frontAndBack) &&\n            <FrontBackCamerasWrapper>\n                {getCameraOptions(props, camerasSplit.frontAndBack)}\n            </FrontBackCamerasWrapper>\n        }\n\n        <RegularCamerasWrapper>\n            {getCameraOptions(props, camerasSplit.others)}\n        </RegularCamerasWrapper>\n    </Wrapper>\n    );\n};\n\nexport default CamerasSection;","import * as React from 'react';\n\nimport { IProps } from \"./types\";\nimport { onSelectCamera } from \"./utils\";\nimport IStore from \"../../../redux/store\";\nimport CamerasSection from \"./CamerasSection\";\nimport selectors from \"../../../redux/selectors\";\nimport withRedux from '../../hoc/withRedux';\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport { setCam2CamSelectedCamera } from \"../../../redux/modules/videochat\";\n\nconst CamerasSectionContainer = (props: IProps) => (\n    <CamerasSection\n        cameras={props.cameras}\n        selectedCamera={props.selectedCamera}\n        onSelectCamera={onSelectCamera(props)}\n    />\n);\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    cameras: selectors.getCam2CamCameras(store, instanceId),\n    selectedCamera: selectors.getCam2CamSelectedCamera(store, instanceId)\n});\n\nconst mapDispatchToProps = {\n    setCam2CamSelectedCamera\n};\n\nexport default withRedux(CamerasSectionContainer, mapStateToProps, mapDispatchToProps);\n","import * as React from 'react';\nimport { AnswerType, ICurrency, IQuestion, ITranslation, KnownAnswerType } from '../../../../redux/store';\nimport utils from \"../../../../utils\";\nimport RechargeSelectionButtons from \"../../../common/RechargeSelectionButtons\";\nimport SelectionButtons, { SelectedButtonColor } from \"../../../common/SelectionButtons\";\nimport { UserPromptContent as UserPromptContentWrapper } from './../style';\nimport UserPromptTipContainer from \"../../UserPromptTip/UserPromptTipContainer\";\nimport CamerasSectionContainer from \"../../CamerasSection/CamerasSectionContainer\";\n\nexport interface IUserPromptContentProps {\n    currency: ICurrency;\n    question: IQuestion;\n    translation: ITranslation;\n    \n    onAnswer: (answer: AnswerType) => any;\n}\n\nconst contentProvider = (props: IUserPromptContentProps) => {\n    const {question: { type, payload }} = props;\n    const { yes, no } = props.translation.common;\n    const { chargeNow, verifyAge, adultContentInfo } = props.translation.chat;\n\n    const yesNoOptions = [{\n        label: yes,\n        value: KnownAnswerType.YES,\n        selected: true\n    }, {\n        label: no,\n        value: KnownAnswerType.NO\n    }];\n\n    const loadAccountComponent = (\n        <SelectionButtons<AnswerType>\n            key={type}\n            options={[]}\n            submit={{\n                label: chargeNow,\n                answer: KnownAnswerType.YES\n            }}\n            onSelect={props.onAnswer}\n        />\n    );\n\n    const amounts = payload && payload.amounts;\n    const defaultAmount = payload && payload.defaultAmount;\n    const loadAccountOneClickComponent = (\n        <RechargeSelectionButtons\n            amounts={amounts}\n            currency={props.currency}\n            hasSubmit={true}\n            defaultAmount={defaultAmount}\n            submitLabel={chargeNow}\n            onSelect={props.onAnswer}\n        />\n    );\n\n    const verifyAgeComponent = (\n        <>\n            <span className={\"additionalText\"}>\n                {utils.translationWithValues(\n                    adultContentInfo,\n                    { modelname: payload && payload.modelName }\n                )}\n            </span>\n\n            <SelectionButtons<AnswerType>\n                key={type}\n                options={[]}\n                submit={{\n                    label: verifyAge,\n                    answer: KnownAnswerType.OK\n                }}\n                onSelect={props.onAnswer}\n            />\n        </>\n    );\n\n    const closeChatComponent = (\n        <SelectionButtons<AnswerType>\n            key={type}\n            options={yesNoOptions}\n            selectedButtonColor={SelectedButtonColor.BLACK}\n            onSelect={props.onAnswer}\n        />\n    );\n\n    const invitePrivateChatComponent = (\n        <>\n\n\t\t\t<span className={\"additionalText\"}>\n                {payload && payload.privateChatText}\n            </span>\n\t\t\t\n            <SelectionButtons<AnswerType>\n                key={type}\n                options={yesNoOptions}\n                onSelect={props.onAnswer}\n            />\n        </>\n\n    );\n\n    const userPrompts: {[ type: string]: any} = {};\n    userPrompts.LOAD_ACCOUNT = loadAccountComponent;\n    userPrompts.LOAD_ACCOUNT_ONE_CLICK = loadAccountOneClickComponent;\n    userPrompts.VERIFY_AGE = verifyAgeComponent;\n    userPrompts.SPY_PRIVATE_CHAT = closeChatComponent;\n    userPrompts.CLOSE_CHAT = closeChatComponent;\n    userPrompts.INVITE_PRIVATE_CHAT = invitePrivateChatComponent;\n    userPrompts.SEND_ANONYMOUS_TIP = <UserPromptTipContainer isAnonymous={true}/>;\n    userPrompts.SEND_TIP = <UserPromptTipContainer />;\n    userPrompts.CHOOSE_CAMERA = <CamerasSectionContainer />;\n\n    return userPrompts[type];\n};\n\nconst UserPromptContent = (props: IUserPromptContentProps) => (\n    <UserPromptContentWrapper>\n        {contentProvider(props)}\n    </UserPromptContentWrapper>\n);\n\nexport default UserPromptContent;\n","import * as React from 'react';\nimport { CSSTransition, TransitionGroup as ReactTransitionGroup } from 'react-transition-group';\n\ninterface ITimeout {\n    enter: number;\n    exit: number;\n}\n\ninterface IClassNames {\n    appear?: string;\n    appearActive?: string;\n\n    enter: string;\n    enterActive: string;\n    enterDone: string;\n\n    exit: string;\n    exitActive: string;\n    exitDone: string;\n}\n\nexport interface ITransitionGroupProps<T> {\n    timeout: ITimeout;\n    classNames: IClassNames;\n    transitionedItems: T[];\n\n    itemKey: (item: T) => any;\n    children: (item: T) => JSX.Element;\n}\n\nclass TransitionGroup<T> extends React.Component<ITransitionGroupProps<T>> {\n\n    render() {\n        const items: T[] = this.props.transitionedItems || [];\n\n        return(\n            <ReactTransitionGroup>\n                {\n                    items.map((item: T) => (\n                        <CSSTransition\n                            key={this.props.itemKey(item)}\n                            in={true}\n                            timeout={this.props.timeout}\n                            classNames={this.props.classNames}\n                            unmountOnExit={true}\n                        >\n                            {this.props.children(item)}\n                        </CSSTransition>\n                    ))\n                }\n            </ReactTransitionGroup>\n        );\n    }\n}\n\nexport default TransitionGroup;","import TransitionGroup from './TransitionGroup';\n\nexport default TransitionGroup;","import * as React from 'react';\n\nimport utils from '../../../utils';\nimport config from '../../../static/config';\nimport { UserPromptWrapper } from './style';\nimport CloseIcon from \"../../common/CloseIcon\";\nimport UserPromptTitle from \"./helpers/UserPromptTitle\";\nimport WindowBoxContainer from \"../../common/WindowBox\";\nimport UserPromptContent from \"./helpers/UserPromptContent\";\nimport TransitionGroup from \"../../common/TransitionGroup\";\nimport { IAnswerUserPromptPayload } from '../../../redux/modules/messenger';\nimport { AnswerType, ICurrency, IQuestion, QuestionType, ITranslation } from '../../../redux/store';\n\nexport interface IProps {\n    prompts: IQuestion[];\n    currency: ICurrency;\n    translation: ITranslation;\n    className?: string;\n    isAnyUserPromptOpen: boolean;\n    isResponsive?: boolean;\n    isMobileLandscape?: boolean;\n    isGiftSectionOpen?: boolean;\n    isTipPromptOpen?: boolean;\n\n    onAnswer: (payload: IAnswerUserPromptPayload) => any;\n    closeUserPrompt: (questionType: QuestionType) => () => any;\n}\n\nconst getTitle = (props: IProps, question: IQuestion) => (\n    <UserPromptTitle\n        question={question}\n        currency={props.currency}\n        translation={props.translation}\n        onAnswer={(answer: AnswerType) => props.onAnswer({ question, answer })}\n    />\n);\n\n/**\n * Stateless component used to deal with various types of user prompt interactions\n * @param props\n * @constructor\n */\nconst UserPrompt = (props: IProps) => (\n    <UserPromptWrapper\n        isResponsive={props.isResponsive}\n        isMobileLandscape={props.isMobileLandscape}\n        isGiftSectionOpen={props.isGiftSectionOpen}\n        isTipPromptOpen={props.isTipPromptOpen}\n        isAnyUserPromptOpen={props.isAnyUserPromptOpen}\n    >\n        <TransitionGroup<IQuestion>\n            timeout={{\n                enter: utils.getTransitionTimeInMilliseconds(config.popupsTransitionTime),\n                exit: utils.getTransitionTimeInMilliseconds(config.popupsTransitionTime)\n            }}\n            classNames={{\n                enter: 'enter',\n                enterActive: 'enterActive',\n                enterDone: 'enterDone',\n                exit: 'exit',\n                exitActive: 'exitActive',\n                exitDone: 'exitDone'\n            }}\n            transitionedItems={props.prompts}\n            itemKey={(item: IQuestion) => item.type}\n        >\n            {(question) => (\n                <WindowBoxContainer\n                    isOpen={true}\n                    isWindowForUserPrompt={true}\n                    key={question.type}\n                    customCloseIcon={<CloseIcon />}\n                    title={getTitle(props, question)}\n                    handleClose={props.closeUserPrompt(question.type)}\n                >\n                        <UserPromptContent\n                            currency={props.currency}\n                            question={question}\n                            translation={props.translation}\n                            onAnswer={(answer: AnswerType) => props.onAnswer({ question, answer })}\n                        />\n                </WindowBoxContainer>\n            )}\n        </TransitionGroup>\n    </UserPromptWrapper>\n);\n\nexport default UserPrompt;\n","import { IContainerProps as IProps } from \"./types\";\nimport { QuestionType } from '../../../redux/store';\n\nexport const onCloseUserPrompt = (props: IProps) => (questionType: QuestionType) => () => {\n    props.closeUserPromptSection(props.instanceId, questionType);\n};\n","import * as React from 'react';\n\nimport UserPrompt from './UserPrompt';\nimport { onCloseUserPrompt } from './utils';\nimport selectors from '../../../redux/selectors';\nimport { answerUserPromptSection, closeUserPromptSection, IAnswerUserPromptPayload } from '../../../redux/modules/messenger';\nimport IStore from '../../../redux/store';\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\nimport { IContainerProps as IProps, IContainerComponentProps as IComponentProps } from \"./types\";\n\nconst onAnswer = (props: IProps) => (answer: IAnswerUserPromptPayload) => {\n    props.answerUserPromptSection(props.instanceId, answer);\n};\n\nconst UserPromptContainer = (props: IProps) => (\n    <UserPrompt\n        className={props.className}\n        currency={props.currency}\n        prompts={props.userPrompts}\n        isResponsive={props.isResponsive}\n        translation={props.translation}\n        isMobileLandscape={props.isMobileLandscape}\n        isGiftSectionOpen={props.isGiftSectionOpen}\n        isTipPromptOpen={props.isTipPromptOpen}\n        isAnyUserPromptOpen={props.isAnyUserPromptOpen}\n\n        closeUserPrompt={onCloseUserPrompt(props)}\n        onAnswer={onAnswer(props)}\n    />\n);\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    currency: selectors.getCurrency(store, instanceId),\n    isResponsive: selectors.isResponsive(store, instanceId),\n    areAnyUserPromptsOpen: selectors.areAnyUserPromptsOpen (store, instanceId),\n    userPrompts: selectors.getUserPrompts(store, instanceId),\n    translation: selectors.getTranslation(store, instanceId),\n    isGiftSectionOpen: selectors.isGiftSectionOpen(store, instanceId),\n    isTipPromptOpen: selectors.isTipPromptOpen(store, instanceId),\n    isAnyUserPromptOpen: selectors.isAnyUserPromptOpen(store, instanceId),\n    isMobileLandscape: selectors.isMobileLandscape(store, instanceId)\n});\n\nconst mapDispatchToProps = {\n    closeUserPromptSection,\n    answerUserPromptSection\n};\n\nexport default withRedux<IComponentProps>(UserPromptContainer, mapStateToProps, mapDispatchToProps);\n","import UserPromptContainer from './UserPromptContainer';\n\nexport default UserPromptContainer;","import styled from \"styled-components\";\n\nexport const ActionSectionWrapper = styled.div`\n\tpadding: 20px 10px 5px 0;\n`;\n","import * as React from 'react';\nimport SymbolSectionContainer from '../../specific/SymbolSection/SymbolSectionContainer';\nimport { DropDownContent } from '../../specific/MessageSection/style';\nimport MessageSectionButtonsContainer from '../../specific/MessageSectionButtons';\nimport UserPromptContainer from '../../specific/UserPrompt';\nimport PerfectScrollbarContainer from '../PerfectScrollbar';\nimport ActionSectionContainer from '../../specific/ActionSection';\nimport { ActionSectionWrapper } from './style';\n\ninterface IProps {\n    isResponsive: boolean;\n    isFullscreen: boolean;\n    isDropDownOpen: boolean;\n    isAnySectionOpen: boolean;\n    hasActionSectionInDropDown: boolean;\n    areAnyPromptsOpenInResponsiveMode: boolean;\n\tareAllPopUpsClosed: boolean;\n\tisGiftSectionOpen: boolean;\n\tisEmoticonSectionOpen: boolean;\n\tshouldUseDropdownAnimation: boolean;\n}\n\nconst MessageSectionPopups = (props: IProps) => (\n    <>\n        <SymbolSectionContainer />\n\n        {!props.isFullscreen && props.isResponsive && (\n            <DropDownContent\n                isAnySectionOpen={props.isAnySectionOpen}\n                isOpen={props.isDropDownOpen}\n                shouldUseDropdownAnimation={props.shouldUseDropdownAnimation}\n            >\n                <PerfectScrollbarContainer hasFullWidth={true}>\n                    <MessageSectionButtonsContainer />\n\n                    {props.hasActionSectionInDropDown && (\n\t\t\t\t\t\t<ActionSectionWrapper>\n\t\t\t\t\t\t\t<ActionSectionContainer />\n\t\t\t\t\t\t</ActionSectionWrapper>\n\t\t\t\t\t)}\n                </PerfectScrollbarContainer>\n            </DropDownContent>\n        )}\n\n        <UserPromptContainer />\n\n    </>\n);\n\nexport default MessageSectionPopups;\n","import MessageSectionPopupsContainer from './MessageSectionPopupsContainer';\n\nexport default MessageSectionPopupsContainer;\n","import * as React from 'react';\n\nimport IStore from '../../../redux/store';\nimport selectors from '../../../redux/selectors';\nimport MessageSectionPopups from './MessageSectionPopups';\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\n\ninterface IStoreProps {\n    isResponsive: boolean;\n    isDropDownOpen: boolean;\n    isFullscreen: boolean;\n    hasActionSectionInDropDown: boolean;\n    isAnySectionOpen: boolean;\n    areAnyPromptsOpenInResponsiveMode: boolean;\n\tareAllPopUpsClosed: boolean;\n\tisGiftSectionOpen: boolean;\n\tisEmoticonSectionOpen: boolean;\n\tshouldUseDropdownAnimation: boolean;\n}\n\ntype IProps = IStoreProps & IInstanceProps;\n\nconst MessageSectionPopupsContainer = (props: IProps) => (\n\t<MessageSectionPopups\n\t\tisDropDownOpen={props.isDropDownOpen}\n\t\tisFullscreen={props.isFullscreen}\n\t\tisResponsive={props.isResponsive}\n\t\thasActionSectionInDropDown={props.hasActionSectionInDropDown}\n\t\tisAnySectionOpen={props.isAnySectionOpen}\n\t\tareAnyPromptsOpenInResponsiveMode={props.areAnyPromptsOpenInResponsiveMode}\n\t\tareAllPopUpsClosed={props.areAllPopUpsClosed}\n\t\tisGiftSectionOpen={props.isGiftSectionOpen}\n\t\tisEmoticonSectionOpen={props.isEmoticonSectionOpen}\n\t\tshouldUseDropdownAnimation={props.shouldUseDropdownAnimation}\n\t/>\n);\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    isResponsive: selectors.isResponsive(store, instanceId),\n    isDropDownOpen: selectors.isDropDownMenuOpen(store, instanceId),\n    isFullscreen: selectors.isFullScreen(store, instanceId),\n    hasActionSectionInDropDown: selectors.hasActionSectionInDropDown(store, instanceId),\n    isAnySectionOpen: selectors.isAnySectionOpen(store, instanceId),\n    areAnyPromptsOpenInResponsiveMode: selectors.areAnyPromptsOpenInResponsiveMode(store, instanceId),\n\tareAllPopUpsClosed: selectors.areAllPopUpsClosed(store, instanceId),\n\tisGiftSectionOpen: selectors.isGiftSectionOpen(store, instanceId),\n\tisEmoticonSectionOpen: selectors.isEmoticonSectionOpen(store, instanceId),\n\tshouldUseDropdownAnimation: selectors.shouldUseDropdownAnimation(store, instanceId)\n});\n\nexport default withRedux(MessageSectionPopupsContainer, mapStateToProps);\n","import ChatBoxContainer from './ChatBoxContainer';\n\nexport default ChatBoxContainer;","import * as React from 'react';\nimport { differenceWith, some, first, isEqual, isUndefined } from 'lodash';\nimport { withTheme } from 'styled-components';\nimport { withResizeDetector } from 'react-resize-detector';\nimport { isMobile } from \"react-device-detect\";\n\nimport utils from '../../../utils';\nimport { ChatBoxBlanket, ChatBoxWrapper, GroupChatParticipantsWrapper } from './style';\nimport { ITheme } from '../../../themes';\nimport config from '../../../static/config';\nimport selectors from '../../../redux/selectors';\nimport { ActionDispatcher } from '../../../redux';\nimport { requestHistory } from '../../../sagas/websockets/history';\nimport { setModalContent } from '../../../redux/modules/messenger';\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\nimport ChatBox from './ChatBox';\nimport PerfectScrollbarContainer, { ScrollPosition } from '../../../features/common/PerfectScrollbar';\nimport IStore, {\n\tIChat,\n\tIEmoticon,\n\tIGift,\n\tIMessage,\n\tITranslation,\n\tIModalContent\n} from '../../../redux/store';\nimport GroupChatParticipantsContainer from \"../GroupChatParticipants\";\nimport FontSizeSwitcherContainer from \"../FontSizeSwitcher\";\nimport { IChatBoxProps, CONTENT_UPDATE_TYPE, IOrganizedMessage } from './types';\nimport MessageSectionPopupsContainer from '../../common/MessageSectionPopups';\n\ninterface IStoreProps {\n\tchat?: IChat;\n\tgifts: IGift[];\n\temoticons: IEmoticon[];\n\tisFullscreen: boolean;\n\twidth: number;\n\theight: number;\n\tmessages: IMessage[];\n\ttranslation: ITranslation;\n\tisChatExternallyProvided: boolean;\n\tshouldLiftChatbox: boolean;\n\tisCountdownWarningOpen: boolean;\n\tisMobileLandscape: boolean;\n\thasHistorySectionsOpened: boolean;\n\thasMessagesGrouped: boolean;\n\tisPlaying: boolean;\n\tisResponsive: boolean;\n\tshouldIncreaseMessageFontSize: boolean;\n\tmentionOptions: string[];\n\ttheme?: ITheme;\n\n\trequestHistory: ActionDispatcher;\n\tsetModalContent: ActionDispatcher<IModalContent>;\n}\n\ntype IProps = IInstanceProps & IStoreProps;\n\ninterface IState {\n\torganizedMessages: IOrganizedMessage;\n\tisScrollInitialized: boolean;\n}\n\nclass ChatBoxContainer extends React.Component<IProps, IState> {\n\tconstructor(props: IProps) {\n\t\tsuper(props);\n\n\t\tthis.scrollbar = React.createRef();\n\t\tthis.state = {\n\t\t\torganizedMessages: [],\n\t\t\tisScrollInitialized: false\n\t\t};\n\t}\n\n\t// We need a ref to our PerfectScrollbar component in order to\n\t// call scroll functions on it\n\tscrollbar: any;\n\n\tscrollPosition?: ScrollPosition = ScrollPosition.BOTTOM;\n\n\tfirstMessageId?: string;\n\n\twasMounted: boolean;\n\n\tcomponentDidMount() {\n\t\t// Set the initial store for the organizedMessages\n\t\tconst organizedMessages = this.getMessages();\n\n\t\tthis.setState({ organizedMessages });\n\n\t\tthis.wasMounted = true;\n\t}\n\n\tcomponentDidUpdate(prevProps: IProps) {\n\t\tif (this.props.shouldIncreaseMessageFontSize !== prevProps.shouldIncreaseMessageFontSize\n\t\t\t&& this.scrollPosition === ScrollPosition.BOTTOM\n\t\t) {\n\t\t\tthis.scrollDown()\n\t\t}\n\n\t\tconst { isPlaying, messages } = this.props;\n\t\t// since messenger resizes when player starts to play we need to re-scroll the messages\n\t\tif (isPlaying && !prevProps.isPlaying) {\n\t\t\tthis.scrollDown();\n\t\t}\n\n\t\tif (!isEqual(messages, prevProps.messages)) {\n\t\t\t// If the number of messages has changed, set the new store of the organizedMessages\n\t\t\tconst organizedMessages = this.getMessages();\n\t\t\tthis.setState({ organizedMessages });\n\n\t\t\tconst isHistoryMessagesUpdate = this.isHistoryMessagesUpdate(\n\t\t\t\tprevProps.messages,\n\t\t\t\tmessages\n\t\t\t);\n\n\t\t\tif (isHistoryMessagesUpdate && this.scrollPosition === ScrollPosition.TOP) {\n\t\t\t\tthis.scrollTo(this.firstMessageId);\n\t\t\t} else {\n\t\t\t\t// it's a new message: scroll down\n\t\t\t\tthis.scrollDown();\n\t\t\t}\n\t\t}\n\n\t\tif (!isEqual(prevProps.width, this.props.width)\n\t\t\t&& isUndefined(prevProps.width)) {\n\t\t\t// scroll down, since we now have width and messages were rendered\n\t\t\tthis.scrollDown().then(() => {\n\t\t\t\tif (this.wasMounted) {\n\t\t\t\t\tthis.setState({ isScrollInitialized: true })\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tcomponentWillUnmount() {\n\t\tthis.wasMounted = false;\n\t}\n\n\trender() {\n\t\tconst {\n\t\t\tisCountdownWarningOpen,\n\t\t\tshouldLiftChatbox,\n\t\t\ttheme,\n\t\t\tgifts,\n\t\t\temoticons,\n\t\t\tisFullscreen,\n\t\t\twidth\n\t\t} = this.props;\n\n\t\t// Set chat box component's properties\n\t\tconst chatBoxProps: IChatBoxProps = {\n\t\t\tgifts,\n\t\t\temoticons,\n\t\t\tsetModalContent: this.setModalContent,\n\t\t\tisFullscreen,\n\t\t\tisResponsive: width < config.viewSizes.chatboxSectionMaxWidth,\n\t\t\torganizedMessages: this.state.organizedMessages,\n\t\t\tisMobileLandscape: this.props.isMobileLandscape,\n\t\t\tmentionOptions: this.props.mentionOptions,\n\t\t\thasHistorySectionsOpened: this.props.hasHistorySectionsOpened,\n\t\t\thasMessagesGrouped: this.props.hasMessagesGrouped,\n\t\t\twidth: this.props.width,\n\n\t\t\tonContentUpdate: this.handleContentUpdate\n\t\t};\n\t\tconst shouldTrimChatbox = isCountdownWarningOpen && this.props.isMobileLandscape;\n\n\t\tconst isMobilePortrait = isMobile && !this.props.isMobileLandscape;\n\t\tconst shouldDisplayParticipants = !isMobilePortrait && !this.props.isFullscreen;\n\n\t\treturn (\n\t\t\t<ChatBoxWrapper\n\t\t\t\tshouldLiftChatbox={shouldLiftChatbox}\n\t\t\t\tshouldTrimChatbox={shouldTrimChatbox}\n\t\t\t\tshouldApplyOverflow={this.props.isResponsive && !this.props.isFullscreen}\n\t\t\t>\n\t\t\t\t{!this.state.isScrollInitialized && <ChatBoxBlanket />}\n\n\t\t\t\t{shouldDisplayParticipants &&\n\t\t\t\t<GroupChatParticipantsWrapper>\n\t\t\t\t\t<GroupChatParticipantsContainer />\n\t\t\t\t</GroupChatParticipantsWrapper>\n\t\t\t\t}\n\n\t\t\t\t<FontSizeSwitcherContainer />\n\n\t\t\t\t{!this.props.isMobileLandscape && <MessageSectionPopupsContainer />}\n\n\t\t\t\t{!isUndefined(this.props.width) &&\n\t\t\t\t\t<PerfectScrollbarContainer\n\t\t\t\t\t\tclassName=\"chatbox-scrollbar-container\"\n\t\t\t\t\t\tref={this.scrollbar}\n\t\t\t\t\t\thasFullHeight={true}\n\t\t\t\t\t\thasFullWidth={true}\n\t\t\t\t\t\tonScroll={this.onScroll}\n\t\t\t\t\t\tisFullscreen={isFullscreen}\n\t\t\t\t\t\ttheme={theme}\n\t\t\t\t\t\tconfig={{\n\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\tsuppressScrollX: true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<ChatBox {...chatBoxProps} />\n\t\t\t\t\t</PerfectScrollbarContainer>\n\t\t\t\t}\n\n\t\t\t</ChatBoxWrapper>\n\t\t);\n\t}\n\n\tprivate handleContentUpdate = (content: CONTENT_UPDATE_TYPE, message?: IMessage) => () => {\n\t\tif (content === CONTENT_UPDATE_TYPE.GROUP) {\n\t\t\tthis.updateScroll();\n\t\t}\n\t};\n\n\tprivate onScroll = (scrollPosition: ScrollPosition) => {\n\t\tthis.scrollPosition = scrollPosition;\n\n\t\tif (scrollPosition === ScrollPosition.TOP) {\n\t\t\tthis.firstMessageId = this.getFirstMessageId(this.props.messages);\n\t\t\tthis.props.requestHistory(this.props.instanceId);\n\t\t}\n\t};\n\n\tprivate getMessages = () => this.props.hasMessagesGrouped && !this.props.isFullscreen\n\t\t? utils.getOrganizedMessages(this.props.messages, this.props.chat?.chatId)\n\t\t: this.props.messages;\n\n\tprivate setModalContent = (modalContent?: IModalContent) => () => {\n\t\tif (modalContent) {\n\t\t\tthis.props.setModalContent(this.props.instanceId, modalContent)\n\t\t}\n\t};\n\n\tprivate getFirstMessageId = (messages: IMessage[]) => {\n\t\tconst firstMessage = first(messages);\n\t\treturn firstMessage?.id;\n\t};\n\n\tprivate updateScroll = () => {\n\t\tconst scrollbar = this.scrollbar.current;\n\t\tif (scrollbar) {\n\t\t\tscrollbar.updateScroll();\n\t\t}\n\t};\n\n\tprivate scrollDown = async () => {\n\t\tconst scrollbar = this.scrollbar.current;\n\t\tif (scrollbar) {\n\t\t\treturn scrollbar.scrollDown();\n\t\t}\n\t};\n\n\tprivate scrollTo = (anchorId?: string) => {\n\t\tconst scrollbar = this.scrollbar.current;\n\t\tif (scrollbar) {\n\t\t\tscrollbar.scrollYTo(anchorId);\n\t\t}\n\t};\n\n\tprivate isHistoryMessagesUpdate = (\n\t\tprevMessages: IMessage[],\n\t\tcurrentMessages: IMessage[]\n\t): boolean => {\n\t\tconst newMessages = differenceWith(currentMessages, prevMessages, isEqual);\n\t\treturn !some(newMessages, newMessage => !newMessage.isFromHistory);\n\t};\n}\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n\tchat: selectors.getChat(store, instanceId),\n\tgifts: selectors.getTranslatedGifts(store, instanceId),\n\temoticons: selectors.getEmoticons(store, instanceId),\n\tisFullscreen: selectors.isFullScreen(store, instanceId),\n\tisChatExternallyProvided: selectors.isChatExternallyProvided(store, instanceId),\n\tmessages: selectors.getActiveMessages(store, instanceId),\n\ttranslation: selectors.getTranslation(store, instanceId),\n\tshouldLiftChatbox: selectors.shouldLiftChatbox(store, instanceId),\n\tisCountdownWarningOpen: selectors.isCountdownWarningOpen(store, instanceId),\n\tisMobileLandscape: selectors.isMobileLandscape(store, instanceId),\n\thasHistorySectionsOpened: selectors.hasHistorySectionsOpened(store, instanceId),\n\thasMessagesGrouped: selectors.hasMessagesGrouped(store, instanceId),\n\tmentionOptions: selectors.getMentionOptions(store, instanceId),\n\tisPlaying: selectors.isPlaying(store, instanceId),\n\tisResponsive: selectors.isResponsive(store, instanceId),\n\tshouldIncreaseMessageFontSize: selectors.getShouldIncreaseMessageFontSize(store, instanceId)\n});\n\nconst mapDispatchToProps = {\n\trequestHistory,\n\tsetModalContent\n};\n\nexport default withRedux(ChatBoxContainer, mapStateToProps, mapDispatchToProps, {\n\twithResizeDetector,\n\twithTheme\n});\n","import styled from 'styled-components';\nimport withIdentifier, { DomIdentifier } from \"../../hoc/withIdentifier\";\n\nexport const VideoChatContainerWrapper = withIdentifier(styled.div`\n    width: 100%;\n    height: 100%;\n    position: relative;\n    display: block;\n    \n    #playButton {\n    \tdisplay: none;\n    }\n    \n`, DomIdentifier.VideoChatContainer);\n\nexport const VideoChatContainerBlanket = withIdentifier(styled.div`\n    width: 100%;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    position: absolute;\n    z-index: 3;\n`, DomIdentifier.VideoChatContainerBlanket);\n","import * as React from 'react';\nimport { RefObject } from 'react';\nimport * as cuid from 'cuid';\nimport { VideoChatContainerBlanket } from './style';\n\ninterface IProps {\n    isFrozen: boolean;\n    container: HTMLElement | null;\n    shouldHideVideochatControls: boolean;\n\n    displayVideoChatControls: () => void;\n    onCreateContainer: (container: HTMLDivElement) => any;\n}\n\nclass VideoChat extends React.Component<IProps> {\n\n    private ref: RefObject<HTMLDivElement>;\n\n    constructor(props: IProps) {\n        super(props);\n        this.ref = React.createRef();\n    }\n\n    componentDidMount() {\n        const componentNode = this.ref.current;\n\n        if (componentNode) {\n            const existingContainer = this.props.container;\n            if (existingContainer) {\n                componentNode.appendChild(existingContainer);\n            } else {\n                const newContainer = document.createElement('div');\n                newContainer.setAttribute('style', \"width: 100%; height: 100%;\");\n                newContainer.setAttribute(\"id\", cuid.slug());\n                componentNode.appendChild(newContainer);\n                this.props.onCreateContainer(newContainer);\n            }\n        }\n    }\n\n    render() {\n        return (\n            <>\n                <div ref={this.ref} style={this.getStyle()} />\n                {this.props.shouldHideVideochatControls &&\n                    <VideoChatContainerBlanket\n                        onClick={this.props.displayVideoChatControls}\n                        onMouseMove={this.props.displayVideoChatControls}\n                    />\n                }\n            </>\n        );\n    }\n\n    private getStyle = (): React.CSSProperties => {\n        const style: React.CSSProperties = {\n            width: \"100%\",\n            height: \"100%\"\n        };\n\n        if (this.props.isFrozen) {\n            style.transition = \".5s ease\";\n            style.opacity = 0.3;\n        }\n\n        return style;\n    };\n}\n\nexport default VideoChat;\n","import styled from \"styled-components\";\n\nexport const CenterChild = styled.div`\n\twidth: 100%;\n\theight: 100%;\n\tz-index: 5;\n\tposition: absolute;\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n`;\n\n\nexport const PortraitInformationDialogCenterChild = styled(CenterChild)`\n\twidth: ${window.innerWidth}px;\n\theight: ${window.innerHeight}px;\n`;\n","import { CenterChild, PortraitInformationDialogCenterChild } from './CenterChild';\n\nexport default CenterChild;\nexport { PortraitInformationDialogCenterChild };\n","import styled, { css, keyframes } from 'styled-components';\n\ninterface IPreloaderAnimationProps {\n    preloader: string;\n}\n\ninterface IPreloaderTextWrapper {\n\tshouldAdjustVertically?: boolean;\n}\n\nconst staticLogoPulse = keyframes`\n    0%,100%{opacity:.1}\n    50%{opacity:1}}\n`;\n\nconst animation = css`\n    animation: ${staticLogoPulse} 3s infinite ease-in-out;\n`;\n\nconst PreloaderAnimation = styled.div`\n    ${animation}\n`;\n\nexport const ConfiguredPreloader = styled(PreloaderAnimation)<IPreloaderAnimationProps>`\n    ${props => `background: url(${props.preloader}) no-repeat center center`};\n    \n    width: 10vw;\n    height: 10vw;\n    background-size: auto 100%;\n`;\n\nexport const DefaultPreloader = styled(PreloaderAnimation).attrs({ className: \"-icon-three-dots-full\" })`\n    font-size: 10vw;\n    color: white;\n`;\n\nexport const PreloaderTitle = styled.p`\n    font-family: ${props => props.theme.typography.fontFamily};\n    font-weight: ${props => props.theme.typography.weight.bold};\n    font-size: 2vw;\n    color: #FFFFFF;\n    margin: 25px 0 10px 0;\n`;\n\nexport const PreloaderSubTitle = styled.p`\n    font-family: ${props => props.theme.typography.fontFamily};\n    font-weight: ${props => props.theme.typography.weight.regular};\n    font-size: 1.5vw;\n    color: #FFFFFF;\n    margin: 0px;\n`;\n\nexport const PreloaderTextWrapper = styled.div<IPreloaderTextWrapper>`\n\t${({ shouldAdjustVertically }) => shouldAdjustVertically ? \"margin-top: 20px;\" : \"\"}\n\n\twidth: 100%;\n    position: absolute;\n\ttext-align: center;\n`;\n","import * as React from 'react';\nimport CenterChild from \"../../common/CenterChild\";\nimport {\n    ConfiguredPreloader,\n    DefaultPreloader,\n    PreloaderSubTitle,\n    PreloaderTextWrapper,\n    PreloaderTitle\n} from \"./style\";\n\ninterface IProps {\n    preloader?: string;\n    title: string;\n    subtitle: string;\n\thasPreloaderPaymentText?: boolean;\n\tshouldAdjustVertically?: boolean;\n}\n\nconst Preloader = (props: IProps) => (\n    <>\n        {props.hasPreloaderPaymentText &&\n        <PreloaderTextWrapper shouldAdjustVertically={props.shouldAdjustVertically}>\n            <PreloaderTitle>{props.title}</PreloaderTitle>\n            <PreloaderSubTitle>{props.subtitle}</PreloaderSubTitle>\n        </PreloaderTextWrapper>\n        }\n\n        <CenterChild>\n            {props.preloader\n                ? <ConfiguredPreloader preloader={props.preloader} />\n                : <DefaultPreloader />\n            }\n        </CenterChild>\n    </>\n);\n\nexport default Preloader;\n","import PreloaderContainer from './PreloaderContainer';\n\nexport default PreloaderContainer;","import * as React from 'react';\n\nimport Preloader from \"./Preloader\";\nimport selectors from '../../../redux/selectors';\nimport IStore, { ITranslation } from \"../../../redux/store\";\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\n\ninterface IStoreProps {\n    shouldRenderPreloader: boolean;\n    hasPreloaderPaymentText?: boolean;\n    preloader?: string;\n    translation: ITranslation\n}\n\ninterface IComponentProps {\n\tshouldAdjustVertically?: boolean;\n}\n\ntype IProps = IStoreProps & IInstanceProps & IComponentProps;\n\nconst PreloaderContainer = (props: IProps) => {\n\tconst { freeConnection, billingStart } = props.translation.chat;\n\n    return (\n        <>\n            {props.shouldRenderPreloader &&\n                <Preloader\n\t\t\t\t\ttitle={freeConnection}\n\t\t\t\t\tsubtitle={billingStart}\n\t\t\t\t\tpreloader={props.preloader}\n\t\t\t\t\tshouldAdjustVertically={props.shouldAdjustVertically}\n\t\t\t\t\thasPreloaderPaymentText={props.hasPreloaderPaymentText}\n                />\n            }\n        </>\n    );\n};\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n\tpreloader: selectors.getPreloader(store, instanceId),\n    translation: selectors.getTranslation(store, instanceId),\n    shouldRenderPreloader: selectors.shouldRenderPreloader(store, instanceId),\n    hasPreloaderPaymentText: selectors.hasPreloaderPaymentText(store, instanceId)\n});\n\nexport default withRedux(PreloaderContainer, mapStateToProps);\n","import InformationDialogContainer from './InformationDialogContainer';\n\nexport default InformationDialogContainer;","import { IContainerProps as IProps } from \"./types\";\n\nexport const onButtonClick = (props: IProps) => () => {\n    props.toggleCam2Cam(props.instanceId)\n};\n","import styled from \"styled-components\";\nimport { isMobile } from 'react-device-detect';\n\nimport ITheme from \"../../../themes/interfaces\";\n\nexport const AVSCam2CamPopupWrapper = styled.div`\n    ${(props) => props.theme && `\n        background-color: ${(props.theme as ITheme).colors.avsCam2CamPopup.backgroundColor};\n        color: ${(props.theme as ITheme).colors.avsCam2CamPopup.mainTextColor};\n    `}\n    ${isMobile && `\n        width: 80%;\n        height: 98%;\n    `}\n    \n    transform: translate(-50%, -50%);\n    top: 50%;\n    left: 50%;\n    max-width: 80%;\n    position: absolute;\n    text-align: center;\n    border: none;\n    border-radius: 4px;\n    z-index: 4;\n`;\n\nexport const AVSCam2CamPopupContent = styled.div`\n    padding: 20px 40px;\n    font-family: ${(props) => props.theme.typography.fontFamily};\n`;\n\nexport const AVSCam2CamPopupSmallText = styled.div`\n    ${(props) => props.theme && `\n        color: ${(props.theme as ITheme).colors.avsCam2CamPopup.smallTextColor};\n    `}\n    \n    margin-bottom: 20px;\n    text-align: center;\n    vertical-align: inherit;\n    font-size: 16px;\n    font-style: italic;\n`;\n\nexport const AVSCam2CamPopupMainText = styled.div`\n    margin-bottom: 20px;\n    text-align: center;\n    vertical-align: inherit;\n    font-size: 16px;\n`;\n\nexport const AVSCam2CamPopupButton = styled.div`\n    border-radius: 2px;\n    display: inline-block;\n    padding: .65em 1em .55em;\n    cursor: pointer;\n    min-width: 50px;\n    position: relative;\n    text-align: center;\n    transition: all .15s linear;\n    vertical-align: top;\n    font-size: 18px;\n\n    ${(props) => props.theme &&\n        `\n            color: ${(props.theme as ITheme).colors.avsCam2CamPopup.button.textColor};\n            background-color: ${(props.theme as ITheme).colors.avsCam2CamPopup.button.standard};\n            border: 1px solid ${(props.theme as ITheme).colors.avsCam2CamPopup.button.standard};\n\n            &:hover {\n                background-color: ${(props.theme as ITheme).colors.avsCam2CamPopup.button.onHover};\n                border-color: ${(props.theme as ITheme).colors.avsCam2CamPopup.button.onHover};\n            }\n        `\n    }\n`;\n","import * as React from 'react';\nimport {\n    AVSCam2CamPopupButton,\n    AVSCam2CamPopupContent,\n    AVSCam2CamPopupMainText,\n    AVSCam2CamPopupSmallText,\n    AVSCam2CamPopupWrapper\n} from \"./style\";\nimport withIdentifier, { DomIdentifier } from \"../../hoc/withIdentifier\";\n\ninterface IProps {\n    smallText: string;\n    mainText: string;\n    buttonText: string;\n    onButtonClick: () => void;\n}\n\nconst AVSCam2CamPopup = (props: IProps) => (\n    <AVSCam2CamPopupWrapper>\n        <AVSCam2CamPopupContent>\n            <AVSCam2CamPopupSmallText>{props.smallText}</AVSCam2CamPopupSmallText>\n            <AVSCam2CamPopupMainText>{props.mainText}</AVSCam2CamPopupMainText>\n\n            <AVSCam2CamPopupButton onClick={props.onButtonClick}>\n                {props.buttonText}\n            </AVSCam2CamPopupButton>\n\n        </AVSCam2CamPopupContent>\n        \n    </AVSCam2CamPopupWrapper>\n);\n\nexport default withIdentifier<IProps>(AVSCam2CamPopup, DomIdentifier.AvsCam2CamPopup);\n","import * as React from 'react';\n\nimport { onButtonClick } from './utils';\nimport AVSCam2CamPopup from \"./AVSCam2CamPopup\";\nimport selectors from '../../../redux/selectors';\nimport IStore from '../../../redux/store';\nimport { toggleCam2Cam } from \"../../../sagas/common/videochat/cam2Cam\";\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\nimport { IContainerProps as IProps } from \"./types\";\n\nconst AVSCam2CamPopupContainer = (props: IProps) => {\n    const { hint, requestAccess, allowAccess } = props.translation.avs;\n\n    return (\n        <>\n            {props.shouldRenderAVSCam2CamPopup && (\n                <AVSCam2CamPopup\n                    smallText={hint}\n                    mainText={requestAccess}\n                    buttonText={allowAccess}\n                    onButtonClick={onButtonClick(props)}\n                />\n            )}\n        </>\n    );\n};\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    translation: selectors.getTranslation(store, instanceId),\n    shouldRenderAVSCam2CamPopup: selectors.shouldRenderAVSCam2CamPopup(store, instanceId)\n});\n\nconst mapDispatchToProps = {\n    toggleCam2Cam\n};\n\nexport default withRedux(AVSCam2CamPopupContainer, mapStateToProps, mapDispatchToProps);\n","import styled from \"styled-components\";\nimport withIdentifier, { DomIdentifier } from \"../../hoc/withIdentifier\";\n\nexport const PlayButtonWrapper = withIdentifier(styled.div`\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    width: 125px;\n    height: 125px;\n    \n    z-index: 1;\n    cursor: pointer;\n`, DomIdentifier.PlayButton);\n\nexport const PlayButtonSvg = styled.svg.attrs({\n\tversion: '1.1',\n\txmlns: 'http://www.w3.org/2000/svg',\n\tx: '0px',\n\ty: '0px',\n\tviewBox: '0 0 30 30'\n})`\n    enable-background:new 0 0 30 30;\n    \n    .st0{\n    \tfill:#FFFFFF;\n    }\n`;\n","import * as React from 'react';\nimport {PlayButtonSvg, PlayButtonWrapper} from './style';\n\ninterface IProps {\n    onClick: () => void;\n}\n\nconst svgPath = \"M2,3C0.9,3,0,3.9,0,5v20c0,1.1,0.9,2,2,2h26c1.1,\" +\n\t\"0,2-0.9,2-2V5c0-1.1-0.9-2-2-2H2z M21.5,15.8l-8.4,5.6c-0.5,0.3-1.1,\" +\n\t\"0.2-1.4-0.3c-0.1-0.2-0.2-0.4-0.2-0.6V9.4c0-0.6,0.4-1,1-1c0.2,0,0.4,\" +\n\t\"0.1,0.6,0.2l8.4,5.6c0.5,0.3,0.6,0.9,0.3,1.4C21.7,15.7,21.6,15.8,21.5,15.8z\";\n\nconst PlayButton = (props: IProps) => (\n    <PlayButtonWrapper onClick={props.onClick}>\n\t\t<PlayButtonSvg>\n\t\t\t<path  className=\"st0\" id=\"play-full\" d={svgPath}/>\n\t\t</PlayButtonSvg>\n\t</PlayButtonWrapper>\n);\n\nexport default PlayButton;\n","import * as React from 'react';\n\nimport PlayButton from './PlayButton';\nimport selectors from '../../../redux/selectors';\nimport { ActionDispatcher} from '../../../redux';\nimport IStore from '../../../redux/store';\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\nimport { setIsAutoplayRestricted } from \"../../../redux/modules/videochat\";\nimport { resumeInitialVideochat } from \"../../../sagas/common/videochat\";\n\ninterface IStoreProps {\n\tisAutoplayRestricted: boolean;\n\tsetIsAutoplayRestricted: ActionDispatcher;\n\tresumeInitialVideochat: ActionDispatcher;\n}\n\ntype IProps = IInstanceProps & IStoreProps;\n\nconst onPlayButtonClick = (props: IProps) => () => {\n\tconst { instanceId } = props;\n\tprops.resumeInitialVideochat(instanceId);\n    props.setIsAutoplayRestricted(instanceId, false);\n};\n\nconst PlayButtonContainer = (props: IProps) => (\n\tprops.isAutoplayRestricted\n\t? <PlayButton\n\t\tonClick={onPlayButtonClick(props)}\n\t/>\n\t: <></>\n);\n\nconst mapStateToProps = (store: IStore, { instanceId}: IInstanceProps) => ({\n\tisAutoplayRestricted: selectors.isAutoplayRestricted(store, instanceId)\n});\n\nconst mapDispatchToProps = {\n\tsetIsAutoplayRestricted,\n\tresumeInitialVideochat\n};\n\nexport default withRedux(PlayButtonContainer, mapStateToProps, mapDispatchToProps);\n","import PlayButtonContainer from './PlayButtonContainer';\n\nexport default PlayButtonContainer;\n","import * as React from 'react';\nimport { isMobile, withOrientationChange } from 'react-device-detect';\n\nimport VideoChat from './VideoChat';\nimport selectors from '../../../redux/selectors';\nimport { ActionDispatcher } from '../../../redux';\nimport CenterChild, { PortraitInformationDialogCenterChild } from '../../common/CenterChild';\nimport { VideoChatContainerWrapper } from './style';\nimport PreloaderContainer from '../../common/Preloader';\nimport { setQuality, setShouldHideVideochatControls, setIsMobileMenuOpen } from '../../../redux/modules/videochat';\nimport IStore, { VideochatInformationType } from '../../../redux/store';\nimport { createVideoChatPlayer } from \"../../../sagas/common/videochat\";\nimport InformationDialogContainer from '../../common/InformationDialog';\nimport AVSCam2CamPopupContainer from \"../AVSCam2CamPopup/AVSCam2CamPopupContainer\";\nimport PlayerService from \"../../../services/PlayerService\";\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\nimport constants from '../../../static/constants';\nimport PlayButtonContainer from \"../PlayButton\";\n\ninterface IStoreProps {\n\tinformationType: VideochatInformationType;\n\tshouldRenderRegularInformationDialog: boolean;\n\tshouldRenderPreloader: boolean;\n\tshouldHideVideochatControls: boolean;\n\tisMobileMenuOpen: boolean;\n\tisAutoplayRestricted: boolean;\n\n\tsetQuality: ActionDispatcher<boolean>;\n\tcreateVideoChatPlayer: ActionDispatcher<HTMLElement>;\n\tsetShouldHideVideochatControls: ActionDispatcher<boolean>;\n\tsetIsMobileMenuOpen: ActionDispatcher<boolean>;\n}\n\n/*\n **\tThese flags are only applicable for mobile devices\n */\ninterface IOrientationProps {\n\tisLandscape: boolean;\n\tisPortrait: boolean;\n}\n\ntype IProps = IInstanceProps & IStoreProps & IOrientationProps;\n\nclass VideoChatContainer extends React.Component<IProps> {\n\n\tconstructor(props: IProps) {\n\t\tsuper(props);\n\t\tthis.playerContainer = PlayerService.getService(props.instanceId).getPlayerContainer();\n\t}\n\n\tprivate playerContainer: HTMLElement | null;\n\n\tcomponentDidMount() {\n\t\tconst { instanceId } = this.props;\n\t\tthis.props.setQuality(instanceId, isMobile);\n\n\t\tif (this.playerContainer) {\n\t\t\tthis.props.createVideoChatPlayer(instanceId, this.playerContainer);\n\t\t}\n\n\t\tthis.hideVideoChatControlsTimeout();\n\t}\n\n\trender() {\n\t\tconst { isPortrait: isMobilePortrait } = this.props;\n\t\tconst isPreviewFrozen = this.props.informationType === VideochatInformationType.PREVIEW_JUST_FINISHED;\n\t\tconst CenterChildComponent = isMobilePortrait ? PortraitInformationDialogCenterChild : CenterChild;\n\n\t\treturn (\n\t\t\t<VideoChatContainerWrapper>\n\t\t\t\t{this.props.shouldRenderRegularInformationDialog &&\n\t\t\t\t\t<CenterChildComponent>\n\t\t\t\t\t\t<InformationDialogContainer/>\n\t\t\t\t\t</CenterChildComponent>\n\t\t\t\t}\n\n\t\t\t\t{!this.props.isAutoplayRestricted &&\n\t\t\t\t<PreloaderContainer shouldAdjustVertically={isMobilePortrait}/>}\n\n\t\t\t\t<PlayButtonContainer/>\n\n\t\t\t\t<AVSCam2CamPopupContainer/>\n\n\t\t\t\t<VideoChat\n\t\t\t\t\tcontainer={this.playerContainer}\n\t\t\t\t\tisFrozen={isPreviewFrozen}\n\t\t\t\t\tonCreateContainer={this.onCreateContainer}\n\t\t\t\t\tshouldHideVideochatControls={this.props.shouldHideVideochatControls}\n\t\t\t\t\tdisplayVideoChatControls={this.displayVideoChatControls}\n\t\t\t\t/>\n\t\t\t</VideoChatContainerWrapper>\n\t\t)\n\t}\n\n\tprivate displayVideoChatControls = () => {\n\t\tif (this.props.shouldHideVideochatControls) {\n\t\t\tthis.props.setShouldHideVideochatControls(this.props.instanceId, false);\n\t\t\tthis.hideVideoChatControlsTimeout();\n\t\t}\n\t};\n\n\tprivate hideVideoChatControlsTimeout = () => {\n\t\tsetTimeout(() => {\n\t\t\tif (this.props.isMobileMenuOpen) {\n\t\t\t\tthis.props.setIsMobileMenuOpen(this.props.instanceId, false);\n\t\t\t}\n\n\t\t\tthis.props.setShouldHideVideochatControls(this.props.instanceId, true);\n\t\t}, constants.shouldHideVideoChatControlsTimeoutTime)\n\t};\n\n\tprivate onCreateContainer = (element: HTMLElement) => {\n\t\tthis.props.createVideoChatPlayer(this.props.instanceId, element);\n\t};\n}\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n\tinformationType: selectors.getInformationType(store, instanceId),\n\tshouldRenderRegularInformationDialog: selectors.shouldRenderRegularInformationDialog(store, instanceId),\n\tshouldRenderPreloader: selectors.shouldRenderPreloader(store, instanceId),\n\tshouldHideVideochatControls: selectors.shouldHideVideochatControls(store, instanceId),\n\tisMobileMenuOpen: selectors.isMobileMenuOpen(store, instanceId),\n\tisAutoplayRestricted: selectors.isAutoplayRestricted(store, instanceId)\n});\n\nconst mapDispatchToProps = {\n\tsetQuality,\n\tcreateVideoChatPlayer,\n\tsetShouldHideVideochatControls,\n\tsetIsMobileMenuOpen\n};\n\nexport default withRedux(VideoChatContainer, mapStateToProps, mapDispatchToProps, { withOrientationChange });\n","import styled from \"styled-components\";\nimport {isMobile} from 'react-device-detect';\nimport {IVideoChatButtonProps} from \"./types\";\nimport withCustomClasses, { DomCustomClass } from \"../../hoc/withCustomClasses/\";\n\nexport const VideoChatButtonWrapper = withCustomClasses(styled.div`\n    font-family: ${(props) => props.theme.typography.fontFamily};\n    font-weight: ${(props) => props.theme.typography.weight.regular};\n    display: inline-flex;\n    cursor: pointer;\n    margin-right: 5px;\n`, [DomCustomClass.VideoChatBaseButton]);\n\nexport const VideoChatButton = styled.div<IVideoChatButtonProps>`\n    width: 25px;\n    height: 25px;\n    border-radius: 2px;\n    font-size: 18px;\n    min-width: 25px;\n    transition: all .15s linear;\n    vertical-align: top;\n    background-color: ${(props) => props.backgroundColor || props.theme.colors.videoChatControlsBackground};\n    border: 1px solid ${(props) => props.backgroundColor || props.theme.colors.videoChatControlsBackground};\n    color: #FFFFFF;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    ${!isMobile && `\n        &:hover {\n            background-color: ${(props) => props.theme.colors.videoChatControlsBackgroundHover};\n            border-color: ${(props) => props.theme.colors.videoChatControlsBackgroundHover};\n            color: ${(props) => props.theme.colors.videoChatControlsText};\n        }`\n    }\n\n    ${(props) => props.isOpen && `\n            background-color: ${props.theme.colors.videoChatControlsText};\n            border-color: ${props.theme.colors.videoChatControlsBackgroundHover};\n            color: ${props.theme.colors.videoChatControlsBackgroundHover};\n        `\n    }\n`;\n","import VideoChatBaseButton from './VideoChatBaseButton';\nimport { IVideoChatBaseButtonProps } from './types';\n\nexport {IVideoChatBaseButtonProps};\nexport default VideoChatBaseButton;\n","import * as React from 'react';\nimport Tooltip from '../../common/Tooltip';\nimport { VideoChatButton, VideoChatButtonWrapper } from './style';\nimport { IVideoChatBaseButtonProps } from \"./types\";\n\nconst VideoChatBaseButton = (props: IVideoChatBaseButtonProps) => (\n    <VideoChatButtonWrapper onClick={props.onClick}>\n        {props.text && props.id\n            ?\n                <Tooltip text={props.text} id={props.id}>\n                    <VideoChatButton\n                        isOpen={props.isOpen}\n                        backgroundColor={props.backgroundColor}\n                    >\n                        {props.children}\n                    </VideoChatButton>\n                </Tooltip>\n            :\n                <VideoChatButton\n                    isOpen={props.isOpen}\n                    backgroundColor={props.backgroundColor}\n                >\n                    {props.children}\n                </VideoChatButton>\n        }\n    </VideoChatButtonWrapper>\n);\n\nexport default VideoChatBaseButton;\n","import styled from 'styled-components';\nimport withCustomClasses, { DomCustomClass } from \"../../hoc/withCustomClasses/\";\n\nexport const Wrapper = withCustomClasses(styled.div`\n    background-color: ${(props) => props.theme.colors.windowBackground};\n    font-family: ${(props) => props.theme.typography.fontFamily};\n    font-weight: ${(props) => props.theme.typography.weight.regular};\n      \n    min-width: 300px;\n    position: absolute;\n    margin-left: -5px;\n    margin-bottom: 5px;\n    padding: 10px;\n    border-radius: 3px;\n    \n    z-index: 4;\n    bottom: 40px;\n`, [DomCustomClass.InitiallyMutedTooltip]);\n\nexport const Content = styled.div`\n    margin-top: -15px;\n    top: 15px;\n    position: relative;\n    \n    .-icon-close-full {\n        cursor: pointer;\n        top: 0;\n        right: 0;\n    }\n`;\n\n\nexport const Text = styled.div`\n    color: ${props => props.theme.colors.initiallyMutedToolTipContentText};\n    \n    padding: 1px 0;\n`;\n\nexport const Arrow = styled.div`\n    background-color: ${(props) => props.theme.colors.windowBackground}\n    width: 20px;\n    height: 20px;\n    transform: rotate(45deg);\n    top: 20px;\n    position: relative;\n`;\n\nexport const Title = styled.div`\n    color: ${props => props.theme.colors.toySection.headerSectionLink};\n\n    font-style: italic;\n    padding: 5px 0;\n`;\n","import InitiallyMutedTooltip from './InitiallyMutedTooltip';\n\nexport default InitiallyMutedTooltip;","import * as React from 'react';\nimport { ITranslation } from \"../../../redux/store\";\nimport {\n    Wrapper,\n    Content,\n    Arrow,\n    Title,\n    Text\n} from \"./style\";\nimport CloseIcon from \"../CloseIcon/CloseIcon\";\n\ninterface IProps {\n    translation: ITranslation;\n    children: any;\n\n    onClose?: () => void;\n}\n\nconst content = (props: IProps) => (\n    <div>\n        <Title>{props.translation.chat.hint}:</Title>\n        <CloseIcon onClick={props.onClose} />\n        <Text>{props.translation.chat.tooltipNoVolume1}</Text>\n        <Text>{props.translation.chat.tooltipNoVolume2}</Text>\n    </div>\n);\n\nconst InitiallyMutedTooltip = (props: IProps) => (\n    <>\n        <Wrapper>\n            <Content>\n                {content(props)}\n            </Content>\n            <Arrow />\n        </Wrapper>\n        \n        {props.children}\n    </>\n);\n\nexport default InitiallyMutedTooltip;","import styled from \"styled-components\";\n\ninterface IVideoChatVolumeWrapperProps {\n\thasSlider: boolean;\n}\n\nexport const VideoChatVolumeWrapper = styled.div<IVideoChatVolumeWrapperProps>`\n\twidth: ${({ hasSlider }) => hasSlider ? 90 : 30}px;\n\t\n\tposition: relative;\n`;\n\nexport const VolumeSliderWrapper = styled.div`\n\tposition: absolute;\n\tbottom: 0;\n\tleft: 30px;\n\t\n\theight: 27px;\n\twidth: 50px;\n`;\n","import Slider from '@material-ui/core/Slider';\nimport styled from \"styled-components\";\n\nexport interface IProps {\n\tvalue: number,\n\tonChange: (_, value: number) => void\n}\n\nconst VideoChatVolumeSlider = styled(Slider)<IProps>`\n\t\n\t/* had to enforce this because of a \"fix\" material-ui is trying to apply for iOS */\t\n\tpadding: 13px 0 !important;\n\t\n\t.MuiSlider-thumb {\n\t\twidth: 5px;\n\t\theight: 5px;\n\t\tmargin-left: 0px;\n    \tmargin-top: -1px;\n    \t\n    \tbackground-color: #FFF;\n\t}\n\t\n\t.MuiSlider-thumb.Mui-focusVisible, .MuiSlider-thumb:hover {\n\t\tbox-shadow: 0px 0px 0px 8px rgba(255, 255, 255, 0.16);\n\t}\n\t\n\t.MuiSlider-rail {\n\t\theight: 3px;\n\t\tbackground-color: #3C3D3E;\n\t}\n\t\n\t.MuiSlider-track {\n\t\theight: 3px;\n\t\tbackground-color: #FFF;\n\t}\n\n`;\n\nexport default VideoChatVolumeSlider;\n","import * as React from 'react';\nimport { isMobile } from \"react-device-detect\";\n\nimport { ITranslation } from '../../../redux/store';\nimport { ThemedStyledProps, withTheme } from \"styled-components\";\n\nimport VideoChatBaseButton from '../VideoChatBaseButton';\nimport ITheme from \"../../../themes/interfaces\";\nimport InitiallyMutedTooltip from '../InitiallyMutedTooltip';\nimport {VideoChatVolumeWrapper, VolumeSliderWrapper} from \"./style\";\nimport VideoChatVolumeSlider from \"../VideoChatVolumeSlider/VideoChatVolumeSlider\";\n\ninterface IProps {\n    isMutedByClient: boolean;\n    displayVolumeAsInitiallyMuted?: boolean;\n    isInitiallyMutedHintDisplayed?: boolean;\n    translation: ITranslation;\n    volume: number;\n    theme?: ITheme;\n\n    toggleSound: () => void;\n    hideInitiallyMutedHint?: () => void;\n    setVolume: (volume: number) => void;\n}\n\nconst VideoChatVolume = (props: ThemedStyledProps<IProps, ITheme>) => {\n    const { actionMute, actionUnmute } = props.translation.chat;\n    const text = props.isMutedByClient ?  actionUnmute : actionMute;\n    const className = props.isMutedByClient ? '-icon-speaker-muted-full' : '-icon-speaker-full';\n\n    const mutedButtonWithTooltip = (\n        <InitiallyMutedTooltip\n            translation={props.translation}\n            onClose={props.hideInitiallyMutedHint}\n        >\n            <VideoChatBaseButton\n                id={\"videochat-volume-button\"}\n                onClick={props.toggleSound}\n                backgroundColor={props.theme.colors.initiallyMutedButtonBackground}\n            >\n                <i className={className} />\n            </VideoChatBaseButton>\n        </InitiallyMutedTooltip>\n    );\n\n    const mutedButtonWithoutTooltip = (\n        <VideoChatBaseButton\n            id={\"videochat-volume-button\"}\n            onClick={props.toggleSound}\n            backgroundColor={props.theme.colors.initiallyMutedButtonBackground}\n        >\n            <i className={className} />\n        </VideoChatBaseButton>\n    );\n\n    const initiallyMutedButton = (props.isInitiallyMutedHintDisplayed\n        ? mutedButtonWithTooltip\n        : mutedButtonWithoutTooltip\n    );\n\n    const regularVolumeButton = (\n        <VideoChatBaseButton\n            id={\"videochat-volume-button\"}\n            text={text}\n            onClick={props.toggleSound}>\n            <i className={className} />\n        </VideoChatBaseButton>\n    );\n\n    const hasSlider = !isMobile;\n\n    return (\n    \t<VideoChatVolumeWrapper hasSlider={hasSlider}>\n\t\t\t{props.displayVolumeAsInitiallyMuted ? initiallyMutedButton : regularVolumeButton}\n\t\t\t{hasSlider &&\n\t\t\t\t<VolumeSliderWrapper>\n\t\t\t\t\t<VideoChatVolumeSlider\n\t\t\t\t\t\tvalue={props.volume * 100}\n\t\t\t\t\t\tonChange={handleVolumeChange(props)}\n\t\t\t\t\t\taria-labelledby=\"continuous-slider\"\n\t\t\t\t\t/>\n\t\t\t\t</VolumeSliderWrapper>\n\t\t\t}\n\t\t</VideoChatVolumeWrapper>\n\t);\n};\n\nexport const handleVolumeChange = (props: IProps) => (_, value: number) => {\n\tif (props.setVolume) {\n\t\tprops.setVolume(value / 100);\n\t}\n};\n\nexport default withTheme<IProps, ITheme>(VideoChatVolume);\n","import VideoChatVolume from './VideoChatVolume';\n\nexport default VideoChatVolume;","import styled from 'styled-components';\nimport withIdentifier, { DomIdentifier } from \"../../hoc/withIdentifier\";\n\nexport const MobileMenuWrapper = withIdentifier(styled.div` \n   background-color: #262728;\n   border-radius: 5px;\n   position: absolute;\n   bottom: 0;\n   z-index: 2;\n   left: 70px;\n   border-right: 1px solid #101112;\n\n   > .mobile-menu-item:not(:last-child) {\n        border-bottom: 1px solid #1D1E1F;\n   }\n        \n   > .mobile-menu-item:last-child:after {\n        border-color: transparent #262728;\n        border-style: solid;\n        border-width: 15px 15px 15px 0;\n        left: -14px;\n        bottom: 2px;\n        content: '';\n        display: block;\n        position: absolute;\n   }\n`, DomIdentifier.MobileMenu);\n\nexport const MobileMenuItemWrapper = styled.div.attrs({className: 'mobile-menu-item'})`\n    padding-right: 16px;\n    padding-top: 2px;\n    padding-bottom: 2px;\n    text-align: left;\n    white-space: nowrap;\n    font-family: ${(props) => props.theme.typography.fontFamily};\n    font-weight: ${(props) => props.theme.typography.weight.regular};\n    color: #FFFFFF;\n    \n    & div {\n        display: inline-block;\n        vertical-align: middle;\n    }\n    \n    & .icon {\n        font-size: 25px;\n        text-align: center;\n        width: 60px;\n        height: 40px;\n        line-height: 40px;\n    }\n    \n    & .text {\n        font-size: 16px;\n        text-transform: uppercase;\n    }\n`;\n\nexport const ImageUploaderMenuItemWrapper = styled.div.attrs({ className: 'mobile-menu-item' })`\n    position: relative;\n    height: 45px;\n`;\n","import * as React from 'react';\nimport { MobileMenuItemWrapper } from './style';\n\ninterface IProps {\n    className: string;\n    text: string;\n    onClick?: () => void\n}\n\nconst MobileMenuItem = (props: IProps) => (\n    <MobileMenuItemWrapper onClick={props.onClick}>\n        <div className={`${props.className} icon`}/>\n        <div className='text'>{props.text}</div>\n    </MobileMenuItemWrapper>\n);\n\nexport default MobileMenuItem;","import * as React from 'react';\nimport { ITranslation, VideoChatType } from '../../../redux/store';\nimport MobileMenuItem from './MobileMenuItem';\nimport { ImageUploaderMenuItemWrapper, MobileMenuWrapper } from './style';\n\ninterface IProps {\n    translation: ITranslation;\n    isGiftButtonVisible: boolean;\n    isToyButtonVisible: boolean;\n    hasImageUpload: boolean;\n\n    buttonsVisibility: {\n        liveChat: boolean;\n        privateChat: boolean;\n        cam2Cam: boolean;\n    }\n\n    toggleGiftSection: () => void;\n    toggleToySection: () => void;\n    closeMessenger: () => void;\n    switchVideoChatMode: (type: VideoChatType) => () => void;\n    toggleCam2Cam: () => void;\n    requestImageUpload: () => void;\n}\n\nconst MobileMenu = (props: IProps) => {\n    /**\n     * Create a dictionary for keeping the buttons:\n     * the key is the button type or videochat type (they cover the same concept)\n     * and the value is the JSX for rendering the element\n     */\n    const mobileMenu: JSX.Element[] = [];\n    const { buttonsVisibility } = props;\n\n    const { stopLiveChat, camToCam, liveChat, privateChat } = props.translation.chat;\n    const { sendGifts, sendImage } = props.translation.message;\n    const { toyControl } = props.translation.chat.toyControl;\n\n    /** Create the toy button */\n    if (props.isToyButtonVisible) {\n        mobileMenu.push(\n            <MobileMenuItem\n                key={\"toy-control\"}\n                className=\"-icon-toy-control\"\n                text={toyControl}\n                onClick={props.toggleToySection}\n            />\n        );\n    }\n\n    /** Create the livechat button */\n    if (buttonsVisibility.liveChat) {\n        mobileMenu.push(\n            <MobileMenuItem\n                key={VideoChatType.LIVECHAT}\n                className=\"-icon-webcam-single-full\"\n                text={liveChat}\n                onClick={props.switchVideoChatMode(VideoChatType.LIVECHAT)}\n            />\n        );\n    }\n\n    /** Create the private chat button */\n    if (buttonsVisibility.privateChat) {\n        mobileMenu.push(\n            <MobileMenuItem\n                key={VideoChatType.PRIVATE_CHAT}\n                className=\"-icon-webcam-private-full\"\n                text={privateChat}\n                onClick={props.switchVideoChatMode(VideoChatType.PRIVATE_CHAT)}\n            />\n        );\n    }\n\n    /** Create the cam2cam button */\n    if (buttonsVisibility.cam2Cam) {\n        mobileMenu.push(\n            <MobileMenuItem\n                key={VideoChatType.CAM2CAM}\n                className=\"-icon-webcam-c2c-full\"\n                text={camToCam}\n                onClick={props.toggleCam2Cam}\n            />\n        );\n    }\n    \n    if (props.hasImageUpload) {\n        mobileMenu.push(\n            <ImageUploaderMenuItemWrapper key=\"image-uploader\">\n                <MobileMenuItem\n                    className=\"-icon-image-full\"\n                    text={sendImage}\n                    onClick={props.requestImageUpload}\n                />\n            </ImageUploaderMenuItemWrapper>\n        );\n    }\n\n    if (props.isGiftButtonVisible) {\n        mobileMenu.push(\n            <MobileMenuItem\n                key=\"gift-section\"\n                className=\"-icon-gift-full\"\n                text={sendGifts}\n                onClick={props.toggleGiftSection}\n            />\n        );\n    }\n\n    mobileMenu.push(\n        <MobileMenuItem\n            key=\"close-videochat\"\n            className=\"-icon-close-line\"\n            text={stopLiveChat}\n            onClick={props.closeMessenger}\n        />\n    );\n\n    return (\n        <MobileMenuWrapper>\n            {mobileMenu}\n        </MobileMenuWrapper>\n    )\n};\n\nexport default MobileMenu;\n","import { IContainerProps as IProps } from \"./types\";\nimport { VideoChatType } from '../../../redux/store';\n\nexport const onToyButtonClick = (props: IProps) => () => {\n    props.toggleToySection(props.instanceId);\n    props.setIsMobileMenuOpen(props.instanceId, false);\n};\n\nexport const onActionButtonClick = (props: IProps) => (type: VideoChatType) => () => {\n    props.startVideoChatType(props.instanceId, type);\n};\n\nexport const toggleGiftSection = (props: IProps) => () => {\n    props.isGiftSectionOpen\n        ? props.closeGiftSection(props.instanceId)\n        : props.openGiftSection(props.instanceId);\n};\n","import * as React from 'react';\n\nimport MobileMenu from './MobileMenu';\nimport selectors from '../../../redux/selectors';\nimport { startVideoChatType } from '../../../sagas/common/videochat';\nimport { setIsMobileMenuOpen } from '../../../redux/modules/videochat';\nimport { toggleCam2Cam } from '../../../sagas/common/videochat/cam2Cam';\nimport IStore from '../../../redux/store';\nimport { onToyButtonClick, onActionButtonClick, toggleGiftSection } from './utils';\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\nimport { IContainerProps as IProps } from \"./types\";\n\nimport {\n    closeGiftSection,\n    closeMessenger,\n    openGiftSection,\n    toggleToySection,\n    requestImageUpload\n} from '../../../redux/modules/messenger';\n\nconst applyToggleCam2Cam = (props: IProps) => () => {\n    props.toggleCam2Cam(props.instanceId);\n};\n\nconst requestUpload = (props: IProps) => () => {\n    props.requestImageUpload(props.instanceId);\n};\n\nconst close = (props: IProps) => () => {\n    props.closeMessenger(props.instanceId);\n};\n\nconst MobileMenuContainer = (props: IProps) => (\n    <MobileMenu\n        translation={props.translation}\n        buttonsVisibility={props.buttonsVisibility}\n        isGiftButtonVisible={props.isGiftButtonVisible}\n        isToyButtonVisible={props.isToyButtonVisible}\n        hasImageUpload={props.hasImageUpload}\n\n        switchVideoChatMode={onActionButtonClick(props)}\n        toggleCam2Cam={applyToggleCam2Cam(props)}\n        toggleGiftSection={toggleGiftSection(props)}\n        toggleToySection={onToyButtonClick(props)}\n        requestImageUpload={requestUpload(props)}\n        closeMessenger={close(props)}\n    />\n);\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    translation: selectors.getTranslation(store, instanceId),\n    isGiftSectionOpen: selectors.isGiftSectionOpen(store, instanceId),\n    isGiftButtonVisible: selectors.isGiftButtonVisible(store, instanceId),\n    isToySectionOpen: selectors.isToySectionOpen(store, instanceId),\n    isToyButtonVisible: selectors.hasToyControlButton(store, instanceId),\n    hasImageUpload: selectors.hasImageUpload(store, instanceId),\n\n    buttonsVisibility: {\n        liveChat: selectors.canInitiateLiveChat(store, instanceId),\n        privateChat: selectors.canInitiatePrivateChat(store, instanceId),\n        cam2Cam: selectors.canInitiateCam2Cam(store, instanceId)\n    }\n});\n\nconst mapDispatchToProps = {\n    startVideoChatType,\n    toggleCam2Cam,\n    closeMessenger,\n    openGiftSection,\n    closeGiftSection,\n    toggleToySection,\n    requestImageUpload,\n    setIsMobileMenuOpen\n};\n\nexport default withRedux(MobileMenuContainer, mapStateToProps, mapDispatchToProps);\n","import MobileMenuContainer from './MobileMenuContainer';\n\nexport default MobileMenuContainer;","import styled from 'styled-components';\nimport withIdentifier, { DomIdentifier } from \"../../hoc/withIdentifier\";\n\nexport const VideoChatMobileWrapper = withIdentifier(styled.div`\n    display: inline-flex;\n    position: relative;\n`, DomIdentifier.VideoChatMobile);","import VideoChatMobile from './VideoChatMobile';\n\nexport default VideoChatMobile;","import * as React from 'react';\nimport VideoChatBaseButton from '../../common/VideoChatBaseButton';\nimport MobileMenuContainer from '../MobileMenu';\nimport { VideoChatMobileWrapper } from './style';\n\ninterface IProps {\n    isMobileMenuOpen: boolean;\n    toggleMobileMenu: () => void;\n}\n\nconst VideoChatMobile = (props: IProps) => (\n    <VideoChatMobileWrapper>\n        <VideoChatBaseButton\n            id=\"videochat-reload-button\"\n            onClick={props.toggleMobileMenu}\n            isOpen={props.isMobileMenuOpen}\n        >\n            <i className=\"-icon-dot-full smallest\"/> &nbsp;\n            <i className=\"-icon-dot-full smallest\"/> &nbsp;\n            <i className=\"-icon-dot-full smallest\"/>\n        </VideoChatBaseButton>\n\n        {props.isMobileMenuOpen && <MobileMenuContainer />}\n    </VideoChatMobileWrapper>\n);\n\nexport default VideoChatMobile;","import * as React from 'react';\nimport {ITranslation} from '../../../redux/store';\nimport VideoChatBaseButton, {IVideoChatBaseButtonProps} from '../../common/VideoChatBaseButton';\nimport withCustomClasses, { DomCustomClass } from \"../../hoc/withCustomClasses/\";\n\ninterface IProps {\n    translation: ITranslation;\n    onClick: () => any;\n}\n\nconst ReloadButton = withCustomClasses<IVideoChatBaseButtonProps>(VideoChatBaseButton, [DomCustomClass.ReloadButton]);\n\nconst VideoChatReload = (props: IProps) => (\n        <ReloadButton\n            onClick={props.onClick}\n            text={props.translation.common.reload}\n        >\n            <i className=\"-icon-reload\" />\n        </ReloadButton>\n);\n\nexport default VideoChatReload;","import VideoChatReload from './VideoChatReload';\n\nexport default VideoChatReload;","import VideoChatToggleFullscreen from './VideoChatToggleFullscreen';\n\nexport default VideoChatToggleFullscreen;","import * as React from 'react';\nimport { ITranslation } from '../../../redux/store';\nimport VideoChatBaseButton from '../../common/VideoChatBaseButton';\n\ninterface IProps {\n    isFullScreen: boolean;\n    translation: ITranslation;\n    toggleFullscreen: () => void;\n}\n\nconst VideoChatToggleFullscreen = (props: IProps) => {\n    const { leaveFullscreen, enterFullscreen } = props.translation.chat; \n    const text = props.isFullScreen ? leaveFullscreen : enterFullscreen;\n    const className = props.isFullScreen ? \"-icon-fullscreen-close\" : \"-icon-fullscreen-open\";\n\n    return (\n        <VideoChatBaseButton\n            text={text}\n            id=\"videochat-toggle-fullscreen-button\"\n            onClick={props.toggleFullscreen}\n        >\n            <i className={className} />\n        </VideoChatBaseButton>\n    );\n};\n\nexport default VideoChatToggleFullscreen;","import styled from \"styled-components\";\nimport withIdentifier, { DomIdentifier } from \"../../hoc/withIdentifier\";\n\ninterface IProps {\n    shouldHideVideochatControls: boolean\n}\n\nexport const VideoChatActionSectionContainerWrapper = styled.div<IProps>`\n    opacity: ${(props) => `${props.shouldHideVideochatControls ? '0' : '1'}`};\n    \n    z-index: 4;\n    position: relative;\n    \n    height: 64px;\n    bottom: 64px;\n    \n    background: transparent linear-gradient(180deg, #00000000 0%, #000000BD 100%) 0% 0% no-repeat padding-box;\n\n\tpadding: 20px 10px;\n\tbox-sizing: border-box;\n\t   \n    transition: opacity 1s ease;\n`;\n\nexport const VideoChatActionSectionWrapper = withIdentifier(styled.div`\n    position: relative;\n    display: flex;\n`, DomIdentifier.VideoChatActionSection);\n","import * as React from 'react';\nimport { isIOS, isMobile } from 'react-device-detect';\nimport { ITranslation } from '../../../redux/store';\nimport VideoChatVolume from '../../common/VideoChatVolume';\nimport VideoChatMobile from '../VideoChatMobile';\nimport VideoChatReload from '../VideoChatReload';\nimport VideoChatToggleFullscreen from '../VideoChatToggleFullsceen';\nimport { VideoChatActionSectionWrapper } from './style';\n\ninterface IProps {\n    isFullscreen: boolean;\n    isMobileMenuOpen: boolean;\n    isMutedByModel: boolean;\n    isMutedByClient: boolean;\n\tclientVolume: number;\n    displayVolumeAsInitiallyMuted: boolean;\n    isInitiallyMutedHintDisplayed: boolean;\n    hasFullscreen: boolean;\n    translation: ITranslation;\n\n    toggleFullscreen: () => void;\n    toggleMobileMenu: () => void;\n    toggleSound: () => void;\n    hideInitiallyMutedHint: () => void;\n    reloadPlayer: () => void;\n\tsetClientVolume: (volume: number) => void;\n}\n\nconst VideoChatActionSection = (props: IProps) => {\n\n    const videoChatVolume = props.isMutedByModel && (\n        <VideoChatVolume\n            isMutedByClient={props.isMutedByClient}\n            displayVolumeAsInitiallyMuted={props.displayVolumeAsInitiallyMuted}\n            isInitiallyMutedHintDisplayed={props.isInitiallyMutedHintDisplayed}\n            translation={props.translation}\n\t\t\tvolume={props.clientVolume}\n            toggleSound={props.toggleSound}\n            hideInitiallyMutedHint={props.hideInitiallyMutedHint}\n\t\t\tsetVolume={props.setClientVolume}\n        />\n    );\n\n    const videoChatActionSectionButtons = (\n        <>\n            {videoChatVolume}\n\n            {props.hasFullscreen &&\n                <VideoChatToggleFullscreen\n                    isFullScreen={props.isFullscreen}\n                    translation={props.translation}\n                    toggleFullscreen={props.toggleFullscreen}\n                />\n            }\n        </>\n    );\n\n    const videoChatMobileActionsSectionButtons = (\n        <>\n            {videoChatVolume}\n\n            {isIOS &&\n                <VideoChatReload\n                    translation={props.translation}\n                    onClick={props.reloadPlayer}\n                />\n            }\n\n            {props.isFullscreen &&\n                <VideoChatMobile\n                    isMobileMenuOpen={props.isMobileMenuOpen}\n                    toggleMobileMenu={props.toggleMobileMenu}\n                />\n            }\n        </>\n    );\n\n    return (\n        <VideoChatActionSectionWrapper>\n            {isMobile ? videoChatMobileActionsSectionButtons : videoChatActionSectionButtons}\n        </VideoChatActionSectionWrapper>\n    );\n};\n\nexport default VideoChatActionSection;\n","import utils, { screenfull } from '../../../utils';\nimport PlayerService from '../../../services/PlayerService';\nimport ChatService from '../../../services/ChatService';\nimport { IContainerProps as IProps } from \"./types\";\n\nexport const toggleFullscreen = (props: IProps) => () => {\n\tscreenfull.toggle(utils.getMessengerNode(props.instanceId));\n};\n\nexport const toggleMobileMenu = (props: IProps) => () => {\n\tprops.setIsMobileMenuOpen(props.instanceId, !props.isMobileMenuOpen);\n};\n\nexport const hideInitialMutedHint = (props: IProps) => () => {\n\tprops.hideInitiallyMutedHint(props.instanceId);\n};\n\nexport const reloadPlayer = (props: IProps) => () => {\n\tPlayerService.getService(props.instanceId).reloadPlayer();\n};\n\nexport const toggleSound = (props: IProps) => () => {\n\tconst chatService = ChatService.getService(props.instanceId);\n\tconst playerService = PlayerService.getService(props.instanceId);\n\n\tif (props.isMutedByClient) {\n\t\tplayerService.setVolume(props.notMutedClientVolume);\n\t\tchatService.sendAudioState(true);\n\t} else {\n\t\tplayerService.mutePlayer();\n\t\tchatService.sendAudioState(false);\n\t}\n\n\tprops.setIsInitiallyMuted(props.instanceId, false);\n};\n\nexport const setVolume = (props: IProps) => (volume: number) => {\n\tconst chatService = ChatService.getService(props.instanceId);\n\tconst playerService = PlayerService.getService(props.instanceId);\n\n\tif (volume === 0) {\n\t\tplayerService.mutePlayer();\n\t\tchatService.sendAudioState(false);\n\t} else {\n\t\tplayerService.setVolume(volume);\n\t\tchatService.sendAudioState(true);\n\t}\n};\n","import * as React from 'react';\n\nimport selectors from '../../../redux/selectors';\nimport IStore from '../../../redux/store';\nimport VideoChatActionSection from './VideoChatActionSection';\nimport { VideoChatActionSectionContainerWrapper } from './style';\nimport {\n\ttoggleFullscreen,\n\ttoggleMobileMenu,\n\ttoggleSound,\n\thideInitialMutedHint,\n\treloadPlayer,\n\tsetVolume\n} from './utils';\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\nimport {\n\thideInitiallyMutedHint,\n\tsetIsInitiallyMuted,\n\tsetIsMobileMenuOpen\n} from '../../../redux/modules/videochat';\n\nimport { setPreference } from '../../../redux/modules/user';\nimport { IContainerProps as IProps, IContainerComponentProps as IComponentProps } from \"./types\";\n\nconst VideoChatActionSectionContainer = (props: IProps) => (\n    <VideoChatActionSectionContainerWrapper shouldHideVideochatControls={props.shouldHideVideochatControls}>\n        <VideoChatActionSection\n            isFullscreen={props.isFullscreen}\n            isMutedByModel={props.isMutedByModel}\n            isMobileMenuOpen={props.isMobileMenuOpen}\n            isMutedByClient={props.isMutedByClient}\n\t\t\tclientVolume={props.clientVolume}\n            displayVolumeAsInitiallyMuted={props.displayVolumeAsInitiallyMuted}\n            isInitiallyMutedHintDisplayed={props.isInitiallyMutedHintDisplayed}\n            hasFullscreen={props.hasFullscreen}\n            translation={props.translation}\n\n            toggleFullscreen={toggleFullscreen(props)}\n            toggleMobileMenu={toggleMobileMenu(props)}\n            toggleSound={toggleSound(props)}\n            hideInitiallyMutedHint={hideInitialMutedHint(props)}\n            reloadPlayer={reloadPlayer(props)}\n\t\t\tsetClientVolume={setVolume(props)}\n        />\n    </VideoChatActionSectionContainerWrapper>\n);\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    translation: selectors.getTranslation(store, instanceId),\n    isFullscreen: selectors.isFullScreen(store, instanceId),\n    isMutedByModel: selectors.getVideoChatIsMutedByModel(store, instanceId),\n    isMobileMenuOpen: selectors.isMobileMenuOpen(store, instanceId),\n    isMutedByClient: selectors.getVideoChatIsMutedByClient(store, instanceId),\n\tclientVolume: selectors.getClientVolume(store, instanceId),\n\tnotMutedClientVolume: selectors.getNotMutedClientVolume(store, instanceId),\n    displayVolumeAsInitiallyMuted: selectors.displayVolumeAsInitiallyMuted(store, instanceId),\n    isInitiallyMutedHintDisplayed: selectors.isInitiallyMutedHintDisplayed(store, instanceId),\n    hasFullscreen: selectors.hasFullscreen(store, instanceId),\n    shouldHideVideochatControls: selectors.shouldHideVideochatControls(store, instanceId)\n});\n\nconst mapDispatchToProps = {\n    setIsMobileMenuOpen,\n    hideInitiallyMutedHint,\n    setIsInitiallyMuted,\n\tsetPreference\n};\n\nexport default withRedux<IComponentProps>(VideoChatActionSectionContainer, mapStateToProps, mapDispatchToProps);\n","import styled from 'styled-components';\nimport config from '../../static/config';\nimport {IViewProviderProps} from '../interfaces';\n\nexport const FullscreenViewWrapper = styled.div`\n   overflow: hidden;\n   display: flex;\n   flex-direction: column;\n\n   .chatbox-wrapper {\n        ${(props: IViewProviderProps) => props.isFullscreen && 'position: absolute;'}\n        \n        max-height: ${(props: IViewProviderProps) => (props.videoChatHeight) \n            ? `${Math.round(props.videoChatHeight * 0.95) - config.viewSizes.fullScreen.topBarHeight}px` \n            : 'auto'\n        };\n        bottom: ${config.viewSizes.fullScreen.chatBoxBottomOffset}px;\n        padding-bottom: 10px;\n        \n        display: flex;\n        flex-direction: column;\n        flex: 1;\n        width: 35%;\n        background: none;\n        right: 0;\n    }\n`;\n\nexport const VideoChatContainerWrapper = styled.div`\n    background-color: #151617;\n    width: ${(props: IViewProviderProps) => `${props.containerWidth}px`};\n    height: ${(props: IViewProviderProps) => `${props.videoChatHeight}px`};\n`;\n","import FullscreenView from './FullscreenView'\n\nexport default FullscreenView;","import * as React from 'react';\nimport FullscreenFooter from '../../features/common/FullscreenFooter';\nimport FullscreenHeaderContainer from '../../features/common/FullscreenHeader/FullscreenHeaderContainer';\nimport ChatBoxContainer from '../../features/specific/ChatBox';\nimport VideoChatContainer from '../../features/specific/Videochat/VideoChatContainer';\nimport VideoChatActionSectionContainer\n\tfrom '../../features/specific/VideochatActionSection/VideoChatActionSectionContainer';\nimport { IViewProviderProps } from '../interfaces';\nimport { FullscreenViewWrapper, VideoChatContainerWrapper } from './style';\n\n\nconst FullscreenView = (props: IViewProviderProps) => (\n\t<FullscreenViewWrapper  {...props}>\n\t\t<FullscreenHeaderContainer />\n\n\t\t<VideoChatContainerWrapper {...props}>\n\t\t\t<VideoChatContainer />\n\t\t\t<VideoChatActionSectionContainer />\n\t\t\t<ChatBoxContainer />\n\t\t</VideoChatContainerWrapper>\n\n\t\t<FullscreenFooter />\n\t</FullscreenViewWrapper>\n);\n\nexport default FullscreenView;\n","import styled from \"styled-components\";\nimport { isIE } from 'react-device-detect';\nimport withCustomClasses, { DomCustomClass } from \"../../hoc/withCustomClasses/\";\nimport { HeaderAlignment } from \"./types\";\n\ninterface IWrapperProps {\n    minHeaderHeight: number;\n    alignment: HeaderAlignment;\n}\n\n// IE-SPECIFIC: different styling for our messenger's header on any IE browser.\nexport const Wrapper = withCustomClasses<IWrapperProps>(styled.div<IWrapperProps>`\n    ${!isIE && `flex-basis: ${({ minHeaderHeight }: IWrapperProps) => minHeaderHeight}px;`}\n    text-align: ${({ alignment }: IWrapperProps) => alignment};\n    \n    display: block;\n    position: relative;\n    box-sizing: border-box;\n    z-index: 2;\n    \n    &:after {\n        content: \"\";\n        display: block;\n        position: absolute;\n        bottom: 0px;\n        width: 100%;\n        height: 3px;\n        background: -webkit-gradient(linear,left top, left bottom,color-stop(0, #c3c6c9),to(#dedfe1));\n        background: linear-gradient(to bottom,#c3c6c9 0,#dedfe1 100%);\n    }\n`, [DomCustomClass.Header]);\n","import * as React from 'react';\nimport { Wrapper } from './style';\nimport config from '../../../static/config'\nimport { HeaderAlignment } from \"./types\";\n\ninterface IProps {\n    children: any;\n    alignment?: HeaderAlignment;\n}\n\nconst Header = (props: IProps) => (\n    <Wrapper\n        minHeaderHeight={config.viewSizes.minHeaderHeight}\n        alignment={props.alignment || HeaderAlignment.CENTER}\n    >\n        {props.children}\n    </Wrapper>\n);\n\nexport default Header;\n","import Header from './Header';\nimport { HeaderAlignment } from './types'\n\nexport { HeaderAlignment };\nexport default Header;\n","import styled from \"styled-components\";\nimport withIdentifier, { DomIdentifier } from \"../../hoc/withIdentifier\";\n\nexport const ContactNoteWrapper = withIdentifier(styled.div`\n    position: absolute;\n    top: 26%;\n    left: 5%;\n    z-index: 400;\n    width: 90%;\n    height: 200px;\n    text-align: left;\n    background: #FFF;\n    border: none;\n    border-radius: 4px;\n    color: #151617;\n    box-shadow: rgba(29, 30, 31, 0.4) 0 0 12px;\n    -webkit-box-shadow: rgba(29, 30, 31, 0.4) 0 0 12px;\n`, DomIdentifier.ContactNoteDialog);\n\nexport const ContactNoteTitle = styled.div`\n    font-family: ${(props) => props.theme.typography.fontFamily};\n    font-weight: ${(props) => props.theme.typography.weight.bold};\n    color: #151617;\n    height: 40px;\n    font-size: 14px;\n    line-height: 40px;\n    margin: 0;\n    padding: 0 10px;\n    display: inline-block;\n`;\n\nexport const ContactNoteCloseButton = withIdentifier(styled.div`\n    font-size: 12px;\n    color: #151617;\n    cursor: pointer;\n    display: inline-block;\n    position: absolute;\n    right: 16px;\n    top: 12px;\n`, DomIdentifier.ContactNoteCloseButton);\n\nexport const ContactNoteInput = styled.textarea`\n    font-family: ${(props) => props.theme.typography.fontFamily};\n    font-weight: ${(props) => props.theme.typography.weight.regular};\n    font-size: 14px;\n    padding: 10px;\n    z-index: 1;\n    width: 100%;\n    resize: none;\n    border: none;\n    outline: none;\n    height: 160px;\n    color: #151617;\n    overflow-x: hidden;\n    overflow-y: scroll;\n    background: #EBECEE;\n    box-sizing: border-box;\n`;\n","import * as React from 'react';\nimport { ITranslation } from '../../../redux/store';\nimport { ContactNoteCloseButton, ContactNoteInput, ContactNoteTitle, ContactNoteWrapper } from './style';\n\ninterface IProps {\n    translation: ITranslation;\n    contactNoteText: string;\n\n    onCloseClick: () => void;\n    onInputChange: (event: any) => void;\n}\n\nconst ContactNoteDialog = (props: IProps) => {\n    const { yourNote, addNote } = props.translation.user;\n\n    return (\n        <ContactNoteWrapper>\n            <ContactNoteTitle>{yourNote}</ContactNoteTitle>\n\n            <ContactNoteCloseButton>\n                <div\n                    className={\"icon -icon-close-full\"} \n                    onClick={props.onCloseClick}\n                />\n            </ContactNoteCloseButton>\n            \n            <ContactNoteInput \n                onChange={props.onInputChange}\n                value={props.contactNoteText}\n                placeholder={addNote} \n            />\n        </ContactNoteWrapper>\n    );\n};\n\nexport default ContactNoteDialog;","import * as React from 'react';\nimport onClickOutside, { InjectedOnClickOutProps } from 'react-onclickoutside';\n\nimport ContactNote from './ContactNoteDialog';\nimport selectors from '../../../redux/selectors';\nimport { ActionDispatcher } from '../../../redux';\nimport IStore, { IContactNote, ITranslation } from '../../../redux/store';\nimport { requestSetContactNote } from '../../../sagas/websockets/channelInfo';\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\n\ninterface IStoreProps {\n    contactNote: IContactNote;\n    translation: ITranslation;\n\n    requestSetContactNote: ActionDispatcher<string>;\n}\n\ntype IProps = IInstanceProps & IStoreProps & InjectedOnClickOutProps;\n\ninterface IState {\n    text: string;\n}\n\nclass ContactNoteDialogContainer extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            text: \"\"\n        };\n    }\n    \n    componentDidMount() {\n        this.setState({\n            text: this.props.contactNote.text\n        });\n    }\n\n    render() {\n        return (\n            <ContactNote \n                onCloseClick={this.onCloseClick}\n                onInputChange={this.onInputChange}\n                contactNoteText={this.state.text}\n                translation={this.props.translation}\n            />\n        );\n    }\n\n    private onCloseClick = () => {\n        this.props.requestSetContactNote(this.props.instanceId, this.state.text);\n    };\n\n    private onInputChange = (event: any) => {\n        this.setState({\n            text: event.target.value\n        });\n    }\n\n    // @ts-ignore\n    private handleClickOutside = () => {\n        this.props.requestSetContactNote(this.props.instanceId, this.state.text);\n    };\n}\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    contactNote: selectors.getContactNote(store, instanceId),\n    translation: selectors.getTranslation(store, instanceId)\n});\n\nconst mapDispatchToProps = {\n    requestSetContactNote\n};\n\nexport default withRedux(\n    onClickOutside(ContactNoteDialogContainer, { excludeScrollbar: true }),\n    mapStateToProps,\n    mapDispatchToProps\n);\n","import ContactNoteDialogContainer from './ContactNoteDialogContainer';\n\nexport default ContactNoteDialogContainer;","import styled from \"styled-components\";\nimport {isMobile} from \"react-device-detect\";\nimport withIdentifier, { DomIdentifier } from \"../../hoc/withIdentifier\";\nimport Overlay from \"../../common/Overlay\";\n\nexport const MessengerWrapper = withIdentifier(styled.div.attrs({className: 'messenger-wrapper'})`\n    position: relative;\n    background-color: ${(props) => props.theme.colors.messengerWrapper};\n    border-top-left-radius: 0;\n    border-top-right-radius: 0;\n    box-shadow: 0 1px 5px rgba(21,22,23,.5);\n    \n    .chatbox-scrollbar-container {\n        flex: 1;\n        width: 100%;\n        position: absolute;\n    }\n    \n    .profile-picture-wrapper {\n        ${!isMobile && 'margin-top: -56px;'}\n    }\n`, DomIdentifier.Messenger);\n\nexport const BodySection = withIdentifier(styled.div`\n    display: flex;\n    position: relative;\n    flex: 1;\n`, DomIdentifier.MessengerBody);\n\nexport const MessengerOverlay = styled(Overlay)`\n    position: absolute;\n    z-index: 2;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n`;\n","import styled from \"styled-components\";\n\nconst BaseText = styled.span`\n    font-family: ${(props) => props.theme.typography.fontFamily};\n    font-weight: ${(props) => props.theme.typography.weight.medium};\n`;\n\nexport const Title = styled(BaseText)`\n    color: ${(props) => props.theme.colors.messageTypeHeader.title};\n    font-size: 24px;\n`;\n\nexport const ModelTitle = styled(Title)`\n    color: ${(props) => props.theme.colors.messageTypeHeader.modelTitle};\n`;\n\nexport const Subtitle = styled(BaseText)`\n    color: ${(props) => props.theme.colors.messageTypeHeader.subtitle};\n    font-size: 14px;\n    display: block;\n`;\n\nexport const Wrapper = styled.div`\n    text-align: left;\n    padding: 20px;\n`;\n","import React, { FC } from 'react';\nimport { Title, Subtitle, Wrapper, ModelTitle } from './style';\n\ninterface IProps {\n    title: string;\n    modelName: string;\n    subtitle?: string;\n}\n\nexport const MessageTypeHeader: FC<IProps> = (props: IProps) => (\n    <Wrapper>\n        <Title>{props.title}</Title> <ModelTitle>{props.modelName}</ModelTitle>\n        {props.subtitle && <Subtitle>{props.subtitle}</Subtitle>}\n    </Wrapper>\n)\n\nexport default MessageTypeHeader;\n","import MessageTypeHeaderContainer from './MessageTypeHeaderContainer';\n\nexport default MessageTypeHeaderContainer;","import moment from 'moment';\nimport React, { Component } from 'react';\n\nimport utils from '../../../utils';\nimport selectors from '../../../redux/selectors';\nimport MessageTypeHeader from './MessageTypeHeader';\nimport IStore, { IMessage, ITranslation } from '../../../redux/store';\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\n\ninterface IStoreProps {\n    modelName: string;\n    lastMessage?: IMessage;\n    translation: ITranslation;\n}\n\ntype IProps = IInstanceProps & IStoreProps;\n\nclass MessageTypeHeaderContainer extends Component<IProps> {\n    render () {\n        let subtitle: string | undefined;\n        const { header } = this.props.translation.common;\n\n        if (this.props.lastMessage) {\n            const { dateCreated } = this.props.lastMessage;\n            const lastMessageDate =  moment(dateCreated).toDate();\n            const lastMessageFormattedDate = moment(lastMessageDate, \"x\").format(\"DD/MM/YYYY, hh:mm a\");\n    \n            subtitle = utils.translationWithValues(header.lastMessageOn,\n                { value: lastMessageFormattedDate }    \n            );\n        }\n\n\n        return (\n            <MessageTypeHeader\n                title={header.messageFrom}\n                modelName={this.props.modelName}\n                subtitle={subtitle}\n            />\n        );\n    }\n}\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    modelName: selectors.getModelName(store, instanceId),\n    lastMessage: selectors.getLastMessage(store, instanceId),\n    translation: selectors.getTranslation(store, instanceId)\n});\n\nexport default withRedux(MessageTypeHeaderContainer, mapStateToProps);\n","import * as React from 'react';\n\nimport { ITranslation } from '../../../redux/store';\nimport Header, { HeaderAlignment } from '../../common/Header';\nimport ChatBoxContainer from '../ChatBox';\nimport MessageSectionContainer from '../MessageSection';\nimport ContactNoteDialogContainer from '../ContactNoteDialog';\nimport ProfileContainer from '../Profile';\nimport { BodySection, MessengerOverlay, MessengerWrapper } from './style';\nimport CloseButtonContainer from '../../common/CloseButton';\nimport { CloseButtonType } from '../../common/CloseButton/CloseButtonContainer';\nimport CountdownWarningContainer from '../../specific/CountdownWarning';\nimport ActionSectionContainer from '../ActionSection';\nimport ToySectionHeaderContainer from '../../common/ToySectionHeader';\nimport MessageTypeHeaderContainer from '../MessageTypeHeader';\nimport MentionSectionContainer from '../MentionSection';\n\nexport interface IMessengerProps {\n    isContactNoteOpen: boolean;\n    hasActionSectionUnderTextbox: boolean;\n    shouldRenderToySectionHeader: boolean;\n    isMessageTypeHeader?: boolean;\n    translation: ITranslation;\n\n    onClose: () => void;\n}\n\nconst Messenger = (props: IMessengerProps) => {\n    const { close } = props.translation.common;\n\n    const headerContent = props.isMessageTypeHeader\n        ? <MessageTypeHeaderContainer />\n        : <ProfileContainer />;\n\n    const headerContentAlignment = props.isMessageTypeHeader\n        ? HeaderAlignment.CENTER\n        : HeaderAlignment.LEFT;\n\n    return (\n        <MessengerWrapper>\n            <Header alignment={headerContentAlignment}>\n                {headerContent}\n\n                <CloseButtonContainer\n                    onClick={props.onClose}\n                    hoverText={close}\n                    closeButtonType={CloseButtonType.MESSENGER}\n                    iconClassName={'-icon-close-line'}\n                />\n            </Header>\n\n            <BodySection>\n                <ChatBoxContainer />\n\n                <MentionSectionContainer />\n            </BodySection>\n\n            <CountdownWarningContainer />\n\n            <MessageSectionContainer />\n\n            {props.shouldRenderToySectionHeader && <ToySectionHeaderContainer isToySectionMinimizied={true}/>}\n\n            {props.hasActionSectionUnderTextbox && <ActionSectionContainer />}\n\n            {props.isContactNoteOpen &&\n                <>\n                    <MessengerOverlay />\n                    <ContactNoteDialogContainer />\n                </>\n            }\n        </MessengerWrapper>\n    );\n};\n\nexport default Messenger;\n","import styled from \"styled-components\";\n\nexport const LoaderWrapper = styled.div`\n    text-align: center;\n`;\n","import MessengerLoader from './MessengerLoader';\n\nexport default MessengerLoader;\n","import * as React from 'react';\nimport { LoaderWrapper} from './style';\nimport { MessengerWrapper } from '../Messenger/style';\nimport Loader from 'react-loader-spinner';\nimport config from \"../../../static/config\";\nimport {ThemedStyledProps, withTheme} from \"styled-components\";\nimport { ITheme } from '../../../themes';\n\ntype IProps = ThemedStyledProps<any, ITheme>;\n\nconst MessengerLoader = (props: IProps) => (\n    <MessengerWrapper>\n        <LoaderWrapper>\n            <Loader\n                type={\"Oval\"}\n                color={props.theme ? props.theme.colors.messengerLoader : '#AAA'}\n                width={config.viewSizes.messengerLoaderSize}\n                height={config.viewSizes.messengerLoaderSize}\n            />\n        </LoaderWrapper>\n    </MessengerWrapper>\n);\n\nexport default withTheme<IProps, ITheme>(MessengerLoader);","import * as React from 'react';\nimport onClickOutside, { InjectedOnClickOutProps } from 'react-onclickoutside';\n\nimport Messenger from './Messenger';\nimport MessengerLoader from \"../MessengerLoader\";\nimport selectors from '../../../redux/selectors';\nimport { ActionDispatcher } from '../../../redux';\nimport { clickCloseMessengerButton } from \"../../../sagas/common/ui\";\nimport { closeMessenger } from '../../../redux/modules/messenger';\nimport IStore, { ITranslation } from '../../../redux/store';\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\n\ninterface IStoreProps {\n    isOpen: boolean;\n    isMessengerLoading: boolean;\n    isContactNoteOpen: boolean;\n    translation: ITranslation;\n    shouldCloseMessenger: boolean;\n    isMessageTypeHeader: boolean;\n    hasActionSectionUnderTextbox: boolean;\n    shouldRenderToySectionHeader: boolean;\n\n    closeMessenger: ActionDispatcher;\n    clickCloseMessengerButton: ActionDispatcher;\n}\n\ntype IProps = IInstanceProps & IStoreProps & InjectedOnClickOutProps;\n\nconst onClose = (props: IProps) => () => {\n    props.clickCloseMessengerButton(props.instanceId);\n};\n\nclass MessengerContainer extends React.Component<IProps> {\n    render() {\n        const messengerComponent = (\n            <Messenger\n                isMessageTypeHeader={this.props.isMessageTypeHeader}\n                isContactNoteOpen={this.props.isContactNoteOpen}\n                shouldRenderToySectionHeader={this.props.shouldRenderToySectionHeader}\n                hasActionSectionUnderTextbox={this.props.hasActionSectionUnderTextbox}\n                translation={this.props.translation}\n\n                onClose={onClose(this.props)}\n            />\n        );\n\n        const messengerOrLoadingComponent = this.props.isMessengerLoading\n            ? <MessengerLoader />\n            : messengerComponent;\n\n        return (\n            <>\n                {this.props.isOpen && messengerOrLoadingComponent}\n            </>\n        );\n    }\n\n    /**\n     * Click outside should not be allowed\n     * when the videochat is open, a picture is open in modal\n     * or when the contact note is rendered over the messenger\n     */\n    // @ts-ignore\n    private handleClickOutside = () => {\n        if (this.props.shouldCloseMessenger) {\n            this.props.closeMessenger(this.props.instanceId);\n        }\n    };\n}\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    isOpen: selectors.isOpen(store, instanceId),\n    isMessengerLoading: selectors.isMessengerLoading(store, instanceId),\n    translation: selectors.getTranslation(store, instanceId),\n    isContactNoteOpen: selectors.isContactNoteOpen(store, instanceId),\n    shouldCloseMessenger: selectors.shouldCloseMessenger(store, instanceId),\n    hasActionSectionUnderTextbox: selectors.hasActionSectionUnderTextbox(store, instanceId),\n    shouldRenderToySectionHeader: selectors.shouldRenderToySectionHeader(store, instanceId),\n    isMessageTypeHeader: selectors.isMessageTypeHeader(store, instanceId)\n});\n\nconst mapDispatchToProps = {\n    closeMessenger,\n    clickCloseMessengerButton\n};\n\nexport default withRedux(\n    onClickOutside(MessengerContainer, { excludeScrollbar: true }),\n    mapStateToProps,\n    mapDispatchToProps\n);\n","import styled from 'styled-components';\nimport { isMobile } from 'react-device-detect';\n\nexport const DesktopViewWrapper = styled.div`\n    width: 100%;\n    height: 100%;\n    \n    .messenger-wrapper {\n        ${(props) => !isMobile && `\n            min-width: ${props.theme.layout?.textMode?.minWidth}px;\n            min-height: ${props.theme.layout?.textMode?.minHeight}px;    \n\t\t`}\n\t\t\n        width: 100%;\n        height: 100%;\n        justify-content: stretch;\n        \n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n    }\n`;\n","import * as React from 'react';\nimport MessengerContainer from '../../features/specific/Messenger/MessengerContainer';\nimport { IViewProviderProps } from '../interfaces';\nimport { DesktopViewWrapper } from './style';\n\nconst MessengerView = (props: IViewProviderProps) => (\n    <DesktopViewWrapper {...props}>\n        <MessengerContainer />\n    </DesktopViewWrapper>\n);\n\nexport default MessengerView;","import styled from 'styled-components';\nimport { IViewProviderProps } from '../interfaces';\n\nexport const VideoChatLandscapeViewWrapper = styled.div`\n    background-color: #151617;\n    width: 100%;\n    height: 100%; \n    display: flex;\n    justify-content: center;\n    align-items: center;\n    overflow: hidden;\n    \n    .messenger-wrapper {\n        width: 100%;\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        border-top-left-radius: 0px;\n        border-top-right-radius: 0px;\n    }\n`;\n\nexport const VideoChatContainerWrapper = styled.div`\n    width: ${(props: IViewProviderProps) => `${props.videoChatWidth}px`};\n    height: ${(props: IViewProviderProps) => `${props.videoChatHeight}px`};\n`;\n\nexport const MessengerContainerWrapper = styled.div`\n    width:  ${(props: IViewProviderProps) => `${props.messengerVideoModeWidth}px`};\n    height: ${(props: IViewProviderProps) => `${props.messengerVideoModeHeight}px`};\n`;\n","import VideoChatLandscapeView from './VideoChatLandscapeView';\n\nexport default VideoChatLandscapeView;","import * as React from 'react';\nimport MessengerContainer from '../../features/specific/Messenger/MessengerContainer';\nimport VideoChatContainer from '../../features/specific/Videochat/VideoChatContainer';\nimport VideoChatActionSectionContainer\n    from '../../features/specific/VideochatActionSection/VideoChatActionSectionContainer';\nimport { IViewProviderProps } from '../interfaces';\nimport { MessengerContainerWrapper, VideoChatContainerWrapper, VideoChatLandscapeViewWrapper } from './style';\n\nconst VideoChatLandscapeView = (props: IViewProviderProps) => (\n\t<VideoChatLandscapeViewWrapper>\n\n\t\t<VideoChatContainerWrapper {...props} >\n\t\t\t<VideoChatContainer />\n\t\t\t<VideoChatActionSectionContainer />\n\t\t</VideoChatContainerWrapper>\n\n\t\t<MessengerContainerWrapper {...props}>\n\t\t\t<MessengerContainer />\n\t\t</MessengerContainerWrapper>\n\n\t</VideoChatLandscapeViewWrapper>\n);\n\nexport default VideoChatLandscapeView;\n","import styled from 'styled-components';\nimport withCustomClasses, { DomCustomClass } from \"../../hoc/withCustomClasses/\";\n\nexport const MobileFooterWrapper = withCustomClasses(styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: relative;\n    text-align: center;\n    box-sizing: border-box;\n    background-color: ${(props) => props.theme.colors.messengerWrapper};\n`, [DomCustomClass.MobileFooter]);\n\nexport const MessageSectionContainerWrapper = styled.div`\n    box-sizing: border-box;\n    flex: 1 0;\n    \n    .messenger-box {\n        max-height: 75px;\n    }\n`;\n","import MobileFooter from './MobileFooter';\n\nexport default MobileFooter;","import * as React from 'react';\nimport MessageSectionContainer from '../../specific/MessageSection';\nimport { MessageSectionContainerWrapper, MobileFooterWrapper } from './style';\nimport ActionSectionContainer from '../../specific/ActionSection';\nimport { isTablet } from 'react-device-detect';\n\nconst MobileFooter = () => (\n    <MobileFooterWrapper>\n        <MessageSectionContainerWrapper>\n            <MessageSectionContainer />\n\n            {isTablet && <ActionSectionContainer />}\n        </MessageSectionContainerWrapper>\n    </MobileFooterWrapper>\n);\n\nexport default MobileFooter;\n","import styled from 'styled-components';\nimport withIdentifier, { DomIdentifier } from \"../../hoc/withIdentifier\";\n\nexport const MobileProfileInfoWrapper = withIdentifier(styled.div`\n    text-align: center;\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`, DomIdentifier.MobileProfileInfo);\n\nexport const MobileProfileOnline = styled.span`\n    height: 7px;\n    width: 7px;\n    background-color: #43B31C;\n    border-radius: 50%;\n    display: inline-block;\n    margin-right: 7px;\n`;\n\nexport const MobileProfileName = withIdentifier(styled.div`\n    font-family: ${(props) => props.theme.typography.fontFamily};\n    font-weight: ${(props) => props.theme.typography.weight.bold};\n    font-size: 13px;\n    text-decoration: none;\n    cursor: pointer;\n    color: ${(props) => props.theme.colors.profileLink};   \n    &:hover {\n        color: ${(props) => props.theme.colors.profileLinkHover};\n    }\n`, DomIdentifier.MobileProfileName);\n","import * as React from 'react';\nimport { IModel } from '../../../redux/store';\nimport { MobileProfileInfoWrapper, MobileProfileName, MobileProfileOnline } from './style';\nimport CloseButtonContainer, { CloseButtonType } from '../../common/CloseButton/CloseButtonContainer';\n\ninterface IProps {\n    model: IModel;\n    closeText: string;\n    closeMessenger: () => void;\n}\n\nconst MobileProfileInfo = (props: IProps) => (\n    <MobileProfileInfoWrapper>\n        <MobileProfileOnline />\n\n        <MobileProfileName>\n            {props.model.name}\n        </MobileProfileName>\n\n        <CloseButtonContainer\n            onClick={props.closeMessenger}\n            hoverText={props.closeText}\n            closeButtonType={CloseButtonType.MOBILE_HEADER}\n        />\n\n    </MobileProfileInfoWrapper>\n);\n\nexport default MobileProfileInfo;\n","import * as React from 'react';\n\nimport selectors from '../../../redux/selectors';\nimport IStore, { IModel, ITranslation } from '../../../redux/store';\nimport MobileProfileInfo from './MobileProfileInfo';\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\nimport { clickCloseMessengerButton } from '../../../sagas/common/ui';\nimport { ActionDispatcher } from '../../../redux';\n\ninterface IStoreProps {\n    model: IModel;\n    translation: ITranslation;\n\n    clickCloseMessengerButton: ActionDispatcher;\n}\n\ntype IProps = IInstanceProps & IStoreProps;\n\nconst closeMessenger = (props: IProps) => () => {\n    props.clickCloseMessengerButton(props.instanceId);\n};\n\nconst MobileProfileInfoContainer = (props: IProps) => (\n    <MobileProfileInfo\n        model={props.model}\n        closeMessenger={closeMessenger(props)}\n        closeText={props.translation.common.close}\n    />\n);\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    model: selectors.getModel(store, instanceId),\n    translation: selectors.getTranslation(store, instanceId),\n});\n\nconst mapDispatchToProps = {\n    clickCloseMessengerButton\n};\n\nexport default withRedux(MobileProfileInfoContainer, mapStateToProps, mapDispatchToProps);\n","import MobileProfileInfoContainer from \"./MobileProfileInfoContainer\";\n\nexport default MobileProfileInfoContainer;","import styled from 'styled-components';\nimport config from '../../../static/config';\nimport withCustomClasses, { DomCustomClass } from \"../../hoc/withCustomClasses/\";\n\ninterface IProps {\n    shouldHideVideochatControls: boolean\n}\n\nexport const MobileHeaderWrapper = withCustomClasses<IProps>(styled.div<IProps>`\n    background-color: ${(props) => props.theme.colors.messengerWrapper};\n    height: ${(props) => `${props.shouldHideVideochatControls ? '0' : config.viewSizes.mobile.topBarHeight}`}px;\n    \n    width: 100%;\n    position: absolute;\n    z-index: 4;\n    opacity: 0.8;\n    -webkit-opacity: 0.8;\n    text-align: center;\n    box-sizing: border-box;\n    padding: 0 15px;\n    overflow: hidden;\n    \n    transition: height 1s ease;\n`, [DomCustomClass.MobileHeader]);\n\nexport const GroupChatParticipantsWrapper = styled.div`\n    position: absolute;\n    left: 5px;\n    top: calc(50% - 10px);\n`;\n","import * as React from 'react';\nimport MobileProfileInfoContainer from '../../specific/MobileProfileInfo';\nimport { GroupChatParticipantsWrapper, MobileHeaderWrapper } from './style';\nimport GroupChatParticipantsContainer from \"../../specific/GroupChatParticipants\";\n\ninterface IProps {\n    shouldHideVideochatControls: boolean;\n}\n\nconst MobileHeader = (props: IProps) => (\n    <MobileHeaderWrapper shouldHideVideochatControls={props.shouldHideVideochatControls}>\n        <GroupChatParticipantsWrapper>\n            <GroupChatParticipantsContainer />\n        </GroupChatParticipantsWrapper>\n\n        <MobileProfileInfoContainer />\n    </MobileHeaderWrapper>\n);\n\nexport default MobileHeader;\n","import * as React from 'react';\n\nimport MobileHeader from './MobileHeader';\nimport selectors from '../../../redux/selectors';\nimport IStore from '../../../redux/store';\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\n\ninterface IStoreProps {\n    shouldHideVideochatControls: boolean;\n}\n\ntype IProps = IStoreProps & IInstanceProps;\n\nconst MobileHeaderContainer = (props: IProps) => (\n    <MobileHeader\n        shouldHideVideochatControls={props.shouldHideVideochatControls}\n    />\n);\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    shouldHideVideochatControls: selectors.shouldHideVideochatControls(store, instanceId)\n});\n\nexport default withRedux(MobileHeaderContainer, mapStateToProps);\n","import styled from 'styled-components';\nimport {IViewProviderProps} from '../interfaces';\n\nexport const VideoChatPortraitViewWrapper = styled.div`\n    background-color: #151617;\n    width: ${(props:IViewProviderProps) => props.containerWidth}px;\n    height: ${(props:IViewProviderProps) => props.containerHeight}px; \n    display: flex;\n    flex-direction: column;\n    .chatbox-wrapper {\n        flex: 1 1;\n    }\n    \n    .chatbox-scrollbar-container {\n        position: absolute;\n    }\n`;\n\nexport const VideoChatContainerAligner = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100%;\n`;\n\nexport const BodySection = styled.div`\n    display: flex;\n    position: relative;\n    flex: 1 0 auto;\n`;\n\nexport const VideoChatContainerWrapper = styled.div`\n    width: ${(props: IViewProviderProps) => props.videoChatWidth}px;\n    height: ${(props: IViewProviderProps) => props.videoChatHeight}px;\n    position: relative;\n`;\n","import VideoChatMobilePortraitView from './VideoChatMobilePortraitView';\n\nexport default VideoChatMobilePortraitView;","import * as React from 'react';\nimport { isIOS } from \"react-device-detect\";\nimport MobileFooter from '../../features/common/MobileFooter';\nimport MobileHeaderContainer from '../../features/common/MobileHeader/MobileHeaderContainer';\nimport ChatBoxContainer from '../../features/specific/ChatBox';\nimport VideoChatContainer from '../../features/specific/Videochat/VideoChatContainer';\nimport VideoChatActionSectionContainer\n    from '../../features/specific/VideochatActionSection/VideoChatActionSectionContainer';\nimport { IViewProviderProps } from '../interfaces';\nimport {\n    BodySection,\n    VideoChatContainerAligner,\n    VideoChatContainerWrapper,\n    VideoChatPortraitViewWrapper\n} from './style';\nimport MessageSectionPopupsContainer from '../../features/common/MessageSectionPopups';\nimport CountdownWarningContainer from '../../features/specific/CountdownWarning';\nimport MentionSectionContainer from '../../features/specific/MentionSection';\n\nconst VideoChatMobilePortraitView = (props: IViewProviderProps) => {\n    const showChatBoxAbove: boolean = props.isKeyboard && isIOS;\n\tconst bodySection = <>\n\t\t<BodySection>\n\t\t\t<ChatBoxContainer />\n\t\t\t<MessageSectionPopupsContainer />\n\t\t\t<MentionSectionContainer />\n\t\t</BodySection>\n\n\t\t<CountdownWarningContainer />\n\t</>;\n\n    return (\n        <VideoChatPortraitViewWrapper {...props}>\n            <MobileHeaderContainer />\n\n            {showChatBoxAbove && bodySection}\n\n            <div>\n                <VideoChatContainerAligner>\n\n                    <VideoChatContainerWrapper {...props}>\n                        <VideoChatContainer isMobilePortrait={true} />\n                        <VideoChatActionSectionContainer />\n                    </VideoChatContainerWrapper>\n\n                </VideoChatContainerAligner>\n            </div>\n\n            {!showChatBoxAbove && bodySection}\n\n            <MobileFooter />\n        </VideoChatPortraitViewWrapper>\n    );\n};\n\nexport default VideoChatMobilePortraitView;\n","import styled from 'styled-components';\nimport { IViewProviderProps } from '../interfaces';\nimport config from '../../static/config';\n\nexport const VideoChatPortraitViewWrapper = styled.div`\n    background-color: #151617;\n    width: 100%;\n    height: 100%; \n    display: flex;    \n    overflow: hidden;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    \n    .messenger-wrapper {\n        width: 100%;\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        border-top-left-radius: 0px;\n        border-top-right-radius: 0px;\n    }    \n`;\n\nexport const VideoChatContainerWrapper = styled.div`\n    width: ${(props: IViewProviderProps) => props.shouldRenderOnlyVideochat \n        ? '100%'\n        : `${props.videoChatWidth}px`};\n\n    height: ${(props: IViewProviderProps) => props.shouldRenderOnlyVideochat\n        ? '100%'\n        : `${props.videoChatHeight}px`};\n\n    min-height: ${config.viewSizes.minVideochatHeight}px;\n    min-width: ${(props: IViewProviderProps) => config.viewSizes.minVideochatHeight * props.videoChatRatio}px;\n`;\n\nexport const MessengerContainerWrapper = styled.div`\n    width: ${(props: IViewProviderProps) => props.containerWidth}px;\n    display: flex;\n    flex: 1 0 auto;\n`;\n","import VideoChatPortraitView from './VideoChatPortraitView';\n\nexport default VideoChatPortraitView;","import * as React from 'react';\nimport MessengerContainer from '../../features/specific/Messenger/MessengerContainer';\nimport VideoChatContainer from '../../features/specific/Videochat/VideoChatContainer';\nimport VideoChatActionSectionContainer\n    from '../../features/specific/VideochatActionSection/VideoChatActionSectionContainer';\nimport { IViewProviderProps } from '../interfaces';\nimport { MessengerContainerWrapper, VideoChatContainerWrapper, VideoChatPortraitViewWrapper } from './style';\n\nconst VideoChatPortraitView = (props: IViewProviderProps) => (\n    <VideoChatPortraitViewWrapper>\n\n        <VideoChatContainerWrapper {...props}>\n            <VideoChatContainer />\n            {!props.shouldRenderOnlyVideochat && <VideoChatActionSectionContainer />}\n        </VideoChatContainerWrapper>\n\n        {!props.shouldRenderOnlyVideochat && <MessengerContainerWrapper {...props}>\n            <MessengerContainer />\n        </MessengerContainerWrapper>}\n\n    </VideoChatPortraitViewWrapper>\n);\n\nexport default VideoChatPortraitView;\n","import styled from 'styled-components';\nimport { IViewProviderProps } from '../interfaces';\n\ninterface IPromptsWrapperProps {\n\tisMobileLandscape: boolean\n}\n\nexport const VideoChatMobileLandscapeViewWrapper = styled.div`\n   overflow: hidden;\n   display: flex;\n   flex-direction: column;\n   width: 100%;\n   height: 100%;\n   justify-content: center;\n   background: ${props => props.theme.colors.videoChatBackground};\n   overflow: hidden;\n\n   .chatbox-wrapper {\n        bottom: ${(props: IViewProviderProps) => Math.round((props.containerHeight -  props.videoChatHeight) / 2 )}px;\n        max-height: 100%;\n        \n        overflow: hidden;\n        display: flex;\n        flex-direction: column;\n        flex: 1;\n        width: 35%;\n        background: none;\n        position: absolute;\n        right: 0;\n    }\n`;\n\nexport const VideoChatContainerWrapper = styled.div`\n    background-color: ${props => props.theme.colors.videoChatBackground};\n    width: ${(props: IViewProviderProps) => `${props.videoChatWidth}px`};\n    height: ${(props: IViewProviderProps) => `${props.videoChatHeight}px`};\n    margin: auto;\n    \n    .chatbox-scrollbar-container {\n        background-color: transparent !important;\n    }\n`;\n\nexport const PromptsWrapper = styled.div<IPromptsWrapperProps>`\n    display: flex;\n    ${props => props.isMobileLandscape && 'flex-direction: column;'}\n    justify-content: center;\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n`;\n","import GiftSectionContainer from './GiftSectionContainer';\n\nexport default GiftSectionContainer;","import ActionResponseContainer from './ActionResponseContainer';\n\nexport default ActionResponseContainer;","import * as React from 'react';\nimport ChatBoxContainer from '../../features/specific/ChatBox';\nimport UserPromptContainer from '../../features/specific/UserPrompt/UserPromptContainer';\nimport VideoChatContainer from '../../features/specific/Videochat/VideoChatContainer';\nimport VideoChatActionSectionContainer\n    from '../../features/specific/VideochatActionSection/VideoChatActionSectionContainer';\nimport { IViewProviderProps } from '../interfaces';\nimport { PromptsWrapper, VideoChatContainerWrapper, VideoChatMobileLandscapeViewWrapper } from './style';\nimport GiftSectionContainer from '../../features/specific/GiftSection';\nimport CountdownWarningContainer from '../../features/specific/CountdownWarning';\nimport ActionResponseContainer from '../../features/common/ActionResponse';\nimport ToySectionContainer from '../../features/specific/ToySection';\n\ninterface IComponentProps {\n    isGiftSectionOpen: boolean;\n    isToySectionOpen: boolean;\n\tisMobileLandscape: boolean;\n\n    onGiftClick: (gift: string) => any;\n}\n\ntype IProps = IComponentProps & IViewProviderProps;\n\nconst VideoChatMobileLandscapeView = (props: IProps) => (\n    <VideoChatMobileLandscapeViewWrapper  {...props}>\n        <VideoChatContainerWrapper {...props}>\n            <VideoChatContainer />\n\n            <VideoChatActionSectionContainer />\n\n            <ChatBoxContainer />\n\n            <PromptsWrapper isMobileLandscape={props.isMobileLandscape}>\n                <GiftSectionContainer\n                    isOpen={props.isGiftSectionOpen}\n                    onGiftClick={props.onGiftClick}\n                />\n\n                <ToySectionContainer isOpen={props.isToySectionOpen} />\n\n                <CountdownWarningContainer />\n\n                <ActionResponseContainer />\n\n                <UserPromptContainer />\n            </PromptsWrapper>\n        </VideoChatContainerWrapper>\n    </VideoChatMobileLandscapeViewWrapper>\n);\n\nexport default VideoChatMobileLandscapeView;\n","import VideoChatMobileLandscapeViewContainer from './VideoChatMobileLandscapeViewContainer';\n\nexport default VideoChatMobileLandscapeViewContainer;","import * as React from 'react';\n\nimport { IViewProviderProps } from '../interfaces';\nimport IStore from '../../redux/store';\nimport selectors from '../../redux/selectors';\nimport { requestSendMessage } from '../../sagas/websockets/message';\nimport VideoChatMobileLandscapeView from './VideoChatMobileLandscapeView';\nimport { setIsMobileMenuOpen } from '../../redux/modules/videochat';\nimport { closeGiftSection } from '../../redux/modules/messenger';\nimport withRedux from '../../features/hoc/withRedux';\nimport { IInstanceProps } from '../../features/hoc/withInstanceInfo';\nimport { ActionDispatcher } from '../../redux';\n\ninterface IStoreProps {\n    isGiftSectionOpen: boolean;\n    isToySectionOpen: boolean;\n\tisMobileLandscape: boolean;\n\n    requestSendMessage: ActionDispatcher<string>;\n    setIsMobileMenuOpen: ActionDispatcher<boolean>;\n    closeGiftSection: ActionDispatcher;\n}\n\ntype IComponentProps = IViewProviderProps;\ntype IProps = IComponentProps & IStoreProps & IInstanceProps;\n\nclass VideoChatMobileLandscapeViewContainer extends React.Component<IProps> {\n    render() {\n        return (\n            <VideoChatMobileLandscapeView\n                onGiftClick={this.onGiftClick}\n                {...this.props}\n            />\n        );\n    }\n\n    private onGiftClick = (gift: string) => () => {\n        const { instanceId } = this.props;\n\n        this.props.requestSendMessage(instanceId, decodeURIComponent(gift));\n        this.props.setIsMobileMenuOpen(instanceId, false);\n        this.props.closeGiftSection(instanceId);\n    };\n}\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    isGiftSectionOpen: selectors.isGiftSectionOpen(store, instanceId),\n    isToySectionOpen: selectors.isToySectionOpen(store, instanceId),\n\tisMobileLandscape: selectors.isMobileLandscape(store, instanceId)\n});\n\nconst mapDispatchToProps = {\n    requestSendMessage,\n    setIsMobileMenuOpen,\n    closeGiftSection\n};\n\nexport default withRedux<IComponentProps>(VideoChatMobileLandscapeViewContainer, mapStateToProps, mapDispatchToProps);\n","import * as React from 'react';\n\nimport utils from '../../utils';\nimport { IViewProviderProps } from '../interfaces';\nimport FullscreenView from '../FullscreenView';\nimport MessengerView from '../MessengerView/MessengerView';\nimport VideoChatLandscapeView from '../VideoChatLandscapeView';\nimport VideoChatMobilePortraitView from '../VideoChatMobilePortraitView';\nimport VideoChatPortraitView from '../VideoChatPortraitView';\nimport VideoChatMobileLandscapeViewContainer from '../VideoChatMobileLandscapeView';\n\nconst ViewSwitcher = (props: IViewProviderProps) => {\n    const views: {[hash: string]: React.ReactElement<any>} = {};\n    const viewProps = utils.hashify({\n        isVideoChat: props.isVideoChat,\n        isMobile: props.isMobile,\n        isPortrait: props.isPortrait,\n        isLandscape: props.isLandscape,\n        isFullscreen: props.isFullscreen\n\t});\n\t\n    const mobilePortraitHash = utils.hashify({\n        isVideoChat: true,\n        isMobile: true,\n        isPortrait: true,\n        isLandscape: false,\n        isFullscreen: false,\n    });\n\n    const mobileLandscapeHash = utils.hashify({\n        isVideoChat: true,\n        isMobile: true,\n        isPortrait: false,\n        isLandscape: true,\n        isFullscreen: false\n    });\n\n    const desktopFullscreenHash = utils.hashify({\n        isVideoChat: true,\n        isMobile: false,\n        isPortrait: false,\n        isLandscape: true,\n        isFullscreen: true\n    });\n\n    const desktopLandscapeHash = utils.hashify({\n        isVideoChat: true,\n        isMobile: false,\n        isPortrait: false,\n        isLandscape: true,\n        isFullscreen: false,\n    });\n\n    const desktopPortraitHash = utils.hashify({\n        isVideoChat: true,\n        isMobile: false,\n        isPortrait: true,\n        isLandscape: false,\n        isFullscreen: false\n    });\n\n    const messengerDesktopLandscapeHash = utils.hashify({\n        isVideoChat: false,\n        isMobile: false,\n        isPortrait: false,\n        isLandscape: true,\n        isFullscreen: false\n    });\n\n    const messengerDesktopPortraitHas = utils.hashify({\n        isVideoChat: false,\n        isMobile: false,\n        isPortrait: true,\n        isLandscape: false,\n        isFullscreen: false\n    });\n\n    const messengerMobilePortraitHash = utils.hashify({\n        isVideoChat: false,\n        isMobile: true,\n        isPortrait: true,\n        isLandscape: false,\n        isFullscreen: false\n    });\n\n    const messengerMobileLandscapeHash = utils.hashify({\n        isVideoChat: false,\n        isMobile: true,\n        isPortrait: false,\n        isLandscape: true,\n        isFullscreen: false\n\t});\n\t\n\tconst messengerMobileFullscreenHash = utils.hashify({\n\t    isVideoChat: true,\n        isMobile: true,\n        isPortrait: false,\n        isLandscape: true,\n        isFullscreen: true\t\n\t});\n\n    views[mobilePortraitHash] = <VideoChatMobilePortraitView {...props} />;\n\tviews[mobileLandscapeHash] = <VideoChatLandscapeView {...props} />;\n\tviews[messengerMobileFullscreenHash] = <VideoChatMobileLandscapeViewContainer {...props} />;\n\t\n    views[desktopFullscreenHash] = <FullscreenView {...props} />;\n    views[desktopLandscapeHash] = <VideoChatLandscapeView {...props} />;\n    views[desktopPortraitHash] = <VideoChatPortraitView {...props} />;\n\n    // MessengerView is rendered only in following cases: on mobile/desktop\n    // with landscape/portrait modes. In other scenarios there is nothing rendered.\n    views[messengerDesktopLandscapeHash] = <MessengerView {...props} />;\n    views[messengerDesktopPortraitHas] = <MessengerView {...props} />;\n    views[messengerMobilePortraitHash] = <MessengerView {...props} />;\n\tviews[messengerMobileLandscapeHash] = <MessengerView {...props} />;\n\n\treturn views[viewProps] || null;\n};\n\nexport default ViewSwitcher;\n","import ViewProvider from './ViewProvider';\n\nexport default ViewProvider;","import * as React from 'react';\nimport { forOwn, isNumber } from 'lodash';\nimport { isMobile, isIOS, isAndroid } from \"react-device-detect\";\n\nimport config from '../../static/config';\nimport selectors from '../../redux/selectors';\nimport { ActionDispatcher } from '../../redux';\nimport getViewProviderParams from '../viewHandler';\nimport ViewSwitcher from '../ViewSwticher/ViewSwitcher';\nimport IStore, { IResolution } from '../../redux/store';\nimport { maximizeCam2Cam, minimizeCam2Cam } from '../../sagas/common/videochat/cam2Cam';\nimport { IViewHandlerProps, IViewProviderProps } from '../interfaces';\nimport { IInstanceProps } from '../../features/hoc/withInstanceInfo';\nimport {\n    closeFullscreen,\n    openFullscreen,\n    setShouldRenderOnlyVideochat\n} from '../../redux/modules/videochat';\nimport withRedux from '../../features/hoc/withRedux';\nimport { isMobileOrientationLandscape } from '../../utils/utils';\n\ninterface IStoreProps {\n    isFullscreen: boolean;\n    isVideochatOpen: boolean;\n    isCam2CamActive: boolean;\n    isCam2CamMinimized: boolean;\n    hasActionButtons: boolean;\n\tswitchToPortraitWidth: number;\n    shouldRenderOnlyVideochat: boolean;\n    initialResolution: IResolution;\n\thasFullscreenLayoutOnLandscape: boolean;\n\n    openFullscreen: ActionDispatcher;\n    closeFullscreen: ActionDispatcher;\n    minimizeCam2Cam: ActionDispatcher;\n    maximizeCam2Cam: ActionDispatcher;\n    setShouldRenderOnlyVideochat: ActionDispatcher<boolean>;\n}\n\ninterface IComponentProps {\n    containerHeight: number;\n    containerWidth: number;\n}\n\ninterface IState {\n    isKeyboard: boolean;\n    isLandscape: boolean;\n}\n\ntype IProps = IStoreProps & IComponentProps & IInstanceProps;\n\nclass ViewProvider extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            isKeyboard: false,\n\t\t\tisLandscape: this.isLandscape(props.containerWidth, props.containerHeight)\n\t\t};\n    }\n\n    componentDidMount() {\n        if (isMobile) {\n            window.addEventListener(\"focusin\", this.enableKeyboard);\n            window.addEventListener(\"focusout\", this.disableKeyboard);\n            window.addEventListener(\"orientationchange\", this.updateOrientation);\n\t\t}\n    }\n\n    componentWillUnmount() {\n        if (isMobile) {\n            window.removeEventListener(\"focusin\", this.enableKeyboard);\n            window.removeEventListener(\"focusout\", this.disableKeyboard);\n\t\t\twindow.removeEventListener(\"orientationchange\", this.updateOrientation);\n        }\n    }\n\n    componentDidUpdate() {\n\t\tconst { containerWidth: width, containerHeight: height,\n\t\t\tisFullscreen, isVideochatOpen, instanceId\n\t\t} = this.props;\n\n\t\tconst shouldCloseKeyboard = isMobile && isFullscreen && isVideochatOpen\n\t\t\t&& this.state.isKeyboard;\n\n        const {\n            cam2camMinimizeHeight,\n            cam2camMinimizeWidth,\n            minHeaderHeight,\n            minMessageSectionHeight,\n            minVideochatHeight\n        } = config.viewSizes;\n\n\t\tconst minHeightForRenderingVideochatWithMessenger = minHeaderHeight\n\t\t\t+ minMessageSectionHeight\n\t\t\t+ minVideochatHeight;\n\n\t\tconst shouldRenderOnlyVideochat = !isMobile\n\t\t\t&& (height < minHeightForRenderingVideochatWithMessenger);\n\n        if (shouldRenderOnlyVideochat !== this.props.shouldRenderOnlyVideochat) {\n            this.props.setShouldRenderOnlyVideochat(instanceId, shouldRenderOnlyVideochat);\n\t\t}\n\n        // Added to update the keyboard if the device is rotated from portait to landscape in videochat mode on mobile devices\n        if (shouldCloseKeyboard) {\n            this.setState({ isKeyboard: false });\n        }\n\n        if (this.props.isCam2CamActive) {\n            const areDimensionsExceeded = width > cam2camMinimizeWidth\n                || height > cam2camMinimizeHeight;\n\n            const shouldMinimizeCam2Cam = !areDimensionsExceeded && !this.props.isCam2CamMinimized;\n            const shouldMaximizeCam2Cam = areDimensionsExceeded && this.props.isCam2CamMinimized;\n\n            if (shouldMinimizeCam2Cam) {\n                this.props.minimizeCam2Cam(instanceId);\n            }\n            if (shouldMaximizeCam2Cam) {\n                this.props.maximizeCam2Cam(instanceId);\n            }\n\t\t}\n\n\t\tif (this.shouldForceFullscreen()) {\n\t\t\tthis.forceFullscreen();\n\t\t}\n\n\t\tthis.updateOrientation();\n    }\n\n    render() {\n        const viewHandlerProps: IViewHandlerProps = {\n            containerWidth: this.props.containerWidth,\n            containerHeight: this.props.containerHeight,\n\t\t\tisLandscape: this.state.isLandscape,\n            isVideoChat: this.props.isVideochatOpen,\n            resolution: this.props.initialResolution,\n            isKeyboard: this.state.isKeyboard,\n            hasActionButtons: this.props.hasActionButtons,\n            switchToPortraitWidth: this.props.switchToPortraitWidth,\n            shouldRenderOnlyVideochat: this.props.shouldRenderOnlyVideochat,\n            isFullscreen: this.props.isFullscreen\n\t\t};\n\n\t\tconst viewProviderParams: IViewProviderProps = getViewProviderParams(viewHandlerProps);\n\n        // Incorrect behavior from ViewSwitcher when we have to force the fullscreen layout,\n        // but the isFullscreen flag is still on false. We reach an invalid layout scenario,\n        // which can break our application.\n\t\tif (this.shouldForceFullscreen() && !this.props.isFullscreen && viewProviderParams.isLandscape) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Render the view component only after receiving all the numerical values configured,\n\t\t// otherwise we will end up with a flicker when starting the stream.\n\t\tlet hasAllParamsConfigured = true;\n\t\tforOwn(viewProviderParams, value => {\n\t\t\tif (isNumber(value) && isNaN(value)) {\n\t\t\t\thasAllParamsConfigured = false;\n\t\t\t}\n\t\t});\n\n\t\tif (!hasAllParamsConfigured) {\n\t\t\treturn null;\n\t\t}\n\n        return (\n            <ViewSwitcher {...viewProviderParams} />\n        );\n\t};\n\n\tprivate isLandscape = (width: number, height: number): boolean => isAndroid\n\t\t? isMobileOrientationLandscape()\n\t\t: width > height;\n\n    private updateOrientation = () => {\n\t\tconst isLandscape: boolean = this.isLandscape(this.props.containerWidth, this.props.containerHeight);\n\t\tif (this.state.isLandscape !== isLandscape) {\n\t\t\tthis.setState({ isLandscape });\n\t\t}\n\t};\n\n\tprivate shouldForceFullscreen = () => {\n\t\tconst { isVideochatOpen, hasFullscreenLayoutOnLandscape } = this.props;\n\n\t\treturn hasFullscreenLayoutOnLandscape && isVideochatOpen && isMobile;\n\t};\n\n\tprivate forceFullscreen = () => {\n        const { containerWidth: width, containerHeight: height, instanceId } = this.props;\n\n        if (width > height && !this.props.isFullscreen) {\n            // On Android only if the orientation is right change the fullscreen flag\n            if (isAndroid && isMobileOrientationLandscape()) {\n                this.props.openFullscreen(instanceId);\n            }\n            // On iOS there are no special conditions since the virtual keyboard doesn't resize the viewport\n            else if (isIOS) {\n                this.props.openFullscreen(instanceId);\n            }\n        }\n\n        // Only change the flag if is true\n        else if (width < height && this.props.isFullscreen) {\n            this.props.closeFullscreen(instanceId);\n        }\n    };\n\n    private enableKeyboard = (e: any) => {\n        // Disable focus on buttons\n        if (e && e.target.nodeName === \"BUTTON\") {\n            e.preventDefault();\n        } else {\n            this.setState({ isKeyboard: true });\n        }\n    };\n\n    private disableKeyboard = () => {\n        this.setState({ isKeyboard: false });\n\t};\n}\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    initialResolution: selectors.getInitialResolution(store, instanceId),\n    isFullscreen: selectors.isFullScreen(store, instanceId),\n    isVideochatOpen: selectors.isVideoChatOpen(store, instanceId),\n    isCam2CamActive: selectors.isCam2CamActive(store, instanceId),\n    isCam2CamMinimized: selectors.isCam2CamMinimized(store, instanceId),\n    hasActionButtons: selectors.hasActionButtons(store, instanceId),\n\tswitchToPortraitWidth: selectors.getSwitchToPortraitWidth(store, instanceId),\n    shouldRenderOnlyVideochat: selectors.shouldRenderOnlyVideochat(store, instanceId),\n\thasFullscreenLayoutOnLandscape: selectors.hasFullscreenLayoutOnLandscape(store, instanceId)\n});\n\nconst mapDispatchToProps = {\n    openFullscreen,\n    closeFullscreen,\n    setShouldRenderOnlyVideochat,\n    minimizeCam2Cam,\n    maximizeCam2Cam\n};\n\nexport default withRedux<IComponentProps>(ViewProvider, mapStateToProps, mapDispatchToProps);\n","import styled from \"styled-components\";\nimport withCustomClasses, { DomCustomClass } from \"../../hoc/withCustomClasses/\";\n\nexport const LightBoxWrapper = withCustomClasses(styled.div`\n    position: fixed;\n    z-index: 1000000000;\n    left: 0px;\n    top: 0px;\n    width: 100%;\n    height: 100%;\n    overflow: auto;\n    background-color: rgba(0, 0, 0, 0.8);\n    touch-action: none;\n    \n    & img {\n        position: absolute;\n        object-fit: contain;\n        top: 50%;\n        left: 50%;\n        transform: translate3d(-50%, -50%, 0px);\n        max-width: 98%;\n        max-height: 98%;\n    }\n`, [DomCustomClass.FullScreenLightBox]);\n","import * as React from 'react';\nimport { LightBoxWrapper } from './style';\nimport CloseButtonContainer, { CloseButtonType } from '../CloseButton/CloseButtonContainer';\nimport { IModalContent } from '../../../redux/store';\n\ninterface IProps {\n    modalContent: IModalContent;\n    closeLightbox: any;\n}\n\nconst FullScreenLightBox = (props: IProps) => (\n    <LightBoxWrapper onClick={props.closeLightbox}>\n\n        <img\n            src={props.modalContent.imgSrc}\n            srcSet={props.modalContent.imgSrcSet}\n            width={props.modalContent.imgWidth}\n        />\n\n        <CloseButtonContainer\n            closeButtonType={CloseButtonType.IMAGE_MODAL}\n            hasCloseButton={true}\n            onClick={props.closeLightbox}\n        />\n\n    </LightBoxWrapper>\n);\n\nexport default FullScreenLightBox;\n","import FullScreenLightBoxContainer from './FullScreenLightBoxContainer';\n\nexport default FullScreenLightBoxContainer;","import * as React from 'react';\nimport { isEmpty } from 'lodash';\n\nimport constants from '../../../static/constants'\nimport selectors from '../../../redux/selectors';\nimport { ActionDispatcher } from '../../../redux';\nimport FullScreenLightBox from './FullScreenLightBox';\nimport IStore, { IModalContent } from '../../../redux/store';\nimport { resetModalContent } from '../../../redux/modules/messenger';\nimport { IInstanceProps } from '../../hoc/withInstanceInfo';\nimport withRedux from '../../hoc/withRedux';\n\ninterface IComponentProps {\n    closeLightbox?: any;\n}\n\ninterface IStoreProps {\n    modalContent: IModalContent;\n\n    resetModalContent: ActionDispatcher;\n}\n\ntype IProps = IComponentProps & IStoreProps & IInstanceProps;\n\nclass FullScreenLightBoxContainer extends React.PureComponent<IProps> {\n    componentDidMount() {\n        document.addEventListener(\"keydown\", this.closeModal, false);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener(\"keydown\", this.closeModal);\n    }\n\n    render() {\n        return (\n            <>\n                {!isEmpty(this.props.modalContent.imgSrc) &&\n                    <FullScreenLightBox\n                        modalContent={this.props.modalContent}\n                        closeLightbox={this.resetModalContent}\n                    />\n                }\n            </>\n        );\n    }\n\n    private closeModal = (event) => {\n        if (event.keyCode === constants.ESC_KEY_CODE) {\n            this.resetModalContent();\n        }\n    }\n\n    private resetModalContent = () => {\n        this.props.resetModalContent(this.props.instanceId);\n    }\n}\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n    modalContent: selectors.getModalContent(store, instanceId)\n});\n\nconst mapDispatchToProps = {\n    resetModalContent\n};\n\nexport default withRedux<IComponentProps>(FullScreenLightBoxContainer, mapStateToProps, mapDispatchToProps);","import defaultTheme from './defaultTheme';\nimport ITheme, { IPartialTheme } from './interfaces';\n\nexport { ITheme, IPartialTheme };\nexport default defaultTheme;","import * as React from 'react';\nimport * as moment from \"moment\";\nimport 'draft-js/dist/Draft.css';\nimport { ThemeProvider } from 'styled-components';\nimport { SupportedLanguage } from 'vxcontrol-client-lib';\nimport { withResizeDetector } from 'react-resize-detector';\nimport { has, isEmpty, isEqual, map, merge } from 'lodash';\nimport { isAndroid, isIE, isMobile } from 'react-device-detect';\n\nimport '../content/fonts/vx-icons/vx-icon.css';\nimport '../content/style.css';\nimport { setFeatures } from \"../redux/modules/features\";\nimport { setOptions } from \"../redux/modules/options\";\nimport { setIsOnline, setPartner } from '../redux/modules/model';\nimport { getInitialInstanceData } from '../redux/initialStore';\nimport { setPlatformProps } from '../redux/modules/platformProps';\nimport { setChat, setWebtoken } from '../redux/modules/session';\nimport { setLanguage, setPreference, setUserKey } from '../redux/modules/user';\nimport { resetInitialVideoChatType, setInitialVideoChatType } from \"../redux/modules/videochat\";\nimport selectors from '../redux/selectors';\nimport utils from '../utils';\nimport constants from '../static/constants';\nimport config from \"../static/config\";\nimport { ActionDispatcher } from '../redux';\nimport { VXMessengerWrapper } from './style';\nimport IStore, {\n\tIChat,\n\tIConnection,\n\tIConnectionWithChat,\n\tIConnectionWithToken,\n\tIFeatures,\n\tIGroupChatColor,\n\tIHooks,\n\tIOptions,\n\tIPartner,\n\tIPlatformProps,\n\tVideoChatType\n} from '../redux/store';\nimport VersionBoxContainer from '../features/specific/VersionBox';\nimport { IInstanceProps } from '../features/hoc/withInstanceInfo';\nimport withRedux from '../features/hoc/withRedux';\nimport ModalInformationDialogContainer from '../features/specific/ModalInformationDialog';\nimport ImageUploaderContainer from '../features/specific/ImageUploader';\nimport AudioAnalyserContainer from '../features/specific/AudioAnalyser';\nimport ViewProvider from '../views/ViewProvider';\nimport FullScreenLightBoxContainer from '../features/common/FullScreenLightBox';\nimport AppService from '../services/AppService';\nimport defaultTheme, { ITheme } from '../themes';\nimport { getWindowDimensions } from '../utils/utils';\nimport {\n\topenMessenger,\n\topenVersion,\n\tsetGroupChatColors,\n\tsetHasEditor,\n\tsetShouldResendFailedMessages\n} from '../redux/modules/messenger';\nimport { PreferenceName } from \"../services/AppService/types\";\nimport { IPreferenceActionPayload } from \"../redux/interfaces\";\n\ninterface IResizeProps {\n\twidth: number;\n\theight: number;\n}\n\ninterface IDispatchProps {\n\topenMessenger: ActionDispatcher;\n\tsetWebtoken: ActionDispatcher<string>;\n\tsetLanguage: ActionDispatcher<SupportedLanguage>;\n\n\tsetPlatformProps: ActionDispatcher<IPlatformProps>;\n\tsetFeatures: ActionDispatcher<IFeatures>;\n\tsetOptions: ActionDispatcher<IOptions>;\n\tsetUserKey: ActionDispatcher<string>;\n\tsetShowCensoredContent: ActionDispatcher<boolean>;\n\tsetPartner: ActionDispatcher<IPartner>;\n\tsetChat: ActionDispatcher<IChat>;\n\tsetIsOnline: ActionDispatcher<boolean>;\n\tsetInitialVideoChatType: ActionDispatcher<VideoChatType | undefined>\n\tsetHasEditor: ActionDispatcher<boolean>;\n\tresetInitialVideoChatType: ActionDispatcher;\n\tsetIsForContentPartners: ActionDispatcher<boolean>;\n\topenVersion: ActionDispatcher;\n\tsetShouldResendFailedMessages: ActionDispatcher<boolean>;\n\tsetGroupChatColors: ActionDispatcher<IGroupChatColor[]>\n\tsetPreference: ActionDispatcher<IPreferenceActionPayload>\n}\n\ntype IStoreProps = ReturnType<typeof mapStateToProps>;\ntype IProps = IPlatformProps\n\t& IInstanceProps\n\t& IResizeProps\n\t& IStoreProps\n\t& IDispatchProps;\n\nclass App extends React.Component<IProps> {\n\tconstructor(props: IProps) {\n\t\tsuper(props);\n\n\t\tthis.clickCounter = utils.clickCounter(constants.intervalBetweenClicks);\n\t\tmoment.locale(props.language || 'en');\n\t}\n\n\tclickCounter: any;\n\n\tcomponentDidMount() {\n\t\tconst { instanceId } = this.props;\n\t\tthis.props.openMessenger(instanceId);\n\n\t\tthis.setHooks();\n\t\tthis.setPreferenceStore();\n\t\tthis.setReduxStoreFromProps();\n\t\tthis.setPreferences();\n\n\t\t// IE-SPECIFIC: switching to the default editor on any IE browser.\n\t\t// Set if we have draft.js functionalities enabled\n\t\tconst hasEditor = !isIE && !isAndroid;\n\t\tthis.props.setHasEditor(instanceId, hasEditor);\n\n\t\t// Set platform props for sending them through the vchat-core\n\t\tthis.props.setPlatformProps(instanceId, this.props);\n\t}\n\n\tcomponentDidUpdate() {\n\t\tthis.setReduxStoreFromProps();\n\t}\n\n\trender() {\n\t\tconst theme: ITheme = merge({}, defaultTheme, this.props.theme);\n\n\t\tconst { height: windowHeight, width: windowWidth } = getWindowDimensions();\n\n\t\tconst isMessengerInsideContainer = windowHeight !== this.props.height\n\t\t\t|| windowWidth !== this.props.width;\n\n\t\t/**\n\t\t * When messenger is opened on a mobile/tablet device inside a separate container,\n\t\t * we should use only the sizes set by the container\n\t\t */\n\t\tconst shouldUseFullscreenSizes = this.props.isFullscreen\n\t\t\t&& !(isMessengerInsideContainer && isMobile);\n\n\t\tconst containerHeight = shouldUseFullscreenSizes ? windowHeight : this.props.height;\n\t\tconst containerWidth = shouldUseFullscreenSizes ? windowWidth : this.props.width;\n\n\t\tconst wrapperProps = {\n\t\t\tonClick: this.onVXMessengerClick,\n\t\t\t[config.messengerInstanceIdAttribute]: this.props.instanceId\n\t\t};\n\n\t\t// IE-SPECIFIC: the audio messages feature will be disabled on any IE browser.\n\t\tconst hasAudioMessages = !isIE;\n\n\t\treturn (\n\t\t\t<VXMessengerWrapper {...wrapperProps}>\n\t\t\t\t<ThemeProvider theme={theme}>\n\t\t\t\t\t<>\n\t\t\t\t\t\t<VersionBoxContainer/>\n\t\t\t\t\t\t<ModalInformationDialogContainer/>\n\t\t\t\t\t\t<ImageUploaderContainer/>\n\n\t\t\t\t\t\t{hasAudioMessages && <AudioAnalyserContainer/>}\n\n\t\t\t\t\t\t{!this.props.shouldRenderExitingInformationDialog &&\n\t\t\t\t\t\t<ViewProvider\n\t\t\t\t\t\t\tcontainerHeight={containerHeight}\n\t\t\t\t\t\t\tcontainerWidth={containerWidth}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t<FullScreenLightBoxContainer/>\n\t\t\t\t\t</>\n\t\t\t\t</ThemeProvider>\n\t\t\t</VXMessengerWrapper>\n\t\t);\n\t};\n\n\tprivate onVXMessengerClick = () => {\n\t\tthis.clickCounter.onClick();\n\n\t\tif (isMobile && this.clickCounter.getClickCount() === constants.clickCountLimit) {\n\t\t\tthis.props.openVersion(this.props.instanceId);\n\t\t}\n\n\t};\n\n\tprivate setReduxStoreFromProps = () => {\n\t\tconst {\n\t\t\tconnection, features, language, initialVideoChatType, theme, storedFeatures, options, storedOptions\n\t\t} = this.props;\n\n\t\tconst platformLanguage = utils.getValueByLanguage(language);\n\t\tconst shouldSetLanguage = platformLanguage !== this.props.storedLanguage;\n\t\tconst { instanceId } = this.props;\n\n\t\tconst usernameColorSet = theme?.colors?.groupChat?.usernameColorSet;\n\t\tconst shouldSetColorSet = !isEqual(usernameColorSet,\n\t\t\tdefaultTheme.colors.groupChat.usernameColorSet\n\t\t);\n\n\t\tif (!isEmpty(usernameColorSet) && shouldSetColorSet) {\n\t\t\tthis.props.setGroupChatColors(\n\t\t\t\tinstanceId, map(usernameColorSet, (color: string) => ({\n\t\t\t\t\tcolor,\n\t\t\t\t\tusers: []\n\t\t\t\t}))\n\t\t\t);\n\t\t}\n\n\t\tif (this.isChatBasedConnection(connection)) {\n\t\t\tconst { clientId, server } = connection as IConnectionWithChat;\n\n\t\t\tthis.setChat({ clientId, server, externallyProvided: true });\n\n\t\t\tif (shouldSetLanguage) {\n\t\t\t\tthis.setLanguage(language);\n\t\t\t}\n\n\t\t\t// model is considered to be online if started with a chat based connection\n\t\t\tif (!this.props.isModelOnline) {\n\t\t\t\tthis.props.setIsOnline(instanceId, true);\n\t\t\t}\n\t\t} else {\n\t\t\tconst { partner, userKey, webToken } = connection as IConnectionWithToken;\n\n\t\t\tconst shouldSetUserKey = userKey !== this.props.storedUserKey;\n\t\t\tlet shouldSetWebToken = webToken !== this.props.storedWebToken;\n\t\t\tlet shouldSetPartner = !isEqual(partner, this.props.storedPartner);\n\n\t\t\tif (shouldSetUserKey) {\n\t\t\t\tthis.setUserKey(userKey);\n\t\t\t\tshouldSetWebToken = true;\n\t\t\t}\n\n\t\t\tif (shouldSetLanguage) {\n\t\t\t\tthis.setLanguage(language);\n\t\t\t\tshouldSetWebToken = true;\n\t\t\t}\n\n\t\t\t// webtoken and login is depending on user key and language\n\t\t\tif (shouldSetWebToken) {\n\t\t\t\tthis.setWebToken(webToken);\n\n\t\t\t\tif (webToken && !shouldSetPartner) {\n\t\t\t\t\tthis.props.setShouldResendFailedMessages(instanceId, true);\n\t\t\t\t}\n\n\t\t\t\tshouldSetPartner = true;\n\t\t\t}\n\n\t\t\tif (shouldSetPartner) {\n\t\t\t\tthis.setPartner(partner);\n\t\t\t}\n\t\t}\n\n\t\tthis.setInitialVideoChatType(initialVideoChatType);\n\n\t\t// Set features, we compare to features + storedFeatures because some feature may be not set;\n\t\tconst featuresFromProps: IFeatures = { ...getInitialInstanceData().features, ...features };\n\t\tconst updatedFeatures = merge({}, storedFeatures, featuresFromProps);\n\t\tif (featuresFromProps && !isEqual(updatedFeatures, storedFeatures)) {\n\t\t\tthis.props.setFeatures(instanceId, updatedFeatures);\n\t\t}\n\n\t\t// Set options, we compare to options + storedOptions because some of them may be not set;\n\t\tconst updatedOptions = merge({}, storedOptions, options);\n\t\tif (options && !isEqual(updatedOptions, storedOptions)) {\n\t\t\tthis.props.setOptions(instanceId, updatedOptions);\n\t\t}\n\t};\n\n\tprivate setHooks = () => {\n\t\tif (this.props.hooks) {\n\t\t\tconst {\n\t\t\t\tonExit,\n\t\t\t\tonClickProfile,\n\t\t\t\tonRecharge,\n\t\t\t\tonVideoChatAction,\n\t\t\t\tonExitPopupAction,\n\t\t\t\tonAgeVerification,\n\t\t\t\tonModelStatusChange,\n\t\t\t\tonSupportedVideoChatTypes,\n\t\t\t\tonFailedChatConfig,\n\t\t\t\tonFailedWebToken,\n\t\t\t\tonBecomeVIP,\n\t\t\t\tonClickImage\n\t\t\t} = this.props.hooks as IHooks;\n\n\t\t\tconst appService: AppService = AppService.getService(this.props.instanceId);\n\n\t\t\tif (onClickImage) {\n\t\t\t\tappService.onClickImage = onClickImage;\n\t\t\t}\n\t\t\tif (onClickProfile) {\n\t\t\t\tappService.onClickProfile = onClickProfile;\n\t\t\t}\n\t\t\tif (onExit) {\n\t\t\t\tappService.onExit = onExit;\n\t\t\t}\n\t\t\tif (onRecharge) {\n\t\t\t\tappService.onRecharge = onRecharge;\n\t\t\t}\n\t\t\tif (onVideoChatAction) {\n\t\t\t\tappService.onVideoChatAction = onVideoChatAction;\n\t\t\t}\n\t\t\tif (onExitPopupAction) {\n\t\t\t\tappService.onExitPopupAction = onExitPopupAction;\n\t\t\t}\n\t\t\tif (onAgeVerification) {\n\t\t\t\tappService.onAgeVerification = onAgeVerification;\n\t\t\t}\n\t\t\tif (onModelStatusChange) {\n\t\t\t\tappService.onModelStatusChange = onModelStatusChange;\n\t\t\t}\n\t\t\tif (onSupportedVideoChatTypes) {\n\t\t\t\tappService.onSupportedVideoChatTypes = onSupportedVideoChatTypes;\n\t\t\t}\n\t\t\tif (onFailedChatConfig) {\n\t\t\t\tappService.onFailedChatConfig = onFailedChatConfig;\n\t\t\t}\n\t\t\tif (onFailedWebToken) {\n\t\t\t\tappService.onFailedWebToken = onFailedWebToken;\n\t\t\t}\n\t\t\tif (onBecomeVIP) {\n\t\t\t\tappService.onBecomeVIP = onBecomeVIP;\n\t\t\t}\n\t\t}\n\t};\n\n\tprivate setPreferenceStore = () => {\n\t\tif (this.props.preferenceStore) {\n\t\t\tconst appService: AppService = AppService.getService(this.props.instanceId);\n\t\t\tappService.preferenceStore = this.props.preferenceStore;\n\t\t}\n\t}\n\n\tprivate setWebToken = (webToken: string) => {\n\t\tthis.props.setWebtoken(this.props.instanceId, webToken);\n\t};\n\n\tprivate setUserKey = (userKey?: string) => {\n\t\tthis.props.setUserKey(this.props.instanceId, userKey || \"\");\n\t};\n\n\tprivate setPartner = (partner: IPartner) => {\n\t\tthis.props.setPartner(this.props.instanceId, partner);\n\t};\n\n\tprivate setChat = (chat: IChat) => {\n\t\tconst isNewChat = !isEqual(chat, this.props.storedChat);\n\t\tif (isNewChat) {\n\t\t\tthis.props.setChat(this.props.instanceId, chat);\n\t\t}\n\t};\n\n\tprivate setLanguage = (language: string) => {\n\t\tthis.props.setLanguage(\n\t\t\tthis.props.instanceId,\n\t\t\tutils.getValueByLanguage(language)\n\t\t);\n\t\tmoment.locale(language);\n\t};\n\n\tprivate setInitialVideoChatType = (type?: VideoChatType) => {\n\t\tconst { instanceId } = this.props;\n\n\t\tif (type !== this.props.storedInitialVideoChatType) {\n\t\t\tif (type) {\n\t\t\t\tthis.props.setInitialVideoChatType(instanceId, type);\n\t\t\t} else {\n\t\t\t\tthis.props.resetInitialVideoChatType(instanceId);\n\t\t\t}\n\t\t}\n\t};\n\n\tprivate isChatBasedConnection = (connection: IConnection): boolean =>\n\t\thas(connection, \"clientId\") && has(connection, \"server\");\n\n\tprivate setPreferences = () => {\n\t\tconst appService = AppService.getService(this.props.instanceId);\n\n\t\tObject.keys(PreferenceName).forEach((preferenceName: PreferenceName) => {\n\t\t\tconst preferenceValue = appService.preferenceStore.getPreference(preferenceName);\n\n\t\t\tif (!preferenceValue) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.props.setPreference(this.props.instanceId, {\n\t\t\t\tpreferenceName,\n\t\t\t\tvalue: preferenceValue\n\t\t\t});\n\t\t});\n\t}\n\n}\n\nconst mapStateToProps = (store: IStore, { instanceId }: IInstanceProps) => ({\n\tisOpen: selectors.isOpen(store, instanceId),\n\tisFullscreen: selectors.isFullScreen(store, instanceId),\n\tisVideoChatOpen: selectors.isVideoChatOpen(store, instanceId),\n\tshouldRenderExitingInformationDialog: selectors.shouldRenderExitingInformationDialog(store, instanceId),\n\tisModelOnline: selectors.isModelOnline(store, instanceId),\n\n\tstoredWebToken: selectors.getWebtoken(store, instanceId),\n\tstoredUserKey: selectors.getUserKey(store, instanceId),\n\tstoredPartner: selectors.getPartner(store, instanceId),\n\n\tstoredChat: selectors.getExternallyProvidedChat(store, instanceId),\n\n\tstoredLanguage: selectors.getLanguage(store, instanceId),\n\tstoredFeatures: selectors.getFeatures(store, instanceId),\n\tstoredOptions: selectors.getOptions(store, instanceId),\n\tstoredPreloader: selectors.getPreloader(store, instanceId),\n\tstoredAnalyticsKey: selectors.getAnalyticsKey(store, instanceId),\n\tstoredUpdateBrowserLink: selectors.getUpdateBrowserLink(store, instanceId),\n\tstoredInitialVideoChatType: selectors.getInitialVideoChatType(store, instanceId)\n});\n\nconst mapDispatchToProps = {\n\tsetPlatformProps,\n\tsetFeatures,\n\tsetOptions,\n\tsetWebtoken,\n\tsetUserKey,\n\tsetPartner,\n\tsetChat,\n\tsetIsOnline,\n\tsetLanguage,\n\tsetInitialVideoChatType,\n\tsetHasEditor,\n\tresetInitialVideoChatType,\n\topenMessenger,\n\topenVersion,\n\tsetShouldResendFailedMessages,\n\tsetGroupChatColors,\n\tsetPreference\n};\n\nexport default withRedux(App, mapStateToProps, mapDispatchToProps, { withResizeDetector });\n","import { Action } from \"redux-actions\";\nimport { put, select, takeEvery } from \"redux-saga/effects\";\n\nimport { createAction, createActionType } from \"../../redux/utils\";\nimport { IPayload } from \"../../redux/interfaces\";\nimport selectors from \"../../redux/selectors\";\nimport { ActionIds } from \"../../redux/interfaces\";\nimport { stopVideoChatPlayer } from \"../common/videochat\";\nimport { setVideoChatTimeLimit } from \"../../redux/modules/videochat\";\n\nconst createChatActionType = createActionType(ActionIds.CHAT_SAGA_SPECIFIC, { isSagaAction: true });\n\n// Actions\nconst PAUSE_CHAT = createChatActionType(\"PAUSE_CHAT\");\n\n// Action Creators\nexport const pauseChat = createAction(PAUSE_CHAT);\n\n// Sagas\nconst pauseChatSaga = function* ({ payload: { instanceId }}: Action<IPayload>) {\n    yield put(stopVideoChatPlayer(instanceId));\n\n    const isVideoChatInLiveChatMode = yield select(selectors.isVideoChatInLiveChatMode, instanceId);\n    const isTimeLeftBelowThreshold = yield select(selectors.isVideoChatTimeLeftBelowThreshold, instanceId);\n\n    if (isVideoChatInLiveChatMode && isTimeLeftBelowThreshold) {\n        // we should assume that the chat was paused because no time (and implicitly money) is left\n        yield put(setVideoChatTimeLimit(instanceId, 0));\n    }\n};\n\nconst watchSagas = function* () {\n    yield takeEvery(PAUSE_CHAT, pauseChatSaga);\n};\n\nexport default watchSagas;\n","import { isUndefined } from 'lodash';\nimport { Action } from 'redux-actions';\nimport { eventChannel } from \"redux-saga\";\nimport { call, put, select, spawn, take, takeEvery } from \"redux-saga/effects\";\n\nimport utils from \"../../utils\";\nimport loggers from \"../../loggers\";\nimport { createAction, createActionType } from \"../../redux/utils\";\nimport { ActionIds, IPayload } from \"../../redux/interfaces\";\nimport { pauseChat } from \"../specific/chat\";\nimport selectors from '../../redux/selectors';\nimport { openPrivateChatPrompt } from \"./userPrompt\";\nimport { setTranslations } from \"../../redux/modules/user\";\nimport { receiveMessageFromChat } from \"../websockets/message\";\nimport { QUERYSINGLE } from \"../../static/constants/constants\";\nimport { IHost, IOnMessagePayload } from '../../services/types';\nimport { resetChat, setChatId, setOneClickRecharge } from \"../../redux/modules/session\";\nimport { closeMessenger, openMessenger, setEmoticons } from \"../../redux/modules/messenger\";\nimport ChatService from \"../../services/ChatService\";\nimport {\n\tAbilities,\n\tChargeInfo,\n\tCoreChat,\n\tExitCode,\n\tLimits,\n\tQuery,\n\tSourceSet,\n\tUser,\n\tUserEvent,\n\tUserEventType\n} from \"../../services/ChatService/types\";\nimport { onTextMutedUpdated, resumePreviousVideochat, stopVideoChat, switchVoyeurPrivate2Voyeur } from \"./videochat\";\nimport PlayerService from '../../services/PlayerService';\n\nimport {\n\tsetChatAbility,\n\tsetLivePreviewAbility,\n\tsetModelName,\n\tsetPrivateChatAbility,\n\tsetProfilePicture,\n\tsetTipAbility\n} from \"../../redux/modules/model\";\nimport {\n\taddGroupChatParticipant,\n\tcloseVideochat,\n\tremoveGroupChatParticipant,\n\tresetType,\n\tsetCam2CamStatus,\n\tsetExitEvent,\n\tsetGroupChatClientName,\n\tsetGroupChatParticipants,\n\tsetHasAudio,\n\tsetInformation,\n\tsetIsGroupChat,\n\tsetIsInVoyeurMode,\n\tsetLivePreviewTextTimeLimit,\n\tsetLivePreviewTimeLimit,\n\tsetResumeChatTimestamp,\n\tsetType,\n\tsetVideoChatTimeLimit,\n\tsetVideoChatTimeLimitBelowThreshold\n} from \"../../redux/modules/videochat\";\nimport {\n\tCurrencyName,\n\tICurrency,\n\tIEmoticon,\n\tTranslations,\n\tVideochatInformationType,\n\tVideoChatType\n} from \"../../redux/store\";\n\ninterface IChatStoppedPayload {\n\texitCode: ExitCode;\n\texitMessage?: string;\n}\n\nconst createChatEventsActionType = createActionType(ActionIds.CHAT_EVENTS, { isSagaAction: true });\n\n// Actions\nconst CHAT_STOPPED = createChatEventsActionType(\"CHAT_STOPPED\");\nconst CHARGE_INFO_RETRIEVED_FROM_CHAT = createChatEventsActionType(\"CHARGE_INFO_RETRIEVED_FROM_CHAT\");\n\n// Action Creators\nconst chatStopped = createAction<IChatStoppedPayload>(CHAT_STOPPED);\nconst chargeInfoRetrievedFromChat = createAction<ChargeInfo>(CHARGE_INFO_RETRIEVED_FROM_CHAT);\n\n// Sagas\n\nconst subscribeToChatInitListener = emitter => {\n\tChatService.registerChatInitListener((instanceId: string, chat: CoreChat) => {\n\t\tloggers.saga.debug('Chat initialized; setting stuff in store', { details: { chat }});\n\n\t\tconst chatID = chat.id.toString();\n\t\tloggers.saga.debug('taking chatId from vchat-core instance', { details: { chatID }});\n\t\temitter(setChatId(instanceId, chatID));\n\n\t\tconst isMuted = chat.audioMuted;\n\t\tloggers.saga.debug('taking audioMuted from vchat-core instance', { details: { isMuted }});\n\t\temitter(setHasAudio(instanceId, !isMuted));\n\n\t\tconst translations: Translations = chat.translations as unknown as Translations;\n\t\tloggers.saga.debug('Taking the newest translations from vchat-core instance');\n\t\temitter(setTranslations(instanceId, translations));\n\n\t\tconst host: IHost = chat.host;\n\t\tloggers.saga.debug('Taking the model name from vchat-core instance', { details: host });\n\t\temitter(setModelName(instanceId, host.name));\n\t\temitter(setProfilePicture(instanceId, host.imageSrc));\n\n\t\tconst emoticons: IEmoticon[] = chat.emojiList;\n\t\tloggers.saga.debug('Taking emoticons from vchat-core instance', { details: emoticons });\n\t\temitter(setEmoticons(instanceId, emoticons));\n\n\t\tconst users: User[] = chat.currentUsers || [];\n\t\tloggers.saga.debug('Taking group chat participants info from vchat-core instance',\n\t\t\t{ details: users }\n\t\t);\n\t\temitter(setGroupChatParticipants(instanceId, users.map(user => user.userName)));\n\n\t\tconst username = chat.username || \"\";\n\t\tloggers.saga.debug(\"Client's username during the group chat from vchat-core instnace\",\n\t\t\t{ details: username }\n\t\t);\n\t\temitter(setGroupChatClientName(instanceId, username));\n\n\t\tconst abilities: Abilities = chat.abilities;\n\t\tloggers.saga.debug('Taking abilities from vchat-core instance', { details: abilities });\n\t\tif (abilities) {\n\t\t\temitter(setCam2CamStatus(instanceId, abilities.cam2cam));\n\t\t\temitter(setChatAbility(instanceId, abilities.video));\n\t\t\temitter(setLivePreviewAbility(instanceId, abilities.preview));\n\t\t\temitter(setPrivateChatAbility(instanceId, abilities.single));\n\t\t\temitter(setTipAbility(instanceId, abilities.tip));\n\t\t}\n\n\t\tconst isGroupChat = chat.isGroupChat;\n\t\tloggers.saga.debug('Taking isGroupChat from vchat-core instance', { details: isGroupChat });\n\t\temitter(setIsGroupChat(instanceId, isGroupChat));\n\n\t\t// @ts-ignore\n\t\tconst isInVoyeurMode = chat.isInVoyeurMode;\n\t\tloggers.saga.debug('Taking isInVoyeurMode from vchat-core instance', { details: isInVoyeurMode });\n\t\temitter(setIsInVoyeurMode(instanceId, isInVoyeurMode));\n\t});\n};\n\nconst subscribeToLimitsChange = emitter => {\n\tChatService.registerLimitsChangeListener((instanceId: string, limits: Partial<Limits>) => {\n\t\tif (!isUndefined(limits.video)) {\n\t\t\temitter(setVideoChatTimeLimit(instanceId, limits.video / 1000));\n\t\t}\n\n\t\tif (!isUndefined(limits.preview)) {\n\t\t\temitter(setLivePreviewTimeLimit(instanceId, limits.preview / 1000));\n\n\t\t\tif (!isUndefined(limits.text)) {\n\t\t\t\temitter(setLivePreviewTextTimeLimit(instanceId, (limits.text - limits.preview) / 1000));\n\t\t\t}\n\t\t}\n\t});\n};\n\nconst subscribeToVideoLimitWarningUpdate = emitter => {\n\tChatService.registerVideoLimitWarningListener((instanceId, isBelowThreshold, value) => {\n\t\temitter(setVideoChatTimeLimitBelowThreshold(instanceId, isBelowThreshold));\n\t\temitter(setVideoChatTimeLimit(instanceId, value / 1000));\n\t});\n};\n\nconst subscribeToOnMessageListener = emitter => {\n\tChatService.registerOnMessageListener((instanceId: string, payload: IOnMessagePayload) => {\n\t\temitter(receiveMessageFromChat(instanceId, payload));\n\t});\n};\n\nconst subscribeToAbilityUpdate = emitter => {\n\tChatService.registerAbilityUpdateListener((instanceId: string, name: keyof Abilities, value: boolean) => {\n\t\tloggers.saga.debug('Ability update ', { details: { name, value } });\n\t\tswitch (name) {\n\t\t\tcase 'video':\n\t\t\t\temitter(setChatAbility(instanceId, value));\n\t\t\t\tbreak;\n\t\t\tcase 'preview':\n\t\t\t\temitter(setLivePreviewAbility(instanceId, value));\n\t\t\t\tbreak;\n\t\t\tcase 'single':\n\t\t\t\temitter(setPrivateChatAbility(instanceId, value));\n\t\t\t\tbreak;\n\t\t\tcase 'tip':\n\t\t\t\temitter(setTipAbility(instanceId, value));\n\t\t\t\tbreak;\n\t\t\tcase 'text':\n\t\t\t\tif (value) {\n\t\t\t\t\temitter(switchVoyeurPrivate2Voyeur(instanceId));\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t});\n};\n\nconst subscribeToQuery = emitter => {\n\tChatService.registerQueryListener((instanceId: string, query: Query) => {\n\t\tif (query.key === QUERYSINGLE && query.text) {\n\t\t\temitter(openPrivateChatPrompt(instanceId, query.text));\n\t\t}\n\t});\n};\n\nconst subscribeToSingleModeUpdate = emitter => {\n\tChatService.registerSingleModeUpdateListener((instanceId: string, value: boolean) => {\n\t\tif (value) {\n\t\t\temitter(setType(instanceId, VideoChatType.PRIVATE_CHAT));\n\t\t}\n\t});\n};\n\nconst subscribeToChatStop = emitter => {\n\tChatService.registerChatStopListener((instanceId: string, exitCode: ExitCode, exitMessage?: string) => {\n\t\tloggers.saga.debug('chat stopped', { details: { exitCode, exitMessage } });\n\t\temitter(chatStopped(instanceId, { exitCode, exitMessage }));\n\t});\n};\n\nconst subscribeToChatPause = emitter => {\n\tChatService.registerChatPauseListener((instanceId: string) => {\n\t\temitter(pauseChat(instanceId));\n\t});\n};\n\nconst subscribeToChatResume = emitter => {\n\tChatService.registerChatResumeListener((instanceId: string) => {\n\t\tloggers.saga.debug('chat resumed');\n\t});\n};\n\nconst subscribeToTextMuteUpdate = emitter => {\n\tChatService.registerTextMuteUpdateListener((instanceId: string, value) => {\n\t\tloggers.saga.debug('text mute updated to', { details: { value } });\n\t\temitter(onTextMutedUpdated(instanceId, !value));\n\t});\n};\n\nconst subscribeToAudioMuteUpdate = emitter => {\n\tChatService.registerAudioMuteUpdateListener((instanceId: string, isMuted) => {\n\t\tloggers.saga.debug('audio mute updated to', { details: { isMuted } });\n\t\tconst modelHasAudio = !isMuted;\n\t\temitter(setHasAudio(instanceId, modelHasAudio));\n\t});\n};\n\nconst subscribeToChargeInfo = emitter => {\n\tChatService.registerChargeInfoListener((instanceId: string, chargeInfo: ChargeInfo) => {\n\t\tloggers.saga.debug('Taking charge info from vchat-core instance', { details: chargeInfo });\n\t\temitter(chargeInfoRetrievedFromChat(instanceId, chargeInfo));\n\t});\n};\n\nconst subscribeToOnStreamSourceUpdateListener = emitter => {\n\tChatService.registerStreamSourceUpdateListener((instanceId: string, updatedSourceSet: SourceSet) => {\n\t\tPlayerService.getService(instanceId).play(updatedSourceSet);\n\t});\n};\n\nconst subscribeToUserEventListener = emitter => {\n\tChatService.registerUserEventListener((instanceId: string, event: UserEvent) => {\n\t\tloggers.saga.debug(`Group chat participant ${event.type} the chat`);\n\t\temitter(\n\t\t\tevent.type === UserEventType.Entered\n\t\t\t\t? addGroupChatParticipant(instanceId, event.user.userName)\n\t\t\t\t: removeGroupChatParticipant(instanceId, event.user.userName)\n\t\t);\n\t});\n};\n\nconst chatEventsChannel = () => {\n\treturn eventChannel(emitter => {\n\t\tsubscribeToChatInitListener(emitter);\n\n\t\tsubscribeToLimitsChange(emitter);\n\t\tsubscribeToVideoLimitWarningUpdate(emitter);\n\t\tsubscribeToAbilityUpdate(emitter);\n\t\tsubscribeToQuery(emitter);\n\t\tsubscribeToSingleModeUpdate(emitter);\n\t\tsubscribeToChatStop(emitter);\n\t\tsubscribeToChatPause(emitter);\n\t\tsubscribeToChatResume(emitter);\n\t\tsubscribeToOnMessageListener(emitter);\n\t\tsubscribeToTextMuteUpdate(emitter);\n\t\tsubscribeToAudioMuteUpdate(emitter);\n\t\tsubscribeToChargeInfo(emitter);\n\t\tsubscribeToOnStreamSourceUpdateListener(emitter);\n\t\tsubscribeToUserEventListener(emitter);\n\n\t\treturn () => {\n\t\t\t// no need for un-subscribing; saga's live exceeds the app live\n\t\t}\n\t});\n};\n\n/** Sagas */\n\n\n/** The chat information types to be displayed for each chat exit code */\nconst chatStopInformations: { [exitCode: number]: any } = {};\nchatStopInformations[ExitCode.HOST] = VideochatInformationType.HOST_OFFLINE;\nchatStopInformations[ExitCode.HOSTKICK] = VideochatInformationType.EJECTED;\nchatStopInformations[ExitCode.FSKDENIED] = VideochatInformationType.VERIFY_AGE;\nchatStopInformations[ExitCode.VOICECALLHANGUP] = VideochatInformationType.VOICECALL_ENDED;\nchatStopInformations[ExitCode.HOSTSINGLE] = VideochatInformationType.PRIVATE_CHAT;\nchatStopInformations[ExitCode.HOSTSINGLE] = VideochatInformationType.PRIVATE_CHAT;\nchatStopInformations[ExitCode.VIDEOTIMELIMIT] = VideochatInformationType.OUT_OF_MONEY;\nchatStopInformations[ExitCode.TEXTTIMELIMIT] = VideochatInformationType.TEXTTIMELIMIT;\n\nconst isErrorCode = (exitCode: ExitCode) =>\n\texitCode !== ExitCode.USER &&\n\texitCode !== ExitCode.CLIENTDISCONNECT &&\n\texitCode !== ExitCode.CLIENTNEWCHAT;\n\nconst isGenericErrorCode = (exitCode: ExitCode) => isErrorCode(exitCode)\n\t&& !chatStopInformations[exitCode];\n\n// Sagas\nconst chatStoppedSaga = function* ({ payload }: Action<IPayload<IChatStoppedPayload>>) {\n\tconst { instanceId, value } = payload;\n\n\tif (value.exitCode === ExitCode.VIDEOFAILGUEST) {\n\t\tconst resumeChatTimestamp = yield select(selectors.resumeChatTimestamp, instanceId);\n\n\t\tif (utils.shouldResetChat(resumeChatTimestamp)) {\n\t\t\tyield put(setResumeChatTimestamp(instanceId, new Date()));\n\n\t\t\t// cannot use the existing chat instance anymore; force getting a new one\n\t\t\tyield put(resetChat(instanceId));\n\t\t\tyield put(resetType(instanceId));\n\n\t\t\tyield put(resumePreviousVideochat(instanceId));\n\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif (value.exitCode === ExitCode.TEXTTIMELIMIT) {\n\t\tyield put(closeVideochat(instanceId));\n\t\tyield put(openMessenger(instanceId));\n\t\treturn;\n\t}\n\n\tconst isPlaying = yield select(selectors.isPlaying, instanceId);\n\tif (isPlaying) {\n\t\tyield put(stopVideoChat(instanceId));\n\t}\n\n\tconst { exitCode, exitMessage } = value;\n\n\t// save the last error\n\tyield put(setExitEvent(instanceId, { exitCode, exitMessage }));\n\n\t// check if the exit popups are supposed to be handled externally or not\n\tconst hasExitPopups = yield select(selectors.hasExitPopups, instanceId);\n\n\t// show our exit pop-ups\n\tif (hasExitPopups) {\n\t\tconst chatInformation = chatStopInformations[exitCode];\n\n\t\tif (chatInformation) {\n\t\t\tyield put(setInformation(instanceId, chatInformation));\n\t\t} else if (isGenericErrorCode(exitCode)) {\n\t\t\tyield put(setInformation(instanceId, VideochatInformationType.ERROR_OCCURRED));\n\t\t}\n\t} else {\n\t\t// displaying exit pop-ups is on the platform to be created/ displayed\n\t\tif (isErrorCode(exitCode)) {\n\t\t\tyield put(closeMessenger(instanceId));\n\t\t}\n\t}\n};\n\nconst chargeInfoRetrievedSaga = function* ({ payload }: Action<IPayload<ChargeInfo>>) {\n\tconst { instanceId, value: chargeInfo } = payload;\n\n\tif (!chargeInfo) {\n\t\tyield put(setOneClickRecharge(instanceId, {\n\t\t\tavailable: false,\n\t\t\tamounts: [],\n\t\t\tdefaultAmount: null\n\t\t}));\n\n\t\treturn;\n\t}\n\n\tconst currency: ICurrency = yield select(selectors.getCurrency, instanceId);\n\n\tconst { available } = chargeInfo;\n\tlet amounts = chargeInfo.amounts;\n\tlet defaultAmount = utils.getPreselectedOneClickAmount(amounts);\n\n\t// for other currencies than Credits, the amounts from the BE are expressed as cents\n\tif (currency.name !== CurrencyName.Credits) {\n\t\tdefaultAmount /= 100;\n\t\tamounts = amounts.map((amount: number) => amount / 100);\n\t}\n\n\tyield put(setOneClickRecharge(instanceId, {\n\t\tavailable,\n\t\tamounts,\n\t\tdefaultAmount\n\t}));\n};\n\nconst listenForChatEventsSaga = function* () {\n\tconst chatEvents = yield call(chatEventsChannel);\n\n\twhile (true) {\n\t\tconst action = yield take(chatEvents);\n\t\tyield put(action);\n\t}\n};\n\nconst watchSaga = function* () {\n\tyield spawn(listenForChatEventsSaga);\n\tyield takeEvery(CHAT_STOPPED, chatStoppedSaga);\n\tyield takeEvery(CHARGE_INFO_RETRIEVED_FROM_CHAT, chargeInfoRetrievedSaga);\n};\n\nexport default watchSaga;\n","import { Action } from \"redux-actions\";\nimport { put, select, takeEvery } from \"redux-saga/effects\";\n\nimport selectors from \"../../redux/selectors\";\nimport { stopVideoChatPlayer } from \"./videochat\";\nimport { closeFullscreen } from \"../../redux/modules/videochat\";\nimport { createAction, createActionType } from \"../../redux/utils\";\nimport { IPayload } from \"../../redux/interfaces\";\nimport { ActionIds } from \"../../redux/interfaces\";\n\ninterface IPlayerErrorPayload {\n    level: number;\n    error: any;\n}\n\nconst createErrorActionType = createActionType(ActionIds.ERRORS, { isSagaAction: true });\n\n// Actions\nconst PLAY_ERROR = createErrorActionType(\"PLAY_ERROR\");\n\n// Action Creators\nexport const playError = createAction<IPlayerErrorPayload>(PLAY_ERROR);\n\n// Sagas\nexport const playErrorSaga = function*({ payload: { instanceId }}: Action<IPayload>) {\n    yield put(stopVideoChatPlayer(instanceId));\n\n    const isFullScreen = yield select(selectors.isFullScreen, instanceId);\n    if (isFullScreen) {\n        yield put(closeFullscreen(instanceId));\n    }\n};\n\nconst watchSagas = function*() {\n    yield takeEvery(PLAY_ERROR, playErrorSaga);\n};\n\nexport default watchSagas;\n","import { Action } from \"redux-actions\";\nimport { eventChannel } from \"redux-saga\";\nimport { call, delay, put, race, select, spawn, take, takeEvery } from \"redux-saga/effects\";\n\nimport loggers from \"../../loggers\";\nimport { playError } from \"./errors\";\nimport config from \"../../static/config\";\nimport { ActionIds, IPayload } from \"../../redux/interfaces\";\nimport { createAction, createActionType } from \"../../redux/utils\";\nimport selectors from \"../../redux/selectors\";\nimport ChatService from \"../../services/ChatService\";\nimport { publishVideoChatPlayer } from \"./videochat\";\nimport { setActionResponse } from \"../../redux/modules/messenger\";\nimport { ActionResponseType, ITranslation } from \"../../redux/store\";\nimport PlayerService, { PlayInfo } from \"../../services/PlayerService\";\nimport {\n\tresetCam2CamSelectedCamera,\n\tsetCam2CamActive,\n\tsetCam2CamCameras,\n\tsetCam2CamInactive,\n\tsetInitialResolution,\n\tsetIsAutoplayRestricted,\n\tsetIsInitiallyMuted,\n\tsetIsMutedByClient,\n\tsetPlayingStatus\n} from \"../../redux/modules/videochat\";\nimport { setPreference } from '../../redux/modules/user';\nimport { openChooseCameraPrompt } from \"./userPrompt\";\nimport { takePattern } from \"../utils\";\nimport { PreferenceName } from \"../../services/AppService/types\";\n\nconst createPlayerEventsActionType = createActionType(ActionIds.PLAYER_EVENTS, { isSagaAction: true });\n\n// Actions\nconst PLAYER_STOPPED = createPlayerEventsActionType(\"PLAYER_STOPPED\");\nconst NO_CAMERA_DETECTED = createPlayerEventsActionType(\"NO_CAMERA_DETECTED\");\nconst LOW_STREAM_QUALITY_DETECTED = createPlayerEventsActionType(\"LOW_STREAM_QUALITY_DETECTED\");\nconst GOOD_STREAM_QUALITY_DETECTED = createPlayerEventsActionType(\"GOOD_STREAM_QUALITY_DETECTED\");\nconst CHOOSE_CAMERA = createPlayerEventsActionType(\"CHOOSE_CAMERA\");\n\n// Action Creators\nconst playerStopped = createAction(PLAYER_STOPPED);\nconst noCameraDetected = createAction(NO_CAMERA_DETECTED);\nconst lowStreamQualityDetected = createAction(LOW_STREAM_QUALITY_DETECTED);\nconst goodStreamQualityDetected = createAction(GOOD_STREAM_QUALITY_DETECTED);\nconst chooseCamera = createAction<MediaDeviceInfo[]>(CHOOSE_CAMERA);\n\n/** Listeners */\nconst subscribeToCameraOn = emitter => {\n    PlayerService.registerCameraOnListener((instanceId: string) => {\n        loggers.saga.debug('Camera is on');\n        emitter(publishVideoChatPlayer(instanceId));\n        emitter(setCam2CamActive(instanceId));\n    });\n};\n\nconst subscribeToCameraOff = emitter => {\n    PlayerService.registerCameraOffListener((instanceId: string) => {\n        loggers.saga.debug('Camera is off');\n        emitter(setCam2CamInactive(instanceId));\n    });\n};\n\nconst subscribeToCameraDenied = emitter => {\n    PlayerService.registerCameraDeniedListener((instanceId: string) => {\n        loggers.saga.debug('Camera denied or not found');\n        emitter(noCameraDetected(instanceId));\n    });\n};\n\nconst subscribeToPlayError = emitter => {\n    PlayerService.registerPlayErrorListener((instanceId: string, level: number, error?: any) => {\n        emitter(playError(instanceId , { level, error }));\n    });\n};\n\nconst subscribeToVolumeChange = emitter => {\n    PlayerService.registerVolumeChangeListener((instanceId: string, volume: number) => {\n\t\tloggers.saga.debug('Volume changed to ', {details: { volume }});\n    \temitter(setIsMutedByClient(instanceId, volume === 0));\n\t\temitter(setPreference(instanceId,\n\t\t\t{ preferenceName: PreferenceName.VolumeLevel, value: volume }));\n    });\n};\n\nconst subscribeToInitiallyMuted = emitter => {\n    PlayerService.registerInitiallyMutedListener((instanceId: string, isMuted: boolean) => {\n        loggers.saga.debug(`isInitiallyMuted=${isMuted}`);\n        emitter(setIsInitiallyMuted(instanceId, isMuted));\n    });\n};\n\nconst subscribeToSelectingCameras = emitter => {\n    PlayerService.registerSelectingCameraListener((instanceId: string, cameras: MediaDeviceInfo[]) => {\n        loggers.saga.debug(`available cam2cam cameras=`, { details: { cameras }});\n        emitter(chooseCamera(instanceId, cameras));\n    });\n};\n\n/**\n * Our handler will check if the player received values\n * for width and height, which is the closest condition to having succesfully\n * a player rendered and active, it will inform the parent platform.\n * @param emitter\n */\nconst subscribeToPlayInfo = emitter => {\n    PlayerService.registerPlayerInfoListener((instanceId: string, info: PlayInfo) => {\n        if (info.width && info.height && !info.paused) {\n            const { width, height } = info;\n            emitter(setInitialResolution(instanceId, { width, height }));\n            emitter(setPlayingStatus(instanceId, true));\n        }\n\n        emitter(info.quality === 'low'\n            ? lowStreamQualityDetected(instanceId)\n            : goodStreamQualityDetected(instanceId));\n    });\n};\n\nconst subscribeToPlayStart = emitter => {\n    PlayerService.registerPlayStartListener((instanceId: string) => {\n        loggers.saga.debug('Player started');\n    });\n};\n\nconst subscribeToPlayStop = emitter => {\n    PlayerService.registerPlayStopListener((instanceId: string) => {\n        loggers.saga.debug('Player stopped');\n        emitter(playerStopped(instanceId));\n    });\n};\n\nconst subscribeToSendMetrics = emitter => {\n    PlayerService.registerSendMetricsListener((instanceId, info) => {\n        loggers.saga.debug(\"Send matrics with info: \", { details: { info } });\n        ChatService.getService(instanceId).sendMetrics(info);\n\n        if (info.playerEvent === 'h5live_warning' && info.code === 1005) {\n        \t// auto play issue\n\t\t\tloggers.saga.warning('Autoplay restriction!!!');\n\t\t\temitter(setIsAutoplayRestricted(instanceId, true));\n\t\t}\n    });\n};\n\nconst playerEventsChannel = () => {\n    return eventChannel(emitter => {\n        subscribeToCameraOn(emitter);\n        subscribeToCameraOff(emitter);\n        subscribeToCameraDenied(emitter);\n        subscribeToPlayError(emitter);\n        subscribeToPlayStart(emitter);\n        subscribeToPlayStop(emitter);\n        subscribeToPlayInfo(emitter);\n        subscribeToSendMetrics(emitter);\n        subscribeToVolumeChange(emitter);\n        subscribeToInitiallyMuted(emitter);\n        subscribeToSelectingCameras(emitter);\n\n        return () => {\n            // no need for un-subscribing; saga's live exceeds the app live\n        }\n    });\n};\n\n// Sagas\nconst playerStoppedSaga = function* ({ payload: { instanceId }}: Action<IPayload>) {\n\tconst isPlaying = yield select(selectors.isPlaying, instanceId);\n    if (isPlaying) {\n        yield put(setPlayingStatus(instanceId, false));\n    }\n};\n\nconst noCameraDetectedSaga = function* ({ payload: { instanceId }}: Action<IPayload>) {\n    const translation: ITranslation = yield select(selectors.getTranslation, instanceId);\n\n    yield put(setActionResponse(instanceId, {\n        text: translation.error.noCamera,\n        type: ActionResponseType.ERROR\n    }))\n};\n\nconst lowStreamQualityDetectedSaga = function* ({ payload: { instanceId }}: Action<IPayload>) {\n    const result = yield race({\n        qualityIsStillLow: delay(config.waitUntilReportingBadConnection * 1000),\n        qualityEnhanced: take(takePattern(GOOD_STREAM_QUALITY_DETECTED, instanceId))\n    });\n\n    if (result.qualityIsStillLow) {\n        const translation: ITranslation = yield select(selectors.getTranslation, instanceId);\n\n        yield put(setActionResponse(instanceId, {\n            text: translation.warning.connectionPoor,\n            type: ActionResponseType.WARNING\n        }));\n    }\n};\n\nconst listenForPlayerEventsSaga = function* () {\n    const playerEvents = yield call(playerEventsChannel);\n\n    try {\n        while (true) {\n            const action = yield take(playerEvents);\n            yield put(action);\n        }\n    } finally {\n        // finished\n    }\n};\n\nconst chooseCameraSaga = function* ({ payload}: Action<IPayload>) {\n    const { instanceId, value: cameras} = payload;\n    yield put(resetCam2CamSelectedCamera(instanceId));\n    yield put(setCam2CamCameras(instanceId, cameras));\n    yield put(openChooseCameraPrompt(instanceId));\n};\n\nconst watchSaga = function* () {\n    yield spawn(listenForPlayerEventsSaga);\n    yield takeEvery(PLAYER_STOPPED, playerStoppedSaga);\n    yield takeEvery(NO_CAMERA_DETECTED, noCameraDetectedSaga);\n    yield takeEvery(LOW_STREAM_QUALITY_DETECTED, lowStreamQualityDetectedSaga);\n    yield takeEvery(CHOOSE_CAMERA, chooseCameraSaga);\n};\n\nexport default watchSaga;\n","import * as moment from \"moment\";\nimport { Action } from \"redux-actions\";\nimport { put, race, select, spawn, take, takeEvery } from 'redux-saga/effects';\n\nimport selectors from \"../../redux/selectors\";\nimport { IPayload } from \"../../redux/interfaces\";\nimport { CANCEL_STARTING_VIDEOCHAT_TYPE } from \"./videochat\";\nimport { closeCountdownWarning, openCountdownWarning } from \"../../redux/modules/messenger\";\nimport { setInformation, SET_VIDEOCHAT_TIME_LIMIT, SET_TYPE } from \"../../redux/modules/videochat\";\nimport { CountdownWarningType, VideochatInformationType } from \"../../redux/store\";\nimport {takePattern} from \"../utils\";\n\nexport const videoChatLimitSaga = function* (action: Action<IPayload>) {\n    yield spawn(openLiveChatWarningSaga, action);\n    yield spawn(openLiveChatInformationDialogSaga, action);\n};\n\n/** We receive how many seconds are left in this chat session and, if it's the case, open the dialog */\nconst openLiveChatInformationDialogSaga = function* ({ payload }: Action<IPayload<number>>) {\n    const { instanceId, value } = payload;\n    const {\n        OUT_OF_MONEY, OUT_OF_MONEY_ONE_CLICK_RECHARGE, THANK_YOU, THANK_YOU_ONE_CLICK_RECHARGE\n    }  = VideochatInformationType;\n\n    const isVideoChatInSpendingMode = yield select(selectors.isVideoChatInSpendingMode, instanceId);\n    if (!isVideoChatInSpendingMode) {\n        return;\n    }\n\n    let isOneClickRechargeAvailable: boolean;\n\n    if (value <= 0) {\n        // no time (and implicitly money) left\n        isOneClickRechargeAvailable = yield select(selectors.isOneClickRechargeAvailable, instanceId);\n\n        yield put(setInformation(instanceId,\n            isOneClickRechargeAvailable ? OUT_OF_MONEY_ONE_CLICK_RECHARGE : OUT_OF_MONEY\n        ));\n    } else {\n        const previousTimeLeft = yield select(selectors.getVideoChatPreviousTimeLeft, instanceId);\n\n        if (previousTimeLeft <= 0) {\n            // we can safely assume that a recharge happened after the stream was interrupted for out of money reasons\n            isOneClickRechargeAvailable = yield select(selectors.isOneClickRechargeAvailable,instanceId);\n\n            yield put(setInformation(instanceId,\n                isOneClickRechargeAvailable ? THANK_YOU_ONE_CLICK_RECHARGE : THANK_YOU\n            ));\n        }\n    }\n};\n\nconst openLiveChatWarningSaga = function* ({ payload }: Action<IPayload<number>>) {\n    const { instanceId, value } = payload;\n    const videoChatType = yield select(selectors.getVideoChatType, instanceId);\n\n    // if there is no video chat type set yet, then\n    // wait for the video chat to either start or fail,\n    // otherwise we don't know if we are in spending mode (aka money involved) or not\n    if (!videoChatType) {\n        yield race({\n            success: take(takePattern(SET_TYPE, instanceId)),\n            fail: take(takePattern(CANCEL_STARTING_VIDEOCHAT_TYPE, instanceId))\n        });\n    }\n\n    const isVideoChatInSpendingMode = yield select(selectors.isVideoChatInSpendingMode, instanceId);\n    if (!isVideoChatInSpendingMode) {\n        return;\n    }\n\n    const isTimeLeftBelowThreshold = yield select(selectors.isVideoChatTimeLeftBelowThreshold, instanceId);\n    if (!isTimeLeftBelowThreshold || value <= 0) {\n        const countdownWarning = yield select(selectors.getCountdownWarning, instanceId);\n        if (countdownWarning) {\n            yield put(closeCountdownWarning(instanceId));\n        }\n        return;\n    }\n\n    const firstMoment = moment();\n    const isOneClickRechargeAvailable = yield select(selectors.isOneClickRechargeAvailable, instanceId);\n    const adjustment = moment().diff(firstMoment, 'seconds');\n\n    yield put(openCountdownWarning(instanceId, {\n        time: value - adjustment,\n        type: isOneClickRechargeAvailable\n            ? CountdownWarningType.ONE_CLICK_OUT_OF_BALANCE\n            : CountdownWarningType.OUT_OF_BALANCE\n    }));\n};\n\nconst watchSagas = function* () {\n    yield takeEvery(SET_VIDEOCHAT_TIME_LIMIT, videoChatLimitSaga);\n};\n\nexport default watchSagas;\n","import { isEmpty } from 'lodash';\nimport { Action } from 'redux-actions';\nimport { put, select, takeEvery } from \"redux-saga/effects\";\nimport { ACTION, CMDP_GETONLINESTATE, CMDP_GETONLINESTATE_RESPONSE } from 'vxcontrol-client-lib';\n\nimport utils from \"../../utils\";\nimport { createAction, createActionType } from '../../redux/utils';\nimport { IPayload } from '../../redux/interfaces';\nimport selectors from '../../redux/selectors';\nimport AppService from '../../services/AppService';\nimport ApiService from '../../services/ApiService';\nimport { ISession, VideoChatType } from '../../redux/store';\nimport { setIsOnline, setModelOnlineState } from \"../../redux/modules/model\";\nimport { ActionIds } from '../../redux/interfaces';\n\nconst createOnlineStateActionType = createActionType(ActionIds.ONLINE_STATE, { isSagaAction: true });\n\n// Actions\nconst REQUEST_ONLINE_STATE = createOnlineStateActionType(\"REQUEST_ONLINE_STATE\");\nexport const RECEIVE_ONLINE_STATE = createOnlineStateActionType(\"RECEIVE_ONLINE_STATE\");\n\n// Action Creators\nconst requestOnlineState = createAction(REQUEST_ONLINE_STATE);\nconst onReceiveOnlineState = createAction<CMDP_GETONLINESTATE_RESPONSE>(RECEIVE_ONLINE_STATE);\n\n// Sagas\n/** Saga for sending the online state request */\nconst requestOnlineStateSaga = function* ({ payload: { instanceId }}: Action<IPayload>) {\n    const session: ISession = yield select(selectors.getSession, instanceId);\n    const { channelId, sessionID } = session;\n\n    const command: CMDP_GETONLINESTATE = {\n        action: ACTION.CMDP_GETONLINESTATE,\n        params: {\n            channelId,\n            sessionID\n        }\n    };\n\n    ApiService.getService(instanceId).sendCommand(command);\n};\n\n/**\n * Saga to deal with the model's online state we get from the backend\n */\nconst receiveOnlineStateSaga = function* ({ payload }: Action<IPayload<CMDP_GETONLINESTATE_RESPONSE>>) {\n    const { instanceId, value: response } = payload;\n\n    if (isEmpty(response) || isEmpty(response.commands)) {\n        return;\n    }\n\n    const { commands } = response;\n\n    const onlineStateCommand = commands.find(command => command.action === ACTION.CMDC_ONLINESTATE);\n    if (!onlineStateCommand || isEmpty(onlineStateCommand.params)) {\n        return;\n    }\n\n    // We compare the supported streams by the model and if they have\n    // been updated, we call the parent platform hook for notification\n    const onlineState = utils.getOnlineStateFromResponseParams(onlineStateCommand.params);\n    if (isEmpty(onlineState)) {\n        return;\n    }\n\n    const { supportsChat, supportsPreviewChat, supportsVoyeurChat } = onlineState;\n\n    const isModelSupportingChat = yield select(selectors.isModelSupportingChat, instanceId);\n    const isModelSupportingPreviewChat = yield select(selectors.isModelSupportingPreviewChat, instanceId);\n    const isModelSupportingVoyeurChat = yield select(selectors.isModelSupportingVoyeurChat, instanceId);\n\n    const hasChatSupportChanged = isModelSupportingChat !== supportsChat;\n    const hasPreviewSupportChanged = isModelSupportingPreviewChat !== supportsPreviewChat;\n    const hasVoyeurSupportChanged = isModelSupportingVoyeurChat !== supportsVoyeurChat;\n\n    if (hasChatSupportChanged || hasPreviewSupportChanged || hasVoyeurSupportChanged) {\n        const videoChatTypes: VideoChatType[] = [];\n\n        if (supportsChat) {\n            videoChatTypes.push(VideoChatType.LIVECHAT);\n        }\n\n        if (supportsPreviewChat) {\n            videoChatTypes.push(VideoChatType.LIVE_PREVIEW);\n        }\n\n        if (supportsVoyeurChat) {\n            videoChatTypes.push(VideoChatType.VOYEUR_CHAT);\n        }\n\n        AppService.getService(instanceId).onSupportedVideoChatTypes(videoChatTypes);\n    }\n\n    // We use JSON parse to convert 'true/false' string to boolean value\n    try {\n        const isOnline: boolean = JSON.parse(onlineStateCommand.params.online) || false;\n        yield put(setModelOnlineState(instanceId, onlineState));\n        yield put(setIsOnline(instanceId, isOnline));\n    } catch {}\n};\n\nconst watchSagas = function* () {\n    yield takeEvery(REQUEST_ONLINE_STATE, requestOnlineStateSaga);\n    yield takeEvery(RECEIVE_ONLINE_STATE, receiveOnlineStateSaga);\n};\n\nexport { requestOnlineState, onReceiveOnlineState, requestOnlineStateSaga, receiveOnlineStateSaga };\nexport default watchSagas;\n","import { isEmpty, get } from 'lodash';\nimport { Action } from 'redux-actions';\nimport { put, select, takeEvery } from \"redux-saga/effects\";\nimport { ACTION, CMDP_LOGIN_RESPONSE, ICOMMAND, SupportedLanguage } from 'vxcontrol-client-lib';\n\nimport types from \"./types\";\nimport config from '../../static/config';\nimport { ActionIds } from '../../redux/interfaces';\nimport { createAction, createActionType } from '../../redux/utils';\nimport { IPayload } from '../../redux/interfaces';\nimport selectors from '../../redux/selectors';\nimport ApiService from '../../services/ApiService';\nimport { setIsVip } from \"../../redux/modules/user\";\nimport {\n    initializeQuantitiesToInventoryGifts,\n    setAutoRecharge,\n    setChatFeatures,\n    setFreePlatformMessages,\n    setOneClickRecharge,\n    setSession\n} from '../../redux/modules/session';\n\nconst createLoginActionType = createActionType(ActionIds.LOGIN, { isSagaAction: true });\n\n// Actions\nconst REQUEST_LOGIN = createLoginActionType(\"REQUEST_LOGIN\");\nexport const RECEIVE_LOGIN = createLoginActionType(\"RECEIVE_LOGIN\");\n\n// Action Creators\nexport const requestLogin = createAction<string>(REQUEST_LOGIN);\nexport const onReceiveLogin = createAction<CMDP_LOGIN_RESPONSE>(RECEIVE_LOGIN);\n\n/** Receives user's webtoken through which the login session will be created */\nexport const requestLoginSaga = function* ({ payload }: Action<IPayload<string>>) {\n    const { instanceId, value: webtoken } = payload;\n\n    const language: SupportedLanguage = yield select(selectors.getLanguage, instanceId);\n    const usrKey: string = yield select(selectors.getUserKey, instanceId) || config.defaultUserKey;\n\n    const service = ApiService.getService(instanceId);\n    service.closeConnection();\n    service.connect(webtoken, language);\n\n    /** Send the login request afterwards */\n    const command: ICOMMAND = {\n        action: ACTION.CMDP_LOGIN,\n        params: {\n            webtoken,\n            usrKey\n        }\n    };\n\n    service.sendCommand(command);\n};\n\n/**\n * If login is successful, it saves the sessionID nad inventory gifts in the Redux store.\n * Afterwards, it starts the NOOP heartbeat communication.\n */\nexport const receiveLoginSaga = function* ({ payload }: Action<IPayload<CMDP_LOGIN_RESPONSE>>) {\n    const { instanceId, value } = payload;\n\n    if (!value || !value.payload) {\n        return;\n\t}\n\n    if (!isEmpty(get(value, \"values.sessionID\"))) {\n        yield put(setSession(instanceId, value.values.sessionID));\n    }\n\n    const guest = value.payload.guest as types.ILoginGuestResponse;\n    if (isEmpty(guest)) {\n        return;\n    }\n\n    yield put(setIsVip(instanceId, guest.vip || false));\n    yield put(setFreePlatformMessages(instanceId, guest.messages.freeCount || 0));\n\n    if (!isEmpty(guest.boughtMessengerGifts)) {\n        yield put(initializeQuantitiesToInventoryGifts(instanceId, guest.boughtMessengerGifts));\n    }\n\n    const { autoRecharge, chatFeatures, oneClickRecharge} = guest;\n\n    if (!isEmpty(autoRecharge)) {\n        yield put(setAutoRecharge(instanceId, autoRecharge));\n    }\n\n    if (!isEmpty(chatFeatures)) {\n        yield put(setChatFeatures(instanceId, chatFeatures));\n    }\n\n    if (!isEmpty(oneClickRecharge)) {\n        yield put(setOneClickRecharge(instanceId, oneClickRecharge));\n    }\n};\n\nconst watchSagas = function* () {\n    yield takeEvery(REQUEST_LOGIN, requestLoginSaga);\n    yield takeEvery(RECEIVE_LOGIN, receiveLoginSaga);\n};\n\nexport default watchSagas;\n","import { isEmpty, get } from 'lodash';\nimport { Action } from 'redux-actions';\nimport { put, select, takeEvery } from \"redux-saga/effects\";\nimport { CMDP_NEWCHANNEL, ACTION, CMDP_NEWCHANNEL_RESPONSE } from 'vxcontrol-client-lib';\n\nimport { createAction, createActionType } from '../../redux/utils';\nimport { IPayload } from '../../redux/interfaces';\nimport { IPartner } from '../../redux/store';\nimport selectors from '../../redux/selectors';\nimport ApiService from '../../services/ApiService';\nimport { setChannel } from '../../redux/modules/session';\nimport { ActionIds } from '../../redux/interfaces';\n\nconst createNewChannelActionType = createActionType(ActionIds.NEW_CHANNEL, { isSagaAction: true });\n\n// Actions\nconst REQUEST_NEW_CHANNEL = createNewChannelActionType(\"REQUEST_NEW_CHANNEL\");\nconst RECEIVE_NEW_CHANNEL = createNewChannelActionType(\"RECEIVE_NEW_CHANNEL\");\n\n// Action Creators\nexport const requestNewChannel = createAction(REQUEST_NEW_CHANNEL);\nexport const onReceiveNewChannel = createAction<CMDP_NEWCHANNEL_RESPONSE>(RECEIVE_NEW_CHANNEL);\n\n// Sagas\n/** Sends through websocket the data for creating a new channel */\nexport const requestNewChannelSaga = function*({ payload: { instanceId }}: Action<IPayload>) {\n    const sessionID = yield select(selectors.getSessionId, instanceId);\n    const partner: IPartner = yield select(selectors.getPartner, instanceId);\n\n    const command: CMDP_NEWCHANNEL = {\n        action: ACTION.CMDP_NEWCHANNEL,\n        params: {\n            sessionID,\n            partnerId: partner.id,\n            partnerKey: partner.key\n        }\n    };\n\n    ApiService.getService(instanceId).sendCommand(command);\n};\n\n/** If creating a new channel is successful, save the channelId into the Redux store */\nexport const receiveNewChannelSaga = function* ({ payload }: Action<IPayload<CMDP_NEWCHANNEL_RESPONSE>>) {\n    const { instanceId, value: response } = payload;\n\n    if (isEmpty(get(response, \"values.channelId\"))) {\n        return;\n    }\n\n    yield put(setChannel(instanceId, response.values.channelId));\n};\n\nconst watchSagas = function*() {\n    yield takeEvery(REQUEST_NEW_CHANNEL, requestNewChannelSaga);\n    yield takeEvery(RECEIVE_NEW_CHANNEL, receiveNewChannelSaga);\n};\n\nexport default watchSagas;\n","import { Action } from 'redux-actions';\nimport { filter, find, isEmpty } from 'lodash';\nimport { put, select, take, takeEvery } from 'redux-saga/effects';\nimport {\n    ACTION,\n    CMDC_CHANNEL,\n    CMDP_CHANNELSEEN,\n    CMDP_GETCHANNELS,\n    CMDP_GETCHANNELS_RESPONSE,\n\tEnumSortOrder\n} from 'vxcontrol-client-lib';\n\nimport { requestHistory } from './history';\nimport { createAction, createActionType } from '../../redux/utils';\nimport { IPayload } from '../../redux/interfaces';\nimport selectors from '../../redux/selectors';\nimport { requestNewChannel } from './newChannel';\nimport { requestOnlineState } from \"./onlineState\";\nimport ApiService from '../../services/ApiService';\nimport { requestGetChannelInfo } from './channelInfo';\nimport { MessageDirection, IMessage, IPartner } from '../../redux/store';\nimport { setChannel, SET_CHANNEL } from '../../redux/modules/session';\nimport { ADD_MESSAGE, INSERT_ALL_MESSAGES } from '../../redux/modules/messenger';\nimport { ActionIds } from '../../redux/interfaces';\nimport { takePattern } from '../utils';\n\nconst createChannelActionType = createActionType(ActionIds.CHANNEL, { isSagaAction: true });\n\n// Actions\nconst REQUEST_CHANNEL = createChannelActionType(\"REQUEST_CHANNEL\");\nexport const RECEIVE_CHANNELS = createChannelActionType(\"RECEIVE_CHANNELS\");\n\nconst RECEIVE_CHANNEL_UPDATE = createChannelActionType(\"RECEIVE_CHANNEL_UPDATE\");\nconst REQUEST_CHANNEL_SEEN = createChannelActionType(\"REQUEST_CHANNEL_SEEN\");\n\n// Action Creators\nexport const requestChannel = createAction(REQUEST_CHANNEL);\nexport const onReceiveChannels = createAction<CMDP_GETCHANNELS_RESPONSE>(RECEIVE_CHANNELS);\nexport const receiveChannelUpdate = createAction<CMDC_CHANNEL>(RECEIVE_CHANNEL_UPDATE);\nexport const requestChannelSeen = createAction<string>(REQUEST_CHANNEL_SEEN);\n\n/**\n * It takes the sessionID from the store and sends the data\n * for receiving a certain partner's channel of communication.\n */\nexport const requestChannelSaga = function* ({ payload: { instanceId }}: Action<IPayload>) {\n    const sessionID = yield select(selectors.getSessionId, instanceId);\n    const partner: IPartner = yield select(selectors.getPartner, instanceId);\n\n    const command: CMDP_GETCHANNELS = {\n        action: ACTION.CMDP_GETCHANNELS,\n        params: {\n            sessionID,\n            partnerId: partner.id,\n            partnerKey: partner.key,\n            sort: EnumSortOrder.ASC\n        }\n    };\n\n    ApiService.getService(instanceId).sendCommand(command);\n};\n\n/**\n * When starting the conversation with the model, if there is no channel configured for her,\n * we should add a new one by calling the newChannelSaga, which will save the\n * new channelId in the store. If there is already a channel for that partner,\n * just save the channelId in the store.\n */\nconst receiveChannelSaga = function* ({ payload }: Action<IPayload<CMDP_GETCHANNELS_RESPONSE>>) {\n\tconst { instanceId, value: response } = payload;\n\tconst currentChannelId = yield select(selectors.getChannelId, instanceId);\n\n    if (currentChannelId) {\n        return;\n\t}\n\n\tconst channelCommand = find(response.commands, command => command.action === ACTION.CMDC_CHANNEL);\n\t\n    /** Set the channelId in the Redux store */\n    if (channelCommand && channelCommand.params) {\n        const { channelId } = channelCommand.params;\n\n        if (!isEmpty(channelId)) {\n            yield put(setChannel(instanceId, channelId));\n        }\n\n        /** Get the history messages for the obtained channel */\n        const isFullscreen = yield select(selectors.isFullScreen, instanceId);\n        if (!isFullscreen) {\n            yield put(requestHistory(instanceId));\n        }\n    } else {\n        yield put(requestNewChannel(instanceId));\n\n        /** We block our saga until we have the channelId in our Redux store */\n        yield take(takePattern(SET_CHANNEL, instanceId));\n    }\n\n    /** Get the channel info */\n    yield put(requestGetChannelInfo(instanceId));\n\n    /** Get the online state for the model */\n    yield put(requestOnlineState(instanceId));\n}\n\n/**\n * Set the model's message as seen (read) by the client\n * @param action\n */\nconst requestChannelSeenSaga = function* ({ payload }: Action<IPayload<string>>) {\n    const { instanceId, value } = payload;\n    const channelId: string = yield select(selectors.getChannelId, instanceId);\n\n    const command: CMDP_CHANNELSEEN = {\n        action: ACTION.CMDP_CHANNELSEEN,\n        params: {\n            channelId,\n            messageId: value\n        }\n    };\n\n    ApiService.getService(instanceId).sendCommand(command);\n};\n\n/**\n * Set all model's messages as seen (read) by the client when opening the messenger\n */\nconst readModelMessagesSaga = function* ({ payload, type }: Action<IPayload<IMessage | IMessage[]>>) {\n    const { instanceId, value } = payload;\n    const isOpen = yield select(selectors.isOpen, instanceId);\n    const isChatExternallyProvided = yield select(selectors.isChatExternallyProvided, instanceId);\n\n    // Do not send message seen request if we don't have the vxcontrol api\n    if (isChatExternallyProvided) {\n        return;\n    }\n\n    if (isOpen) {\n        switch (type) {\n            // If the messenger is open and we receive a message from the model,\n            // we consider it to be seen by the client.\n            case ADD_MESSAGE:\n                const message = value as IMessage;\n\n                if (message && message.id && message.direction === MessageDirection.in) {\n                    yield put(requestChannelSeen(instanceId, message.id));\n                }\n                break;\n\n            // If the messenger is open and we insert all the history messages\n            // in our store, we consider all model's messages as seen by our client.\n            case INSERT_ALL_MESSAGES:\n                const messages = value as IMessage[];\n                const messagesFromModel = filter(messages, (m) => m.direction === MessageDirection.in);\n\n                let messageFromModel: IMessage;\n                for (messageFromModel of messagesFromModel) {\n                    yield put(requestChannelSeen(instanceId, messageFromModel.id));\n                }\n                break;\n        }\n    }\n};\n\nconst watchSagas = function* () {\n\tyield takeEvery(REQUEST_CHANNEL, requestChannelSaga);\n\tyield takeEvery(REQUEST_CHANNEL_SEEN, requestChannelSeenSaga);\n\tyield takeEvery(RECEIVE_CHANNELS, receiveChannelSaga);\n\n    yield takeEvery(ADD_MESSAGE, readModelMessagesSaga);\n    yield takeEvery(INSERT_ALL_MESSAGES, readModelMessagesSaga);\n\n};\n\nexport default watchSagas;\n","import { isEmpty } from \"lodash\";\nimport { Action } from \"redux-actions\";\nimport { all, call, put, race, select, take, takeEvery, delay } from \"redux-saga/effects\";\n\nimport selectors from \"../../redux/selectors\";\nimport constants from \"../../static/constants\";\nimport { startVideoChatType } from \"./videochat\";\nimport ApiService from \"../../services/ApiService\";\nimport { createAction } from \"../../redux/utils\";\nimport { IPayload } from \"../../redux/interfaces\";\nimport { RECEIVE_ERROR } from \"../websockets/handleError\";\nimport { resendFailedMessages } from \"../websockets/message\";\nimport AnalyticsService from \"../../services/AnalyticsService\";\nimport { RECEIVE_ONLINE_STATE } from \"../websockets/onlineState\";\nimport { RECEIVE_LOGIN, requestLogin } from \"../websockets/login\";\nimport { resetModel, SET_MODEL_ONLINE_STATE, SET_PARTNER } from \"../../redux/modules/model\";\nimport { RECEIVE_GET_CHANNEL_INFO } from \"../websockets/channelInfo\";\nimport { SET_LANGUAGE, SET_USER_KEY } from \"../../redux/modules/user\";\nimport { RECEIVE_CHANNELS, requestChannel } from \"../websockets/channel\";\nimport { openVideochat, SET_INITIAL_VIDEOCHAT_TYPE } from \"../../redux/modules/videochat\";\nimport { resetChannel, SET_CHANNEL, SET_SESSION, SET_WEBTOKEN } from \"../../redux/modules/session\";\nimport { ActionResponseType, IChat, IErrorTranslation, LoadingStatus, IPartner, VideoChatType, IOptions } from \"../../redux/store\";\nimport {\n    OPEN_MESSENGER,\n    removeAllMessages,\n    setActionResponse,\n    setMessengerLoadingStatus,\n    setShouldResendFailedMessages,\n\tresetEditorState\n} from \"../../redux/modules/messenger\";\nimport { takePattern } from \"../utils\";\nimport { SET_OPTIONS } from \"../../redux/modules/options\";\n\n/**\n * we are assuming that user key will be set\n * only when different than its store's counterpart\n */\nconst setUserKeySaga = function* ({ payload: { instanceId } }: Action<IPayload>) {\n    const webToken = yield select(selectors.getWebtoken, instanceId);\n    const language = yield select(selectors.getLanguage, instanceId);\n\n    // means that we were already logged in\n    if (webToken && language) {\n        // now we should re-login, with the newer user key\n        yield call(setWebTokenSaga, createAction(\"CALL_SET_WEBTOKEN_SAGA\")(instanceId));\n    }\n};\n\n/**\n * we are assuming that language will be set\n * only when different than its store's counterpart\n */\nconst setLanguageSaga = function* ({ payload: { instanceId } }: Action<IPayload>) {\n    const language = yield select(selectors.getLanguage, instanceId);\n    ApiService.getService(instanceId).updateLanguage(language);\n\n    const webToken = yield select(selectors.getWebtoken, instanceId);\n    const userKey = yield select(selectors.getUserKey, instanceId);\n\n    if (webToken && userKey) {\n        // means that we were already logged in, but\n        // now we should re-login, with the newer language\n        yield call(setWebTokenSaga, createAction(\"CALL_SET_WEBTOKEN_SAGA\")(instanceId));\n    }\n};\n\n/**\n * we are assuming that web token will be set\n * only when different than its store's counterpart\n */\nconst setWebTokenSaga = function* ({ payload: { instanceId }}: Action<IPayload>) {\n    // Mark messenger's loading status\n    yield put(setMessengerLoadingStatus(instanceId, LoadingStatus.LOADING));\n\n    const webToken = yield select(selectors.getWebtoken, instanceId);\n    yield put(requestLogin(instanceId, webToken));\n};\n\n/**\n * we are assuming that the partner will be set\n * only when different than its store's counterpart\n * @param action\n */\nexport const setPartnerSaga = function* ({ payload: { instanceId } }: Action<IPayload>) {\n    // Execute the logic for setting the partner only if we had\n    // a successful login response from the back-end\n    const sessionId = yield select(selectors.getSessionId, instanceId);\n\n    if (!sessionId) {\n        const loginResult = yield race({\n            login: take(takePattern(RECEIVE_LOGIN, instanceId)),\n            error: take(takePattern(RECEIVE_ERROR, instanceId))\n        });\n\n        if (!loginResult.login) {\n            return;\n        }\n    }\n\n    yield put(removeAllMessages(instanceId));\n\tyield put(resetEditorState(instanceId));\n\n    // We need to reset the existing channel, otherwise the subsequent\n    // requestChannel / receiveChannel won't do a thing\n    yield put(resetChannel(instanceId));\n    yield put(resetModel(instanceId));\n\n    const partner: IPartner = yield select(selectors.getPartner, instanceId);\n    if (!partner) {\n        return;\n    }\n\n    const messengerLoadingStatus = yield select(selectors.getMessengerLoadingStatus, instanceId);\n    // mark messenger's loading status\n    if (messengerLoadingStatus !== LoadingStatus.LOADING) {\n        yield put(setMessengerLoadingStatus(instanceId, LoadingStatus.LOADING));\n    }\n\n    const sessionID = yield select(selectors.getSessionId, instanceId);\n    // We wait for the RECEIVE_LOGIN if we don't have the sessionID yet\n    if (!sessionID) {\n        const { timeout } = yield race({\n            response: take(takePattern(SET_SESSION, instanceId)),\n            timeout: delay(constants.loginWaitingTime)\n        });\n\n        if (timeout) {\n            yield put(setMessengerLoadingStatus(instanceId, LoadingStatus.NONE));\n\n            const errorTranslations: IErrorTranslation = yield select(\n                selectors.getTranslationForErrors,\n                instanceId\n            );\n\n            yield put(setActionResponse(instanceId, {\n                text: errorTranslations.initFail,\n                type: ActionResponseType.ERROR\n            }));\n\n            return;\n        }\n    }\n\n    yield put(requestChannel(instanceId));\n\n    const { success } = yield race({\n        success: all([\n            take(takePattern(RECEIVE_CHANNELS, instanceId)),\n            take(takePattern(RECEIVE_GET_CHANNEL_INFO, instanceId)),\n            take(takePattern(RECEIVE_ONLINE_STATE, instanceId))\n        ]),\n        error: take(takePattern(RECEIVE_ERROR, instanceId))\n    });\n\n    const { ERROR, SUCCESS } = LoadingStatus;\n    yield put(setMessengerLoadingStatus(instanceId, success ? SUCCESS : ERROR));\n\n    const shouldResendFailedMessages = yield select(selectors.shouldResendFailedMessages, instanceId);\n    if (success && shouldResendFailedMessages) {\n        yield put(setShouldResendFailedMessages(instanceId, false));\n        yield put(resendFailedMessages(instanceId));\n    }\n};\n\nexport const setInitialVideoChatTypeSaga = function* ({ payload }: Action<IPayload<VideoChatType>>) {\n    const { instanceId, value } = payload;\n\n    // check if the messenger is already open; if not, wait for it to be opened\n    const isOpen = yield select(selectors.isOpen, instanceId);\n    if (!isOpen) {\n        yield take(takePattern(OPEN_MESSENGER, instanceId));\n    }\n\n    yield put(openVideochat(instanceId));\n\n    const chat: IChat = yield select(selectors.getChat, instanceId);\n\n    if (!chat || !chat.clientId || !chat.server) {\n        // should wait for the web token based init flow to be ended\n        const channelId = yield select(selectors.getChannelId, instanceId);\n        if (!channelId) {\n            yield take(takePattern(SET_CHANNEL, instanceId));\n        }\n\n        const sessionId = yield select(selectors.getSessionId, instanceId);\n        if (!sessionId) {\n            yield take(takePattern(SET_SESSION, instanceId));\n        }\n\n        const onlineState = yield select(selectors.getOnlineState, instanceId);\n        if (!onlineState) {\n            yield take(SET_MODEL_ONLINE_STATE);\n        }\n    }\n\n    yield put(startVideoChatType(instanceId, value));\n};\n\nconst initializeGoogleAnalyticsSaga = function*({ payload: { value }}: Action<IPayload<IOptions>>) {\n    if (!isEmpty(value.analyticsKey)) {\n        AnalyticsService.initialize(value.analyticsKey as string);\n    }\n}\n\nconst watchSagas = function* () {\n    yield takeEvery(SET_USER_KEY, setUserKeySaga);\n    yield takeEvery(SET_WEBTOKEN, setWebTokenSaga);\n    yield takeEvery(SET_PARTNER, setPartnerSaga);\n    yield takeEvery(SET_LANGUAGE, setLanguageSaga);\n    yield takeEvery(SET_OPTIONS, initializeGoogleAnalyticsSaga);\n    yield takeEvery(SET_INITIAL_VIDEOCHAT_TYPE, setInitialVideoChatTypeSaga);\n};\n\nexport default watchSagas;\n","import { takeEvery } from \"redux-saga/effects\";\nimport { SET_PREFERENCE } from \"../../redux/modules/user\";\nimport { Action } from \"redux-actions\";\nimport { IPayload } from \"../../redux\";\nimport { IPreferenceActionPayload } from \"../../redux/interfaces\";\nimport AppService from \"../../services/AppService\";\n\nexport const setPreferenceSaga = function* ({ payload: { instanceId, value } }: Action<IPayload<IPreferenceActionPayload>>) {\n\tconst { preferenceName, value: preferenceValue} = value;\n\tconst appService = AppService.getService(instanceId);\n\n\tappService.preferenceStore.setPreference(\n\t\tpreferenceName,\n\t\tpreferenceValue,\n\t\tinstanceId\n\t);\n};\n\nconst watchSagas = function* () {\n\tyield takeEvery(SET_PREFERENCE, setPreferenceSaga);\n};\n\nexport default watchSagas;\n","import { all } from 'redux-saga/effects';\nimport chatEventsSagas from './chatEvents';\nimport closeAppSagas from './close';\nimport errorsSagas from './errors';\nimport playerEventsSagas from './playerEvents';\nimport rechargeSagas from './recharge';\nimport timeLimitsSagas from './timeLimits';\nimport uiSagas from './ui';\nimport startSagas from './start';\nimport userPromptSagas from './userPrompt';\nimport videoChatSagas from './videochat';\nimport cam2CamSagas from './videochat/cam2Cam';\nimport preferencesSagas from './preferences';\n\n\n/**\n * Combines all the listening sagas and\n * it represents the entire middleware.\n */\nexport default function* rootSaga() {\n    yield all([\n        uiSagas(),\n        startSagas(),\n        userPromptSagas(),\n        timeLimitsSagas(),\n        rechargeSagas(),\n        videoChatSagas(),\n        cam2CamSagas(),\n        errorsSagas(),\n        chatEventsSagas(),\n        playerEventsSagas(),\n        closeAppSagas(),\n\t\tpreferencesSagas()\n    ]);\n}\n","import {Action, createAction} from \"redux-actions\";\nimport { eventChannel } from \"redux-saga\";\nimport {call, put, select, spawn, take, takeEvery} from \"redux-saga/effects\";\nimport { isIE } from \"react-device-detect\";\n\nimport config from \"../../static/config\";\nimport selectors from '../../redux/selectors';\nimport {ActionIds} from \"../../redux/interfaces\";\nimport { IPayload } from '../../redux/interfaces';\nimport { createActionType } from '../../redux/utils';\nimport { requestHistory } from '../websockets/history';\nimport { screenfull } from '../../utils';\nimport { closeFullscreen, CLOSE_FULLSCREEN, openFullscreen } from \"../../redux/modules/videochat\";\n\nconst createFullscreenActionType = createActionType(ActionIds.FULLSCREEN, { isSagaAction: true });\n\n// Actions\nconst FULLSCREEN_CHANGED = createFullscreenActionType(\"FULLSCREEN_CHANGED\");\n\n// Action Creators\nconst fullscreenChanged = createAction<HTMLElement>(FULLSCREEN_CHANGED);\n\nconst fullscreenChangedSaga = function* (action: Action<HTMLElement>) {\n\t// IE-SPECIFIC: using a different property to retrieve the element before\n\t// going fullscreen on any IE browser.\n    const element: HTMLElement | null = isIE\n        ? (document as any).msFullscreenElement\n        : action.payload;\n\n    let instanceId: string | null;\n\n    if (element && element.getAttribute) {\n        instanceId = element.getAttribute(config.messengerInstanceIdAttribute);\n    }  else {\n        // we don't know what was the HTML element going on/ off full screen;\n        // try to take instanceId from the store, if we already have one instance in full screen\n        instanceId = yield select(selectors.getFullScreenInstance);\n    }\n\n    if (instanceId) {\n        yield put(\n\t\t\tscreenfull.isFullscreen()\n\t\t\t\t? openFullscreen(instanceId)\n\t\t\t\t: closeFullscreen(instanceId)\n\t\t)\n    }\n};\n\nexport const closeFullScreenSaga = function* ({ payload: { instanceId }}: Action<IPayload>) {\n    // We need to request history because it gets erased on openFullscreen action\n\tyield put(requestHistory(instanceId));\n\tscreenfull.exit();\n};\n\nconst subscribeToScreenfullChange = emitter => {\n\tscreenfull.onChange((args: any) => {\n\t\temitter(fullscreenChanged(args.target));\n\t});\n};\n\nconst screenfullEventsChannel = () => {\n    return eventChannel(emitter => {\n        subscribeToScreenfullChange(emitter);\n\n        return () => {\n            // TODO unsubscribe function\n        }\n    });\n};\n\nconst screenfullEventsListenerSaga = function* () {\n    const screenFullEvents = yield call(screenfullEventsChannel);\n    try {\n        while (true) {\n            const action = yield take(screenFullEvents);\n            yield put(action);\n        }\n    } finally {\n        // finished\n    }\n};\n\nconst watchSagas = function* () {\n    yield takeEvery(CLOSE_FULLSCREEN, closeFullScreenSaga);\n    yield takeEvery(FULLSCREEN_CHANGED, fullscreenChangedSaga);\n\n    yield spawn(screenfullEventsListenerSaga);\n};\n\nexport default watchSagas;\n","import { get } from 'lodash';\nimport { eventChannel } from \"redux-saga\";\nimport {call, put, select, spawn, take, takeEvery} from \"redux-saga/effects\";\nimport { AnyAction } from \"redux\";\nimport { createAction } from \"redux-actions\";\n\nimport selectors from '../../redux/selectors';\nimport { setUserOnlineState } from \"../../redux/modules/user\";\nimport { createActionType } from \"../../redux/utils\";\nimport { ActionIds } from \"../../redux/interfaces\";\n\nconst createUserEventsActionType = createActionType(ActionIds.USER_EVENTS, { isSagaAction: true });\n\n// Actions\nconst SET_USER_ONLINE_STATE_4_ALL_INSTANCES = createUserEventsActionType(\"SET_USER_ONLINE_STATE_4_ALL_INSTANCES\");\n\n// Action Creators\nconst setUserOnlineState4AllInstances = createAction<boolean>(SET_USER_ONLINE_STATE_4_ALL_INSTANCES);\n\nconst windowEventsChannel = () => {\n    return eventChannel(emitter => {\n\n        window.addEventListener('offline', () => {\n            emitter(setUserOnlineState4AllInstances(false));\n        });\n        window.addEventListener('online', () => {\n            emitter(setUserOnlineState4AllInstances(true));\n        });\n\n        return () => {\n            // no need for un-subscribing; saga's live exceeds the app live\n        }\n    });\n};\n\nconst windowEventsListenerSaga = function*() {\n    const onlineStatus = get(navigator, 'onLine', true);\n    yield put(setUserOnlineState4AllInstances(onlineStatus));\n\n    const windowEvents = yield call(windowEventsChannel);\n\n    try {\n        while (true) {\n            const action = yield take(windowEvents);\n            yield put(action);\n        }\n    } finally {\n        // finished\n    }\n};\n\nconst allInstancesOnlineStateSaga = function* (action: AnyAction) {\n    const onlineStatus: boolean = action.payload;\n\n    const instanceIds: string[] = yield select(selectors.getInstanceIds);\n    for (const instanceId of instanceIds) {\n        yield put(setUserOnlineState(instanceId, onlineStatus));\n    }\n};\n\nconst watchSagas = function* () {\n    yield spawn(windowEventsListenerSaga);\n    yield takeEvery(SET_USER_ONLINE_STATE_4_ALL_INSTANCES, allInstancesOnlineStateSaga);\n};\n\nexport default watchSagas;\n","import { all } from 'redux-saga/effects';\nimport chatSagas from \"./chat\";\nimport fullScreenSagas from \"./fullscreen\";\nimport userEventsSagas from \"./userEvents\";\nimport analyticsSagas from \"./analytics\";\n\n/**\n * Combines all the listening sagas and\n * it represents the entire middleware.\n */\nexport default function* rootSaga() {\n    yield all([\n        chatSagas(),\n        fullScreenSagas(),\n        userEventsSagas(),\n        analyticsSagas()\n    ]);\n}","import {isEmpty, sortBy} from 'lodash';\nimport { Action } from 'redux-actions';\nimport {put, takeEvery, select} from \"redux-saga/effects\";\nimport {CMDP_INIT_RESPONSE, ICOMMAND, ACTION, SupportedLanguage } from 'vxcontrol-client-lib';\n\nimport selectors from '../../redux/selectors';\nimport { ActionIds } from '../../redux/interfaces';\nimport ApiService from '../../services/ApiService';\nimport { createAction, createActionType } from '../../redux/utils';\nimport { IPayload } from '../../redux/interfaces';\nimport { setTranslations } from '../../redux/modules/user';\nimport {creditsDeprecatedName} from \"../../static/constants/constants\";\nimport {setEmoticons, setToyOptions} from \"../../redux/modules/messenger\";\nimport {\n    setCurrency,\n    setGiftBundles,\n    setGiftCategories,\n    setGifts,\n    setUploadMediaUrl\n} from '../../redux/modules/session';\nimport {\n    CurrencyName,\n    IBundle,\n    ICurrency,\n    IEmoticon,\n    IGift,\n    IGiftCategory,\n    IToyOption\n} from '../../redux/store';\n\nconst createInitActionType = createActionType(ActionIds.INIT, { isSagaAction: true });\n\n// Actions\nexport const REQUEST_INIT = createInitActionType(\"REQUEST_INIT\");\nexport const RECEIVE_INIT = createInitActionType(\"RECEIVE_INIT\");\n\n// Action Creators\nexport const requestInit = createAction(REQUEST_INIT);\nconst onReceiveInit = createAction<CMDP_INIT_RESPONSE>(RECEIVE_INIT);\n\n/** Saga for sending the init request */\nconst requestInitSaga = function*({ payload: { instanceId }}: Action<IPayload>) {\n    const language: SupportedLanguage = yield select(selectors.getLanguage, instanceId);\n    const webtoken: string = yield select(selectors.getWebtoken, instanceId);\n\n    const command: ICOMMAND = {\n        action: ACTION.CMDP_INIT,\n        params: {\n            initData: 'vxmessenger',\n            language,\n            webtoken\n        }\n    };\n\n    const service = ApiService.getService(instanceId);\n    service.connect(webtoken, language);\n    service.sendCommand(command);\n};\n\n/** We receive the default gifts and the gift categories in which the gifts are organized */\nconst receiveInitSaga = function*({ payload }: Action<IPayload<CMDP_INIT_RESPONSE>>) {\n\tconst { instanceId, value } = payload;\n\n    if (value && value.values) {\n        const { uploadMediaUrl, translations } = value.values;\n\n        if (!isEmpty(translations)) {\n            yield put(setTranslations(instanceId, JSON.parse(translations as string)));\n        }\n        if (!isEmpty(uploadMediaUrl)) {\n            yield put(setUploadMediaUrl(instanceId, uploadMediaUrl));\n        }\n    }\n\n    if (value && value.payload) {\n\n\t\tlet { giftBundles } = value.payload;\n        if (!isEmpty(giftBundles)) {\n            giftBundles = giftBundles as IBundle[];\n            giftBundles = sortBy(giftBundles, (giftBundle: IBundle) => giftBundle.id);\n            yield put(setGiftBundles(instanceId, giftBundles));\n        }\n\n        let { giftCategories } = value.payload;\n        if (!isEmpty(giftCategories)) {\n            giftCategories = giftCategories as IGiftCategory[];\n            giftCategories = sortBy(giftCategories, (category: IGiftCategory) => category.id);\n            yield put(setGiftCategories(instanceId, giftCategories));\n        }\n\n        /** We only take the active gifts */\n        const { gifts } = value.payload;\n        if (!isEmpty(gifts)) {\n            yield put(setGifts(instanceId, gifts as IGift[]));\n        }\n\n        const { emoticons } = value.payload;\n        if (!isEmpty(emoticons)) {\n            yield put(setEmoticons(instanceId, emoticons as IEmoticon[]));\n        }\n\n        const { currency } = value.payload;\n        if (!isEmpty(currency)) {\n            // currently, there is an inconsistency regarding the Credits name:\n            // from vxcontrol-client-lib it came as 'Credits' and from vchat-core as 'VOC'.\n            // However, 'Credits' will be deprecated in favor of 'VOC'\n            if (currency.name === creditsDeprecatedName) {\n                yield put(setCurrency(instanceId, {\n                    name: CurrencyName.Credits,\n                    symbol: currency.symbol\n                }))\n            } else {\n                yield put(setCurrency(instanceId, currency as ICurrency));\n            }\n\n        }\n\n        let toyOptions = value.payload.toyControls as IToyOption[];\n        if (!isEmpty(toyOptions)) {\n            toyOptions = sortBy(toyOptions, (option: IToyOption) => option.id);\n            yield put(setToyOptions(instanceId, toyOptions));\n        }\n    }\n};\n\nconst watchSagas = function*() {\n    yield takeEvery(REQUEST_INIT, requestInitSaga);\n    yield takeEvery(RECEIVE_INIT, receiveInitSaga);\n};\n\nexport { onReceiveInit, receiveInitSaga };\nexport default watchSagas;\n","import { Action } from 'redux-actions';\nimport { filter, find, get, isEmpty } from 'lodash';\nimport { put, select, takeEvery } from \"redux-saga/effects\";\nimport {\n    ACTION,\n    CMDC_BACKENDPAYLOAD,\n    CMDC_CHANNEL,\n    CMDC_CMSG,\n    CMDP_NOOP_RESPONSE,\n    ICOMMAND,\n\tIBackEndPayload\n} from 'vxcontrol-client-lib';\n\nimport types from './types';\nimport utils from '../../utils';\nimport { ActionIds } from '../../redux/interfaces';\nimport { createAction, createActionType } from '../../redux/utils';\nimport { IPayload } from '../../redux/interfaces';\nimport { IPartner } from '../../redux/store';\nimport selectors from '../../redux/selectors';\nimport { receiveChannelUpdate } from './channel';\nimport AppService from '../../services/AppService';\nimport { receiveMessageFromNoop } from './message';\nimport { setIsVip } from '../../redux/modules/user';\nimport { getMessagePrice } from '../../redux/selectors/model';\nimport { BackenPayloadTypes } from '../../static/constants/constants';\nimport { setFreeModelMessages, setIsOnline, setMessagePrice, setModelOnlineState } from \"../../redux/modules/model\";\nimport {\n    initializeQuantitiesToInventoryGifts,\n    setAutoRecharge,\n    setChatFeatures,\n    setFreePlatformMessages,\n    setOneClickRecharge\n} from '../../redux/modules/session';\n\nconst createNoopActionType = createActionType(ActionIds.NOOP, { isSagaAction: true });\n\n// Actions\nexport const RECEIVE_NOOP = createNoopActionType(\"RECEIVE_NOOP\");\nconst RECEIVE_BACKEND_PAYLOAD = createNoopActionType(\"RECEIVE_BACKEND_PAYLOAD\");\nconst RECEIVE_ONLINE_STATE = createNoopActionType(\"RECEIVE_ONLINE_STATE\");\n\n// Action Creators\nexport const onReceiveNoop = createAction<CMDP_NOOP_RESPONSE>(RECEIVE_NOOP);\nconst receiveBackendPayload = createAction<CMDC_BACKENDPAYLOAD>(RECEIVE_BACKEND_PAYLOAD);\nconst receiveOnlineState = createAction(RECEIVE_ONLINE_STATE);\n\n// Sagas\nconst receiveNoopSaga = function* ({ payload }: Action<IPayload<CMDP_NOOP_RESPONSE>>) {\n    const { instanceId, value: response } = payload;\n    const partner: IPartner = yield select(selectors.getPartner, instanceId);\n\n    // We filter the commands and call their respective sagas\n    if (!isEmpty(response) && !isEmpty(response.commands)) {\n\n        // Check for CMDC_MSG\n        const receivedMessages = filter(response.commands, (command: ICOMMAND) =>\n            command.action === ACTION.CMDC_CMSG\n        ) as CMDC_CMSG[];\n\n        if (!isEmpty(receivedMessages)) {\n            let message: CMDC_CMSG;\n\n            for (message of receivedMessages) {\n                yield put(receiveMessageFromNoop(instanceId, message));\n            }\n        }\n\n        // Check for CMDC_CHANNEL\n        const channelUpdate = find(response.commands, (command: ICOMMAND) =>\n            !isEmpty(command.params) &&\n            command.action === ACTION.CMDC_CHANNEL &&\n            command.params.partnerId === partner.id &&\n            command.params.partnerKey === partner.key\n        ) as CMDC_CHANNEL;\n\n        if (channelUpdate) {\n            yield put(receiveChannelUpdate(instanceId, channelUpdate));\n        }\n\n        // Check for ONLINE_STATE\n        const filteredCommands = filter(response.commands, command =>\n            !isEmpty(command.params) &&\n            command.action === ACTION.CMDC_ONLINESTATE &&\n            command.params.partnerId === partner.id &&\n            command.params.partnerKey === partner.key\n        );\n\n        if (!isEmpty(filteredCommands)) {\n            yield put(receiveOnlineState(instanceId, filteredCommands));\n        }\n\n        // Check for CMDC_BACKENPAYLOAD\n        const backenPayloads: CMDC_BACKENDPAYLOAD[] = filter(response.commands,\n            (command: ICOMMAND) => command.action === ACTION.CMDC_BACKENDPAYLOAD\n        );\n\n        for (const backenPayload of backenPayloads) {\n            yield put(receiveBackendPayload(instanceId, backenPayload));\n        }\n    }\n};\n\n/**\n * User's information may update (free messages, bought gifts, payment amounts etc.)\n * and we receive the update from the server in the CMDC_BACKENPAYLOAD response when this happens\n * @param action\n */\nconst receiveBackendPayloadSaga = function* ({ payload }: Action<IPayload<CMDC_BACKENDPAYLOAD>>) {\n    const { instanceId, value } = payload;\n\n    if (isEmpty(get(value, \"payload.data\"))) {\n        return;\n    }\n\n\tconst responseData = value.payload as IBackEndPayload;\n    const { type } = responseData;\n    const data = responseData.data as types.ILoginGuestResponse;\n\n    const isChannelUpdate = type === BackenPayloadTypes.channel;\n    const isGuestUpdate = type === BackenPayloadTypes.guest;\n\n    if (!isEmpty(data.vip)) {\n        yield put(setIsVip(instanceId, data.vip));\n    }\n\n    if (isGuestUpdate && !isEmpty(data.messages)) {\n        yield put(setFreePlatformMessages(instanceId, data.messages.freeCount));\n    }\n\n    if (isChannelUpdate && data.freeMessagesCount) {\n        yield put(setFreeModelMessages(instanceId, data.freeMessagesCount));\n    }\n\n    const messagePrice = yield select(getMessagePrice, instanceId);\n    if (isChannelUpdate && data.messagePrice !== messagePrice) {\n        yield put(setMessagePrice(instanceId, data.messagePrice));\n    }\n\n    if (!isEmpty(data.autoRecharge)) {\n        yield put(setAutoRecharge(instanceId, data.autoRecharge));\n    }\n\n    if (!isEmpty(data.oneClickRecharge)) {\n        yield put(setOneClickRecharge(instanceId, data.oneClickRecharge));\n    }\n\n    if (!isEmpty(data.chatFeatures)) {\n        yield put(setChatFeatures(instanceId, data.chatFeatures));\n    }\n\n    if (!isEmpty(data.boughtMessengerGifts)) {\n        yield put(initializeQuantitiesToInventoryGifts(instanceId, data.boughtMessengerGifts));\n    }\n};\n\n/**\n * Sets model's online state and sets the audio state of the stream\n * between the model and the client, based on model's configuration\n */\nconst receiveOnlineStateSaga = function* ({ payload }: Action<IPayload>) {\n    const { instanceId, value } = payload;\n\n    const onlineStateCommand = value.find(\n        (command: any) => command.action === ACTION.CMDC_ONLINESTATE\n    );\n\n    if (isEmpty(onlineStateCommand) || isEmpty(onlineStateCommand.params)) {\n        return;\n    }\n\n    // We use JSON parse to convert 'true/false' string to boolean value\n    const isOnline: boolean = JSON.parse(onlineStateCommand.params.online) || false;\n\n    yield put(setModelOnlineState(instanceId,\n        utils.getOnlineStateFromResponseParams(onlineStateCommand.params))\n    );\n\n    yield put(setIsOnline(instanceId, isOnline));\n\n    const isModelOnline: boolean = yield select(selectors.isModelOnline, instanceId);\n    AppService.getService(instanceId).onModelStatusChange(isModelOnline);\n};\n\nconst watchSagas = function* () {\n    yield takeEvery(RECEIVE_NOOP, receiveNoopSaga);\n    yield takeEvery(RECEIVE_ONLINE_STATE, receiveOnlineStateSaga);\n    yield takeEvery(RECEIVE_BACKEND_PAYLOAD, receiveBackendPayloadSaga);\n};\n\nexport default watchSagas;\n","import { isEmpty } from \"lodash\";\nimport { Action } from \"redux-actions\";\nimport { CMDP_QUERYBACKEND } from \"vxcontrol-client-lib\";\nimport { put, select, takeEvery } from \"redux-saga/effects\";\n\nimport { receiveChat } from \"./chat\";\nimport { createAction, createActionType } from '../../redux/utils';\nimport { IPayload } from '../../redux/interfaces';\nimport selectors from \"../../redux/selectors\";\nimport { setActionResponse } from \"../../redux/modules/messenger\";\nimport { ActionResponseType, IChat, ITranslation } from '../../redux/store';\nimport { IChatResponse } from \"./types/types\";\nimport { ActionIds } from \"../../redux/interfaces\";\n\nconst createQueryBackendActionType = createActionType(ActionIds.QUERY_BACKEND, { isSagaAction: true });\n\n// Actions\nconst RECEIVE_QUERY_BACKEND = createQueryBackendActionType(\"RECEIVE_QUERY_BACKEND\");\n\n// Action Creators\nexport const onReceiveQueryBackend = createAction<CMDP_QUERYBACKEND>(RECEIVE_QUERY_BACKEND);\n\n/**\n * This response can be for creating the chat or buying a gift bundle\n * @param action API response for the QUERY_BACKEND request\n */\nconst receiveQueryBackendSaga = function* ({ payload }: Action<IPayload<CMDP_QUERYBACKEND>>) {\n    const { instanceId, value: response } = payload;\n\n    if (isEmpty(response) || isEmpty(response.payload)) {\n        return;\n    }\n\n    // If we receive a successful purchase of bundle gifts => notify the client\n    if (response.payload.bundleGifts) {\n        const translation: ITranslation = yield select(selectors.getTranslation, instanceId);\n\n        yield put(setActionResponse(instanceId, {\n            text: translation.common.bundleBuySuccess,\n            type: ActionResponseType.SUCCESSFUL\n        }));\n    }\n\n    // Checking for the creating chat request\n    const chat: IChat | string = response.payload;\n    if (chat !== \"false\" && (chat as IChat).chatId) {\n        yield put(receiveChat(instanceId, chat as IChatResponse));\n        return;\n    }\n};\n\nconst watchSagas = function* () {\n    yield takeEvery(RECEIVE_QUERY_BACKEND, receiveQueryBackendSaga);\n};\n\nexport default watchSagas;\n","import { eventChannel } from \"redux-saga\";\nimport {call, put, spawn, take, takeEvery} from \"redux-saga/effects\";\nimport {ACTION, IRESPONSE} from \"vxcontrol-client-lib\";\n\nimport ApiService from \"../../services/ApiService\";\nimport { onReceiveChannels } from './channel';\nimport { onReceiveGetChannelInfo, onReceiveSetChannelInfo } from './channelInfo';\nimport { onReceiveError } from './handleError';\nimport { onReceiveHistory } from './history';\nimport { onReceiveInit } from './init';\nimport { onReceiveLogin } from './login';\nimport { onReceiveNewChannel } from './newChannel';\nimport { onReceiveNoop } from './noop';\nimport { onReceiveOnlineState } from './onlineState';\nimport { onReceiveQueryBackend } from './queryBackend';\nimport { createAction, createActionType } from '../../redux/utils';\nimport { IPayload } from '../../redux/interfaces';\nimport { ActionIds } from \"../../redux/interfaces\";\nimport { Action } from \"redux-actions\";\n\nconst handlers: { [commandType: string]: any } = {};\nhandlers[ACTION.CMDP_INIT] = onReceiveInit;\nhandlers[ACTION.CMDP_LOGIN] = onReceiveLogin;\nhandlers[ACTION.CMDP_NOOP] = onReceiveNoop;\nhandlers[ACTION.CMDP_GETCHANNELS] = onReceiveChannels;\nhandlers[ACTION.CMDP_NEWCHANNEL] = onReceiveNewChannel;\nhandlers[ACTION.CMDP_GETHISTORY] = onReceiveHistory;\nhandlers[ACTION.CMDP_GETONLINESTATE] = onReceiveOnlineState;\nhandlers[ACTION.CMDP_QUERYBACKEND] = onReceiveQueryBackend;\nhandlers[ACTION.CMDP_GETCHANNELINFO] = onReceiveGetChannelInfo;\nhandlers[ACTION.CMDP_SETCHANNELINFO] = onReceiveSetChannelInfo;\n\ninterface IApiPayload {\n\tresponse: IRESPONSE;\n}\n\nconst createApiEventsActionType = createActionType(ActionIds.API_EVENTS, { isSagaAction: true });\n\n// Actions\nconst API_RESPONSE_OK = createApiEventsActionType(\"API_RESPONSE_OK\");\nconst API_RESPONSE_ERROR = createApiEventsActionType(\"API_RESPONSE_ERROR\");\n\n// Action Creators\nconst apiResponseOK = createAction<IApiPayload>(API_RESPONSE_OK);\nconst apiResponseError = createAction<IApiPayload>(API_RESPONSE_ERROR);\n\nconst subscribeToReceiveOKListener = emitter => {\n\tApiService.registerOKListener((instanceId: string, response: IRESPONSE) => {\n\t\temitter(apiResponseOK(instanceId, { response }));\n\t});\n};\n\nconst subscribeToReceiveErrorListener = emitter => {\n\tApiService.registerErrorListener((instanceId: string, response: IRESPONSE) => {\n\t\temitter(apiResponseError(instanceId, { response }));\n\t});\n};\n\nconst apiResponseOKSaga = function*({ payload }: Action<IPayload<IApiPayload>>) {\n\tconst { instanceId, value: { response }} = payload;\n\n\tif (handlers[response.action]) {\n\t\tyield put(handlers[response.action](instanceId, response));\n\t}\n};\n\nconst apiResponseErrorSaga = function*({ payload }: Action<IPayload<IApiPayload>>) {\n\tconst { instanceId, value } = payload;\n\tyield put(onReceiveError(instanceId, value.response));\n};\n\nconst apiEventsChannel = () => {\n\treturn eventChannel(emitter => {\n\t\tsubscribeToReceiveOKListener(emitter);\n\t\tsubscribeToReceiveErrorListener(emitter);\n\n\t\treturn () => {\n\t\t\t// no need for un-subscribing; saga's live exceeds the app live\n\t\t}\n\t});\n};\n\nconst listenForApiEventsSaga = function* () {\n\tconst apiEvents = yield call(apiEventsChannel);\n\n\ttry {\n\t\twhile (true) {\n\t\t\tconst action = yield take(apiEvents);\n\t\t\tyield put(action);\n\t\t}\n\t} finally { }\n};\n\nconst watchSaga = function* () {\n\tyield spawn(listenForApiEventsSaga);\n\tyield takeEvery(API_RESPONSE_OK, apiResponseOKSaga);\n\tyield takeEvery(API_RESPONSE_ERROR, apiResponseErrorSaga);\n\n};\n\nexport default watchSaga;\n","import { all } from 'redux-saga/effects';\nimport channelSagas from './channel';\nimport channelInfoSagas from './channelInfo';\nimport chatSagas from './chat';\nimport giftSagas from './gifts';\nimport handleErrorSagas from './handleError';\nimport historySagas from './history';\nimport imageSagas from './image';\nimport initSagas from './init';\nimport loginSagas from './login';\nimport messageSagas from './message';\nimport newChannelSagas from './newChannel';\nimport noopSagas from './noop';\nimport onlineStateSagas from './onlineState';\nimport queryBackendSagas from './queryBackend';\nimport apiEventsSagas from './apiEvents';\n\n\n/**\n * Combines all the listening sagas and\n * it represents the entire middleware.\n */\nexport default function* rootSaga() {\n    yield all([\n        chatSagas(),\n        channelSagas(),\n        channelInfoSagas(),\n        queryBackendSagas(),\n        giftSagas(),\n        historySagas(),\n        initSagas(),\n        onlineStateSagas(),\n        imageSagas(),\n        loginSagas(),\n        handleErrorSagas(),\n        newChannelSagas(),\n        noopSagas(),\n        messageSagas(),\n\t\tapiEventsSagas()\n    ]);\n}\n","import produce from \"immer\";\nimport { Action } from \"redux-actions\";\nimport { has, isEqual, includes, isEmpty } from \"lodash\";\n\nimport IStore from \"../store\";\nimport { IPayload, ActionIds } from \"../interfaces\";\nimport { createAction, createActionType } from \"../utils\";\nimport initialStore, { getInitialInstanceData } from \"../initialStore\";\nimport features from '../modules/features';\nimport options from '../modules/options';\nimport hooks from '../modules/hooks';\nimport messenger from '../modules/messenger';\nimport model from '../modules/model';\nimport platformProps from '../modules/platformProps';\nimport session from '../modules/session';\nimport user from '../modules/user';\nimport videochat from '../modules/videochat';\nimport { RESET_STORE } from \"../modules/app\";\n\nconst createRootActionType = createActionType(ActionIds.ROOT, { isReduxAction: true });\n\n// Actions\nconst INITIALIZE_MESSENGER_INSTANCE = createRootActionType(\"INITIALIZE_MESSENGER_INSTANCE\");\n\n// Action Creators\nexport const initializeMessengerInstance = createAction<string>(INITIALIZE_MESSENGER_INSTANCE);\n\n/**\n * The root reducer has the responsability of mapping the desired messenger\n * instance with the received action and alter the data in a pure function.\n */\nconst rootReducer = (store: IStore = initialStore, action: Action<IPayload>): IStore => produce(store, draft => {\n    if (isEmpty(action.payload)) {\n        return draft;\n    }\n\n    const { payload: { instanceId, value: payload }, type } = action;\n    const hasInstanceInitialized = has(draft, instanceId);\n\n    if (isEqual(type, INITIALIZE_MESSENGER_INSTANCE) && !hasInstanceInitialized) {\n        draft[instanceId] = getInitialInstanceData();\n        return draft;\n    }\n\n    if (!hasInstanceInitialized) {\n        return draft;\n    }\n\n    const reducerAction = { type, payload };\n\n    const isGlobalAction = includes([RESET_STORE],type);\n\n    // We will call the helper reducer we need based on our action type\n    if (includes(type, ActionIds.FEATURES) || isGlobalAction) {\n        draft[instanceId].features = features(draft[instanceId].features, reducerAction);\n\t}\n\t\n\tif (includes(type, ActionIds.OPTIONS) || isGlobalAction) {\n        draft[instanceId].options = options(draft[instanceId].options, reducerAction);\n    }\n\n    if (includes(type, ActionIds.HOOKS) || isGlobalAction) {\n        draft[instanceId].hooks = hooks(draft[instanceId].hooks, reducerAction);\n    }\n\n    if (includes(type, ActionIds.MESSENGER) || isGlobalAction) {\n        draft[instanceId].messenger = messenger(draft[instanceId].messenger, reducerAction);\n    }\n\n    if (includes(type, ActionIds.MODEL) || isGlobalAction) {\n        draft[instanceId].model = model(draft[instanceId].model, reducerAction);\n\n    }\n\n    if (includes(type, ActionIds.PLATFORM_PROPS) || isGlobalAction) {\n        draft[instanceId].platformProps = platformProps(draft[instanceId].platformProps, reducerAction);\n    }\n\n    if (includes(type, ActionIds.SESSION) || isGlobalAction) {\n        draft[instanceId].session = session(draft[instanceId].session, reducerAction);\n    }\n\n    if (includes(type, ActionIds.USER) || isGlobalAction) {\n        draft[instanceId].user = user(draft[instanceId].user, reducerAction);\n    }\n\n    if (includes(type, ActionIds.VIDEOCHAT_REDUX) || isGlobalAction) {\n        draft[instanceId].videochat = videochat(draft[instanceId].videochat, reducerAction);\n\t}\n\t\n    return draft;\n}) as any;\n\nexport default rootReducer;\n","import createSagaMiddleware from 'redux-saga';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport rootSaga from '../sagas/rootSaga';\nimport { RECEIVE_NOOP } from '../sagas/websockets/noop';\nimport { DECREASE_CURRENT_GIFT_QUANTITY } from './modules/session';\nimport rootReducer from './reducers/rootReducer';\nimport initialStore from './initialStore';\n\n/** Check if we have redux dev tools active */\nconst { IS_REDUX_DEV_TOOLS_ACTIVE } = process.env;\nconst isReduxDevActive = IS_REDUX_DEV_TOOLS_ACTIVE === \"true\";\n\n/** Saga Middleware */\nconst sagaMiddleware = createSagaMiddleware();\n\n// @ts-ignore\nconst composeEnhancers = isReduxDevActive\n    ? composeWithDevTools({ \n        actionsBlacklist: [RECEIVE_NOOP, DECREASE_CURRENT_GIFT_QUANTITY] \n    })\n    : compose;\n\nconst enhancer = composeEnhancers(\n    applyMiddleware(sagaMiddleware)\n);\n\n/** Store */\nconst store = createStore(\n    rootReducer,\n    initialStore,\n    enhancer\n);\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import { all } from 'redux-saga/effects';\n\nimport commonSagas from './common/rootSaga';\nimport specificSagas from './specific/rootSaga';\nimport websocketSagas from './websockets/rootSaga';\n\n/**\n * Combines all the listening sagas and\n * it represents the entire middleware.\n */\nexport default function* rootSaga() {\n    yield all([\n        websocketSagas(),\n        commonSagas(),\n\t\tspecificSagas()\n    ]);\n}\n","import VXMessenger from './AppContainer';\nimport { IPlatformProps } from '../redux/store';\n\n\nexport { IPlatformProps as VXMessengerProps };\nexport default VXMessenger;","import { has, isUndefined } from 'lodash';\nimport Rollbar from \"rollbar\";\nimport * as React from 'react';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport store from '../redux/configureStore';\nimport { IPlatformProps } from '../redux/store';\nimport { InstanceContext/*, versionNumber*/ } from '../utils/utils';\nimport { initializeMessengerInstance } from '../redux/reducers/rootReducer';\nimport { rollbarAccessToken } from '../static/config/config';\nimport constants from '../static/constants';\n\ntype IProps = IPlatformProps;\n\ninterface IState {\n\trollbar?: Rollbar;\n}\n\nclass AppContainer extends React.Component<IProps, IState> {\n\tinstanceId: string;\n\n\tconstructor(props: IProps) {\n\t\tsuper(props);\n\n\t\t// Initialize the messenger's instance in the Redux store\n\t\tthis.instanceId = props.id || constants.defaultInstanceId;\n\t\tstore.dispatch(initializeMessengerInstance(this.instanceId, this.instanceId));\n\n\t\tthis.state = {\n\t\t\trollbar: undefined\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.setupProductionDebug();\n\t}\n\n\tcomponentDidUpdate() {\n\t\tthis.setupProductionDebug();\n\t}\n\n\trender() {\n\t\tconst isInstanceInitialized = has(store.getState(), this.instanceId);\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{isInstanceInitialized && (\n\t\t\t\t\t<Provider store={store}>\n\t\t\t\t\t\t<InstanceContext.Provider value={this.instanceId}>\n\t\t\t\t\t\t\t<App\n\t\t\t\t\t\t\t\t{...this.props}\n\t\t\t\t\t\t\t\tinstanceId={this.instanceId}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</InstanceContext.Provider>\n\t\t\t\t\t</Provider>\n\t\t\t\t)}\n\t\t\t</>\n\t\t);\n\t}\n\n\tprivate setupProductionDebug = () => {\n\t\tif (this.props.features?.hasProductionDebugEnabled && isUndefined(this.state.rollbar)) {\n\t\t\tthis.setState({\n\t\t\t\trollbar: new Rollbar({\n\t\t\t\t\taccessToken: rollbarAccessToken,\n\t\t\t\t\tcaptureUncaught: true,\n\t\t\t\t\tcaptureUnhandledRejections: true,\n\t\t\t\t\tpayload: {\n\t\t\t\t\t\tenvironment: process.env.ROLLBAR_LEVEL,\n\t\t\t\t\t\tclient: {\n\t\t\t\t\t\t\tjavascript: {\n\t\t\t\t\t\t\t\tsource_map_enabled: true,\n\t\t\t\t\t\t\t\tguess_uncaught_frames: true,\n\t\t\t\t\t\t\t\tcode_version: '0.36.0_1'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t};\n}\n\nexport default AppContainer;\n","import { get } from 'lodash';\n\nimport { IData } from '../redux/store';\nimport store from '../redux/configureStore';\nimport { hasActionButtons } from '../redux/selectors/common';\nimport { getInitialInstanceData } from '../redux/initialStore';\nimport { closeMessenger as closeMessengerAction } from '../redux/modules/messenger';\nimport constants from '../static/constants';\n\nexport const closeMessenger = (instanceId?: string) => {\n    store.dispatch(closeMessengerAction(instanceId || constants.defaultInstanceId));\n};\n\nconst shouldReturnStore: boolean = process.env.GET_STORE_AVAILABLE === 'true';\n\nexport const getStore = (instanceId: string): IData | undefined => {\n    if (!shouldReturnStore) {\n        return;\n    }\n\n    const state = store.getState();\n\n    return hasActionButtons(state, instanceId)\n        ? get(state, instanceId)\n        : getInitialInstanceData();\n};\n","import './polyfills';\nimport AppContainer from './App';\n\n// import moment locales for supported languages (other than \"en\")\nimport 'moment/locale/de';\nimport 'moment/locale/es';\n\nexport { SupportedLanguage as Language } from 'vxcontrol-client-lib';\n\nexport {\n\tIFeatures as Features,\n\tIOptions as Options,\n    ITipOption as TipOption,\n    ICurrency as Currency,\n\tIPlatformProps,\n    CurrencyName,\n    IPartner as Partner,\n    VideoChatType,\n\tIData as IStore\n} from './redux/store';\n\nexport {\n    IAgeVerification as AgeVerification,\n    IClickExit as ClickExit,\n    IClickProfile as ClickProfile,\n    IExitPopupAction as ExitPopupAction,\n    IOnFailedChatConfig as OnFailedChatConfig,\n    IOnFailedWebToken as OnFailedWebToken,\n    IOnModelStatusChange as OnModelStatusChange,\n    IOnSupportedVideoChatTypes as OnSupportedVideoChatTypes,\n    IRecharge as Recharge,\n    IVideoChatAction as VideoChatAction,\n    IBecomeVIP as BecomeVIP,\n\tIPreferenceStore,\n\tPreferenceName\n} from './services/AppService/types';\n\nexport {\n\tversionNumber\n} from './utils/utils';\n\nexport {\n    IPartialTheme as PartialTheme,\n    ITheme as Theme\n} from './themes';\n\nexport { closeMessenger, getStore } from './utils/appUtils';\n\nexport default AppContainer;\n"],"sourceRoot":""}