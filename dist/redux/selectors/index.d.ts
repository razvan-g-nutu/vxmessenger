declare const _default: {
    getHooks: (store: import("../store").default, instanceId: string | undefined) => import("../store").HooksArguments;
    geHook: (hookName: "onClickProfile" | "onClickImage" | "onExit" | "onRecharge" | "onVideoChatAction" | "onExitPopupAction" | "onAgeVerification" | "onModelStatusChange" | "onSupportedVideoChatTypes" | "onFailedChatConfig" | "onFailedWebToken" | "onBecomeVIP") => import("reselect").OutputParametricSelector<import("../store").default, string | undefined, any, (res: import("../store").HooksArguments) => any>;
    getPlatformProps: (store: import("../store").default, instanceId: string | undefined) => import("../store").IPlatformProps | null;
    getVideoChat: (store: import("../store").default, instanceId: string | undefined) => import("../store").IVideochat;
    getInformationType: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, import("../store").VideochatInformationType | undefined, (res: import("../store").IVideochat) => import("../store").VideochatInformationType | undefined>;
    isExitingInformationType: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IVideochat) => boolean>;
    getPreChatInformationType: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, import("../store").PreChatInformationType | undefined, (res: import("../store").IVideochat) => import("../store").PreChatInformationType | undefined>;
    getInitialResolution: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, import("../store").IResolution | undefined, (res: import("../store").IVideochat) => import("../store").IResolution | undefined>;
    getVideoChatQualityBoundaries: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, import("../store").IQualityBoundaries, (res: import("../store").IVideochat) => import("../store").IQualityBoundaries>;
    getVideoChatType: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, import("../store").VideoChatType | undefined, (res: import("../store").IVideochat) => import("../store").VideoChatType | undefined>;
    isVideoChatInLiveChatMode: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").VideoChatType | undefined) => boolean>;
    isVideoChatInFreeChatMode: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").VideoChatType | undefined) => boolean>;
    isVideoChatInPreviewMode: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").VideoChatType | undefined) => boolean>;
    isVideoChatInFreeMode: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").VideoChatType | undefined) => boolean>;
    shouldDisplayContinueWithLiveChat: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res1: boolean, res2: boolean) => boolean>;
    isVideoChatInVoyeurMode: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").VideoChatType | undefined) => boolean>;
    isVideoChatInGroupMode: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").VideoChatType | undefined) => boolean>;
    isVideoChatInVoyeurPrivateMode: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").VideoChatType | undefined) => boolean>;
    getLastSuccessfulVideoChatType: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, import("../store").VideoChatType | undefined, (res: import("../store").IVideochat) => import("../store").VideoChatType | undefined>;
    getInitialVideoChatType: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, import("../store").VideoChatType | undefined, (res: import("../store").IVideochat) => import("../store").VideoChatType | undefined>;
    getVideoChatIsMutedByModel: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IVideochat) => boolean>;
    getVideoChatIsMutedByClient: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IVideochat) => boolean>;
    displayVolumeAsInitiallyMuted: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean | undefined, (res: import("../store").IVideochat) => boolean | undefined>;
    isInitiallyMutedHintDisplayed: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean | undefined, (res: import("../store").IVideochat) => boolean | undefined>;
    isCam2CamActive: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IVideochat) => boolean>;
    isCam2CamEnabled: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IVideochat) => boolean>;
    isCam2CamMinimized: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IVideochat) => boolean>;
    getCam2CamCameras: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, import("../store").ICameraDevice[], (res: import("../store").IVideochat) => import("../store").ICameraDevice[]>;
    getCam2CamSelectedCamera: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, import("../store").ICameraDevice | null | undefined, (res: import("../store").IVideochat) => import("../store").ICameraDevice | null | undefined>;
    isFullScreen: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IVideochat) => boolean>;
    isVideoChatOpen: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IVideochat) => boolean>;
    getVideoChatTimeLeft: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, number, (res: import("../store").IVideochat) => number>;
    isVideoChatTimeLeftBelowThreshold: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean | undefined, (res: import("../store").IVideochat) => boolean | undefined>;
    getVideoChatPreviousTimeLeft: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, number | undefined, (res: import("../store").IVideochat) => number | undefined>;
    getLivePreviewTextTimeLimit: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, number, (res: import("../store").IVideochat) => number>;
    getLivePreviewTextTimeLeft: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, number, (res: import("../store").IVideochat) => number>;
    shouldRenderPreChatInformationDialog: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean | undefined, (res: import("../store").IVideochat) => boolean | undefined>;
    canRenderInformationDialog: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IVideochat) => boolean>;
    shouldRenderRegularInformationDialog: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res1: boolean, res2: boolean) => boolean>;
    isStarting: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IVideochat) => boolean>;
    isPlaying: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IVideochat) => boolean>;
    shouldRenderOnlyVideochat: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IVideochat) => boolean>;
    isMobileMenuOpen: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean | undefined, (res: import("../store").IVideochat) => boolean | undefined>;
    getExitEvent: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, import("../store").IExitEvent | undefined, (res: import("../store").IVideochat) => import("../store").IExitEvent | undefined>;
    isInAVSMode: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").VideoChatType | undefined) => boolean>;
    shouldRenderPreloader: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res1: boolean, res2: boolean) => boolean>;
    resumeChatTimestamp: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, Date | undefined, (res: import("../store").IVideochat) => Date | undefined>;
    isMobileLandscape: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: boolean) => boolean>;
    shouldHideVideochatControls: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res1: import("../store").IVideochat, res2: boolean) => boolean>;
    getGroupChatParticipantsNumber: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, number, (res: import("../store").IVideochat) => number>;
    getGroupChatParticipants: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, string[], (res: import("../store").IVideochat) => string[]>;
    getGroupChatClientName: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, string, (res: import("../store").IVideochat) => string>;
    shouldRenderGroupChatParticipants: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IVideochat) => boolean>;
    isAutoplayRestricted: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IVideochat) => boolean>;
    getInstanceIds: (store: import("../store").default) => string[];
    getFullScreenInstance: (store: import("../store").default) => string | undefined;
    getGiftBundles: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, {
        name: string;
        id: number;
        imageUrl: string;
        active: boolean;
        gifts: import("../store").IBundleGift[];
        price: number;
        translations: import("../store").IGiftTranslation[];
    }[], (res1: import("../store").ISession, res2: import("vxcontrol-client-lib").SupportedLanguage) => {
        name: string;
        id: number;
        imageUrl: string;
        active: boolean;
        gifts: import("../store").IBundleGift[];
        price: number;
        translations: import("../store").IGiftTranslation[];
    }[]>;
    getGiftPages: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, import("../store").IGiftPage[], (res1: import("../store").ISession, res2: import("vxcontrol-client-lib").SupportedLanguage, res3: import("../store").ITranslation) => import("../store").IGiftPage[]>;
    isGiftButtonVisible: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res1: import("../store").IGiftPage[], res2: boolean) => boolean>;
    getTranslatedGifts: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, {
        name: string;
        id: number;
        active: boolean;
        categoryId: number;
        imageUrl: string;
        initialQuantity?: number | undefined;
        currentQuantity?: number | undefined;
        initialPrice?: number | undefined;
        price: number;
        translations: import("../store").IGiftTranslation[];
    }[], (res1: import("../store").IGift[], res2: import("vxcontrol-client-lib").SupportedLanguage) => {
        name: string;
        id: number;
        active: boolean;
        categoryId: number;
        imageUrl: string;
        initialQuantity?: number | undefined;
        currentQuantity?: number | undefined;
        initialPrice?: number | undefined;
        price: number;
        translations: import("../store").IGiftTranslation[];
    }[]>;
    getCountdownWarning: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, false | import("../store").ICountdownWarning | undefined, (res1: import("../store").IWindowSectionState, res2: import("../store").VideoChatType | undefined, res3: boolean) => false | import("../store").ICountdownWarning | undefined>;
    isCountdownWarningOpen: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: false | import("../store").ICountdownWarning | undefined) => boolean>;
    isVideoChatInSpendingMode: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").VideoChatType | undefined) => boolean>;
    isInteractive: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res1: boolean, res2: boolean, res3: boolean, res4: number, res5: boolean) => boolean>;
    isEmoticonSectionOpen: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res1: boolean, res2: import("../store").IWindowSectionState) => boolean>;
    isGiftSectionOpen: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res1: boolean, res2: import("../store").IWindowSectionState) => boolean>;
    canInitiateLiveChat: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res1: import("../store").VideoChatType | undefined, res2: boolean, res3: boolean) => boolean>;
    canInitiateLivePreview: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res1: import("../store").VideoChatType | undefined, res2: boolean, res3: boolean, res4: boolean) => boolean>;
    canInitiatePrivateChat: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res1: import("../store").VideoChatType | undefined, res2: boolean, res3: boolean, res4: boolean, res5: boolean, res6: boolean) => boolean>;
    canInitiateVoyeurChat: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res1: import("../store").VideoChatType | undefined, res2: boolean, res3: boolean, res4: boolean) => boolean>;
    canInitiateVoyeurToPrivateChat: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res1: boolean, res2: boolean, res3: boolean) => boolean>;
    canInitiateCam2Cam: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res1: boolean, res2: boolean, res3: boolean, res4: boolean, res5: boolean, res6: import("../store").VideoChatType | undefined) => boolean>;
    hasActionButtons: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res1: boolean, res2: boolean, res3: boolean, res4: boolean, res5: boolean) => boolean>;
    shouldRenderMotto: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res1: boolean, res2: boolean, res3: boolean, res4: boolean) => boolean>;
    hasActionSectionInProfile: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: boolean) => boolean>;
    hasActionSectionUnderTextbox: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res1: boolean, res2: boolean) => boolean>;
    hasActionSectionInDropDown: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res1: boolean, res2: boolean) => boolean>;
    shouldRenderUserOfflineInformation: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res1: boolean, res2: boolean, res3: boolean) => boolean>;
    shouldRenderExitingInformationDialog: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res1: boolean, res2: boolean, res3: boolean) => boolean>;
    shouldCloseMessenger: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res1: boolean, res2: boolean, res3: import("../store").IModalContent, res4: import("../store").IContactNote, res5: boolean | undefined, res6: boolean, res7: boolean) => boolean>;
    hasContactNote: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res1: boolean, res2: boolean, res3: boolean) => boolean>;
    hasFavorite: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res1: boolean, res2: boolean) => boolean>;
    shouldLiftChatbox: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res1: boolean, res2: boolean) => boolean>;
    shouldRenderAVSCam2CamPopup: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res1: boolean, res2: boolean, res3: boolean, res4: import("../store").VideoChatType | undefined) => boolean>;
    shouldCloseMobileKeyboard: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: boolean) => boolean>;
    getActiveMessages: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, import("../store").IMessage[], (res1: import("../store").IMessage[], res2: boolean, res3: import("../store").IChat | undefined) => import("../store").IMessage[]>;
    hasFreeMessages: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, number | boolean, (res1: boolean, res2: number) => number | boolean>;
    hasFreeChatDuration: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res1: boolean, res2: boolean) => boolean>;
    hasModelPictureInProfile: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res1: boolean, res2: boolean) => boolean>;
    shouldOpenAnonymousTipPrompt: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res1: boolean, res2: boolean) => boolean>;
    hasToyControl: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res1: boolean, res2: import("../store").VideoChatType | undefined, res3: boolean) => boolean>;
    hasToyControlButton: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res1: boolean, res2: boolean) => boolean>;
    shouldRenderToySectionHeader: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res1: boolean, res2: boolean, res3: boolean) => boolean>;
    shouldShowTipping: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res1: boolean, res2: boolean, res3: boolean) => boolean>;
    shouldShowHistory: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res1: boolean, res2: boolean) => boolean>;
    hasImageUpload: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res1: boolean, res2: boolean, res3: boolean) => boolean>;
    hasAudioMessages: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res1: boolean | undefined, res2: boolean) => boolean>;
    shouldDisplayMessageSectionButtons: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res1: boolean, res2: boolean, res3: boolean, res4: boolean, res5: boolean) => boolean>;
    hasOnlySendButton: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res1: boolean, res2: boolean, res3: boolean, res4: boolean) => boolean>;
    isConsecutiveGroupMessage: (id: string) => import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IMessage[]) => boolean>;
    isLastConsecutiveGroupMessage: (id: string) => import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IMessage[]) => boolean>;
    isSoloMessage: (id: string) => import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IMessage[]) => boolean>;
    getMentionOptions: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, string[], (res1: string[], res2: string, res3: boolean) => string[]>;
    isMentionSectionOpen: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res1: import("../store").IMessenger, res2: boolean, res3: boolean) => boolean>;
    areAllPopUpsClosed: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res1: import("../store").IMessenger, res2: boolean, res3: boolean, res4: boolean, res5: boolean) => boolean>;
    shouldUseDropdownAnimation: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res1: boolean, res2: boolean, res3: boolean, res4: boolean, res5: boolean) => boolean>;
    getClientVolume: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, number, (res1: import("../store").IUser, res2: import("../store").IVideochat) => number>;
    getUser: (store: import("../store").default, instanceId: string | undefined) => import("../store").IUser;
    getTranslation: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, import("../store").ITranslation, (res: import("../store").IUser) => import("../store").ITranslation>;
    getTranslationForErrors: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, import("../store").IErrorTranslation, (res: import("../store").ITranslation) => import("../store").IErrorTranslation>;
    getNotMutedClientVolume: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, number, (res: import("../store").IUser) => number>;
    getLanguage: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, import("vxcontrol-client-lib").SupportedLanguage, (res: import("../store").IUser) => import("vxcontrol-client-lib").SupportedLanguage>;
    getUserKey: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, string | undefined, (res: import("../store").IUser) => string | undefined>;
    isUserOnline: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IUser) => boolean>;
    isUserOffline: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IUser) => boolean>;
    isVip: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IUser) => boolean>;
    getShouldIncreaseMessageFontSize: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IUser) => boolean>;
    getSession: (store: import("../store").default, instanceId: string | undefined) => import("../store").ISession;
    getSessionId: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, string, (res: import("../store").ISession) => string>;
    getCurrency: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, import("../store").ICurrency, (res: import("../store").ISession) => import("../store").ICurrency>;
    getChat: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, import("../store").IChat | undefined, (res: import("../store").ISession) => import("../store").IChat | undefined>;
    getExternallyProvidedChat: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, {
        clientId: string | undefined;
        server: string | undefined;
        externallyProvided: boolean;
    }, (res: import("../store").ISession) => {
        clientId: string | undefined;
        server: string | undefined;
        externallyProvided: boolean;
    }>;
    getChatId: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, string | undefined, (res: import("../store").IChat | undefined) => string | undefined>;
    isChatExternallyProvided: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").ISession) => boolean>;
    getChatFeatures: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, import("../store").IChatFeatures, (res: import("../store").ISession) => import("../store").IChatFeatures>;
    isNotChargedNorVip: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IChatFeatures) => boolean>;
    hasFreePlatformChatDuration: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IChatFeatures) => boolean>;
    getGifts: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, import("../store").IGift[], (res: import("../store").ISession) => import("../store").IGift[]>;
    getActiveGifts: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, import("../store").IGift[], (res: import("../store").IGift[]) => import("../store").IGift[]>;
    getGiftCategories: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, import("../store").IGiftCategory[], (res: import("../store").ISession) => import("../store").IGiftCategory[]>;
    getLastRechargedAmount: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, number | {
        value: number;
        currency: string;
    }, (res: import("../store").ISession) => number | {
        value: number;
        currency: string;
    }>;
    getOneClickRecharge: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, import("../store").IOneClickRecharge, (res: import("../store").ISession) => import("../store").IOneClickRecharge>;
    isOneClickRechargeAvailable: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IOneClickRecharge) => boolean>;
    getOneClickRechargeAmounts: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, number[], (res: import("../store").IOneClickRecharge) => number[]>;
    getOneClickRechargeDefaultAmount: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, number | undefined, (res: import("../store").IOneClickRecharge) => number | undefined>;
    getWebtoken: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, string, (res: import("../store").ISession) => string>;
    getChannelId: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, string, (res: import("../store").ISession) => string>;
    getUploadMediaUrl: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, string | undefined, (res: import("../store").ISession) => string | undefined>;
    hasFreePlatformMessages: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").ISession) => boolean>;
    getModel: (store: import("../store").default, instanceId: string | undefined) => import("../store").IModel;
    getModelMotto: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, string, (res: import("../store").IModel) => string>;
    getModelName: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, string, (res: import("../store").IModel) => string>;
    getModelProfilePicture: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, string, (res: import("../store").IModel) => string>;
    isModelFavorite: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IModel) => boolean>;
    getPartner: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, import("../store").IPartner, (res: import("../store").IModel) => import("../store").IPartner>;
    getOnlineState: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, Partial<import("../store").IOnlineState> | undefined, (res: import("../store").IModel) => Partial<import("../store").IOnlineState> | undefined>;
    isModelOnline: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IModel) => boolean>;
    isModelSupportingChat: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IModel) => boolean>;
    isModelInPrivateChat: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IModel) => boolean>;
    isModelSupportingPrivateChat: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IModel) => boolean>;
    isModelSupportingSoftChat: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IModel) => boolean>;
    isModelSupportingPreviewChat: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IModel) => boolean>;
    isModelSupportingVoyeurChat: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IModel) => boolean>;
    isModelSupportingToyControl: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IModel) => boolean>;
    isModelSupportingVoyeurToPrivateChat: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IModel) => boolean>;
    isModelSupportingTip: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IModel) => boolean>;
    getLiveChatPrice: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, number, (res: import("../store").IModel) => number>;
    getVoyeurCamPrice: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, number, (res: import("../store").IModel) => number>;
    hasPrices: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IModel) => boolean>;
    getMessagePrice: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, number, (res: import("../store").IModel) => number>;
    hasFreeModelMessages: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, number, (res: import("../store").IModel) => number>;
    hasFreeModelChatDuration: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IModel) => boolean>;
    getFreeModelChatDuration: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, number, (res: import("../store").IModel) => number>;
    getMessenger: (store: import("../store").default, instanceId: string | undefined) => import("../store").IMessenger;
    getWindowToggleState: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, import("../store").IWindowSectionState, (res: import("../store").IMessenger) => import("../store").IWindowSectionState>;
    getUserPrompts: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, import("../store").IQuestion[], (res: import("../store").IWindowSectionState) => import("../store").IQuestion[]>;
    hasLoadAccountUserPrompts: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IQuestion[]) => boolean>;
    hasSendTipPromptOpen: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IQuestion[]) => boolean>;
    getActionResponse: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, import("../store").IActionResponse | undefined, (res: import("../store").IMessenger) => import("../store").IActionResponse | undefined>;
    getMessages: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, import("../store").IMessage[], (res: import("../store").IMessenger) => import("../store").IMessage[]>;
    findMessage: (predicate: (message: import("../store").IMessage) => boolean) => import("reselect").OutputParametricSelector<import("../store").default, string | undefined, import("../store").IMessage | undefined, (res: import("../store").IMessage[]) => import("../store").IMessage | undefined>;
    getFailedMessages: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, string[], (res: import("../store").IMessenger) => string[]>;
    shouldResendFailedMessages: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean | undefined, (res: import("../store").IMessenger) => boolean | undefined>;
    getEmoticons: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, import("../store").IEmoticon[], (res: import("../store").IMessenger) => import("../store").IEmoticon[]>;
    getModalContent: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, import("../store").IModalContent, (res: import("../store").IMessenger) => import("../store").IModalContent>;
    getMessengerLoadingStatus: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, import("../store").LoadingStatus, (res: import("../store").IMessenger) => import("../store").LoadingStatus>;
    isMessengerLoading: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").LoadingStatus) => boolean>;
    isOpen: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IMessenger) => boolean>;
    getContactNote: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, import("../store").IContactNote, (res: import("../store").IMessenger) => import("../store").IContactNote>;
    isContactNoteOpen: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IContactNote) => boolean>;
    hasContactNoteText: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IContactNote) => boolean>;
    isTextEnabled: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IMessenger) => boolean>;
    isAnyUserPromptOpen: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IQuestion[]) => boolean>;
    isCloseChatUserPromptOpen: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IQuestion[]) => boolean>;
    isDropDownMenuOpen: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IWindowSectionState) => boolean>;
    isToySectionOpen: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IWindowSectionState) => boolean>;
    isVersionOpen: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IWindowSectionState) => boolean>;
    hasEditor: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean | undefined, (res: import("../store").IMessenger) => boolean | undefined>;
    getActiveGift: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, string | undefined, (res: import("../store").IMessenger) => string | undefined>;
    getActiveEmoticon: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, string | undefined, (res: import("../store").IMessenger) => string | undefined>;
    getActiveMention: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, string | undefined, (res: import("../store").IMessenger) => string | undefined>;
    getEditorState: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, import("../store").IStoredEditorState, (res: import("../store").IMessenger) => import("../store").IStoredEditorState>;
    areAnyUserPromptsOpen: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IWindowSectionState) => boolean>;
    isResponsive: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IMessenger) => boolean>;
    wasRequestedAnImageUpload: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IWindowSectionState) => boolean>;
    isTipPromptOpen: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IQuestion[]) => boolean>;
    getToyOptions: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, import("../store").IToyOption[], (res: import("../store").IMessenger) => import("../store").IToyOption[]>;
    getActiveToyOption: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, number | import("../store").IToyOption | (<U>(callbackfn: (value: import("../store").IToyOption, index: number, array: import("../store").IToyOption[]) => U, thisArg?: any) => U[]) | {
        <S extends import("../store").IToyOption>(callbackfn: (value: import("../store").IToyOption, index: number, array: import("../store").IToyOption[]) => value is S, thisArg?: any): S[];
        (callbackfn: (value: import("../store").IToyOption, index: number, array: import("../store").IToyOption[]) => unknown, thisArg?: any): import("../store").IToyOption[];
    } | (() => string) | (() => string) | (() => import("../store").IToyOption | undefined) | ((...items: import("../store").IToyOption[]) => number) | {
        (...items: ConcatArray<import("../store").IToyOption>[]): import("../store").IToyOption[];
        (...items: (import("../store").IToyOption | ConcatArray<import("../store").IToyOption>)[]): import("../store").IToyOption[];
    } | ((separator?: string | undefined) => string) | (() => import("../store").IToyOption[]) | (() => import("../store").IToyOption | undefined) | ((start?: number | undefined, end?: number | undefined) => import("../store").IToyOption[]) | ((compareFn?: ((a: import("../store").IToyOption, b: import("../store").IToyOption) => number) | undefined) => import("../store").IToyOption[]) | {
        (start: number, deleteCount?: number | undefined): import("../store").IToyOption[];
        (start: number, deleteCount: number, ...items: import("../store").IToyOption[]): import("../store").IToyOption[];
    } | ((...items: import("../store").IToyOption[]) => number) | ((searchElement: import("../store").IToyOption, fromIndex?: number | undefined) => number) | ((searchElement: import("../store").IToyOption, fromIndex?: number | undefined) => number) | ((callbackfn: (value: import("../store").IToyOption, index: number, array: import("../store").IToyOption[]) => unknown, thisArg?: any) => boolean) | ((callbackfn: (value: import("../store").IToyOption, index: number, array: import("../store").IToyOption[]) => unknown, thisArg?: any) => boolean) | ((callbackfn: (value: import("../store").IToyOption, index: number, array: import("../store").IToyOption[]) => void, thisArg?: any) => void) | {
        (callbackfn: (previousValue: import("../store").IToyOption, currentValue: import("../store").IToyOption, currentIndex: number, array: import("../store").IToyOption[]) => import("../store").IToyOption): import("../store").IToyOption;
        (callbackfn: (previousValue: import("../store").IToyOption, currentValue: import("../store").IToyOption, currentIndex: number, array: import("../store").IToyOption[]) => import("../store").IToyOption, initialValue: import("../store").IToyOption): import("../store").IToyOption;
        <U_1>(callbackfn: (previousValue: U_1, currentValue: import("../store").IToyOption, currentIndex: number, array: import("../store").IToyOption[]) => U_1, initialValue: U_1): U_1;
    } | {
        (callbackfn: (previousValue: import("../store").IToyOption, currentValue: import("../store").IToyOption, currentIndex: number, array: import("../store").IToyOption[]) => import("../store").IToyOption): import("../store").IToyOption;
        (callbackfn: (previousValue: import("../store").IToyOption, currentValue: import("../store").IToyOption, currentIndex: number, array: import("../store").IToyOption[]) => import("../store").IToyOption, initialValue: import("../store").IToyOption): import("../store").IToyOption;
        <U_2>(callbackfn: (previousValue: U_2, currentValue: import("../store").IToyOption, currentIndex: number, array: import("../store").IToyOption[]) => U_2, initialValue: U_2): U_2;
    } | {
        <S_1 extends import("../store").IToyOption>(predicate: (this: void, value: import("../store").IToyOption, index: number, obj: import("../store").IToyOption[]) => value is S_1, thisArg?: any): S_1 | undefined;
        (predicate: (value: import("../store").IToyOption, index: number, obj: import("../store").IToyOption[]) => unknown, thisArg?: any): import("../store").IToyOption | undefined;
    } | ((predicate: (value: import("../store").IToyOption, index: number, obj: import("../store").IToyOption[]) => unknown, thisArg?: any) => number) | ((value: import("../store").IToyOption, start?: number | undefined, end?: number | undefined) => import("../store").IToyOption[]) | ((target: number, start: number, end?: number | undefined) => import("../store").IToyOption[]) | (() => IterableIterator<[number, import("../store").IToyOption]>) | (() => IterableIterator<number>) | (() => IterableIterator<import("../store").IToyOption>) | ((searchElement: import("../store").IToyOption, fromIndex?: number | undefined) => boolean) | undefined, (res: import("../store").IMessenger) => number | import("../store").IToyOption | (<U>(callbackfn: (value: import("../store").IToyOption, index: number, array: import("../store").IToyOption[]) => U, thisArg?: any) => U[]) | {
        <S extends import("../store").IToyOption>(callbackfn: (value: import("../store").IToyOption, index: number, array: import("../store").IToyOption[]) => value is S, thisArg?: any): S[];
        (callbackfn: (value: import("../store").IToyOption, index: number, array: import("../store").IToyOption[]) => unknown, thisArg?: any): import("../store").IToyOption[];
    } | (() => string) | (() => string) | (() => import("../store").IToyOption | undefined) | ((...items: import("../store").IToyOption[]) => number) | {
        (...items: ConcatArray<import("../store").IToyOption>[]): import("../store").IToyOption[];
        (...items: (import("../store").IToyOption | ConcatArray<import("../store").IToyOption>)[]): import("../store").IToyOption[];
    } | ((separator?: string | undefined) => string) | (() => import("../store").IToyOption[]) | (() => import("../store").IToyOption | undefined) | ((start?: number | undefined, end?: number | undefined) => import("../store").IToyOption[]) | ((compareFn?: ((a: import("../store").IToyOption, b: import("../store").IToyOption) => number) | undefined) => import("../store").IToyOption[]) | {
        (start: number, deleteCount?: number | undefined): import("../store").IToyOption[];
        (start: number, deleteCount: number, ...items: import("../store").IToyOption[]): import("../store").IToyOption[];
    } | ((...items: import("../store").IToyOption[]) => number) | ((searchElement: import("../store").IToyOption, fromIndex?: number | undefined) => number) | ((searchElement: import("../store").IToyOption, fromIndex?: number | undefined) => number) | ((callbackfn: (value: import("../store").IToyOption, index: number, array: import("../store").IToyOption[]) => unknown, thisArg?: any) => boolean) | ((callbackfn: (value: import("../store").IToyOption, index: number, array: import("../store").IToyOption[]) => unknown, thisArg?: any) => boolean) | ((callbackfn: (value: import("../store").IToyOption, index: number, array: import("../store").IToyOption[]) => void, thisArg?: any) => void) | {
        (callbackfn: (previousValue: import("../store").IToyOption, currentValue: import("../store").IToyOption, currentIndex: number, array: import("../store").IToyOption[]) => import("../store").IToyOption): import("../store").IToyOption;
        (callbackfn: (previousValue: import("../store").IToyOption, currentValue: import("../store").IToyOption, currentIndex: number, array: import("../store").IToyOption[]) => import("../store").IToyOption, initialValue: import("../store").IToyOption): import("../store").IToyOption;
        <U_1>(callbackfn: (previousValue: U_1, currentValue: import("../store").IToyOption, currentIndex: number, array: import("../store").IToyOption[]) => U_1, initialValue: U_1): U_1;
    } | {
        (callbackfn: (previousValue: import("../store").IToyOption, currentValue: import("../store").IToyOption, currentIndex: number, array: import("../store").IToyOption[]) => import("../store").IToyOption): import("../store").IToyOption;
        (callbackfn: (previousValue: import("../store").IToyOption, currentValue: import("../store").IToyOption, currentIndex: number, array: import("../store").IToyOption[]) => import("../store").IToyOption, initialValue: import("../store").IToyOption): import("../store").IToyOption;
        <U_2>(callbackfn: (previousValue: U_2, currentValue: import("../store").IToyOption, currentIndex: number, array: import("../store").IToyOption[]) => U_2, initialValue: U_2): U_2;
    } | {
        <S_1 extends import("../store").IToyOption>(predicate: (this: void, value: import("../store").IToyOption, index: number, obj: import("../store").IToyOption[]) => value is S_1, thisArg?: any): S_1 | undefined;
        (predicate: (value: import("../store").IToyOption, index: number, obj: import("../store").IToyOption[]) => unknown, thisArg?: any): import("../store").IToyOption | undefined;
    } | ((predicate: (value: import("../store").IToyOption, index: number, obj: import("../store").IToyOption[]) => unknown, thisArg?: any) => number) | ((value: import("../store").IToyOption, start?: number | undefined, end?: number | undefined) => import("../store").IToyOption[]) | ((target: number, start: number, end?: number | undefined) => import("../store").IToyOption[]) | (() => IterableIterator<[number, import("../store").IToyOption]>) | (() => IterableIterator<number>) | (() => IterableIterator<import("../store").IToyOption>) | ((searchElement: import("../store").IToyOption, fromIndex?: number | undefined) => boolean) | undefined>;
    isAnySectionOpen: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IWindowSectionState) => boolean>;
    areAnyPromptsOpenInResponsiveMode: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res1: import("../store").IMessenger, res2: boolean) => boolean>;
    getLastMessage: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, import("../store").IMessage, (res: import("../store").IMessage[]) => import("../store").IMessage>;
    isAnyTextInEditor: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IMessenger) => boolean>;
    getShouldSendMessage: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IMessenger) => boolean>;
    getSecondsElapsed: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, number, (res: import("../store").IMessenger) => number>;
    isRecording: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IMessenger) => boolean>;
    isMicEnabled: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IMessenger) => boolean>;
    getGroupChatColors: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, import("../store").IGroupChatColor[], (res: import("../store").IMessenger) => import("../store").IGroupChatColor[]>;
    getMentionQuery: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, string, (res: import("../store").IMessenger) => string>;
    getFocusedMentionOption: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, string | undefined, (res: import("../store").IMessenger) => string | undefined>;
    shouldDisplayCustomMentionSection: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IMessenger) => boolean>;
    getOptions: (store: import("../store").default, instanceId: string | undefined) => import("../store").IOptions;
    getSwitchToPortraitWidth: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, number, (res: import("../store").IOptions) => number>;
    getTip: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, import("../store").ITipOption, (res: import("../store").IOptions) => import("../store").ITipOption>;
    getInitialVideochatVolume: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, number | undefined, (res: import("../store").IOptions) => number | undefined>;
    getPreloader: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, string | undefined, (res: import("../store").IOptions) => string | undefined>;
    getUpdateBrowserLink: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, string | undefined, (res: import("../store").IOptions) => string | undefined>;
    getAnalyticsKey: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, string | undefined, (res: import("../store").IOptions) => string | undefined>;
    getCensoredContentImage: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, string | undefined, (res: import("../store").IOptions) => string | undefined>;
    getFeatures: (store: import("../store").default, instanceId: string | undefined) => import("../store").IFeatures;
    hasPreloaderPaymentText: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IFeatures) => boolean>;
    hasFavoriteFeature: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IFeatures) => boolean>;
    hasContactNoteFeature: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IFeatures) => boolean>;
    hasGiftsFeature: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IFeatures) => boolean>;
    hasToyControlFeature: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IFeatures) => boolean>;
    hasExitPopups: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IFeatures) => boolean>;
    hasModelProfilePicture: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IFeatures) => boolean>;
    hasModelMotto: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IFeatures) => boolean>;
    hasModelName: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IFeatures) => boolean>;
    hasCam2Cam: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IFeatures) => boolean>;
    hasVoyeur: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IFeatures) => boolean>;
    hasPrivateChat: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IFeatures) => boolean>;
    hasCloseButton: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IFeatures) => boolean>;
    hasFullscreen: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IFeatures) => boolean>;
    hasEmoticons: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IFeatures) => boolean>;
    hasImageUploadFeature: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IFeatures) => boolean>;
    hasSendMessageButton: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IFeatures) => boolean>;
    hasHistorySectionsOpened: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IFeatures) => boolean>;
    hasHistoryMessages: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IFeatures) => boolean>;
    hasMessagesGrouped: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IFeatures) => boolean>;
    hasGroupChatIndicator: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IFeatures) => boolean>;
    isMessageTypeHeader: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IFeatures) => boolean>;
    hasAudioMessageFeature: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean | undefined, (res: import("../store").IFeatures) => boolean | undefined>;
    hasClientName: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean | undefined, (res: import("../store").IFeatures) => boolean | undefined>;
    hasFullscreenLayoutOnLandscape: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean | undefined, (res: import("../store").IFeatures) => boolean | undefined>;
    hasBehaviorOnClickOutside: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IFeatures) => boolean>;
    hasTips: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean, (res: import("../store").IFeatures) => boolean>;
    getShowCensoredContent: import("reselect").OutputParametricSelector<import("../store").default, string | undefined, boolean | undefined, (res: import("../store").IFeatures) => boolean | undefined>;
};
export default _default;
